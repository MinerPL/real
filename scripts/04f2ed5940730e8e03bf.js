(this.webpackChunkdiscord_app = this.webpackChunkdiscord_app || []).push([
    ["18679"], {
        661486: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("193809");
            s("222007");
            var n = s("458960");
            class l {
                start() {
                    return new Promise(e => {
                        this.animation.start(() => {
                            e()
                        })
                    })
                }
                stop() {
                    this.animation.stop()
                }
                constructor(e) {
                    (0, a._)(this, "animation", void 0), this.animation = e
                }
            }
            class i {
                _map(e) {
                    return this.animations.map(e)
                }
                start() {
                    return new Promise(e => Promise.all(this._map(e => e.start())).then(() => e()))
                }
                stop() {
                    this._map(e => e.stop())
                }
                constructor(e) {
                    (0, a._)(this, "animations", void 0), this.animations = e
                }
            }
            class r {
                async start() {
                    for (let e of (this.stopped = !1, this.animations)) {
                        if (this.stopped) return;
                        await e.start()
                    }
                }
                stop() {
                    this.stopped = !0, this.animations.map(e => e.stop())
                }
                constructor(e) {
                    (0, a._)(this, "animations", void 0), (0, a._)(this, "stopped", !1), this.animations = e
                }
            }

            function o(e, t, s) {
                let a = s(e, {
                    ...t
                });
                return new l(a)
            }
            var d = {
                ...n.default,
                timing: function(e, t) {
                    return o(e, t, n.default.timing)
                },
                spring: function(e, t) {
                    return o(e, t, n.default.spring)
                },
                parallel: function(e) {
                    return new i(e)
                },
                sequence: function(e) {
                    return new r(e)
                }
            }
        },
        969176: function(e, t, s) {
            var a = s("354069");
            e.exports = function(e, t) {
                return a(e, t)
            }
        },
        985745: function(e, t, s) {
            var a = s("390493");
            s("860677"), s("854508"), ! function(e, t) {
                "use strict";
                if (!e.setImmediate) {
                    var s, n = 1,
                        l = {},
                        i = !1,
                        r = e.document,
                        o = Object.getPrototypeOf && Object.getPrototypeOf(e);
                    o = o && o.setTimeout ? o : e, "[object process]" === ({}).toString.call(e.process) ? function() {
                        s = function(e) {
                            a.nextTick(function() {
                                u(e)
                            })
                        }
                    }() : function() {
                        if (e.postMessage && !e.importScripts) {
                            var t = !0,
                                s = e.onmessage;
                            return e.onmessage = function() {
                                t = !1
                            }, e.postMessage("", "*"), e.onmessage = s, t
                        }
                    }() ? function() {
                        var t = "setImmediate$" + Math.random() + "$",
                            a = function(s) {
                                s.source === e && "string" == typeof s.data && 0 === s.data.indexOf(t) && u(+s.data.slice(t.length))
                            };
                        e.addEventListener ? e.addEventListener("message", a, !1) : e.attachEvent("onmessage", a), s = function(s) {
                            e.postMessage(t + s, "*")
                        }
                    }() : e.MessageChannel ? function() {
                        var e = new MessageChannel;
                        e.port1.onmessage = function(e) {
                            u(e.data)
                        }, s = function(t) {
                            e.port2.postMessage(t)
                        }
                    }() : r && "onreadystatechange" in r.createElement("script") ? function() {
                        var e = r.documentElement;
                        s = function(t) {
                            var s = r.createElement("script");
                            s.onreadystatechange = function() {
                                u(t), s.onreadystatechange = null, e.removeChild(s), s = null
                            }, e.appendChild(s)
                        }
                    }() : function() {
                        s = function(e) {
                            setTimeout(u, 0, e)
                        }
                    }(), o.setImmediate = function(e) {
                        "function" != typeof e && (e = Function("" + e));
                        for (var t = Array(arguments.length - 1), a = 0; a < t.length; a++) t[a] = arguments[a + 1];
                        var i = {
                            callback: e,
                            args: t
                        };
                        return l[n] = i, s(n), n++
                    }, o.clearImmediate = d
                }

                function d(e) {
                    delete l[e]
                }

                function u(e) {
                    if (i) setTimeout(u, 0, e);
                    else {
                        var t = l[e];
                        if (t) {
                            i = !0;
                            try {
                                ! function(e) {
                                    var t = e.callback,
                                        s = e.args;
                                    switch (s.length) {
                                        case 0:
                                            t();
                                            break;
                                        case 1:
                                            t(s[0]);
                                            break;
                                        case 2:
                                            t(s[0], s[1]);
                                            break;
                                        case 3:
                                            t(s[0], s[1], s[2]);
                                            break;
                                        default:
                                            t.apply(void 0, s)
                                    }
                                }(t)
                            } finally {
                                d(e), i = !1
                            }
                        }
                    }
                }
            }("undefined" == typeof self ? void 0 === s.g ? this : s.g : self)
        },
        816078: function(e, t, s) {
            "use strict";
            e.exports = s.p + "245acbd5bc5cdf8efda3.svg"
        },
        487663: function(e, t, s) {
            "use strict";
            e.exports = s.p + "860c39d4003b98a5ee9d.svg"
        },
        624563: function(e, t, s) {
            "use strict";
            e.exports = s.p + "9c746f60afcb24a0dad2.svg"
        },
        822460: function(e, t, s) {
            "use strict";
            e.exports = s.p + "f254c6193cace68df492.png"
        },
        517226: function(e, t, s) {
            "use strict";
            e.exports = s.p + "976cdf3f99d87f836402.svg"
        },
        325911: function(e, t, s) {
            "use strict";
            e.exports = s.p + "cdc3f4f6fbf3a0f0766f.svg"
        },
        138147: function(e, t, s) {
            "use strict";
            e.exports = s.p + "c65431f185feb7b00749.svg"
        },
        404807: function(e, t, s) {
            "use strict";
            e.exports = s.p + "295da3fc92e2adb1b852.svg"
        },
        124495: function(e, t, s) {
            "use strict";
            e.exports = s.p + "c8be48745cf680093019.svg"
        },
        250719: function(e, t, s) {
            "use strict";
            e.exports = s.p + "882143336a13f77e3a08.svg"
        },
        120019: function(e, t, s) {
            "use strict";
            e.exports = s.p + "295c032bd70434bda5d8.svg"
        },
        817616: function(e, t, s) {
            "use strict";
            e.exports = s.p + "b3ea1433f1f68fd7809c.png"
        },
        731106: function(e, t, s) {
            "use strict";
            e.exports = s.p + "fce1c7b9c71d41252145.png"
        },
        271696: function(e, t, s) {
            "use strict";
            e.exports = s.p + "52b40aa6df2dd0a3dfdd.png"
        },
        694947: function(e, t, s) {
            "use strict";
            e.exports = s.p + "8883c093e36f67e6a59a.png"
        },
        94944: function(e, t, s) {
            "use strict";
            e.exports = s.p + "14ec46803da2a8bdcb2c.svg"
        },
        73152: function(e, t, s) {
            "use strict";
            e.exports = s.p + "b2ea07d616b569c2021e.svg"
        },
        614403: function(e, t, s) {
            "use strict";
            e.exports = s.p + "daa9fd6ab647aa60c68d.svg"
        },
        545204: function(e, t, s) {
            "use strict";
            e.exports = s.p + "11a5a766e03a4f87415d.svg"
        },
        196318: function(e, t, s) {
            "use strict";
            e.exports = s.p + "fa9e6a5432869821de83.svg"
        },
        697786: function(e, t, s) {
            "use strict";
            e.exports = s.p + "052183d225a73604b165.svg"
        },
        672194: function(e, t, s) {
            "use strict";
            e.exports = s.p + "ced4ee328528eb32e00b.svg"
        },
        89734: function(e, t, s) {
            "use strict";
            e.exports = s.p + "c906f91bb11baf15eac8.svg"
        },
        170456: function(e, t, s) {
            "use strict";
            e.exports = s.p + "cf8f9096a9322f2ae0d7.svg"
        },
        90578: function(e, t, s) {
            "use strict";
            e.exports = s.p + "5e3480eff150b1cb323e.svg"
        },
        283246: function(e, t, s) {
            "use strict";
            e.exports = s.p + "31618a30874bb5d09f95.svg"
        },
        419625: function(e, t, s) {
            "use strict";
            e.exports = s.p + "2036e43d9798d9a60f96.svg"
        },
        117869: function(e, t, s) {
            "use strict";
            e.exports = s.p + "b092d87a49e2b1432f17.svg"
        },
        452593: function(e, t, s) {
            "use strict";
            e.exports = s.p + "1280b2198e0ad7511fd5.svg"
        },
        572701: function(e, t, s) {
            "use strict";
            e.exports = s.p + "371acbfb1b609a1bf9b8.svg"
        },
        482644: function(e, t, s) {
            "use strict";
            e.exports = s.p + "b83041758680631a384f.png"
        },
        282725: function(e, t, s) {
            "use strict";
            e.exports = s.p + "a077cd5eaa129a095b3a.png"
        },
        411147: function(e, t, s) {
            "use strict";
            e.exports = s.p + "98e018ece3aa164cef4d.svg"
        },
        46521: function(e, t, s) {
            "use strict";
            e.exports = s.p + "e2b1c69e79fb59b29481.png"
        },
        128789: function(e, t, s) {
            "use strict";
            e.exports = s.p + "62c0c18dac163bc76cd0.png"
        },
        201894: function(e, t, s) {
            "use strict";
            e.exports = s.p + "8a5c207539865fc39865.svg"
        },
        722838: function(e, t, s) {
            "use strict";
            e.exports = s.p + "cbd97789cdd41a220177.svg"
        },
        497002: function(e, t, s) {
            "use strict";
            e.exports = s.p + "4a2ab7afd3c7f673762f.svg"
        },
        437250: function(e, t, s) {
            "use strict";
            e.exports = s.p + "f27cfb29c21d31f284e6.svg"
        },
        382531: function(e, t, s) {
            "use strict";
            e.exports = s.p + "3e8b8afbebd865b10b96.svg"
        },
        865332: function(e, t, s) {
            "use strict";
            e.exports = s.p + "835db338c684645fddf3.svg"
        },
        627150: function(e, t, s) {
            "use strict";
            e.exports = s.p + "191c35bd94f2e1c162d5.svg"
        },
        370730: function(e, t, s) {
            "use strict";
            e.exports = s.p + "158e3f0d5ad031e7efb5.svg"
        },
        350233: function(e, t, s) {
            "use strict";
            e.exports = s.p + "6569543dccda2dddd838.svg"
        },
        439044: function(e, t, s) {
            "use strict";
            e.exports = s.p + "129f0ecf496bf91e8ef2.svg"
        },
        912839: function(e, t, s) {
            "use strict";
            e.exports = s.p + "03b3a109f3d4403d05fa.svg"
        },
        600719: function(e, t, s) {
            "use strict";
            e.exports = s.p + "a9120971f0d017714fd9.svg"
        },
        419143: function(e, t, s) {
            "use strict";
            e.exports = s.p + "63ddc57ed01c730ef68f.svg"
        },
        935855: function(e, t, s) {
            "use strict";
            e.exports = s.p + "cf8f9096a9322f2ae0d7.svg"
        },
        847598: function(e, t, s) {
            "use strict";
            e.exports = s.p + "5e3480eff150b1cb323e.svg"
        },
        547040: function(e, t, s) {
            "use strict";
            e.exports = s.p + "419853cd8a408c959a6a.svg"
        },
        169015: function(e, t, s) {
            "use strict";
            e.exports = s.p + "cda90da758440b5e2cbc.svg"
        },
        392428: function(e, t, s) {
            "use strict";
            e.exports = s.p + "31618a30874bb5d09f95.svg"
        },
        691872: function(e, t, s) {
            "use strict";
            e.exports = s.p + "2036e43d9798d9a60f96.svg"
        },
        794796: function(e, t, s) {
            "use strict";
            e.exports = s.p + "b092d87a49e2b1432f17.svg"
        },
        827003: function(e, t, s) {
            "use strict";
            e.exports = s.p + "47833f4686474be8fcd3.svg"
        },
        870534: function(e, t, s) {
            "use strict";
            e.exports = s.p + "559f43e29d80d719b397.svg"
        },
        637314: function(e, t, s) {
            "use strict";
            e.exports = s.p + "1c5be427265d262c8bf8.svg"
        },
        681904: function(e, t, s) {
            "use strict";
            e.exports = s.p + "119b4083c9d4fce05f2d.svg"
        },
        760849: function(e, t, s) {
            "use strict";
            e.exports = s.p + "edba5d6072596f2ea109.svg"
        },
        14650: function(e, t, s) {
            "use strict";
            e.exports = s.p + "fd8bb90a4678f63f6a50.svg"
        },
        793644: function(e, t, s) {
            "use strict";
            e.exports = s.p + "f6d058878f54a74eb7c0.svg"
        },
        719827: function(e, t, s) {
            "use strict";
            e.exports = s.p + "f88edd51273b2e14999a.svg"
        },
        520437: function(e, t, s) {
            "use strict";
            e.exports = s.p + "b5622c07545a893c20c4.svg"
        },
        700979: function(e, t, s) {
            "use strict";
            e.exports = s.p + "295610bf2d3ec357b4bb.svg"
        },
        499873: function(e, t, s) {
            "use strict";
            e.exports = s.p + "59b2a8dbb172a6ea367c.svg"
        },
        780303: function(e, t, s) {
            "use strict";
            e.exports = s.p + "b734b6798a8b89611ee7.svg"
        },
        354215: function(e, t, s) {
            "use strict";
            e.exports = s.p + "88fc1abeccda1019078b.svg"
        },
        861030: function(e, t, s) {
            "use strict";
            e.exports = s.p + "30039d24e09f9ae53597.svg"
        },
        425832: function(e, t, s) {
            "use strict";
            e.exports = s.p + "c0774a0caac72f9e4f69.svg"
        },
        584766: function(e, t, s) {
            "use strict";
            e.exports = s.p + "bde25f93c922e02f8459.svg"
        },
        700298: function(e, t, s) {
            "use strict";
            e.exports = s.p + "e4ed3926a302973003ce.svg"
        },
        396421: function(e, t, s) {
            "use strict";
            e.exports = s.p + "a82903ac1478ed97b6d4.svg"
        },
        616751: function(e, t, s) {
            "use strict";
            e.exports = s.p + "34a1ce012a883823976e.svg"
        },
        800170: function(e, t, s) {
            "use strict";
            e.exports = s.p + "5cc5c2e0ad18a7c383d8.svg"
        },
        471259: function(e, t, s) {
            "use strict";
            e.exports = s.p + "42c8e6af8b90a5a7f6fb.svg"
        },
        963214: function(e, t, s) {
            "use strict";
            e.exports = s.p + "63a73b3d5daccfd7a8fc.svg"
        },
        81043: function(e, t, s) {
            "use strict";
            e.exports = s.p + "ad22f619a6f01c5fba36.svg"
        },
        955228: function(e, t, s) {
            "use strict";
            e.exports = s.p + "c53abf7172caf6e94497.svg"
        },
        417264: function(e, t, s) {
            "use strict";
            e.exports = s.p + "99c7284599cdd5ce61d1.svg"
        },
        185838: function(e, t, s) {
            "use strict";
            e.exports = s.p + "e81814a8edaa3851d65a.svg"
        },
        721655: function(e, t, s) {
            "use strict";
            e.exports = s.p + "4c708a62468632eb9db0.svg"
        },
        86922: function(e, t, s) {
            "use strict";
            e.exports = s.p + "93b984f7ed0c42796562.svg"
        },
        51567: function(e, t, s) {
            "use strict";
            e.exports = s.p + "1168dff38bd2b721262d.svg"
        },
        673237: function(e, t, s) {
            "use strict";
            e.exports = s.p + "842d46ac28c4cc831849.svg"
        },
        777869: function(e, t, s) {
            "use strict";
            e.exports = s.p + "c9a5eac7b0f3a4796b30.svg"
        },
        403745: function(e, t, s) {
            "use strict";
            e.exports = s.p + "a581ce111f8be29112ec.svg"
        },
        62161: function(e, t, s) {
            "use strict";
            e.exports = s.p + "2cc42779e9efbf337567.svg"
        },
        746589: function(e, t, s) {
            "use strict";
            e.exports = s.p + "f39f5d92d79071dcd992.svg"
        },
        973471: function(e, t, s) {
            "use strict";
            e.exports = s.p + "2b7c287609558436dc56.svg"
        },
        418908: function(e, t, s) {
            "use strict";
            e.exports = s.p + "0020113abbe97807c0be.svg"
        },
        266359: function(e, t, s) {
            "use strict";
            e.exports = s.p + "79c2ae48cdbafadf7c48.svg"
        },
        310830: function(e, t, s) {
            "use strict";
            e.exports = s.p + "6960c3e51b7f0dcefcc0.svg"
        },
        300600: function(e, t, s) {
            "use strict";
            e.exports = s.p + "d13d7d7b33b7599e142a.svg"
        },
        643478: function(e, t, s) {
            "use strict";
            e.exports = s.p + "9ecac67adfc57255096c.svg"
        },
        621595: function(e, t, s) {
            "use strict";
            e.exports = s.p + "de314fed4ef60345b462.svg"
        },
        682091: function(e, t, s) {
            "use strict";
            e.exports = s.p + "2cb2c7601c0b9a2a1ccd.svg"
        },
        767375: function(e, t, s) {
            "use strict";
            e.exports = s.p + "0332499269c85d6177d1.svg"
        },
        363756: function(e, t, s) {
            "use strict";
            e.exports = s.p + "fb3b404502ba18187ace.svg"
        },
        330808: function(e, t, s) {
            "use strict";
            e.exports = s.p + "36c741c811b044d2a95d.svg"
        },
        424596: function(e, t, s) {
            "use strict";
            e.exports = s.p + "ae7e6485583bcfc6a9d2.svg"
        },
        284776: function(e, t, s) {
            "use strict";
            e.exports = s.p + "81712e27207ad5534d32.svg"
        },
        101332: function(e, t, s) {
            "use strict";
            e.exports = s.p + "52061d3272fc0ea492b2.svg"
        },
        831153: function(e, t, s) {
            "use strict";
            e.exports = s.p + "37150460409f3e18c3c4.svg"
        },
        353773: function(e, t, s) {
            "use strict";
            e.exports = s.p + "ffef8985f5eba31d79e6.svg"
        },
        432392: function(e, t, s) {
            "use strict";
            e.exports = s.p + "2deaf53c0cab56c466c6.svg"
        },
        933861: function(e, t, s) {
            "use strict";
            e.exports = s.p + "673295e1c0b41d2bf857.svg"
        },
        877026: function(e, t, s) {
            "use strict";
            e.exports = s.p + "1b6b9fb57639d9c4959e.svg"
        },
        775113: function(e, t, s) {
            "use strict";
            e.exports = s.p + "0733573b7fc6d421086c.svg"
        },
        896122: function(e, t, s) {
            "use strict";
            e.exports = s.p + "33c4908a99fe0a73e9f0.svg"
        },
        352683: function(e, t, s) {
            "use strict";
            e.exports = s.p + "f1b802e72e04293e5734.svg"
        },
        62816: function(e, t, s) {
            "use strict";
            e.exports = s.p + "cb34f73199ef5f4eb1b7.svg"
        },
        611327: function(e, t, s) {
            "use strict";
            e.exports = s.p + "990fb9b22cdb83e2e316.svg"
        },
        508023: function(e, t, s) {
            "use strict";
            e.exports = s.p + "2258b71d681f69091f18.svg"
        },
        965845: function(e, t, s) {
            "use strict";
            e.exports = s.p + "82e2e9449762efa594ba.svg"
        },
        457737: function(e, t, s) {
            "use strict";
            e.exports = s.p + "f64b5d3135eef2e67d1a.svg"
        },
        799036: function(e, t, s) {
            "use strict";
            e.exports = s.p + "ba7f9552758881a24749.svg"
        },
        195238: function(e, t, s) {
            "use strict";
            e.exports = s.p + "f7be6b1bb0860438add8.svg"
        },
        444964: function(e, t, s) {
            "use strict";
            e.exports = s.p + "a4d92443ebc546785bc8.svg"
        },
        373558: function(e, t, s) {
            "use strict";
            e.exports = s.p + "5b2a993ac58bc8384645.svg"
        },
        119134: function(e, t, s) {
            "use strict";
            e.exports = s.p + "4f6d8a2c4ded92506d76.svg"
        },
        869917: function(e, t, s) {
            "use strict";
            e.exports = s.p + "564e2f9bcaf2e2001625.svg"
        },
        936815: function(e, t, s) {
            "use strict";
            e.exports = s.p + "aad2fcfc8dd4da98bd37.svg"
        },
        319765: function(e, t, s) {
            "use strict";
            e.exports = s.p + "d763245961e240231735.svg"
        },
        133765: function(e, t, s) {
            "use strict";
            e.exports = s.p + "e23c132f39fd58143062.png"
        },
        138131: function(e, t, s) {
            "use strict";
            e.exports = s.p + "cf7ca4c20619518f1851.png"
        },
        52846: function(e, t, s) {
            "use strict";
            e.exports = s.p + "89eb36909a16d4522525.svg"
        },
        656011: function(e, t, s) {
            "use strict";
            e.exports = s.p + "770c18c3faeeac2bb20f.png"
        },
        845929: function(e, t, s) {
            "use strict";
            e.exports = s.p + "bc89bb1eb86b914e03de.png"
        },
        144582: function(e, t, s) {
            "use strict";
            e.exports = s.p + "1b50730377ea28af600f.png"
        },
        252073: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                fetchLogs: function() {
                    return d
                },
                fetchNextLogPage: function() {
                    return u
                },
                filterByAction: function() {
                    return c
                },
                filterByUserId: function() {
                    return E
                }
            });
            var a = s("872717"),
                n = s("913144"),
                l = s("287103"),
                i = s("49111");

            function r() {
                return l.default.isLoading || l.default.isLoadingNextPage
            }

            function o(e, t) {
                let s = function(e) {
                    let {
                        before: t,
                        userId: s,
                        action: a
                    } = e;
                    s = s || l.default.userIdFilter, a = a || l.default.actionFilter;
                    let n = {
                        limit: i.AUDIT_LOG_PAGE_LIMIT
                    };
                    return null != t && (n.before = t), null != s && (n.user_id = s), null != a && (n.action_type = a), n
                }(t);
                return a.default.get({
                    url: i.Endpoints.GUILD_AUDIT_LOG(e),
                    query: s,
                    oldFormErrors: !0
                })
            }

            function d(e, t, s) {
                if (!r() && null != e) return n.default.dispatch({
                    type: "AUDIT_LOG_FETCH_START"
                }), o(e, {
                    userId: t,
                    action: s
                }).then(e => {
                    let {
                        audit_log_entries: t,
                        integrations: s,
                        users: a,
                        webhooks: l,
                        guild_scheduled_events: i,
                        auto_moderation_rules: r,
                        threads: o,
                        application_commands: d
                    } = e.body;
                    n.default.dispatch({
                        type: "AUDIT_LOG_FETCH_SUCCESS",
                        logs: t,
                        integrations: s,
                        users: a,
                        webhooks: l,
                        guildScheduledEvents: i,
                        automodRules: r,
                        threads: o,
                        applicationCommands: d
                    })
                }, () => n.default.dispatch({
                    type: "AUDIT_LOG_FETCH_FAIL"
                }))
            }

            function u(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                if (!l.default.hasOlderLogs || r() || null == e) return;
                let s = l.default.logs,
                    a = s[s.length - 1],
                    i = null;
                return null != a && (i = a.id), n.default.dispatch({
                    type: "AUDIT_LOG_FETCH_NEXT_PAGE_START",
                    before: i,
                    isGroupedFetch: t
                }), o(e, {
                    before: i
                }).then(e => {
                    let {
                        audit_log_entries: t,
                        integrations: s,
                        users: a,
                        webhooks: l,
                        guild_scheduled_events: i,
                        auto_moderation_rules: r,
                        threads: o,
                        application_commands: d
                    } = e.body;
                    n.default.dispatch({
                        type: "AUDIT_LOG_FETCH_NEXT_PAGE_SUCCESS",
                        logs: t,
                        integrations: s,
                        users: a,
                        webhooks: l,
                        guildScheduledEvents: i,
                        automodRules: r,
                        threads: o,
                        applicationCommands: d
                    })
                }, () => n.default.dispatch({
                    type: "AUDIT_LOG_FETCH_NEXT_PAGE_FAIL"
                }))
            }

            function c(e, t) {
                if (!r() && null != t) return n.default.dispatch({
                    type: "AUDIT_LOG_FILTER_BY_ACTION",
                    action: e
                }), d(t, null, e)
            }

            function E(e, t) {
                if (!r() && null != t) return n.default.dispatch({
                    type: "AUDIT_LOG_FILTER_BY_USER",
                    userId: e
                }), d(t, e)
            }
        },
        655772: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("77078"),
                i = s("68238"),
                r = s("69080"),
                o = s("782340"),
                d = s("91900"),
                u = e => {
                    let {
                        title: t,
                        subtext: s = o.default.Messages.NOT_AVAILABLE,
                        localizedNumber: u,
                        isTrendingUp: c,
                        isTrendingDown: E,
                        tooltipText: _
                    } = e, T = "string" == typeof _ ? _ : t, I = null != _ ? (0, a.jsx)(l.Tooltip, {
                        text: _,
                        position: "top",
                        "aria-label": T,
                        children: e => (0, a.jsx)(i.default, {
                            ...e,
                            className: d.infoIcon,
                            height: 16,
                            width: 16
                        })
                    }) : null;
                    return (0, a.jsxs)("div", {
                        className: d.analyticsCard,
                        children: [(0, a.jsxs)(l.FormTitle, {
                            className: d.analyticsCardTitle,
                            children: [t, I]
                        }), (0, a.jsx)("div", {
                            className: d.analyticsCardContent,
                            children: (0, a.jsx)(l.Heading, {
                                className: null != u ? d.analyticsCardNumber : d.analyticsCardNumberNotAvailable,
                                variant: "heading-xl/semibold",
                                children: null != u ? u : o.default.Messages.NOT_AVAILABLE
                            })
                        }), (0, a.jsxs)("div", {
                            className: d.analyticsCardArrowSubText,
                            children: [c ? (0, a.jsx)(r.default, {
                                className: d.trendingArrow,
                                color: n.default.unsafe_rawColors.GREEN_360.css,
                                "aria-label": o.default.Messages.TRENDING_ARROW_UP,
                                width: 14,
                                height: 12
                            }) : null, E ? (0, a.jsx)(r.default, {
                                className: d.trendingArrowIconDown,
                                color: n.default.unsafe_rawColors.RED_400.css,
                                "aria-label": o.default.Messages.TRENDING_ARROW_DOWN,
                                width: 14,
                                height: 12
                            }) : null, (0, a.jsx)(l.Text, {
                                variant: "text-xs/normal",
                                children: s
                            })]
                        })]
                    })
                }
        },
        465395: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            }), s("222007"), s("808653"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("448105"),
                i = s.n(l),
                r = s("77078"),
                o = s("6466");
            class d extends n.PureComponent {
                render() {
                    let {
                        label: e,
                        value: t,
                        popoutProps: s,
                        renderValue: n,
                        className: l
                    } = this.props;
                    return (0, a.jsx)(r.Popout, {
                        ...s,
                        renderPopout: this.renderPopout,
                        children: s => (0, a.jsx)(r.Clickable, {
                            ...s,
                            className: l,
                            children: (0, a.jsx)(o.default, {
                                label: e,
                                value: t,
                                renderValue: n
                            })
                        })
                    })
                }
                constructor(...e) {
                    super(...e), this.renderItems = e => {
                        let {
                            items: t,
                            renderItem: s
                        } = this.props;
                        return t.reduce((t, a, n) => (i(e.toLowerCase(), a.label.toLowerCase()) && t.push(s(a, n)), t), [])
                    }, this.renderPopout = e => {
                        let {
                            closePopout: t
                        } = e, {
                            placeholder: s,
                            popoutClassName: n,
                            onChange: l,
                            value: i
                        } = this.props;
                        return (0, a.jsx)(r.ComboboxPopout, {
                            className: n,
                            placeholder: s,
                            value: new Set([i.value]),
                            onChange: l,
                            onClose: t,
                            children: e => this.renderItems(e)
                        })
                    }
                }
            }
            var u = d
        },
        711622: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("945330"),
                d = s("49111"),
                u = s("89466"),
                c = e => {
                    let {
                        className: t,
                        tags: s,
                        value: l,
                        onRemoveTag: c,
                        onAddTag: E,
                        maxTaxLength: _,
                        maxTags: T,
                        disabled: I,
                        placeholder: S,
                        ...N
                    } = e, [f, g] = n.useState(null != l ? l : ""), A = s.map((e, t) => (0, a.jsxs)("span", {
                        className: i(u.tag, {
                            [u.disabledTag]: I
                        }),
                        children: [e, !I && (0, a.jsx)(r.Clickable, {
                            className: u.closeWrapper,
                            onClick: () => c(t),
                            children: (0, a.jsx)(o.default, {
                                width: 16,
                                height: 16,
                                className: u.close
                            })
                        })]
                    }, t)), L = n.useCallback(() => {
                        let e = f.trim();
                        if (0 !== e.length)(null == T || !(s.length >= T)) && (E(e), g(""))
                    }, [f, T, E, s.length]), m = n.useCallback(e => {
                        switch (e.keyCode) {
                            case d.KeyboardKeys.BACKSPACE:
                                0 === f.length && s.length > 0 && (e.preventDefault(), e.stopPropagation(), c(s.length - 1));
                                break;
                            case d.KeyboardKeys.ENTER:
                            case d.KeyboardKeys.TAB:
                            case d.KeyboardKeys.COMMA:
                                e.preventDefault(), e.stopPropagation(), L()
                        }
                    }, [L, f.length, c, s.length]);
                    return (0, a.jsxs)("div", {
                        className: i(t, u.inputWrapper, {
                            [u.disabled]: I
                        }),
                        children: [A, (0, a.jsx)(r.TextInput, {
                            className: u.inputOuter,
                            inputClassName: u.inputInner,
                            ...N,
                            value: f,
                            onKeyDown: m,
                            onChange: g,
                            maxLength: _,
                            disabled: I,
                            onBlur: L,
                            placeholder: S
                        })]
                    })
                }
        },
        349389: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("160864"),
                l = s("527382"),
                i = s("782340"),
                r = function(e) {
                    let {
                        className: t,
                        style: s,
                        onDrop: r
                    } = e;
                    return (0, a.jsx)(n.default, {
                        className: t,
                        style: s,
                        title: i.default.Messages.UPLOAD_EMOJI,
                        description: i.default.Messages.UPLOAD_EMOJI_INSTRUCTIONS,
                        icons: l.EMOJI_FILE_UPLOAD_ICONS,
                        onDrop: r
                    })
                }
        },
        472612: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ArrowSmallDownIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M12.707 20.707a1 1 0 0 1-1.414 0l-5-5a1 1 0 1 1 1.414-1.414L11 17.586V4a1 1 0 1 1 2 0v13.586l3.293-3.293a1 1 0 0 1 1.414 1.414l-5 5Z",
                        className: r
                    })
                })
            }
        },
        62e4: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ArrowsUpDownIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M16.293 21.707a1 1 0 0 0 1.414 0l4-4a1 1 0 0 0-1.414-1.414L18 18.586V3a1 1 0 1 0-2 0v15.586l-2.293-2.293a1 1 0 0 0-1.414 1.414l4 4ZM6.293 2.293a1 1 0 0 1 1.414 0l4 4a1 1 0 0 1-1.414 1.414L8 5.414V21a1 1 0 1 1-2 0V5.414L3.707 7.707a1 1 0 0 1-1.414-1.414l4-4Z",
                        className: r
                    })
                })
            }
        },
        571423: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ChannelListIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M2 4a1 1 0 0 1 1-1h18a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1ZM2 8a1 1 0 0 1 1-1h15a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1ZM3 11a1 1 0 1 0 0 2h11a1 1 0 1 0 0-2H3ZM2 16a1 1 0 0 1 1-1h18a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1ZM3 19a1 1 0 1 0 0 2h15a1 1 0 1 0 0-2H3Z",
                        className: r
                    })
                })
            }
        },
        396680: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ChannelListPlusIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        d: "M3 3a1 1 0 0 0 0 2h18a1 1 0 0 0 0-2H3ZM19 14a1 1 0 0 1 1 1v3h3a1 1 0 1 1 0 2h-3v3a1 1 0 1 1-2 0v-3h-3a1 1 0 1 1 0-2h3v-3a1 1 0 0 1 1-1ZM2 8a1 1 0 0 1 1-1h18a1 1 0 0 1 0 2H3a1 1 0 0 1-1-1ZM3 11a1 1 0 1 0 0 2h11a1 1 0 0 0 0-2H3ZM2 16a1 1 0 0 1 1-1h8a1 1 0 0 1 0 2H3a1 1 0 0 1-1-1ZM3 19a1 1 0 1 0 0 2h8a1 1 0 0 0 0-2H3Z",
                        fill: "string" == typeof i ? i : i.css,
                        className: r
                    })
                })
            }
        },
        436984: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                DragIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        fillRule: "evenodd",
                        d: "M6 4a2 2 0 1 0 4 0 2 2 0 0 0-4 0Zm0 8a2 2 0 1 0 4 0 2 2 0 0 0-4 0Zm2 10a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm6-18a2 2 0 1 0 4 0 2 2 0 0 0-4 0Zm2 10a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm-2 6a2 2 0 1 0 4 0 2 2 0 0 0-4 0Z",
                        clipRule: "evenodd",
                        className: r
                    })
                })
            }
        },
        862099: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                FileDenyIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsxs)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: [(0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M21.268 12.376c.347.118.732-.126.732-.493V10.5a.5.5 0 0 0-.5-.5H19a5 5 0 0 1-5-5V2.5a.5.5 0 0 0-.5-.5H6a4 4 0 0 0-4 4v12a4 4 0 0 0 4 4h5.883c.367 0 .611-.385.493-.732a7 7 0 0 1 8.892-8.892Z",
                        className: r
                    }), (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M21.7 7.936a.045.045 0 0 1-.04.064H19a3 3 0 0 1-3-3V2.34c0-.033.034-.055.064-.04.3.144.575.34.815.579L21.12 7.12a3 3 0 0 1 .58.815Z",
                        className: r
                    }), (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        fillRule: "evenodd",
                        d: "M21.758 14.828c.274.182.535.394.777.635l.002.003a5.002 5.002 0 0 1-7.071 7.071l-.003-.002a5.002 5.002 0 0 1 6.294-7.706Zm-4.88 2.05a3.001 3.001 0 0 1 3.416-.586l-4.002 4.002a3.001 3.001 0 0 1 .587-3.415Zm4.83.828-4.002 4.002a3.001 3.001 0 0 0 4.002-4.002Z",
                        clipRule: "evenodd",
                        className: r
                    })]
                })
            }
        },
        454882: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                FileWarningIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsxs)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: [(0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M21.645 13.631c.097.17.355.1.355-.094V10.5a.5.5 0 0 0-.5-.5H19a5 5 0 0 1-5-5V2.5a.5.5 0 0 0-.5-.5H6a4 4 0 0 0-4 4v12a4 4 0 0 0 4 4h5.488c.275 0 .495-.224.544-.495.06-.325.178-.653.364-.977l3.959-6.897c1.163-2.027 4.127-2.027 5.29 0Z",
                        className: r
                    }), (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M21.7 7.936a.045.045 0 0 1-.04.064H19a3 3 0 0 1-3-3V2.34c0-.033.034-.055.064-.04.3.144.575.34.815.579L21.12 7.12a3 3 0 0 1 .58.815Z",
                        className: r
                    }), (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        fillRule: "evenodd",
                        d: "m14.13 21.524 3.96-6.897c.394-.688 1.426-.688 1.82 0l3.96 6.897c.38.664-.12 1.476-.911 1.476h-7.918c-.79 0-1.292-.812-.91-1.476Zm3.927-4.473a.5.5 0 0 1 .497-.551h.892a.5.5 0 0 1 .497.551l-.208 2.017c-.017.16-.177.262-.334.228A1.928 1.928 0 0 0 19 19.25c-.137 0-.274.019-.4.046-.158.034-.318-.068-.335-.228l-.208-2.017ZM19 22a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z",
                        clipRule: "evenodd",
                        className: r
                    })]
                })
            }
        },
        704822: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                KeyIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        fillRule: "evenodd",
                        d: "M21.414 5.414a2 2 0 1 0-2.828-2.828l-7.749 7.749a.528.528 0 0 1-.574.107 6 6 0 1 0 3.29 3.285.51.51 0 0 1 .105-.556c.189-.19.495-.19.684 0l1.244 1.243a2 2 0 1 0 2.828-2.828l-1.232-1.232a.5.5 0 0 1 0-.708l.464-.464a.5.5 0 0 1 .708 0l1.232 1.232a2 2 0 1 0 2.828-2.828l-1.232-1.232a.5.5 0 0 1 0-.708l.232-.232ZM10 16a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z",
                        clipRule: "evenodd",
                        className: r
                    })
                })
            }
        },
        141495: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                MenuIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M1 5a1 1 0 0 1 1-1h20a1 1 0 1 1 0 2H2a1 1 0 0 1-1-1ZM1 12a1 1 0 0 1 1-1h20a1 1 0 1 1 0 2H2a1 1 0 0 1-1-1ZM2 18a1 1 0 1 0 0 2h20a1 1 0 1 0 0-2H2Z",
                        className: r
                    })
                })
            }
        },
        836155: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                OdometerIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        fillRule: "evenodd",
                        d: "M17.376 21c.618 0 1.23-.182 1.703-.58A10.976 10.976 0 0 0 23 12c0-6.075-4.925-11-11-11S1 5.925 1 12c0 3.38 1.524 6.402 3.921 8.42.473.398 1.085.58 1.703.58h10.752Zm.831-13.793a1 1 0 0 0-1.414-1.414l-4.275 4.275a2 2 0 1 0 1.414 1.414l4.275-4.275ZM4 13a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm3.05 3.95a1 1 0 1 1-1.414 1.414A1 1 0 0 1 7.05 16.95Zm9.9 1.414a1 1 0 1 1 1.414-1.414 1 1 0 0 1-1.414 1.414ZM6.135 7.321a1 1 0 1 1 .417-1.956 1 1 0 0 1-.417 1.956ZM12 5a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm9 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z",
                        clipRule: "evenodd",
                        className: r
                    })
                })
            }
        },
        872036: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ShieldAtIcon: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("669491"),
                l = s("75196");
            let i = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: i = n.default.colors.INTERACTIVE_NORMAL,
                    colorClass: r = "",
                    ...o
                } = e;
                return (0, a.jsxs)("svg", {
                    ...(0, l.default)(o),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: [(0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        d: "M12.813 13.233c-.312.398-.708.596-1.187.596-.4 0-.708-.138-.923-.415-.205-.278-.307-.67-.307-1.178 0-.629.156-1.137.468-1.525.313-.397.709-.595 1.187-.595.391 0 .694.138.909.415.215.268.322.656.322 1.164 0 .628-.156 1.141-.469 1.538Z",
                        className: r
                    }), (0, a.jsx)("path", {
                        fill: "string" == typeof i ? i : i.css,
                        fillRule: "evenodd",
                        d: "M4.563 4.218A2.828 2.828 0 0 0 3 6.748v3.034a14.185 14.185 0 0 0 8.424 12.962c.367.163.785.163 1.152 0A14.185 14.185 0 0 0 21 9.782V6.748c0-1.071-.605-2.05-1.563-2.53l-6.095-3.047a3 3 0 0 0-2.684 0L4.563 4.218Zm10.37 5.468a.5.5 0 0 0-.496-.568h-.225a.5.5 0 0 0-.474.34l-.134.394a1.663 1.663 0 0 0-.644-.665c-.284-.166-.64-.25-1.07-.25-.566 0-1.07.144-1.509.43-.44.277-.786.67-1.04 1.178-.245.508-.367 1.09-.367 1.746 0 .85.205 1.515.616 1.995.42.48.976.721 1.67.721.45 0 .86-.092 1.23-.277.372-.194.646-.448.821-.762.05.305.196.554.44.748.244.194.567.291.967.291a2.99 2.99 0 0 0 1.7-.499c.498-.342.884-.813 1.157-1.413.283-.61.425-1.303.425-2.079 0-.979-.234-1.847-.703-2.605-.47-.767-1.128-1.358-1.978-1.773-.85-.425-1.817-.638-2.901-.638-1.182 0-2.262.254-3.239.762a5.719 5.719 0 0 0-2.33 2.176C6.284 9.88 6 10.993 6 12.278c0 1.08.215 2.055.645 2.923.43.86 1.089 1.538 1.978 2.037.889.508 1.992.762 3.311.762.772 0 1.529-.083 2.271-.25a6.935 6.935 0 0 0 1.48-.494.464.464 0 0 0 .207-.62l-.097-.21c-.122-.264-.445-.367-.714-.255-.312.13-.667.246-1.066.346a7.913 7.913 0 0 1-1.964.236c-1.064 0-1.944-.199-2.637-.596-.684-.406-1.182-.942-1.495-1.607-.312-.675-.468-1.428-.468-2.259 0-1.016.22-1.903.659-2.66a4.495 4.495 0 0 1 1.787-1.76c.762-.416 1.612-.624 2.55-.624.82 0 1.548.157 2.183.471a3.5 3.5 0 0 1 1.48 1.344c.352.582.527 1.261.527 2.037 0 .518-.078.989-.234 1.414-.147.415-.352.744-.615.984-.254.24-.528.36-.821.36-.342 0-.513-.203-.513-.61 0-.083.005-.148.015-.194l.464-3.367Z",
                        clipRule: "evenodd",
                        className: r
                    })]
                })
            }
        },
        625990: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            }), s("222007");
            var a = s("884691"),
                n = s("448993"),
                l = s("651057");

            function i() {
                let [e, t] = a.useState(!1), [s, i] = a.useState(), r = a.useRef(), o = async (e, s, a, o) => {
                    i(void 0);
                    try {
                        if (t(!0), null == r.current) {
                            let t = await l.default.createApplication({
                                name: o,
                                guildId: e.id,
                                type: a,
                                teamId: s
                            });
                            r.current = t
                        }
                        return await l.default.getApplicationsForGuild(e.id, {
                            type: a,
                            includeTeam: !0
                        }), !0
                    } catch (e) {
                        return i(new n.APIError(e)), !1
                    } finally {
                        t(!1)
                    }
                };
                return {
                    createGuildApplication: o,
                    submitting: e,
                    error: s
                }
            }
        },
        228100: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            }), s("222007");
            var a = s("884691"),
                n = s("446674"),
                l = s("448993"),
                i = s("651057"),
                r = s("299285");

            function o(e, t) {
                let s = (0, n.useStateFromStores)([r.default], () => r.default.getGuildApplication(e, t)),
                    [o, d] = a.useState(null == s),
                    [u, c] = a.useState(),
                    [E, _] = a.useState(!1),
                    T = a.useCallback(async () => {
                        if (null == s && null != e) {
                            _(!0), d(!0);
                            try {
                                await i.default.getApplicationsForGuild(e, {
                                    type: t,
                                    includeTeam: !0
                                })
                            } catch (e) {
                                c(new l.APIError(e))
                            } finally {
                                d(!1)
                            }
                        }
                    }, [s, t, e]);
                return a.useEffect(() => {
                    !E && T()
                }, [E, T]), {
                    application: s,
                    error: u,
                    loading: o
                }
            }
        },
        165426: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            }), s("222007"), s("424973"), s("808653");
            var a = s("37983");
            s("884691");
            var n = s("714617"),
                l = s.n(n),
                i = s("446674"),
                r = s("656038"),
                o = s("923959"),
                d = s("305961"),
                u = s("644583"),
                c = s("49111");

            function E(e) {
                let {
                    guildId: t,
                    selectedChannelIds: s,
                    selectedRoleIds: n,
                    onChange: E,
                    placeholder: _,
                    disableEveryoneRole: T,
                    includeRoleRestrictedPrivateChannels: I = !1
                } = e, {
                    channelRows: S,
                    roleRows: N
                } = (0, i.useStateFromStores)([o.default, d.default], () => {
                    var e, a;
                    let l = o.default.getChannels(t)[c.ChannelTypes.GUILD_CATEGORY],
                        i = [...o.default.getChannels(t)[o.GUILD_SELECTABLE_CHANNELS_KEY], ...o.default.getChannels(t)[o.GUILD_VOCAL_CHANNELS_KEY]],
                        E = [],
                        _ = {};
                    l.forEach(e => {
                        let {
                            channel: t,
                            comparator: s
                        } = e;
                        "null" !== t.id && (_[t.id] = [], E.push({
                            channel: t,
                            comparator: s
                        }))
                    }), i.forEach(e => {
                        let {
                            channel: t,
                            comparator: a
                        } = e;
                        if (!(t.isGuildStageVoice() || t.isThread() || s.has(t.id))) !(!I && (0, r.default)(t)) && (null == t.parent_id ? E.push({
                            channel: t,
                            comparator: a
                        }) : (null == _[t.parent_id] && (_[t.parent_id] = []), _[t.parent_id].push({
                            channel: t,
                            comparator: a
                        })))
                    });
                    let S = E.sort((e, t) => {
                            let {
                                comparator: s,
                                channel: a
                            } = e, {
                                comparator: n,
                                channel: l
                            } = t;
                            return a.isCategory() && !l.isCategory() ? 1 : !a.isCategory() && l.isCategory() ? -1 : n - s
                        }).reduce((e, t) => {
                            let {
                                channel: a
                            } = t;
                            if (a.isGuildStageVoice() || a.isThread() || s.has(a.id)) return e;
                            e.push((0, u.channelToPendingAddition)(a).row);
                            let n = _[a.id];
                            return null != n && n.length > 0 && n.forEach(t => {
                                let {
                                    channel: s
                                } = t;
                                e.push((0, u.channelToPendingAddition)(s).row)
                            }), e
                        }, []),
                        N = Object.values(null !== (a = null === (e = d.default.getGuild(t)) || void 0 === e ? void 0 : e.roles) && void 0 !== a ? a : {}).filter(e => !n.has(e.id)).filter(e => !T || e.id !== t).map(e => (0, u.roleToPendingAddition)(e).row);
                    return {
                        channelRows: S,
                        roleRows: N
                    }
                }, [T, t, I, s, n], l);
                return (0, a.jsx)(u.default, {
                    channelRows: S,
                    roleRows: N,
                    guildId: t,
                    selectedChannelIds: s,
                    selectedRoleIds: n,
                    onChange: E,
                    placeholder: _
                })
            }
        },
        382981: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            }), s("222007");
            var a = s("446674"),
                n = s("913144"),
                l = s("305961");
            let i = new Map;
            class r extends a.default.Store {
                initialize() {
                    this.waitFor(l.default)
                }
                getGuildRoleConnectionsConfiguration(e) {
                    return i.get(e)
                }
            }
            r.displayName = "GuildRoleConnectionsConfigurationStore";
            var o = new r(n.default, {
                GUILD_ROLE_CONNECTIONS_CONFIGURATIONS_FETCH_SUCCESS: e => {
                    let {
                        roleId: t,
                        roleConnectionConfigurations: s
                    } = e;
                    i.set(t, s)
                }
            })
        },
        805233: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useCreatorMonetizationExperimentContext: function() {
                    return o
                },
                CreatorMonetizationExperimentContextProvider: function() {
                    return d
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("627445"),
                i = s.n(l);
            let r = n.createContext(void 0);

            function o() {
                let e = n.useContext(r);
                return i(null != e, "useCreatorMonetizationExperimentContext must be used within a CreatorMonetizationExperimentContext"), e
            }

            function d(e) {
                let {
                    children: t,
                    ...s
                } = e;
                return (0, a.jsx)(r.Provider, {
                    value: s,
                    children: t
                })
            }
        },
        218567: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useCreatorMonetizationSettingsDisabled: function() {
                    return r
                },
                CreatorMonetizationSettingsDisabledContextProvider: function() {
                    return o
                }
            }), s("70102");
            var a = s("37983"),
                n = s("884691"),
                l = s("465869");
            let i = n.createContext(void 0);

            function r() {
                let e = n.useContext(i);
                if (null == e) throw Error("useCreatorMonetizationSettingsDisabled must be used within a CreatorMonetizationSettingsDisabledContext");
                return e
            }

            function o(e) {
                let {
                    guildId: t,
                    children: s
                } = e, {
                    shouldRestrictUpdatingCreatorMonetizationSettings: n
                } = (0, l.useShouldRestrictUpdatingCreatorMonetizationSettings)(t);
                return (0, a.jsx)(i.Provider, {
                    value: n,
                    children: s
                })
            }
        },
        717559: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getStatusForPeriod: function() {
                    return n
                },
                splitCurrentPeriod: function() {
                    return l
                },
                calculateMetrics: function() {
                    return i
                }
            }), s("222007");
            var a = s("397056");
            let n = e => {
                var t, s;
                let a = Object.values(null !== (s = null == e ? void 0 : e.ppgs) && void 0 !== s ? s : {})[0],
                    n = null == a ? void 0 : a.status,
                    l = null == a ? void 0 : null === (t = a.payout) || void 0 === t ? void 0 : t.status,
                    i = null == a ? void 0 : a.deferral_reasons,
                    r = null == a ? void 0 : a.period_ending_at;
                return {
                    ppgStatus: n,
                    payoutStatus: l,
                    ppgDeferralReasons: i,
                    periodEndDate: r
                }
            };

            function l(e) {
                let t, s;
                let {
                    ppgStatus: l
                } = n(e[0]);
                return l === a.PaymentPayoutGroupStatuses.OPEN ? [t, ...s] = e : s = e, {
                    currentPeriod: t,
                    previousPeriods: s
                }
            }

            function i(e, t) {
                let s, a, n, l;
                return null != e && (s = e.amount, n = e.paymentsCount, null != t && (a = e.amount / t.amount - 1, l = e.paymentsCount - t.paymentsCount)), {
                    revenue: s,
                    revenuePctChange: a,
                    paymentsCount: n,
                    paymentsCountChange: l
                }
            }
        },
        180243: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("446674"),
                r = s("206230"),
                o = s("181114"),
                d = s("802810"),
                u = s("279905");

            function c(e) {
                let {
                    className: t,
                    shouldShine: s = !0,
                    size: n = 14
                } = e, c = (0, i.useStateFromStores)([r.default], () => r.default.useReducedMotion);
                return (0, a.jsxs)("div", {
                    className: l([u.guildProductRoleIcon, t]),
                    children: [(0, a.jsx)(d.default, {
                        height: n,
                        width: n
                    }), (0, a.jsx)(o.Shine, {
                        className: u.shine,
                        shinePaused: c || !s,
                        shineSize: o.default.ShineSizes.SMALL
                    })]
                })
            }
        },
        763838: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return f
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("716241"),
                o = s("183137"),
                d = s("592407"),
                u = s("181114"),
                c = s("538137"),
                E = s("599110"),
                _ = s("500307"),
                T = s("49111"),
                I = s("782340"),
                S = s("326386");

            function N(e) {
                let {
                    pills: t
                } = e;
                return (0, a.jsx)("div", {
                    className: S.row,
                    children: t.map(e => (0, a.jsx)("div", {
                        className: S.pill,
                        children: (0, a.jsx)(i.Text, {
                            variant: "text-sm/normal",
                            children: e
                        })
                    }, e))
                })
            }

            function f(e) {
                let {
                    guildId: t,
                    showCTA: s,
                    responsive: n = !0
                } = e, f = [
                    [I.default.Messages.GUILD_STORE_PREVIEW_CHIP_ROLE_ACCESS, I.default.Messages.GUILD_STORE_PREVIEW_CHIP_GAME_TUTORIALS],
                    [I.default.Messages.GUILD_STORE_PREVIEW_CHIP_DOPE_WALLPAPERS, I.default.Messages.GUILD_STORE_PREVIEW_CHIP_PFP_ART],
                    [I.default.Messages.GUILD_STORE_PREVIEW_CHIP_FILTER_PRESETS, I.default.Messages.GUILD_STORE_PREVIEW_CHIP_SONG_DROPS],
                    [I.default.Messages.GUILD_STORE_PREVIEW_CHIP_COSPLAY_PICS, I.default.Messages.GUILD_STORE_PREVIEW_CHIP_3D_MODELS]
                ];
                return (0, a.jsx)("div", {
                    className: l({
                        [S.responsive]: n
                    }),
                    children: (0, a.jsxs)("div", {
                        className: S.container,
                        children: [(0, a.jsxs)("div", {
                            className: S.content,
                            children: [(0, a.jsx)("div", {
                                className: S.pillContainer,
                                children: f.map((e, t) => (0, a.jsx)(N, {
                                    pills: e
                                }, "pill-row-".concat(t)))
                            }), (0, a.jsxs)("div", {
                                className: S.ctaContent,
                                children: [(0, a.jsx)(i.Text, {
                                    variant: "text-lg/medium",
                                    color: "header-primary",
                                    children: I.default.Messages.GUILD_STORE_PREVIEW_MURAL_TITLE
                                }), s && (0, a.jsxs)(u.default, {
                                    size: i.Button.Sizes.MEDIUM,
                                    className: S.getStartedButton,
                                    innerClassName: S.getStartedButtonContents,
                                    shineSize: u.default.ShineSizes.SMALL,
                                    onClick: () => {
                                        E.default.track(T.AnalyticEvents.GUILD_SHOP_PREVIEW_CLICK, {
                                            ...(0, r.collectGuildAnalyticsMetadata)(t),
                                            action_taken: _.GuildShopPreviewClickActions.GET_STARTED_CLICK
                                        }), d.default.open(t, T.GuildSettingsSections.GUILD_PRODUCTS)
                                    },
                                    children: [I.default.Messages.GUILD_SHOP_PREVIEW_CTA_BUTTON, (0, a.jsx)(c.default, {
                                        className: S.getStartedArrow
                                    })]
                                })]
                            })]
                        }), (0, a.jsxs)("div", {
                            className: S.muralImageContainer,
                            children: [(0, a.jsx)("img", {
                                src: (0, o.getAssetCDNUrl)("server_products/storefront/preview-mural.png"),
                                alt: "",
                                className: S.muralImage
                            }), (0, a.jsx)("img", {
                                src: (0, o.getAssetCDNUrl)("server_products/storefront/preview-mural-reduced.png"),
                                alt: "",
                                className: S.muralImageReducedWidth
                            })]
                        })]
                    })
                })
            }
        },
        802810: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(i),
                    xmlns: "http://www.w3.org/2000/svg",
                    width: t,
                    height: s,
                    viewBox: "0 0 21 20",
                    fill: "none",
                    children: (0, a.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M14.571 6.66585H17.166C18.086 6.66585 18.8327 7.41335 18.8327 8.33251V9.99918H2.16602V8.33251C2.16602 7.41335 2.91352 6.66585 3.83268 6.66585H6.42768C6.05185 6.47001 5.69602 6.23085 5.39852 5.93418C4.42352 4.95918 4.42352 3.37335 5.39852 2.39918C6.34268 1.45501 7.98768 1.45501 8.93352 2.39751C10.2977 3.76168 10.4818 6.32918 10.4977 6.61751C10.4986 6.62709 10.4965 6.63567 10.4944 6.64421C10.4927 6.65127 10.491 6.6583 10.491 6.66585H10.5077C10.5077 6.65822 10.5059 6.65112 10.5042 6.64407C10.5022 6.6357 10.5001 6.62739 10.501 6.61835C10.5177 6.33001 10.701 3.76251 12.0652 2.39835C13.011 1.45418 14.6543 1.45501 15.6002 2.39751C16.5744 3.37418 16.5744 4.96001 15.6002 5.93418C15.3027 6.23085 14.9468 6.47001 14.571 6.66585ZM6.57685 4.75585C6.25185 4.43001 6.25185 3.90168 6.57685 3.57668C6.73352 3.41918 6.94268 3.33335 7.16602 3.33335C7.38935 3.33335 7.59852 3.41918 7.75518 3.57668C8.24685 4.06835 8.53352 4.95001 8.68685 5.68501C7.95352 5.53251 7.06518 5.24418 6.57685 4.75585ZM12.311 5.68668C12.4652 4.95085 12.751 4.06918 13.2435 3.57751C13.4002 3.41918 13.6093 3.33335 13.8327 3.33335C14.056 3.33335 14.2652 3.41918 14.421 3.57585C14.746 3.90168 14.7469 4.43001 14.4219 4.75585C13.9293 5.24835 13.0468 5.53501 12.311 5.68668ZM2.99935 11.6658V16.6658C2.99935 17.585 3.74685 18.3325 4.66602 18.3325H9.66602V11.6658H2.99935ZM11.3327 11.6658V18.3325H16.3327C17.2527 18.3325 17.9993 17.585 17.9993 16.6658V11.6658H11.3327Z",
                        fill: l
                    })
                })
            }
        },
        38904: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            }), s("222007");
            var a = s("884691"),
                n = s("917351"),
                l = s.n(n),
                i = s("167627");
            let r = e => {
                let t = {};
                for (let s of e) {
                    let e = "".concat(s.period_starting_at, ",").concat(s.status);
                    null == t[e] && (t[e] = {
                        key: e,
                        periodStartingAt: s.period_starting_at,
                        ppgs: {},
                        paymentsCount: 0,
                        amount: 0
                    });
                    let a = t[e];
                    a.amount += s.amount, a.paymentsCount += s.payments_count, a.ppgs[s.grouping_id] = s
                }
                return l.orderBy(Object.values(t), ["periodStartingAt"], ["desc"])
            };
            var o = (e, t) => {
                let {
                    groupType: s,
                    teamId: n
                } = t, [l, o] = a.useState(!0), [d, u] = a.useState([]), c = a.useCallback(async () => {
                    if (u([]), null == e) {
                        o(!1);
                        return
                    }
                    try {
                        o(!0);
                        let t = await i.getPaymentPayoutGroups(e, {
                            grouping_type: s
                        });
                        u(t)
                    } catch {} finally {
                        o(!1)
                    }
                }, [e, s]);
                a.useEffect(() => {
                    c()
                }, [c]);
                let E = a.useMemo(() => {
                    let e = null != n ? d.filter(e => e.user_id === n) : d;
                    return r(e)
                }, [d, n]);
                return {
                    payoutsByPeriod: E,
                    loading: l
                }
            }
        },
        750482: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                },
                MonetizationListingImageAspectStable: function() {
                    return u
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("617258"),
                l = s("769846"),
                i = s("801765"),
                r = s("955735");
            let o = (0, n.cssValueToNumber)(l.default.ASPECT_STABLE_IMAGE_CONTAINER_PADDING);

            function d(e) {
                let {
                    listing: t,
                    imageSize: s,
                    alt: n,
                    ...l
                } = e, r = (0, i.useListingThumbnailUrl)(t, s);
                return (0, a.jsx)("img", {
                    src: r,
                    alt: n,
                    ...l
                })
            }

            function u(e) {
                let {
                    listing: t,
                    aspectRatio: s = 16 / 9,
                    height: n,
                    ...l
                } = e, d = (n - 2 * o) * s, u = (0, i.useListingThumbnailUrl)(t, d), c = (0, i.useListingThumbnailUrl)(t, d, {
                    shouldAnimate: !1
                });
                return (0, a.jsx)(r.default, {
                    src: u,
                    backgroundSrc: c,
                    aspectRatio: s,
                    ...l
                })
            }
        },
        835706: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("423487"),
                i = s("330040");

            function r(e) {
                let {
                    children: t
                } = e;
                return (0, a.jsx)("div", {
                    className: i.container,
                    children: (0, a.jsx)(n.Text, {
                        variant: "text-sm/normal",
                        color: "text-normal",
                        className: i.text,
                        children: (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(l.default, {
                                className: i.noticeIcon,
                                "aria-hidden": !0
                            }), t]
                        })
                    })
                })
            }
        },
        97031: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("255261");

            function i(e) {
                let {
                    children: t,
                    disabled: s,
                    disabledTooltip: i,
                    id: r,
                    ...o
                } = e;
                return (0, a.jsx)(n.TooltipContainer, {
                    text: s ? i : null,
                    children: (0, a.jsx)(n.TabBar.Item, {
                        className: l.tabBarItem,
                        id: r,
                        disabled: s,
                        ...o,
                        children: t
                    })
                })
            }
        },
        970500: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("68238"),
                i = s("476462");

            function r(e) {
                let {
                    label: t,
                    sublabel: s,
                    value: r,
                    additionalContent: o,
                    tooltip: d
                } = e;
                return (0, a.jsxs)("div", {
                    className: i.metricCard,
                    "aria-label": t,
                    children: [(0, a.jsxs)("div", {
                        className: i.metricCardLabelContainer,
                        children: [(0, a.jsx)(n.Text, {
                            className: i.metricCardLabel,
                            variant: "text-xs/medium",
                            color: "interactive-normal",
                            "aria-hidden": !0,
                            children: t
                        }), null != d && (0, a.jsx)(n.Tooltip, {
                            text: d,
                            children: e => (0, a.jsx)(l.default, {
                                className: i.labelTooltipIcon,
                                ...e
                            })
                        }), null != s ? (0, a.jsx)(n.Text, {
                            variant: "text-xs/normal",
                            color: "text-muted",
                            children: s
                        }) : null]
                    }), (0, a.jsx)(n.Text, {
                        tag: "span",
                        variant: "heading-xl/medium",
                        color: "header-primary",
                        children: r
                    }), o]
                })
            }
        },
        276253: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                MetricsContainer: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("476462");

            function l(e) {
                let {
                    children: t
                } = e;
                return (0, a.jsx)("div", {
                    className: n.metricsContainer,
                    children: t
                })
            }
        },
        207353: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getDefaultSorter: function() {
                    return I
                },
                createColumn: function() {
                    return S
                },
                createListingNameColumn: function() {
                    return f
                },
                createCurrencyAmountColumn: function() {
                    return g
                },
                createPersonCountColumn: function() {
                    return A
                },
                createTableColumns: function() {
                    return L
                },
                HeaderCell: function() {
                    return m
                },
                Cell: function() {
                    return C
                },
                default: function() {
                    return R
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l);
            s("866227");
            var r = s("77078"),
                o = s("158352"),
                d = s("781896"),
                u = s("153160"),
                c = s("750482"),
                E = s("49111"),
                _ = s("782340"),
                T = s("960282");

            function I(e) {
                return (t, s, a) => {
                    let n = e(t),
                        l = e(s);
                    return null != n && null != l ? n === l ? 0 : n < l ? -1 : 1 : 0
                }
            }

            function S(e) {
                let {
                    key: t,
                    cellClassName: s,
                    renderHeader: a,
                    renderContent: n,
                    ...l
                } = e;
                return {
                    key: t,
                    bodyCellClassName: T.cell,
                    cellClassName: s,
                    renderHeader: a,
                    render: n,
                    ...l
                }
            }

            function N() {
                return (0, a.jsx)(r.Text, {
                    variant: "text-xs/medium",
                    className: T.unpublishedBadge,
                    children: _.default.Messages.GUILD_PRODUCT_UNPUBLISHED_TITLE
                })
            }

            function f(e) {
                let {
                    cellClassName: t,
                    key: s,
                    renderHeader: n,
                    ...l
                } = e;
                return S({
                    cellClassName: t,
                    key: s,
                    renderHeader: n,
                    renderContent(e) {
                        let {
                            listing: t
                        } = e, s = null;
                        return null != t && (s = (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(c.default, {
                                listing: t,
                                imageSize: 128,
                                alt: "",
                                className: T.listingImage
                            }), (0, a.jsxs)(r.Text, {
                                variant: "text-md/medium",
                                color: "header-primary",
                                className: T.listingNameLabel,
                                children: [t.name, !t.published && (0, a.jsx)(N, {})]
                            })]
                        })), (0, a.jsx)(C, {
                            className: T.listingNameCell,
                            children: s
                        })
                    },
                    ...l
                })
            }

            function g(e) {
                let {
                    cellClassName: t,
                    getAmount: s,
                    key: n,
                    renderHeader: l,
                    ...i
                } = e;
                return S({
                    key: n,
                    cellClassName: t,
                    renderHeader: l,
                    renderContent(e) {
                        let t = s(e);
                        return (0, a.jsx)(O, {
                            children: t
                        })
                    },
                    ...i
                })
            }

            function A(e) {
                let {
                    cellClassName: t,
                    getCount: s,
                    key: n,
                    renderHeader: l,
                    ...i
                } = e;
                return S({
                    key: n,
                    cellClassName: t,
                    renderHeader: l,
                    renderContent(e) {
                        let t = s(e);
                        return (0, a.jsx)(h, {
                            children: t
                        })
                    },
                    ...i
                })
            }

            function L(e) {
                let t = [...e];
                for (let s = 1; s < e.length; ++s) {
                    let a = e[s];
                    t[s] = {
                        ...a,
                        cellClassName: i(a.cellClassName, T.cellAlignRight)
                    }
                }
                return t
            }
            let m = e => {
                    let {
                        children: t
                    } = e;
                    return (0, a.jsx)(r.Text, {
                        className: T.headerCell,
                        variant: "text-xs/medium",
                        color: "interactive-normal",
                        "aria-hidden": !0,
                        children: t
                    })
                },
                C = e => {
                    let {
                        children: t,
                        className: s
                    } = e;
                    return (0, a.jsx)(r.Text, {
                        className: s,
                        variant: "text-md/normal",
                        color: "interactive-normal",
                        children: t
                    })
                },
                O = e => {
                    let {
                        children: t
                    } = e;
                    return (0, a.jsx)(C, {
                        children: (0, u.formatPrice)(null != t ? t : 0, E.CurrencyCodes.USD)
                    })
                },
                h = e => {
                    let {
                        children: t
                    } = e;
                    return (0, a.jsxs)(C, {
                        className: T.personCountCell,
                        children: [null != t ? t : "-", " ", (0, a.jsx)(d.default, {
                            className: T.personCountIcon,
                            "aria-hidden": !0
                        })]
                    })
                };

            function R(e) {
                let {
                    className: t,
                    headerClassName: s,
                    rowClassName: l,
                    enableRowSeparators: r = !1,
                    initialSortKey: d,
                    initialSortDirection: u = E.TableSortDirections.ASCENDING,
                    ...c
                } = e, [_, I] = n.useState(d), [S, N] = n.useState(u);
                return (0, a.jsx)("div", {
                    className: i(T.tableContainer, t),
                    children: (0, a.jsx)(o.default, {
                        className: i({
                            [T.tableWithoutSeparators]: !r
                        }, T.table),
                        rowClassName: i({
                            [T.rowWithSeparators]: r
                        }, l),
                        headerClassName: i(T.header, {
                            [T.headerWithoutSeparators]: !r
                        }, s),
                        sortKey: _,
                        sortDirection: S,
                        onSort: (e, t) => {
                            I(e), N(t)
                        },
                        ...c
                    })
                })
            }
        },
        215393: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                createExpandableTableColumns: function() {
                    return _
                },
                createExpandableColumn: function() {
                    return T
                },
                useExpandableRows: function() {
                    return I
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("627445"),
                o = s.n(r),
                d = s("77078"),
                u = s("772280"),
                c = s("207353"),
                E = s("380349");

            function _(e, t) {
                let {
                    expandableToggleColumnKey: s
                } = t, n = (0, c.createTableColumns)(e.map(e => ({
                    ...e,
                    sort: !1,
                    renderHeader() {
                        var t;
                        return null === (t = e.renderHeader) || void 0 === t ? void 0 : t.call(e, e, [])
                    },
                    render(t, s, a) {
                        var n, l;
                        if (t.isExpandedItem) return "renderExpandedContent" in e ? e.renderExpandedContent(t.item, s) : null;
                        return null !== (l = null === (n = e.render) || void 0 === n ? void 0 : n.call(e, t.item, s, a)) && void 0 !== l ? l : null
                    }
                })));
                return [function(e) {
                    let {
                        key: t
                    } = e;
                    return {
                        key: t,
                        cellClassName: E.toggleExpandColumn,
                        renderHeader: () => null,
                        render(e, t) {
                            if (o(null != t, "Cell props missing; did you use the hook?"), e.isExpandedItem) return null;
                            let {
                                expandedRows: s,
                                onToggleExpandRow: n
                            } = t, l = s.has(e.key);
                            return (0, a.jsx)(d.Clickable, {
                                className: E.toggleExpandCell,
                                onClick: () => n(e.key),
                                children: (0, a.jsx)(c.Cell, {
                                    children: (0, a.jsx)(u.default, {
                                        className: i(E.caretIcon, {
                                            [E.caretDownIcon]: l
                                        })
                                    })
                                })
                            })
                        }
                    }
                }({
                    key: s
                }), ...n]
            }

            function T(e) {
                let {
                    renderExpandedContent: t,
                    ...s
                } = e;
                return {
                    ...(0, c.createColumn)(s),
                    renderExpandedContent: t
                }
            }

            function I(e, t) {
                let {
                    generateExpandedRows: s
                } = t, a = function() {
                    let [e, t] = n.useState(new Set), s = n.useCallback(e => {
                        t(t => {
                            let s = new Set(t);
                            return s.has(e) ? s.delete(e) : s.add(e), s
                        })
                    }, [t]);
                    return {
                        expandedRows: e,
                        onToggleExpandRow: s
                    }
                }(), l = n.useMemo(() => {
                    let t = [];
                    for (let n of e)
                        if (t.push({
                                isExpandedItem: !1,
                                key: n.key,
                                item: n
                            }), a.expandedRows.has(n.key))
                            for (let e of s(n)) t.push({
                                isExpandedItem: !0,
                                key: e.key,
                                item: e
                            });
                    return t
                }, [a.expandedRows, e, s]);
                return {
                    data: l,
                    cellProps: a
                }
            }
        },
        898411: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("757715"),
                i = s("191814"),
                r = s("420857"),
                o = s("49111"),
                d = s("782340");

            function u(e) {
                let {
                    team: t,
                    ...s
                } = e, u = (0, l.useRoleSubscriptionSettingsDisabled)(), c = u || null == t ? null : d.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EDIT_PAYMENT_METHOD_LINK.format({
                    url: o.MarketingURLs.DEVELOPER_PORTAL_PAYOUT_SETTINGS(t.id)
                });
                return 0 === s.payoutsByPeriod.length ? (0, a.jsxs)(n.FormText, {
                    type: n.FormText.Types.DESCRIPTION,
                    children: [d.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_EMPTY, " ", c]
                }) : (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)(n.FormText, {
                        type: n.FormText.Types.DESCRIPTION,
                        children: [d.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_DESCRIPTION, " ", c]
                    }), (0, a.jsx)(i.default, {
                        size: 16
                    }), (0, a.jsx)(r.default, {
                        ...s
                    })]
                })
            }
        },
        420857: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return G
                }
            });
            var a, n, l = s("37983"),
                i = s("884691"),
                r = s("627445"),
                o = s.n(r),
                d = s("866227"),
                u = s.n(d),
                c = s("77078"),
                E = s("434014"),
                _ = s("488499"),
                T = s("860598"),
                I = s("445940"),
                S = s("578706"),
                N = s("381546"),
                f = s("68238"),
                g = s("717559"),
                A = s("207353"),
                L = s("215393"),
                m = s("397056"),
                C = s("782340"),
                O = s("944061");
            (a = n || (n = {})).DROPDOWN = "DROPDOWN", a.PERIOD = "PERIOD", a.AMOUNT = "AMOUNT ", a.STATUS = "STATUS ";
            let h = e => {
                let {
                    dateUtc: t
                } = e;
                return (0, l.jsx)(c.Text, {
                    variant: "text-md/medium",
                    color: "interactive-active",
                    children: u(t).utc().format("MMMM YYYY")
                })
            };

            function R(e) {
                let {
                    item: t
                } = e, {
                    ppgStatus: s,
                    payoutStatus: a,
                    ppgDeferralReasons: n,
                    periodEndDate: i
                } = (0, g.getStatusForPeriod)(t), r = null != i ? u(i).add(15, "days").toISOString() : void 0, o = (0, E.formatNextPaymentDate)(r, "MMM D");
                switch (s) {
                    case m.PaymentPayoutGroupStatuses.OPEN:
                        return (0, l.jsxs)(l.Fragment, {
                            children: [null != o ? C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE.format({
                                payoutDate: o
                            }) : C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING, (0, l.jsx)(T.default, {
                                className: O.statusScheduledIcon
                            })]
                        });
                    case m.PaymentPayoutGroupStatuses.CANCELED:
                        return (0, l.jsxs)(l.Fragment, {
                            children: [C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED, (0, l.jsx)(N.default, {
                                className: O.statusErrorIcon
                            })]
                        });
                    case m.PaymentPayoutGroupStatuses.PAYOUT_DEFERRED:
                        if ((null == n ? void 0 : n.includes(m.PaymentPayoutGroupDeferralReasons.PAYOUT_SEIZED)) === !0) return (0, l.jsxs)(l.Fragment, {
                            children: [C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED, (0, l.jsx)(N.default, {
                                className: O.statusErrorIcon
                            })]
                        });
                        return (0, l.jsxs)(l.Fragment, {
                            children: [C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_DEFERRED, (0, l.jsx)(I.default, {
                                className: O.statusDeferredIcon
                            })]
                        })
                }
                switch (a) {
                    case m.PayoutStatuses.MANUAL:
                    case m.PayoutStatuses.OPEN:
                    case m.PayoutStatuses.PENDING:
                    case m.PayoutStatuses.PROCESSING:
                    case m.PayoutStatuses.SUBMITTED:
                    case m.PayoutStatuses.PENDING_FUNDS:
                    case m.PayoutStatuses.CANCELED:
                    case m.PayoutStatuses.ERROR:
                        return (0, l.jsxs)(l.Fragment, {
                            children: [null != o ? C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE.format({
                                payoutDate: o
                            }) : C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_SCHEDULED, (0, l.jsx)(T.default, {
                                className: O.statusScheduledIcon
                            })]
                        });
                    case m.PayoutStatuses.PAID:
                        return (0, l.jsxs)(l.Fragment, {
                            children: [C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PAID, (0, l.jsx)(S.default, {
                                className: O.statusPaidIcon
                            })]
                        });
                    case m.PayoutStatuses.DEFERRED:
                    case m.PayoutStatuses.DEFERRED_INTERNAL:
                    case m.PayoutStatuses.REJECTED:
                    case m.PayoutStatuses.RISK_REVIEW:
                        return (0, l.jsxs)(l.Fragment, {
                            children: [_.default.getStatusErrorText(a), (0, l.jsx)(N.default, {
                                className: O.statusErrorIcon
                            })]
                        })
                }
                return null
            }
            let D = (0, A.createCurrencyAmountColumn)({
                    key: "AMOUNT ",
                    cellClassName: O.amountColumn,
                    renderHeader() {
                        let e = (0, l.jsx)(c.Tooltip, {
                            text: C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_AMOUNT_DISCLAIMER,
                            children: e => (0, l.jsx)(f.default, {
                                className: O.amountDisclaimer,
                                ...e
                            })
                        });
                        return (0, l.jsxs)(A.HeaderCell, {
                            children: [C.default.Messages.GUILD_PRODUCT_EARNINGS_TABLE_PRICE_COLUMN_TITLE, e]
                        })
                    },
                    getAmount: e => e.amount
                }),
                M = (0, L.createExpandableTableColumns)([(0, L.createExpandableColumn)({
                    key: "PERIOD",
                    cellClassName: O.periodColumn,
                    renderHeader: () => (0, l.jsx)(A.HeaderCell, {
                        children: C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_PERIOD
                    }),
                    renderContent: e => (0, l.jsx)(h, {
                        dateUtc: e.periodStartingAt
                    }),
                    renderExpandedContent(e, t) {
                        o(null != t, "CellProps should always be provided");
                        let {
                            ListingIdLabel: s
                        } = t;
                        return (0, l.jsx)(s, {
                            listingId: e.listingId
                        })
                    }
                }), (0, L.createExpandableColumn)({
                    ...D,
                    renderContent: D.render,
                    renderExpandedContent: (e, t) => D.render(e, t)
                }), (0, A.createColumn)({
                    key: "STATUS ",
                    cellClassName: O.statusColumn,
                    renderHeader() {
                        let e = (0, l.jsx)(c.Tooltip, {
                            text: C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_NEXT_PAYMENT_DISCLAIMER,
                            children: e => (0, l.jsx)(f.default, {
                                className: O.statusDisclaimer,
                                ...e
                            })
                        });
                        return (0, l.jsxs)(A.HeaderCell, {
                            children: [C.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS, e]
                        })
                    },
                    renderContent: e => (0, l.jsx)(A.Cell, {
                        className: O.statusCell,
                        children: (0, l.jsx)(R, {
                            item: e
                        })
                    })
                })], {
                    expandableToggleColumnKey: "DROPDOWN"
                });

            function G(e) {
                let {
                    ListingIdLabel: t,
                    payoutsByPeriod: s
                } = e, {
                    cellProps: a,
                    data: n
                } = (0, L.useExpandableRows)(s, {
                    generateExpandedRows: e => Object.keys(e.ppgs).map(t => {
                        var s;
                        return {
                            key: e.key + t,
                            listingId: t,
                            amount: null === (s = e.ppgs[t]) || void 0 === s ? void 0 : s.amount
                        }
                    })
                }), r = i.useMemo(() => ({
                    ListingIdLabel: t,
                    ...a
                }), [a, t]);
                return (0, l.jsx)(A.default, {
                    columns: M,
                    data: n,
                    cellProps: r
                })
            }
        },
        887229: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("940958"),
                i = s("153160"),
                r = s("970500"),
                o = s("276253"),
                d = s("49111"),
                u = s("782340"),
                c = s("476462");

            function E(e) {
                let {
                    children: t,
                    revenue: s,
                    revenueTrend: E,
                    summaryMetricLabel: _,
                    summaryMetricValue: T,
                    summaryMetricTrend: I,
                    summaryMetricTrendIsPercent: S
                } = e;
                return (0, a.jsx)(n.FormSection, {
                    title: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_HEADER,
                    children: (0, a.jsxs)("div", {
                        className: c.paymentInfoGroup,
                        children: [(0, a.jsxs)(o.MetricsContainer, {
                            children: [(0, a.jsx)(r.default, {
                                label: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_REVENUE,
                                value: (0, i.formatPrice)(null != s ? s : 0, d.CurrencyCodes.USD),
                                additionalContent: (0, a.jsx)(l.MetricTrend, {
                                    value: E,
                                    isPercent: !0
                                })
                            }), (0, a.jsx)(r.default, {
                                label: _,
                                value: T,
                                additionalContent: (0, a.jsx)(l.MetricTrend, {
                                    value: I,
                                    isPercent: S
                                })
                            })]
                        }), t]
                    })
                })
            }
        },
        313584: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("834256");

            function l(e) {
                let {
                    children: t
                } = e;
                return (0, a.jsx)("div", {
                    className: n.paymentSections,
                    children: t
                })
            }
        },
        396076: function(e, t, s) {
            "use strict";
            var a, n, l, i;
            s.r(t), s.d(t, {
                CreatorMonetizationApplicationState: function() {
                    return a
                },
                CreatorMonetizationOnboardingMarketingSection: function() {
                    return n
                }
            }), (l = a || (a = {})).OPEN = "OPEN", l.REJECTED = "REJECTED", l.APPROVED = "APPROVED", l.ACTION_REQUIRED = "ACTION_REQUIRED", (i = n || (n = {})).HOW_IT_WORKS = "HOW_IT_WORKS", i.BENEFITS = "BENEFITS", i.OTHER_CREATORS = "OTHER_CREATORS"
        },
        782914: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getCreatorMonetizationAcceptTermsCheckboxText: function() {
                    return i
                }
            });
            var a = s("701909"),
                n = s("49111"),
                l = s("782340");

            function i() {
                return l.default.Messages.GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_ACCEPT_TERMS_CHECKBOX.format({
                    fullTermsUrl: a.default.getArticleURL(n.HelpdeskArticles.CREATOR_TERMS),
                    creatorRevenuePolicyUrl: a.default.getArticleURL(n.HelpdeskArticles.CREATOR_POLICY)
                })
            }
        },
        357412: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            }), s("424973");
            var a = s("884691"),
                n = s("545158"),
                l = s("238498"),
                i = s("701909"),
                r = s("799357"),
                o = s("323877"),
                d = s("49111"),
                u = s("782340");

            function c(e) {
                let {
                    onEligibilityBecameStale: t,
                    actions: s,
                    sortedByIneligible: c
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, {
                    isUserMFAEnabled: E,
                    isModerationMFAEnabled: _
                } = (0, o.useIsMFAEnabled)(), T = a.useCallback(async () => {
                    var e, a;
                    E ? !_ && await (null == s ? void 0 : null === (a = s.onRequireModeratorMFAClick) || void 0 === a ? void 0 : a.call(s)) : await (null == s ? void 0 : null === (e = s.onEnableMFAClick) || void 0 === e ? void 0 : e.call(s)), null == t || t()
                }, [E, _, t, s]), I = (0, r.useEnableMFAHook)({
                    onEnableMFAClick: T
                });
                return a.useMemo(() => {
                    if (null == e) return null;
                    let {
                        minimumOwnerAgeInYears: t,
                        minimumSize: a
                    } = e, r = !e.noRecentViolations, o = async () => (0, n.default)(await i.default.getSubmitRequestURLAuthenticated()), S = [{
                        key: "no_violations_requirement",
                        checkedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_ELIGIBLE,
                        uncheckedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_NOT_ELIGIBLE,
                        description: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_DESCRIPTION.format({
                            communityGuidelinesUrl: i.default.getArticleURL(d.HelpdeskArticles.PUBLIC_GUILD_GUILDLINES)
                        }),
                        checked: e.noRecentViolations,
                        actionLabel: r ? u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_RECENT_VIOLATION_ELIGIBILITY_CTA : void 0,
                        actionHandler: r ? o : void 0
                    }];
                    if (null != t && null != e.meetsOwnerAgeRequirement && S.push({
                            key: "owner_age_requirement",
                            checkedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_ELIGIBLE,
                            uncheckedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_NOT_ELIGIBLE,
                            description: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_DESCRIPTION.format({
                                minimumOwnerAgeInYears: t
                            }),
                            checked: e.meetsOwnerAgeRequirement
                        }), null != a && null != e.hasSufficientMembers && S.push({
                            key: "member_count_requirement",
                            checkedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_ELIGIBLE,
                            uncheckedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_NOT_ELIGIBLE,
                            description: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_DESCRIPTION.format({
                                minimumSize: a
                            }),
                            checked: e.hasSufficientMembers
                        }), null != e.minimumAgeInDays && null != e.meetsServerAgeRequirement && S.push({
                            key: "server_age_requirement",
                            checkedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_ELIGIBLE,
                            uncheckedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_NOT_ELIGIBLE,
                            description: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_DESCRIPTION.format({
                                minimumAge: (0, l.default)(e.minimumAgeInDays)
                            }),
                            checked: e.meetsServerAgeRequirement
                        }), null != e.weeklyCommunicators && S.push({
                            key: "weekly_communicator_count_requirement",
                            checkedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_ELIGIBLE,
                            uncheckedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_NOT_ELIGIBLE,
                            description: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_DESCRIPTION,
                            checked: e.weeklyCommunicators
                        }), null != e.hasMemberRetention && S.push({
                            key: "member_retention_requirement",
                            checkedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_ELIGIBLE,
                            uncheckedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_NOT_ELIGIBLE,
                            description: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_DESCRIPTION,
                            checked: e.hasMemberRetention
                        }), S.push({
                            key: "nsfw_requirement",
                            checkedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_ELIGIBLE,
                            uncheckedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_NOT_ELIGIBLE,
                            description: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_DESCRIPTION,
                            checked: e.notNSFW
                        }), null != e.hasEnabled2FA) {
                        let t = !e.hasEnabled2FA && !E && (null == s ? void 0 : s.onEnableMFAClick) != null,
                            a = !e.hasEnabled2FA && !_ && (null == s ? void 0 : s.onRequireModeratorMFAClick) != null,
                            n = t || a;
                        S.push({
                            key: "2fa_requirement",
                            checkedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_ELIGIBLE,
                            uncheckedLabel: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_NOT_ELIGIBLE,
                            description: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_DESCRIPTION.format({
                                enableMFAHook: I
                            }),
                            checked: e.hasEnabled2FA,
                            actionLabel: n ? u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_2MFA_ELIGIBILITY_CTA : void 0,
                            actionHandler: n ? T : void 0
                        })
                    }
                    return !0 === c && S.sort(e => e.checked ? 0 : -1), S
                }, [e, c, E, s, _, I, T])
            }
        },
        205881: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useCreatorMonetizationIneligibleReasons: function() {
                    return n
                }
            }), s("881410");
            var a = s("357412");

            function n(e) {
                let t = (0, a.default)(e),
                    s = null == t ? void 0 : t.flatMap(e => e.checked ? [] : [e.key]);
                return null != s ? s : null
            }
        },
        724334: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            }), s("222007");
            var a = s("884691"),
                n = s("448993"),
                l = s("197509");

            function i(e) {
                let [t, s] = a.useState(!0), [i, r] = a.useState(), [o, d] = a.useState(), u = a.useCallback(async e => {
                    s(!0), r(void 0);
                    try {
                        let t = await l.getCreatorMonetizationOnboardingMarketing(e);
                        d(t)
                    } catch (e) {
                        r(new n.APIError(e))
                    } finally {
                        s(!1)
                    }
                }, []);
                return a.useEffect(() => {
                    u(e)
                }, [e, u]), {
                    isLoading: t,
                    error: i,
                    creatorMonetizationOnboardingMarketing: o
                }
            }
        },
        799357: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useEnableMFAHook: function() {
                    return o
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("37785"),
                i = s("323877");

            function r(e) {
                return e
            }

            function o(e) {
                let {
                    onEnableMFAClick: t,
                    onMFAEnabled: s
                } = e, {
                    isUserMFAEnabled: o,
                    isModerationMFAEnabled: d
                } = (0, i.useIsMFAEnabled)(), u = n.useCallback(async () => {
                    await t(), null == s || s()
                }, [t, s]), c = n.useCallback(e => (0, a.jsx)(l.default, {
                    onClick: u,
                    children: e
                }), [u]);
                return o && d ? r : c
            }
        },
        323877: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useIsMFAEnabled: function() {
                    return r
                }
            });
            var a = s("65597"),
                n = s("900938"),
                l = s("697218"),
                i = s("49111");

            function r() {
                let e = (0, a.default)([l.default], () => l.default.getCurrentUser()),
                    t = (0, a.default)([n.default], () => n.default.getProps().mfaLevel),
                    s = (null == e ? void 0 : e.mfaEnabled) === !0,
                    r = t === i.MFALevels.ELEVATED;
                return {
                    isUserMFAEnabled: s,
                    isModerationMFAEnabled: r
                }
            }
        },
        756717: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            });
            var a = s("884691"),
                n = s("65597"),
                l = s("465869"),
                i = s("697218"),
                r = s("701909"),
                o = s("7331"),
                d = s("616622"),
                u = s("299732"),
                c = s("365721"),
                E = s("782914"),
                _ = s("49111"),
                T = s("782340");

            function I(e) {
                let t;
                let s = (0, o.useIsExpeditedOnboardingGuild)(e),
                    I = null == e ? void 0 : e.hasFeature(_.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL),
                    S = null == e ? void 0 : e.hasFeature(_.GuildFeatures.CREATOR_MONETIZABLE),
                    N = (0, n.default)([i.default], () => {
                        let t = i.default.getCurrentUser();
                        return (null == e ? void 0 : e.isOwner(t)) === !0
                    }),
                    {
                        error: f,
                        loading: g,
                        createEnableRequest: A,
                        submittedRequest: L
                    } = (0, d.default)(null == e ? void 0 : e.id),
                    {
                        loading: m,
                        error: C,
                        refresh: O,
                        eligibility: h
                    } = (0, u.default)(null == e ? void 0 : e.id),
                    {
                        isApplicationRejected: R,
                        requestCooldownDuration: D
                    } = (0, c.default)(h),
                    M = (null == e ? void 0 : e.hasFeature(_.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED)) === !0 || (null == e ? void 0 : e.hasFeature(_.GuildFeatures.CREATOR_MONETIZABLE_DISABLED)) === !0,
                    {
                        isMonetizationReapplicationDisabled: G
                    } = (0, l.useIsMonetizationReapplicationDisabled)(null == e ? void 0 : e.id),
                    x = L || (null == h ? void 0 : h.isApplicationPending) === !0,
                    p = (null == h ? void 0 : h.canApply) === !0,
                    U = T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUIREMENTS_DESCRIPTION.format({
                        faqUrl: r.default.getArticleURL(_.HelpdeskArticles.CREATOR_FAQ)
                    });
                R && G ? t = !0 === I ? T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_HIGH_HARM.format({
                    communityGuidelineUrl: _.MarketingURLs.GUIDELINES
                }) : T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_HIGH_HARM_ALT.format({
                    communityGuidelineUrl: _.MarketingURLs.GUIDELINES
                }) : R && null != D && (t = T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_V2.format({
                    requestCooldownDuration: D,
                    creatorRevenuePolicyUrl: r.default.getArticleURL(_.HelpdeskArticles.CREATOR_POLICY)
                }));
                let v = s && N && !1 === S,
                    j = s && !1 === I,
                    P = (0, E.getCreatorMonetizationAcceptTermsCheckboxText)(),
                    y = R && p && N ? T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_RESUBMIT_V2.format() : void 0;
                return a.useEffect(() => {
                    v && O()
                }, [O, v]), {
                    resubmittingEnableRequest: g,
                    resubmissionError: f,
                    isGuildOwner: N,
                    createEnableRequest: A,
                    resubmittedRequest: L,
                    eligibilityLoading: m,
                    eligibilityError: C,
                    refreshEligibility: O,
                    eligibility: h,
                    eligibleForMonetization: p,
                    isApplicationPending: x,
                    hasPreviousApplicationRejection: R,
                    requestRejectedNoticeText: t,
                    reapplyNoticeText: y,
                    showAcceptTermsFlow: j,
                    wasRejectedInV1: j && (M || R),
                    requirementsFinePrintText: U,
                    acceptTermsCheckboxText: P
                }
            }
        },
        147314: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                showNewTerms: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("551042");

            function l(e) {
                let {
                    demonetized: t = !1
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                (0, n.openModalLazy)(async () => {
                    let {
                        default: n
                    } = await s.el("997510").then(s.bind(s, "997510"));
                    return s => (0, a.jsx)(n, {
                        guildId: e,
                        demonetized: t,
                        ...s
                    })
                }, {
                    onCloseRequest: () => {}
                })
            }
        },
        616622: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            }), s("222007");
            var a = s("884691"),
                n = s("599417"),
                l = s("197509");

            function i(e) {
                let [t, s] = a.useState(), [i, r] = a.useState(!1), [o, d] = a.useState(!1), u = a.useCallback(async () => {
                    if (null != e) {
                        r(!0), s(void 0), d(!1);
                        try {
                            await l.createCreatorMonetizationEnableRequest(e), d(!0)
                        } catch (e) {
                            s(new n.default(e))
                        } finally {
                            r(!1)
                        }
                    }
                }, [e]);
                return {
                    error: t,
                    loading: i,
                    createEnableRequest: u,
                    submittedRequest: o
                }
            }
        },
        670618: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            }), s("222007");
            var a = s("884691"),
                n = s("446674"),
                l = s("599417"),
                i = s("305961"),
                r = s("697218"),
                o = s("197509"),
                d = s("7331");

            function u(e, t) {
                let s = (0, n.useStateFromStores)([i.default], () => i.default.getGuild(e)),
                    [u, c] = a.useState(),
                    [E, _] = a.useState(!1),
                    T = (0, d.useIsExpeditedOnboardingGuild)(s),
                    I = (0, n.useStateFromStores)([r.default], () => {
                        let e = r.default.getCurrentUser();
                        return (null == s ? void 0 : s.isOwner(e)) === !0
                    }, [s]),
                    S = a.useCallback(async () => {
                        if (null != e && (T || null != t)) {
                            _(!0), c(void 0);
                            try {
                                null != t ? await o.acceptCreatorMonetizationTerms(e, t) : await o.acceptCreatorMonetizationTermsV2(e)
                            } catch (e) {
                                c(new l.default(e))
                            } finally {
                                _(!1)
                            }
                        }
                    }, [e, t, T]);
                return {
                    canSubmitAcceptance: I,
                    error: u,
                    loading: E,
                    submitAcceptTermsRequest: S
                }
            }
        },
        299732: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            }), s("222007");
            var a = s("884691"),
                n = s("599417"),
                l = s("197509"),
                i = s("396076");

            function r(e) {
                let [t, s] = a.useState(null != e), [r, o] = a.useState(), [d, u] = a.useState(), c = a.useCallback(async e => {
                    s(!0), o(void 0);
                    try {
                        var t, a, r, d, c;
                        let s = await l.getCreatorMonetizationEligibility(e);
                        u({
                            isEligibleForMonetization: s.sufficient,
                            hasSufficientMembers: s.size,
                            hasEnabled2FA: s.mfa,
                            meetsServerAgeRequirement: s.age,
                            meetsOwnerAgeRequirement: s.owner_age,
                            noRecentViolations: s.safe_environment,
                            weeklyCommunicators: s.engagement_healthy,
                            hasMemberRetention: s.retention_healthy,
                            notNSFW: 0 === Object.keys(s.nsfw_properties).length,
                            canApply: s.can_apply,
                            isApplicationPending: (null === (t = s.latest_request) || void 0 === t ? void 0 : t.state) === i.CreatorMonetizationApplicationState.OPEN,
                            actionRequired: (null === (a = s.latest_request) || void 0 === a ? void 0 : a.state) === i.CreatorMonetizationApplicationState.ACTION_REQUIRED,
                            minimumAgeInDays: s.minimum_age_in_days,
                            minimumOwnerAgeInYears: s.minimum_owner_age_in_years,
                            minimumSize: s.minimum_size,
                            latestRequest: s.latest_request,
                            rejection: s.rejection,
                            guildMemberCount: null === (r = s.health_score) || void 0 === r ? void 0 : r.guild_size,
                            communicatorCount: null === (d = s.health_score) || void 0 === d ? void 0 : d.communicators,
                            retentionScore: null === (c = s.health_score) || void 0 === c ? void 0 : c.perc_ret_w1
                        })
                    } catch (e) {
                        o(new n.default(e))
                    } finally {
                        s(!1)
                    }
                }, []), E = a.useCallback(() => {
                    null != e && c(e)
                }, [e, c]);
                return {
                    error: r,
                    loading: t,
                    eligibility: d,
                    refresh: E
                }
            }
        },
        365721: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("396076"),
                n = s("782340");

            function l(e) {
                var t, s;
                let l = (null == e ? void 0 : null === (t = e.latestRequest) || void 0 === t ? void 0 : t.state) === a.CreatorMonetizationApplicationState.REJECTED,
                    i = function(e) {
                        let t;
                        if (null == e) return;
                        let s = Date.parse(e),
                            a = Date.now();
                        if (isNaN(s) || s < a) return;
                        let l = 1440,
                            i = 7 * l,
                            r = 30 * l,
                            o = Math.round((s - a) / 6e4),
                            d = e => Math.round(o / e);
                        return t = o >= r ? n.default.Messages.DURATION_MONTHS.format({
                            months: d(r)
                        }) : o >= i ? n.default.Messages.DURATION_WEEKS.format({
                            weeks: d(i)
                        }) : o >= l ? n.default.Messages.DURATION_DAYS.format({
                            days: d(l)
                        }) : o >= 60 ? n.default.Messages.DURATION_HOURS.format({
                            hours: d(60)
                        }) : n.default.Messages.DURATION_MINUTES.format({
                            minutes: o
                        })
                    }(null == e ? void 0 : null === (s = e.rejection) || void 0 === s ? void 0 : s.can_reapply_at);
                return {
                    isApplicationRejected: l,
                    requestCooldownDuration: i
                }
            }
        },
        804578: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                trackGuildSettingsDiscoveryViewed: function() {
                    return o
                }
            }), s("424973");
            var a, n, l = s("599110"),
                i = s("75766"),
                r = s("49111");

            function o(e) {
                let t = i.default.getDiscoveryChecklist(e),
                    s = [];
                if (!(null == t ? void 0 : t.sufficient)) {
                    var a;
                    !(null == t ? void 0 : t.safeEnvironment) && s.push("TNS"), (!(null == t ? void 0 : t.healthy) || (null == t ? void 0 : t.healthScorePending)) && s.push("HEALTH"), !(null == t ? void 0 : t.size) && s.push("MEMBER_COUNT"), Object.keys(null !== (a = null == t ? void 0 : t.nsfwProperties) && void 0 !== a ? a : {}).length > 0 && s.push("BAD_WORDS"), !(null == t ? void 0 : t.protected) && s.push("2FA")
                }
                l.default.track(r.AnalyticEvents.GUILD_SETTINGS_DISCOVERY_VIEWED, {
                    guild_id: e,
                    failed_reasons: s
                })
            }(n = a || (a = {})).SAFE_ENVIRONMENT = "TNS", n.HEALTHY = "HEALTH", n.SIZE = "MEMBER_COUNT", n.NSFW = "BAD_WORDS", n.PROTECTED = "2FA"
        },
        271889: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                fetchDiscoveryChecklist: function() {
                    return i
                }
            });
            var a = s("872717"),
                n = s("913144"),
                l = s("49111");
            async function i(e) {
                n.default.dispatch({
                    type: "DISCOVER_CHECKLIST_FETCH_START",
                    guildId: e
                });
                try {
                    let t = await a.default.get({
                        url: l.Endpoints.GUILD_DISCOVERY_REQUIREMENTS(e),
                        oldFormErrors: !0
                    });
                    n.default.dispatch({
                        type: "DISCOVER_CHECKLIST_FETCH_SUCCESS",
                        guildId: e,
                        checklist: t.body
                    })
                } catch (t) {
                    n.default.dispatch({
                        type: "DISCOVER_CHECKLIST_FETCH_FAILURE",
                        guildId: e
                    })
                }
            }
        },
        758276: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                DiscoverySettingsViews: function() {
                    return n
                },
                getSettingsView: function() {
                    return u
                },
                trackDiscoverySettingsChange: function() {
                    return c
                },
                getSuggestedTags: function() {
                    return E
                }
            }), s("222007"), s("884691"), s("446674"), s("305961");
            var a, n, l, i, r = s("599110");
            s("271889"), s("75766");
            var o = s("447621"),
                d = s("49111");

            function u(e, t) {
                let s = e.hasFeature(d.GuildFeatures.VERIFIED),
                    a = e.hasFeature(d.GuildFeatures.DISCOVERABLE),
                    n = e.hasFeature(d.GuildFeatures.ENABLED_DISCOVERABLE_BEFORE);
                if (s) return "settings";
                if (!a && !n) return "intro";
                if (null == t) return "settings";
                let l = t.sufficientWithoutGracePeriod && null != t.gracePeriodEndDate && t.gracePeriodEndDate > new Date;
                return t.sufficient || l || !a ? t.sufficient || l ? "settings" : "intro" : "disqualified"
            }

            function c(e, t) {
                let s = !1,
                    a = {
                        guild_id: e.id,
                        automatic: !1
                    };
                (null == t || e.discoverySplash !== t.discoverySplash) && (a.discovery_splash_edit_type = null == e.discoverySplash ? "removed" : "uploaded", s = !0), (null == t || e.features.has(d.GuildFeatures.DISCOVERABLE) !== t.features.has(d.GuildFeatures.DISCOVERABLE)) && (a.is_discoverable = e.features.has(d.GuildFeatures.DISCOVERABLE), s = !0), (null == t || e.rulesChannelId !== t.rulesChannelId) && (a.rules_channel_id = e.rulesChannelId, s = !0), s && r.default.track(d.AnalyticEvents.GUILD_SETTINGS_DISCOVERY_UPDATED, a)
            }

            function E(e) {
                var t, s;
                return null !== (s = null === (t = o.SUGGESTED_TAGS_FOR_CATEGORIES[e]) || void 0 === t ? void 0 : t.map(e => e())) && void 0 !== s ? s : []
            }(l = a || (a = {})).UPLOADED = "uploaded", l.REMOVED = "removed", (i = n || (n = {})).INTRO = "intro", i.DISQUALIFIED = "disqualified", i.SETTINGS = "settings"
        },
        501208: function(e, t, s) {
            "use strict";

            function a(e) {
                return {
                    id: e.id,
                    name: e.name,
                    description: e.description,
                    splash: e.splash,
                    banner: e.banner,
                    icon: e.icon,
                    features: new Set(e.features),
                    presenceCount: e.approximate_presence_count,
                    memberCount: e.approximate_member_count,
                    premiumSubscriptionCount: e.premium_subscription_count,
                    preferredLocale: e.preferred_locale,
                    discoverySplash: e.discovery_splash,
                    emojis: e.emojis
                }
            }
            s.r(t), s.d(t, {
                default: function() {
                    return a
                }
            }), s("222007")
        },
        132664: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                fetchDiscoverableGuilds: function() {
                    return r
                }
            });
            var a = s("522632"),
                n = s("872717"),
                l = s("913144");
            s("794818"), s("804578");
            var i = s("49111");
            async function r(e) {
                l.default.dispatch({
                    type: "DISCOVER_GUILDS_FETCH_START",
                    guildIds: e
                });
                try {
                    let t = await n.default.get({
                            url: i.Endpoints.GUILD_DISCOVERY,
                            query: a.stringify({
                                guild_ids: e
                            }),
                            oldFormErrors: !0
                        }),
                        {
                            guilds: s
                        } = t.body;
                    l.default.dispatch({
                        type: "DISCOVER_GUILDS_FETCH_SUCCESS",
                        guilds: s
                    })
                } catch (e) {
                    l.default.dispatch({
                        type: "DISCOVER_GUILDS_FETCH_FAILURE"
                    })
                }
            }
        },
        213307: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            });
            var a = s("917351"),
                n = s.n(a),
                l = s("446674"),
                i = s("913144"),
                r = s("271938"),
                o = s("449008"),
                d = s("501208");
            let u = {},
                c = 0;
            class E extends l.default.Store {
                initialize() {
                    this.waitFor(r.default)
                }
                isFetching() {
                    return c > 0
                }
                getGuild(e) {
                    return u[e]
                }
                getGuilds(e) {
                    return e.map(e => u[e]).filter(o.isNotNullish)
                }
            }
            E.displayName = "DiscoverGuildsStore";
            var _ = new E(i.default, {
                DISCOVER_GUILDS_FETCH_START: function(e) {
                    c += 1
                },
                DISCOVER_GUILDS_FETCH_SUCCESS: function(e) {
                    let {
                        guilds: t
                    } = e;
                    c -= 1;
                    let s = n.map(t, d.default);
                    s.forEach(e => u[e.id] = e)
                },
                DISCOVER_GUILDS_FETCH_FAILURE: function(e) {
                    c -= 1
                }
            })
        },
        324105: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return A
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("819855"),
                o = s("77078"),
                d = s("841098"),
                u = s("407063"),
                c = s("580357"),
                E = s("587974"),
                _ = s("315102"),
                T = s("159885"),
                I = s("782340"),
                S = s("583810"),
                N = s("68422"),
                f = s("578817");
            let g = [16, 16, 14, 14, 12, 10, 8];
            var A = function(e) {
                var t, s;
                let {
                    guild: l,
                    disabled: A,
                    small: L,
                    loading: m = !1,
                    description: C,
                    memberCount: O,
                    presenceCount: h,
                    className: R
                } = e, D = (0, d.default)(), [M, G] = n.useState(!1);
                if (null == l || m) return (0, a.jsx)("div", {
                    className: i(R, S.card, S.cardPlaceholder, {
                        [S.cardSmall]: L,
                        [S.cardDisabled]: A
                    })
                });
                let {
                    name: x
                } = l, p = null != l.discoverySplash && /^data:/.test(l.discoverySplash) ? l.discoverySplash : _.default.getGuildDiscoverySplashURL({
                    id: l.id,
                    splash: l.discoverySplash,
                    size: 240 * (0, u.getDevicePixelRatio)()
                }), U = (0, r.isThemeDark)(D) ? N : f, v = null !== (t = _.default.getGuildIconURL({
                    id: l.id,
                    icon: l.icon,
                    size: 40
                })) && void 0 !== t ? t : void 0, j = null != l.description ? l.description : C, P = null != O ? O : null == l ? void 0 : l.memberCount, y = null != h ? h : null == l ? void 0 : l.presenceCount, b = null;
                if (null != v) b = (0, a.jsx)("img", {
                    src: v,
                    alt: "",
                    className: S.avatar
                });
                else {
                    let e = (0, T.getAcronym)(l.name);
                    b = (0, a.jsx)("div", {
                        className: S.defaultIcon,
                        children: (0, a.jsx)(o.Text, {
                            className: S.acronym,
                            style: {
                                fontSize: null !== (s = g[e.length]) && void 0 !== s ? s : g[g.length - 1]
                            },
                            variant: "text-sm/normal",
                            children: e
                        })
                    })
                }
                return (0, a.jsxs)("div", {
                    className: i(R, S.card, {
                        [S.cardSmall]: L,
                        [S.cardDisabled]: A,
                        [S.splashLoaded]: M
                    }),
                    children: [(0, a.jsxs)("div", {
                        className: S.cardHeader,
                        children: [(0, a.jsx)("div", {
                            className: S.splash,
                            children: (0, a.jsx)("img", {
                                src: null != p ? p : U,
                                alt: "",
                                className: S.splashImage,
                                onLoad: () => G(!0)
                            })
                        }), (0, a.jsx)("div", {
                            className: S.guildIcon,
                            children: (0, a.jsx)(E.default, {
                                mask: E.default.Masks.SQUIRCLE,
                                width: 48,
                                height: 48,
                                children: (0, a.jsx)("div", {
                                    className: S.iconMask,
                                    children: (0, a.jsx)(E.default, {
                                        mask: E.default.Masks.SQUIRCLE,
                                        width: 40,
                                        height: 40,
                                        children: null != b ? b : null
                                    })
                                })
                            })
                        })]
                    }), (0, a.jsxs)("div", {
                        className: S.guildInfo,
                        children: [(0, a.jsxs)("div", {
                            className: S.title,
                            children: [(0, a.jsx)(c.default, {
                                className: S.verifiedIcon,
                                guild: l,
                                tooltipColor: o.Tooltip.Colors.PRIMARY
                            }), (0, a.jsx)(o.Text, {
                                className: S.guildName,
                                variant: "text-md/normal",
                                children: (0, a.jsx)("span", {
                                    children: x
                                })
                            })]
                        }), (0, a.jsx)(o.Text, {
                            className: S.description,
                            variant: "text-sm/normal",
                            children: (0, a.jsx)("span", {
                                children: j
                            })
                        }), (0, a.jsxs)("div", {
                            className: S.memberInfo,
                            children: [null != y && (0, a.jsxs)("div", {
                                className: S.memberCount,
                                children: [(0, a.jsx)("div", {
                                    className: S.dotOnline
                                }), (0, a.jsx)(o.Text, {
                                    variant: "text-xs/normal",
                                    children: L ? I.default.Messages.NUMBERS_ONLY.format({
                                        count: y
                                    }) : I.default.Messages.INSTANT_INVITE_GUILD_MEMBERS_ONLINE.format({
                                        membersOnline: y
                                    })
                                })]
                            }), null != P && (0, a.jsxs)("div", {
                                className: S.memberCount,
                                children: [(0, a.jsx)("div", {
                                    className: S.dotOffline
                                }), (0, a.jsx)(o.Text, {
                                    variant: "text-xs/normal",
                                    children: L ? I.default.Messages.NUMBERS_ONLY.format({
                                        count: P
                                    }) : I.default.Messages.INSTANT_INVITE_GUILD_MEMBERS_TOTAL.format({
                                        count: P
                                    })
                                })]
                            })]
                        })]
                    })]
                })
            }
        },
        149632: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                DiscoverySetupModalSteps: function() {
                    return n
                },
                trackFlowAnalytics: function() {
                    return d
                },
                navigateToAndTrackHelpCenterClick: function() {
                    return u
                }
            });
            var a, n, l = s("716241"),
                i = s("599110"),
                r = s("701909"),
                o = s("49111");
            (a = n || (n = {})).DESCRIPTION = "description", a.CATEGORIES = "categories", a.TAGS = "tags", a.AGREE_TO_RULES = "agree_to_rules";
            let d = (e, t, s) => {
                    i.default.track(o.AnalyticEvents.USER_FLOW_TRANSITION, {
                        flow_type: o.AnalyticsSections.DISCOVERY_SETUP_MODAL,
                        from_step: e,
                        to_step: t,
                        ...(0, l.collectGuildAnalyticsMetadata)(s)
                    })
                },
                u = e => {
                    let {
                        articleId: t,
                        guildId: s,
                        modalStep: a = null,
                        pageView: n = null
                    } = e;
                    open(r.default.getArticleURL(t)), i.default.track(o.AnalyticEvents.DISCOVERY_SETUP_CTA_CLICKED, {
                        cta_name: o.HELP_CENTER_CTA_ANALYTICS_NAME,
                        discovery_settings_view: n,
                        help_center_article_id: t,
                        modal_step: a,
                        ...(0, l.collectGuildAnalyticsMetadata)(s)
                    })
                }
        },
        169722: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                uploadEmojiFile: function() {
                    return S
                }
            });
            var a = s("404118"),
                n = s("150021"),
                l = s("8731"),
                i = s("166382"),
                r = s("599110"),
                o = s("402671"),
                d = s("103603"),
                u = s("958706"),
                c = s("49111"),
                E = s("782340"),
                _ = s("446825").Buffer;
            let T = (e, t, s, a) => (r.default.track(c.AnalyticEvents.EMOJI_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED, {
                    guild_id: s,
                    file_size: t,
                    upload_id: a
                }), i.ImageInputUploadErrors.TOO_BIG),
                I = (e, t, s) => {
                    r.default.track(c.AnalyticEvents.EMOJI_FILE_RESIZED, {
                        is_animated: !1,
                        file_type: e.type.split("/").pop(),
                        original_file_size_bytes: e.size,
                        resized_file_size_bytes: (0, d.dataUriFileSize)(t),
                        resized_file_too_big: s
                    })
                },
                S = async e => {
                    let {
                        data: t,
                        file: s,
                        guildId: d,
                        uploadId: S,
                        roles: N,
                        image: f,
                        hideErrorModal: g
                    } = e, A = o.default.sanitizeEmojiName(s.name.split(".")[0]), L = o.default.isFileTooBig(s);
                    if (L) {
                        if ("image/gif" === s.type) return T(s.name, s.size, d, S);
                        if (null != f) {
                            let e;
                            t = (0, l.downsizeImage)(f, 128, 128);
                            try {
                                e = o.default.isDataTooBig(t)
                            } catch (e) {
                                return T(s.name, s.size, d, S)
                            }
                            if (I(s, t, e), e) return T(s.name, s.size, d, S)
                        }
                    }
                    try {
                        await (0, n.uploadEmoji)({
                            guildId: d,
                            image: t,
                            name: A,
                            roles: N
                        }), r.default.track(c.AnalyticEvents.EMOJI_UPLOAD_COMPLETED, {
                            guild_id: d,
                            upload_id: S
                        })
                    } catch (o) {
                        let e, s, {
                            body: n,
                            status: l
                        } = o;
                        return null != n && (n.code === c.AbortCodes.TOO_MANY_EMOJI ? (e = E.default.Messages.TOO_MANY_EMOJI, s = i.ImageInputUploadErrors.TOO_MANY_EMOJI) : n.code === c.AbortCodes.TOO_MANY_ANIMATED_EMOJI ? (e = E.default.Messages.TOO_MANY_ANIMATED_EMOJI, s = i.ImageInputUploadErrors.TOO_MANY_ANIMATED_EMOJI) : null != n.image || n.code === c.AbortCodes.INVALID_FILE_ASSET_SIZE ? (r.default.track(c.AnalyticEvents.EMOJI_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED, {
                            guild_id: d,
                            file_size: _.byteLength(t),
                            upload_id: S
                        }), e = E.default.Messages.EMOJI_TOO_BIG.format({
                            maxSize: u.EMOJI_MAX_FILESIZE_KB
                        }), s = i.ImageInputUploadErrors.TOO_BIG) : (null != n.image || n.code === c.AbortCodes.INVALID_FILE_ASSET_SIZE_RESIZE_GIF) && (s = i.ImageInputUploadErrors.RESIZE_GIF)), 429 === l && (e = E.default.Messages.RATE_LIMITED, s = i.ImageInputUploadErrors.RATE_LIMIT), null != e && !g && a.default.show({
                            title: E.default.Messages.GENERIC_ERROR_TITLE,
                            body: e
                        }), s
                    }
                }
        },
        740822: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("449918"),
                l = s("956089"),
                i = s("49111"),
                r = s("782340");

            function o(e) {
                let {
                    className: t,
                    color: s = (0, n.getColor)(i.Color.BRAND_500),
                    ...o
                } = e;
                return (0, a.jsx)(l.TextBadge, {
                    ...o,
                    text: r.default.Messages.ALPHA,
                    color: s,
                    className: t
                })
            }
        },
        311340: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                trackReportRaidViewed: function() {
                    return E
                },
                setGuildRaidAlerts: function() {
                    return _
                },
                setGuildIncidentActions: function() {
                    return T
                },
                handleResolveRaid: function() {
                    return I
                },
                handleReportRaid: function() {
                    return S
                }
            }), s("222007");
            var a = s("866227"),
                n = s.n(a),
                l = s("872717"),
                i = s("716241"),
                r = s("592407"),
                o = s("305961"),
                d = s("599110"),
                u = s("610174"),
                c = s("49111");

            function E(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                0 !== t.length && d.default.track(c.AnalyticEvents.GUILD_RAID_REPORTED, {
                    ...(0, i.collectGuildAnalyticsMetadata)(e),
                    guild_id: e,
                    raid_types: t
                })
            }
            async function _(e, t) {
                let s = new Set(e.features);
                s.has(c.GuildFeatures.COMMUNITY) ? t ? s.delete(c.GuildFeatures.RAID_ALERTS_DISABLED) : s.add(c.GuildFeatures.RAID_ALERTS_DISABLED) : t ? s.add(c.GuildFeatures.NON_COMMUNITY_RAID_ALERTS) : s.delete(c.GuildFeatures.NON_COMMUNITY_RAID_ALERTS), await r.default.saveGuild(e.id, {
                    features: s
                }, {
                    throwErr: !0
                })
            }
            async function T(e, t, s, a) {
                let i = n().add(a, "hours").toISOString(),
                    r = await l.default.put({
                        url: c.Endpoints.GUILD_INCIDENT_ACTIONS(e),
                        body: {
                            invites_disabled_until: t ? i : null,
                            dms_disabled_until: s ? i : null
                        }
                    });
                return r
            }
            async function I(e, t, s) {
                let {
                    showAlertMode: a
                } = (0, u.getGuildAlertModeEnabled)(e), n = o.default.getGuild(e), i = null == n ? void 0 : n.getSafetyAlertsChannelId();
                if (!a || null == i) return null;
                let r = await l.default.post({
                    url: c.Endpoints.GUILD_INCIDENT_REPORT_FALSE_ALARM(e),
                    body: {
                        alert_message_id: t,
                        reason: s
                    }
                });
                return r
            }
            async function S(e) {
                let {
                    showAlertMode: t
                } = (0, u.getGuildAlertModeEnabled)(e), s = o.default.getGuild(e), a = null == s ? void 0 : s.getSafetyAlertsChannelId();
                if (!t || null == a) return null;
                let n = await l.default.post({
                    url: c.Endpoints.GUILD_INCIDENT_REPORT_RAID(e)
                });
                return n
            }
        },
        413266: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                openReportRaidModal: function() {
                    return l
                },
                openSafetyChannelSetupModal: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078");

            function l(e) {
                (0, n.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await s.el("423588").then(s.bind(s, "423588"));
                    return s => (0, a.jsx)(t, {
                        ...s,
                        guildId: e
                    })
                })
            }

            function i(e) {
                (0, n.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await s.el("982537").then(s.bind(s, "982537"));
                    return s => (0, a.jsx)(t, {
                        ...s,
                        guildId: e
                    })
                })
            }
        },
        701203: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useCanReportRaid: function() {
                    return c
                },
                useCanEnableRaidAlerts: function() {
                    return E
                }
            });
            var a = s("884691"),
                n = s("446674");
            s("926809");
            var l = s("957255"),
                i = s("610174"),
                r = s("413476"),
                o = s("311161"),
                d = s("54346"),
                u = s("49111");

            function c(e) {
                var t;
                let s = null !== (t = null == e ? void 0 : e.id) && void 0 !== t ? t : "",
                    {
                        enableRaidReporting: i
                    } = r.ReportRaidExperiment.useExperiment({
                        guildId: s,
                        location: "4467c7_1"
                    }, {
                        autoTrackExposure: !1
                    }),
                    c = (0, n.useStateFromStores)([l.default], () => (function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l.default;
                        return t.can(u.Permissions.BAN_MEMBERS, e) || t.can(u.Permissions.KICK_MEMBERS, e) || t.can(u.Permissions.MANAGE_GUILD, e)
                    })(e, l.default), [e]),
                    E = (0, n.useStateFromStores)([d.default], () => null != e ? d.default.getGuildIncident(e.id) : null, [e]),
                    _ = null != E && (0, o.hasDetectedActivity)(E);
                return a.useEffect(() => {
                    !_ && c && r.ReportRaidExperiment.trackExposure({
                        guildId: s,
                        location: "4467c7_2"
                    })
                }, [_, c, s]), !_ && c && i
            }

            function E(e) {
                var t;
                let s = null !== (t = null == e ? void 0 : e.id) && void 0 !== t ? t : "",
                    a = (0, n.useStateFromStores)([l.default], () => (function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l.default;
                        return t.can(u.Permissions.MANAGE_GUILD, e)
                    })(e, l.default), [e]),
                    {
                        enableRaidAlerts: o
                    } = r.RaidAlertExperiment.useExperiment({
                        guildId: s,
                        location: "4467c7_3"
                    }, {
                        autoTrackExposure: a
                    }),
                    {
                        showAlertMode: d
                    } = (0, i.useGuildAlertModeEnabled)(s);
                return a && (o || d)
            }
        },
        309021: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                DEFAULT_FOR_STRINGS_KEY: function() {
                    return C
                },
                GuildChangeStrings: function() {
                    return h
                },
                ChannelChangeStrings: function() {
                    return R
                },
                UserChangeStrings: function() {
                    return D
                },
                RoleChangeStrings: function() {
                    return M
                },
                InviteChangeStrings: function() {
                    return G
                },
                WebhookChangeStrings: function() {
                    return x
                },
                EmojiChangeStrings: function() {
                    return p
                },
                StickerChangeStrings: function() {
                    return U
                },
                IntegrationChangeStrings: function() {
                    return v
                },
                StageInstanceChangeStrings: function() {
                    return j
                },
                GuildScheduledEventChangeStrings: function() {
                    return P
                },
                ThreadChangeStrings: function() {
                    return y
                },
                CommandPermissionChangeStrings: function() {
                    return b
                },
                NotRenderedChanges: function() {
                    return B
                },
                getChangeTitle: function() {
                    return F
                },
                getStringForBanReason: function() {
                    return H
                },
                getStringForPermission: function() {
                    return V
                },
                transformLogs: function() {
                    return k
                }
            }), s("70102"), s("424973");
            var a = s("552442"),
                n = s.n(a),
                l = s("316693"),
                i = s("509043"),
                r = s("798609"),
                o = s("679653"),
                d = s("605250"),
                u = s("385976"),
                c = s("287103"),
                E = s("834052"),
                _ = s("364685"),
                T = s("242020"),
                I = s("42203"),
                S = s("27618"),
                N = s("697218"),
                f = s("354023"),
                g = s("49111"),
                A = s("745049"),
                L = s("782340");
            let m = new d.default("AuditLogUtils"),
                C = -1,
                O = () => ({
                    [g.AuditLogChangeKeys.REASON]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON
                }),
                h = () => ({
                    [g.AuditLogChangeKeys.NAME]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_NAME_CHANGE,
                    [g.AuditLogChangeKeys.DESCRIPTION]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DESCRIPTION_CLEAR, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DESCRIPTION_CHANGE),
                    [g.AuditLogChangeKeys.ICON_HASH]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_ICON_HASH_CHANGE,
                    [g.AuditLogChangeKeys.SPLASH_HASH]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SPLASH_HASH_CHANGE,
                    [g.AuditLogChangeKeys.DISCOVERY_SPLASH_HASH]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DISCOVERY_SPLASH_HASH_CHANGE,
                    [g.AuditLogChangeKeys.BANNER_HASH]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_BANNER_HASH_REMOVE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_BANNER_HASH_CHANGE),
                    [g.AuditLogChangeKeys.OWNER_ID]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_OWNER_ID_CHANGE,
                    [g.AuditLogChangeKeys.REGION]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_REGION_CHANGE,
                    [g.AuditLogChangeKeys.PREFERRED_LOCALE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREFERRED_LOCALE_CHANGE,
                    [g.AuditLogChangeKeys.AFK_CHANNEL_ID]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_CHANNEL_ID_CLEAR, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_CHANNEL_ID_CHANGE),
                    [g.AuditLogChangeKeys.AFK_TIMEOUT]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_TIMEOUT_CHANGE,
                    [g.AuditLogChangeKeys.SYSTEM_CHANNEL_ID]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_ID_DISABLE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_ID_CHANGE),
                    [g.AuditLogChangeKeys.RULES_CHANNEL_ID]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_RULES_CHANNEL_ID_CLEAR, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_RULES_CHANNEL_ID_CHANGE),
                    [g.AuditLogChangeKeys.PUBLIC_UPDATES_CHANNEL_ID]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATES_CHANNEL_ID_CLEAR, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATES_CHANNEL_ID_CHANGE),
                    [g.AuditLogChangeKeys.MFA_LEVEL]: {
                        [g.MFALevels.NONE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_MFA_LEVEL_DISABLED,
                        [g.MFALevels.ELEVATED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_MFA_LEVEL_ENABLED
                    },
                    [g.AuditLogChangeKeys.WIDGET_ENABLED]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_ENABLED,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_DISABLED
                    },
                    [g.AuditLogChangeKeys.WIDGET_CHANNEL_ID]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_CHANNEL_ID_DELETE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_CHANNEL_ID_CHANGE),
                    [g.AuditLogChangeKeys.VERIFICATION_LEVEL]: {
                        [g.VerificationLevels.NONE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_NONE,
                        [g.VerificationLevels.LOW]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_LOW,
                        [g.VerificationLevels.MEDIUM]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_MEDIUM,
                        [g.VerificationLevels.HIGH]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_HIGH,
                        [g.VerificationLevels.VERY_HIGH]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_VERY_HIGH
                    },
                    [g.AuditLogChangeKeys.DEFAULT_MESSAGE_NOTIFICATIONS]: {
                        [g.UserNotificationSettings.ALL_MESSAGES]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DEFAULT_MESSAGE_NOTIFICATIONS_CHANGE_ALL_MESSAGES,
                        [g.UserNotificationSettings.ONLY_MENTIONS]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DEFAULT_MESSAGE_NOTIFICATIONS_CHANGE_ONLY_MENTIONS
                    },
                    [g.AuditLogChangeKeys.VANITY_URL_CODE]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VANITY_URL_CODE_DELETE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VANITY_URL_CODE_CHANGE),
                    [g.AuditLogChangeKeys.EXPLICIT_CONTENT_FILTER]: {
                        [g.GuildExplicitContentFilterTypes.DISABLED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_DISABLE,
                        [g.GuildExplicitContentFilterTypes.MEMBERS_WITHOUT_ROLES]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_MEMBERS_WITHOUT_ROLES,
                        [g.GuildExplicitContentFilterTypes.ALL_MEMBERS]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_ALL_MEMBERS
                    },
                    [g.AuditLogChangeKeys.PREMIUM_PROGRESS_BAR_ENABLED]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREMIUM_PROGRESS_BAR_ENABLED_ENABLED,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREMIUM_PROGRESS_BAR_ENABLED_DISABLED
                    },
                    [g.AuditLogChangeKeys.AUTO_MODERATION_TRIGGERED_RULE_NAME]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_TRIGGERED_RULE_NAME_CHANGE,
                    [g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATIONS]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_JOIN_NOTIFICATIONS,
                    [g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_PREMIUM_SUBSCRIPTIONS]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_PREMIUM_SUBSCRIPTIONS,
                    [g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_REMINDER_NOTIFICATIONS]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_REMINDER_NOTIFICATIONS,
                    [g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATION_REPLIES]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_JOIN_NOTIFICATION_REPLIES,
                    ...O()
                }),
                R = () => ({
                    [g.AuditLogChangeKeys.NAME]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NAME_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NAME_CHANGE),
                    [g.AuditLogChangeKeys.POSITION]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_POSITION_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_POSITION_CHANGE),
                    [g.AuditLogChangeKeys.TOPIC]: Z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CHANGE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CLEAR),
                    [g.AuditLogChangeKeys.BITRATE]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_BITRATE_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_BITRATE_CHANGE),
                    [g.AuditLogChangeKeys.RTC_REGION_OVERRIDE]: Z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_CHANGE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_DELETE),
                    [g.AuditLogChangeKeys.USER_LIMIT]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_USER_LIMIT_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_USER_LIMIT_CHANGE),
                    [g.AuditLogChangeKeys.RATE_LIMIT_PER_USER]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CHANGE),
                    [g.AuditLogChangeKeys.PERMISSIONS_RESET]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_RESET,
                    [g.AuditLogChangeKeys.PERMISSIONS_GRANTED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_GRANTED,
                    [g.AuditLogChangeKeys.PERMISSIONS_DENIED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_DENIED,
                    [g.AuditLogChangeKeys.REASON]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON,
                    [g.AuditLogChangeKeys.NSFW]: {
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NSFW_DISABLED,
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NSFW_ENABLED
                    },
                    [g.AuditLogChangeKeys.TYPE]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TYPE_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TYPE_CHANGE),
                    [g.AuditLogChangeKeys.VIDEO_QUALITY_MODE]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VIDEO_QUALITY_MODE_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VIDEO_QUALITY_MODE_CHANGE),
                    [g.AuditLogChangeKeys.DEFAULT_AUTO_ARCHIVE_DURATION]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DEFAULT_AUTO_ARCHIVE_DURATION_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DEFAULT_AUTO_ARCHIVE_DURATION_CHANGE)
                }),
                D = () => ({
                    [g.AuditLogChangeKeys.NICK]: Z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_CHANGE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_DELETE),
                    [g.AuditLogChangeKeys.DEAF]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DEAF_ON,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DEAF_OFF
                    },
                    [g.AuditLogChangeKeys.MUTE]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MUTE_ON,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MUTE_OFF
                    },
                    [g.AuditLogChangeKeys.ROLES_REMOVE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLES_REMOVE,
                    [g.AuditLogChangeKeys.ROLES_ADD]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLES_ADD,
                    [g.AuditLogChangeKeys.PRUNE_DELETE_DAYS]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_PRUNE_DELETE_DAYS,
                    [g.AuditLogChangeKeys.COMMUNICATION_DISABLED_UNTIL]: Z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL_REMOVED),
                    [g.AuditLogChangeKeys.BYPASSES_VERIFICATION]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BYPASSES_VERIFICATION_ON,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BYPASSES_VERIFICATION_OFF
                    },
                    [g.AuditLogChangeKeys.AUTO_MODERATION_TRIGGERED_RULE_NAME]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_TRIGGERED_RULE_NAME_CHANGE,
                    ...O()
                }),
                M = () => ({
                    [g.AuditLogChangeKeys.NAME]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_NAME_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_NAME_CHANGE),
                    [g.AuditLogChangeKeys.PERMISSIONS_GRANTED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PERMISSIONS_GRANTED,
                    [g.AuditLogChangeKeys.PERMISSIONS_DENIED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PERMISSIONS_DENIED,
                    [g.AuditLogChangeKeys.COLOR]: {
                        "#000000": L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR_NONE,
                        [C]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR_IOS
                    },
                    [g.AuditLogChangeKeys.HOIST]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_HOIST_ON,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_HOIST_OFF
                    },
                    [g.AuditLogChangeKeys.MENTIONABLE]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_MENTIONABLE_ON,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_MENTIONABLE_OFF
                    },
                    [g.AuditLogChangeKeys.ICON_HASH]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_ICON_HASH_CHANGE,
                    [g.AuditLogChangeKeys.UNICODE_EMOJI]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_UNICODE_EMOJI_CHANGE,
                    ...O()
                }),
                G = () => ({
                    [g.AuditLogChangeKeys.CODE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CODE_CREATE,
                    [g.AuditLogChangeKeys.CHANNEL_ID]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CHANNEL_CREATE,
                    [g.AuditLogChangeKeys.MAX_USES]: {
                        0: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_USES_CREATE_INFINITE,
                        [C]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_USES_CREATE
                    },
                    [g.AuditLogChangeKeys.MAX_AGE]: {
                        0: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_AGE_CREATE_INFINITE,
                        [C]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_AGE_CREATE
                    },
                    [g.AuditLogChangeKeys.TEMPORARY]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_TEMPORARY_ON,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_TEMPORARY_OFF
                    },
                    ...O()
                }),
                x = () => ({
                    [g.AuditLogChangeKeys.CHANNEL_ID]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CHANNEL_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CHANNEL_CHANGE),
                    [g.AuditLogChangeKeys.NAME]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_NAME_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_NAME_CHANGE),
                    [g.AuditLogChangeKeys.AVATAR_HASH]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_AVATAR,
                    [g.AuditLogChangeKeys.REASON]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON
                }),
                p = () => ({
                    [g.AuditLogChangeKeys.NAME]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_NAME_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_NAME_CHANGE),
                    ...O()
                }),
                U = () => ({
                    [g.AuditLogChangeKeys.NAME]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_NAME_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_NAME_CHANGE),
                    [g.AuditLogChangeKeys.TAGS]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_TAGS_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_TAGS_CHANGE),
                    [g.AuditLogChangeKeys.DESCRIPTION]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CHANGE),
                    ...O()
                }),
                v = () => ({
                    [g.AuditLogChangeKeys.ENABLE_EMOTICONS]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_ENABLE_EMOTICONS_ON,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_ENABLE_EMOTICONS_OFF
                    },
                    [g.AuditLogChangeKeys.EXPIRE_BEHAVIOR]: {
                        0: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_BEHAVIOR_REMOVE_SYNCED_ROLE,
                        1: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_BEHAVIOR_KICK_FROM_SERVER
                    },
                    [g.AuditLogChangeKeys.EXPIRE_GRACE_PERIOD]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_GRACE_PERIOD,
                    ...O()
                }),
                j = () => ({
                    [g.AuditLogChangeKeys.TOPIC]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CHANGE),
                    [g.AuditLogChangeKeys.PRIVACY_LEVEL]: {
                        [A.GuildScheduledEventPrivacyLevel.GUILD_ONLY]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_GUILD_ONLY,
                        [A.GuildScheduledEventPrivacyLevel.PUBLIC]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_PUBLIC
                    },
                    ...O()
                }),
                P = () => ({
                    [g.AuditLogChangeKeys.NAME]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_NAME_CREATE,
                    [g.AuditLogChangeKeys.DESCRIPTION]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_DESCRIPTION_CREATE,
                    [g.AuditLogChangeKeys.PRIVACY_LEVEL]: {
                        [A.GuildScheduledEventPrivacyLevel.GUILD_ONLY]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_GUILD_ONLY,
                        [A.GuildScheduledEventPrivacyLevel.PUBLIC]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_PUBLIC
                    },
                    [g.AuditLogChangeKeys.STATUS]: {
                        [A.GuildScheduledEventStatus.SCHEDULED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_SCHEDULED,
                        [A.GuildScheduledEventStatus.ACTIVE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_ACTIVE,
                        [A.GuildScheduledEventStatus.COMPLETED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_COMPLETED,
                        [A.GuildScheduledEventStatus.CANCELED]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_CANCELED
                    },
                    [g.AuditLogChangeKeys.ENTITY_TYPE]: {
                        [A.GuildScheduledEventEntityTypes.NONE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_NONE,
                        [A.GuildScheduledEventEntityTypes.STAGE_INSTANCE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_STAGE_INSTANCE,
                        [A.GuildScheduledEventEntityTypes.VOICE]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_VOICE,
                        [A.GuildScheduledEventEntityTypes.EXTERNAL]: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_EXTERNAL
                    },
                    [g.AuditLogChangeKeys.CHANNEL_ID]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CHANNEL_CLEAR, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CHANNEL),
                    [g.AuditLogChangeKeys.LOCATION]: X(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_LOCATION_CLEAR, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_LOCATION),
                    ...O()
                }),
                y = () => ({
                    [g.AuditLogChangeKeys.NAME]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_NAME_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_NAME_CHANGE),
                    [g.AuditLogChangeKeys.ARCHIVED]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_ARCHIVED,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_UNARCHIVED
                    },
                    [g.AuditLogChangeKeys.LOCKED]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_LOCKED,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_UNLOCKED
                    },
                    [g.AuditLogChangeKeys.INVITABLE]: {
                        true: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_INVITABLE_ENABLED,
                        false: L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_INVITABLE_DISABLED
                    },
                    [g.AuditLogChangeKeys.AUTO_ARCHIVE_DURATION]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_AUTO_ARCHIVE_DURATION_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_AUTO_ARCHIVE_DURATION_CHANGE),
                    [g.AuditLogChangeKeys.RATE_LIMIT_PER_USER]: z(L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CREATE, L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CHANGE),
                    ...O()
                }),
                b = e => {
                    let t = {
                        ...O()
                    };
                    return null == e || e.forEach(e => {
                        e.newValue ? e.newValue.permission ? t[e.key] = L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_GRANTED : t[e.key] = L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_DENIED : t[e.key] = L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_REMOVED
                    }), t
                },
                B = {
                    [g.AuditLogTargetTypes.CHANNEL]: {
                        [g.AuditLogChangeKeys.ID]: !0,
                        [g.AuditLogChangeKeys.PERMISSION_OVERWRITES]: !0
                    },
                    [g.AuditLogTargetTypes.CHANNEL_OVERWRITE]: {
                        [g.AuditLogChangeKeys.TYPE]: !0,
                        [g.AuditLogChangeKeys.ID]: !0,
                        [g.AuditLogChangeKeys.PERMISSION_OVERWRITES]: !0
                    },
                    [g.AuditLogTargetTypes.INVITE]: {
                        [g.AuditLogChangeKeys.INVITER_ID]: !0,
                        [g.AuditLogChangeKeys.USES]: !0
                    },
                    [g.AuditLogTargetTypes.WEBHOOK]: {
                        [g.AuditLogChangeKeys.TYPE]: !0,
                        [g.AuditLogChangeKeys.APPLICATION_ID]: !0
                    },
                    [g.AuditLogTargetTypes.INTEGRATION]: {
                        [g.AuditLogChangeKeys.TYPE]: !0
                    },
                    [g.AuditLogTargetTypes.THREAD]: {
                        [g.AuditLogChangeKeys.ID]: !0,
                        [g.AuditLogChangeKeys.TYPE]: !0
                    },
                    [g.AuditLogTargetTypes.STICKER]: {
                        [g.AuditLogChangeKeys.ID]: !0,
                        [g.AuditLogChangeKeys.TYPE]: !0,
                        [g.AuditLogChangeKeys.ASSET]: !0,
                        [g.AuditLogChangeKeys.FORMAT_TYPE]: !0,
                        [g.AuditLogChangeKeys.AVAILABLE]: !0,
                        [g.AuditLogChangeKeys.GUILD_ID]: !0
                    }
                };

            function F(e) {
                switch (e.action) {
                    case g.AuditLogActions.GUILD_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATE;
                    case g.AuditLogActions.CHANNEL_CREATE:
                        let t = null != e.changes ? e.changes.find(e => e.key === g.AuditLogChangeKeys.TYPE) : null;
                        if (null == t) throw Error("[AuditLog] Could not find type change for channel create");
                        switch (t.newValue) {
                            case g.ChannelTypes.GUILD_STAGE_VOICE:
                                return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_STAGE_CREATE;
                            case g.ChannelTypes.GUILD_VOICE:
                                return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VOICE_CREATE;
                            case g.ChannelTypes.GUILD_CATEGORY:
                                return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_CATEGORY_CREATE;
                            default:
                                return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TEXT_CREATE
                        }
                    case g.AuditLogActions.CHANNEL_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_UPDATE;
                    case g.AuditLogActions.CHANNEL_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DELETE;
                    case g.AuditLogActions.CHANNEL_OVERWRITE_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_CREATE;
                    case g.AuditLogActions.CHANNEL_OVERWRITE_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_UPDATE;
                    case g.AuditLogActions.CHANNEL_OVERWRITE_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_DELETE;
                    case g.AuditLogActions.MEMBER_KICK:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_KICK;
                    case g.AuditLogActions.MEMBER_PRUNE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_PRUNE;
                    case g.AuditLogActions.MEMBER_BAN_ADD:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_MEMBER_BAN_ADD;
                    case g.AuditLogActions.MEMBER_BAN_REMOVE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BAN_REMOVE;
                    case g.AuditLogActions.MEMBER_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_UPDATE;
                    case g.AuditLogActions.MEMBER_ROLE_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLE_UPDATE;
                    case g.AuditLogActions.MEMBER_MOVE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MOVE;
                    case g.AuditLogActions.MEMBER_DISCONNECT:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DISCONNECT;
                    case g.AuditLogActions.BOT_ADD:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_BOT_ADD;
                    case g.AuditLogActions.ROLE_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_CREATE;
                    case g.AuditLogActions.ROLE_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_UPDATE;
                    case g.AuditLogActions.ROLE_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_DELETE;
                    case g.AuditLogActions.INVITE_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CREATE;
                    case g.AuditLogActions.INVITE_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_UPDATE;
                    case g.AuditLogActions.INVITE_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_DELETE;
                    case g.AuditLogActions.WEBHOOK_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CREATE;
                    case g.AuditLogActions.WEBHOOK_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_UPDATE;
                    case g.AuditLogActions.WEBHOOK_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_DELETE;
                    case g.AuditLogActions.EMOJI_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_CREATE;
                    case g.AuditLogActions.EMOJI_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_UPDATE;
                    case g.AuditLogActions.EMOJI_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_DELETE;
                    case g.AuditLogActions.STICKER_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_CREATE;
                    case g.AuditLogActions.STICKER_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_UPDATE;
                    case g.AuditLogActions.STICKER_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_DELETE;
                    case g.AuditLogActions.MESSAGE_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_DELETE;
                    case g.AuditLogActions.MESSAGE_BULK_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_BULK_DELETE;
                    case g.AuditLogActions.MESSAGE_PIN:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_PIN;
                    case g.AuditLogActions.MESSAGE_UNPIN:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_UNPIN;
                    case g.AuditLogActions.INTEGRATION_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_CREATE;
                    case g.AuditLogActions.INTEGRATION_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_UPDATE;
                    case g.AuditLogActions.INTEGRATION_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_DELETE;
                    case g.AuditLogActions.STAGE_INSTANCE_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_CREATE;
                    case g.AuditLogActions.STAGE_INSTANCE_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_UPDATE;
                    case g.AuditLogActions.STAGE_INSTANCE_DELETE:
                        if (null != e.userId) return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_DELETE;
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_DELETE_NO_USER;
                    case g.AuditLogActions.GUILD_SCHEDULED_EVENT_CREATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_SCHEDULED_EVENT_CREATE;
                    case g.AuditLogActions.GUILD_SCHEDULED_EVENT_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_SCHEDULED_EVENT_UPDATE;
                    case g.AuditLogActions.GUILD_SCHEDULED_EVENT_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_SCHEDULED_EVENT_DELETE;
                    case g.AuditLogActions.THREAD_CREATE:
                        let s = null != e.changes ? e.changes.find(e => e.key === g.AuditLogChangeKeys.TYPE) : null;
                        if (null == s) throw Error("[AuditLog] Could not find type change for thread create");
                        switch (s.newValue) {
                            case g.ChannelTypes.PRIVATE_THREAD:
                                return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_PRIVATE_THREAD_CREATE;
                            case g.ChannelTypes.ANNOUNCEMENT_THREAD:
                                return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_ANNOUNCEMENT_THREAD_CREATE;
                            default:
                                return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_THREAD_CREATE
                        }
                    case g.AuditLogActions.THREAD_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_THREAD_UPDATE;
                    case g.AuditLogActions.THREAD_DELETE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_THREAD_DELETE;
                    case g.AuditLogActions.APPLICATION_COMMAND_PERMISSION_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_UPDATE;
                    case g.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_BLOCK_MESSAGE;
                    case g.AuditLogActions.AUTO_MODERATION_FLAG_TO_CHANNEL:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_FLAG_TO_CHANNEL_MESSAGE;
                    case g.AuditLogActions.AUTO_MODERATION_USER_COMMUNICATION_DISABLED:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_USER_COMMUNICATION_DISABLED_MESSAGE;
                    case g.AuditLogActions.CREATOR_MONETIZATION_REQUEST_CREATED:
                        return L.default.Messages.CREATOR_MONETIZATION_APPLIED_AUDIT_LOG_TITLE;
                    case g.AuditLogActions.CREATOR_MONETIZATION_TERMS_ACCEPTED:
                        return L.default.Messages.CREATOR_MONETIZATION_TERMS_ACCEPTED_AUDIT_LOG_TITLE;
                    case g.AuditLogActions.CLYDE_AI_PROFILE_UPDATE:
                        return L.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_PROFILE_UPDATE;
                    default:
                        return null
                }
            }

            function H(e) {
                var t;
                let s = null == e ? void 0 : null === (t = e.changes) || void 0 === t ? void 0 : t.find(e => "reason" === e.key);
                if (null != s) return s.newValue
            }

            function V(e, t) {
                switch (e) {
                    case g.Permissions.CREATE_INSTANT_INVITE:
                        return L.default.Messages.CREATE_INSTANT_INVITE;
                    case g.Permissions.KICK_MEMBERS:
                        return L.default.Messages.KICK_MEMBERS;
                    case g.Permissions.BAN_MEMBERS:
                        return L.default.Messages.BAN_MEMBERS;
                    case g.Permissions.ADMINISTRATOR:
                        return L.default.Messages.ADMINISTRATOR;
                    case g.Permissions.MANAGE_CHANNELS:
                        if (t.targetType === g.AuditLogTargetTypes.CHANNEL || t.targetType === g.AuditLogTargetTypes.CHANNEL_OVERWRITE) return L.default.Messages.MANAGE_CHANNEL;
                        return L.default.Messages.MANAGE_CHANNELS;
                    case g.Permissions.MANAGE_GUILD:
                        return L.default.Messages.MANAGE_SERVER;
                    case g.Permissions.VIEW_GUILD_ANALYTICS:
                        return L.default.Messages.VIEW_GUILD_ANALYTICS;
                    case g.Permissions.VIEW_CREATOR_MONETIZATION_ANALYTICS:
                        return L.default.Messages.VIEW_CREATOR_MONETIZATION_ANALYTICS;
                    case g.Permissions.CHANGE_NICKNAME:
                        return L.default.Messages.CHANGE_NICKNAME;
                    case g.Permissions.MANAGE_NICKNAMES:
                        return L.default.Messages.MANAGE_NICKNAMES;
                    case g.Permissions.MANAGE_ROLES:
                        return L.default.Messages.MANAGE_ROLES;
                    case g.Permissions.MANAGE_WEBHOOKS:
                        return L.default.Messages.MANAGE_WEBHOOKS;
                    case g.Permissions.CREATE_GUILD_EXPRESSIONS:
                        return L.default.Messages.CREATE_EXPRESSIONS;
                    case g.Permissions.MANAGE_GUILD_EXPRESSIONS:
                        return L.default.Messages.MANAGE_EXPRESSIONS;
                    case g.Permissions.VIEW_AUDIT_LOG:
                        return L.default.Messages.VIEW_AUDIT_LOG;
                    case g.Permissions.VIEW_CHANNEL:
                        return L.default.Messages.READ_MESSAGES;
                    case g.Permissions.SEND_MESSAGES:
                        return L.default.Messages.SEND_MESSAGES;
                    case g.Permissions.SEND_TTS_MESSAGES:
                        return L.default.Messages.SEND_TTS_MESSAGES;
                    case g.Permissions.USE_APPLICATION_COMMANDS:
                        return L.default.Messages.USE_APPLICATION_COMMANDS;
                    case g.Permissions.MANAGE_MESSAGES:
                        return L.default.Messages.MANAGE_MESSAGES;
                    case g.Permissions.EMBED_LINKS:
                        return L.default.Messages.EMBED_LINKS;
                    case g.Permissions.ATTACH_FILES:
                        return L.default.Messages.ATTACH_FILES;
                    case g.Permissions.READ_MESSAGE_HISTORY:
                        return L.default.Messages.READ_MESSAGE_HISTORY;
                    case g.Permissions.MENTION_EVERYONE:
                        return L.default.Messages.MENTION_EVERYONE;
                    case g.Permissions.USE_EXTERNAL_EMOJIS:
                        return L.default.Messages.USE_EXTERNAL_EMOJIS;
                    case g.Permissions.USE_EXTERNAL_STICKERS:
                        return L.default.Messages.USE_EXTERNAL_STICKERS;
                    case g.Permissions.ADD_REACTIONS:
                        return L.default.Messages.ADD_REACTIONS;
                    case g.Permissions.CONNECT:
                        return L.default.Messages.CONNECT;
                    case g.Permissions.SPEAK:
                        return L.default.Messages.SPEAK;
                    case g.Permissions.MUTE_MEMBERS:
                        return L.default.Messages.MUTE_MEMBERS;
                    case g.Permissions.DEAFEN_MEMBERS:
                        return L.default.Messages.DEAFEN_MEMBERS;
                    case g.Permissions.MOVE_MEMBERS:
                        return L.default.Messages.MOVE_MEMBERS;
                    case g.Permissions.USE_VAD:
                        return L.default.Messages.USE_VAD;
                    case g.Permissions.PRIORITY_SPEAKER:
                        return L.default.Messages.PRIORITY_SPEAKER;
                    case g.Permissions.STREAM:
                        return L.default.Messages.VIDEO;
                    case g.Permissions.REQUEST_TO_SPEAK:
                        return L.default.Messages.REQUEST_TO_SPEAK;
                    case g.Permissions.CREATE_EVENTS:
                        return L.default.Messages.CREATE_EVENTS;
                    case g.Permissions.MANAGE_EVENTS:
                        return L.default.Messages.MANAGE_EVENTS;
                    case g.Permissions.CREATE_PUBLIC_THREADS:
                        return L.default.Messages.CREATE_PUBLIC_THREADS;
                    case g.Permissions.CREATE_PRIVATE_THREADS:
                        return L.default.Messages.CREATE_PRIVATE_THREADS;
                    case g.Permissions.SEND_MESSAGES_IN_THREADS:
                        return L.default.Messages.SEND_MESSAGES_IN_THREADS;
                    case g.Permissions.MANAGE_THREADS:
                        return L.default.Messages.MANAGE_THREADS;
                    case g.Permissions.MODERATE_MEMBERS:
                        return L.default.Messages.MODERATE_MEMBER;
                    case g.Permissions.SET_VOICE_CHANNEL_STATUS:
                        return L.default.Messages.VOICE_CHANNEL_STATUS_PERMISSION_TITLE
                }
                return null
            }

            function k(e, t) {
                if (null == t) return [];
                let s = [];
                return e.forEach(e => {
                    let a = function(e, t) {
                            switch (e.targetType) {
                                case g.AuditLogTargetTypes.GUILD:
                                    return t;
                                case g.AuditLogTargetTypes.CHANNEL:
                                case g.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                                    return K(e, g.AuditLogChangeKeys.NAME, e => I.default.getChannel(e), e => (0, o.computeChannelName)(e, N.default, S.default, !0));
                                case g.AuditLogTargetTypes.USER:
                                    return K(e, g.AuditLogChangeKeys.NICK, e => N.default.getUser(e), void 0);
                                case g.AuditLogTargetTypes.ROLE:
                                    return K(e, g.AuditLogChangeKeys.NAME, e => t.getRole(e), e => e.name);
                                case g.AuditLogTargetTypes.INVITE:
                                    return K(e, g.AuditLogChangeKeys.CODE, g.NOOP_NULL);
                                case g.AuditLogTargetTypes.INTEGRATION:
                                    return K(e, g.AuditLogChangeKeys.TYPE, e => c.default.integrations.find(t => t.id === e), e => e.name);
                                case g.AuditLogTargetTypes.WEBHOOK:
                                    return K(e, g.AuditLogChangeKeys.NAME, e => c.default.webhooks.find(t => t.id === e), e => e.name);
                                case g.AuditLogTargetTypes.EMOJI:
                                    return K(e, g.AuditLogChangeKeys.NAME, e => u.default.getGuildEmoji(t.id).find(t => t.id === e), e => e.name);
                                case g.AuditLogTargetTypes.STICKER:
                                    return K(e, g.AuditLogChangeKeys.NAME, e => _.default.getStickerById(e), e => e.name);
                                case g.AuditLogTargetTypes.STAGE_INSTANCE:
                                    return K(e, g.AuditLogChangeKeys.TOPIC, e => {
                                        var s;
                                        return null === (s = Object.values(E.default.getStageInstancesByGuild(t.id))) || void 0 === s ? void 0 : s.find(t => t.id === e)
                                    }, e => e.topic);
                                case g.AuditLogTargetTypes.GUILD_SCHEDULED_EVENT:
                                    return K(e, g.AuditLogChangeKeys.NAME, e => c.default.guildScheduledEvents.find(t => t.id === e), e => e.name);
                                case g.AuditLogTargetTypes.THREAD:
                                    return K(e, g.AuditLogChangeKeys.NAME, e => c.default.threads.find(t => t.id === e), e => e.name);
                                case g.AuditLogTargetTypes.APPLICATION_COMMAND:
                                    if (e.targetId === e.options.application_id) {
                                        let t = c.default.integrations.find(t => t.application_id === e.targetId);
                                        if (null != t) return t.name;
                                        return e.targetId
                                    }
                                    return K(e, g.AuditLogChangeKeys.NAME, e => c.default.applicationCommands.find(t => t.id === e), e => {
                                        let t = null != e.name_localized && "" !== e.name_localized ? e.name_localized : e.name;
                                        return e.type === r.ApplicationCommandType.CHAT ? "/⁠".concat(t) : t
                                    });
                                default:
                                    return m.warn("Unknown targetType for log", e), null
                            }
                        }(e, t),
                        l = N.default.getUser(e.userId);
                    if (null != l && (null != a || e.action === g.AuditLogActions.MEMBER_PRUNE || e.action === g.AuditLogActions.MEMBER_DISCONNECT || e.action === g.AuditLogActions.MEMBER_MOVE || e.action === g.AuditLogActions.CREATOR_MONETIZATION_REQUEST_CREATED || e.action === g.AuditLogActions.CREATOR_MONETIZATION_TERMS_ACCEPTED)) {
                        if (null != (e = (e = (e = e.set("user", l)).set("target", a)).set("options", function(e) {
                                if (null != e.options) {
                                    let a = {
                                        ...e.options
                                    };
                                    switch (e.options.type) {
                                        case g.AuditLogSubtargetTypes.USER:
                                            var t, s;
                                            (null === (t = e.options) || void 0 === t ? void 0 : t.id) != null && (a.subtarget = W(null == e ? void 0 : null === (s = e.options) || void 0 === s ? void 0 : s.id, e => N.default.getUser(e), e => e.tag));
                                            break;
                                        case g.AuditLogSubtargetTypes.ROLE:
                                            null != e.options.role_name && (a.subtarget = W(e.options.role_name, g.NOOP_NULL))
                                    }
                                    return null != e.options.channel_id && (a.channel = K(e, "", e => I.default.getChannel(e), void 0, e.options.channel_id)), null != e.options.members_removed && 0 !== e.options.members_removed && (a.count = e.options.members_removed), a
                                }
                                return e.options
                            }(e))).changes) {
                            let s = [];
                            e.changes.forEach(a => {
                                let l = function(e, t, s) {
                                    if (t.action === g.AuditLogActions.APPLICATION_COMMAND_PERMISSION_UPDATE) {
                                        let t = e.newValue || e.oldValue;
                                        switch (t.type) {
                                            case g.ApplicationCommandPermissionTypes.ROLE:
                                                e.subtarget = W(t.id, e => s.getRole(e), e => e.name);
                                                break;
                                            case g.ApplicationCommandPermissionTypes.USER:
                                                e.subtarget = W(t.id, e => N.default.getUser(e), e => e.tag);
                                                break;
                                            case g.ApplicationCommandPermissionTypes.CHANNEL:
                                                t.id === n(s.id).subtract(1).toString() ? e.subtarget = L.default.Messages.ALL_CHANNELS : e.subtarget = W(t.id, e => I.default.getChannel(e), e => (0, o.computeChannelName)(e, N.default, S.default, !0))
                                        }
                                        return e
                                    }
                                    switch (e.key) {
                                        case g.AuditLogChangeKeys.OWNER_ID:
                                            return Y(e, e => N.default.getUser(e));
                                        case g.AuditLogChangeKeys.CHANNEL_ID:
                                        case g.AuditLogChangeKeys.AFK_CHANNEL_ID:
                                        case g.AuditLogChangeKeys.SYSTEM_CHANNEL_ID:
                                        case g.AuditLogChangeKeys.RULES_CHANNEL_ID:
                                        case g.AuditLogChangeKeys.PUBLIC_UPDATES_CHANNEL_ID:
                                            return Y(e, e => I.default.getChannel(e), e => (0, o.computeChannelName)(e, N.default, S.default, !0));
                                        case g.AuditLogChangeKeys.AFK_TIMEOUT:
                                            return Y(e, e => e / 60);
                                        case g.AuditLogChangeKeys.BITRATE:
                                            return Y(e, e => e / 1e3);
                                        case g.AuditLogChangeKeys.COLOR:
                                            return Y(e, e => (0, i.int2hex)(e).toUpperCase());
                                        case g.AuditLogChangeKeys.MAX_AGE:
                                            return Y(e, e => {
                                                let t = f.default.getMaxAgeOptions.find(t => {
                                                    let {
                                                        value: s
                                                    } = t;
                                                    return e === s
                                                });
                                                return t ? t.label : e
                                            });
                                        case g.AuditLogChangeKeys.PERMISSIONS: {
                                            let t = [],
                                                {
                                                    added: s,
                                                    removed: a
                                                } = w(e.oldValue, e.newValue);
                                            if (s.length > 0) {
                                                let e = new T.AuditLogChange(g.AuditLogChangeKeys.PERMISSIONS_GRANTED, null, s);
                                                t.push(e)
                                            }
                                            if (a.length > 0) {
                                                let e = new T.AuditLogChange(g.AuditLogChangeKeys.PERMISSIONS_DENIED, null, a);
                                                t.push(e)
                                            }
                                            return t
                                        }
                                        case g.AuditLogChangeKeys.PERMISSIONS_GRANTED:
                                        case g.AuditLogChangeKeys.PERMISSIONS_DENIED: {
                                            let t = [],
                                                {
                                                    added: s,
                                                    removed: a
                                                } = w(e.oldValue, e.newValue);
                                            if (s.length > 0) {
                                                let a = new T.AuditLogChange(e.key, null, s);
                                                t.push(a)
                                            }
                                            if (a.length > 0) {
                                                let e = new T.AuditLogChange(g.AuditLogChangeKeys.PERMISSIONS_RESET, a, a);
                                                t.push(e)
                                            }
                                            return t
                                        }
                                        case g.AuditLogChangeKeys.PREFERRED_LOCALE:
                                            return Y(e, e => {
                                                let t = L.default.getAvailableLocales().find(t => t.value === e);
                                                return null != t ? t.name : null
                                            });
                                        case g.AuditLogChangeKeys.VIDEO_QUALITY_MODE:
                                            return Y(e, e => e === g.VideoQualityMode.FULL ? L.default.Messages.VIDEO_QUALITY_MODE_FULL : L.default.Messages.VIDEO_QUALITY_MODE_AUTO);
                                        case g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAGS:
                                            return function(e) {
                                                let t = {
                                                        [g.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATIONS]: g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATIONS,
                                                        [g.SystemChannelFlags.SUPPRESS_PREMIUM_SUBSCRIPTIONS]: g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_PREMIUM_SUBSCRIPTIONS,
                                                        [g.SystemChannelFlags.SUPPRESS_GUILD_REMINDER_NOTIFICATIONS]: g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_REMINDER_NOTIFICATIONS,
                                                        [g.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATION_REPLIES]: g.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATION_REPLIES
                                                    },
                                                    s = [];
                                                return Object.values(g.SystemChannelFlags).forEach(a => {
                                                    let n = (e.oldValue & a) === a,
                                                        l = (e.newValue & a) === a;
                                                    if (n === l) return;
                                                    let i = new T.AuditLogChange(t[a], !n, !l);
                                                    s.push(i)
                                                }), s
                                            }(e)
                                    }
                                    return e
                                }(a, e, t);
                                Array.isArray(l) ? l.forEach(e => s.push(e)) : s.push(l)
                            }), e = e.set("changes", s)
                        }
                        s.push(e)
                    }
                }), s
            }

            function w(e, t) {
                let s = l.default.deserialize("string" == typeof e ? e : 0),
                    a = l.default.deserialize("string" == typeof t ? t : 0),
                    n = l.default.remove(a, s),
                    i = l.default.remove(s, a),
                    r = [],
                    o = [],
                    d = {
                        ...g.Permissions
                    };
                for (let e in d) {
                    let t = d[e];
                    l.default.has(n, t) && r.push(t), l.default.has(i, t) && o.push(t)
                }
                return {
                    added: r,
                    removed: o
                }
            }

            function Y(e, t, s) {
                let a = e.newValue,
                    n = e.oldValue;
                return null != e.newValue && (a = t(e.newValue), null != s && null != a && (a = s(a))), null != e.oldValue && (n = t(e.oldValue), null != s && null != n && (n = s(n))), new T.AuditLogChange(e.key, n || e.oldValue, a || e.newValue)
            }

            function K(e, t, s, a, n) {
                let l = null;
                n = null != n ? n : e.targetId;
                let i = s(n);
                if (null != i && null != a && (l = a(i)), null == l && null != i && (l = i), null == l) {
                    let t = c.default.deletedTargets[e.targetType];
                    null != t && null != t[n] && (l = t[n])
                }
                if (null == l && null != e.changes) {
                    let s = e.changes.find(e => e.key === t);
                    null != s && (l = s.newValue || s.oldValue)
                }
                return l || n
            }

            function W(e, t, s) {
                let a = e,
                    n = t(e);
                return null != n && null != s && (a = s(n)), a
            }

            function z(e, t) {
                return s => null == s.oldValue ? e : t
            }

            function X(e, t) {
                return s => null == s.newValue ? e : t
            }

            function Z(e, t, s, a) {
                return n => {
                    if (null != n.newValue && null != n.oldValue) return e;
                    if (null != n.newValue) return t;
                    if (null != n.oldValue) return s;
                    return a
                }
            }
        },
        184890: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useGuildAuditLogV2Enabled: function() {
                    return i
                }
            });
            var a = s("862205");
            let n = (0, a.createExperiment)({
                    kind: "user",
                    id: "2022-02_guild_audit_log_user",
                    label: "Guild Audit Log - User Feature Flag",
                    defaultConfig: {
                        enableForUser: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Show Guild Audit Log 2.0 for user",
                        config: {
                            enableForUser: !0
                        }
                    }]
                }),
                l = (0, a.createExperiment)({
                    kind: "guild",
                    id: "2022-02_guild_audit_log_guild",
                    label: "Guild Audit Log - Guild Feature Flag",
                    defaultConfig: {
                        enableForGuild: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Show Guild Audit Log 2.0 for guild",
                        config: {
                            enableForGuild: !0
                        }
                    }]
                });

            function i(e) {
                let {
                    enableForGuild: t
                } = l.useExperiment({
                    guildId: null != e ? e : "",
                    location: "da2d90_1"
                }), {
                    enableForUser: s
                } = n.useExperiment({
                    location: "da2d90_2"
                }, {
                    autoTrackExposure: !1
                });
                return s && t
            }
        },
        203114: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("272030"),
                l = s("42203"),
                i = s("305961"),
                r = s("697218"),
                o = s("156557"),
                d = s("49111"),
                u = s("782340");

            function c(e) {
                let {
                    guildId: t,
                    log: c,
                    onHeaderClick: E,
                    className: _,
                    expanded: T,
                    onContentClick: I
                } = e;
                return null == t ? null : (0, a.jsx)(o.default, {
                    guildId: t,
                    log: c,
                    className: _,
                    expanded: T,
                    onContentClick: I,
                    onHeaderClick: () => {
                        null == E || E(c)
                    },
                    onUserContextMenu: e => {
                        let {
                            user: l
                        } = c;
                        null != l && null != t && (0, n.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("471085").then(s.bind(s, "471085"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                guildId: t,
                                user: l
                            })
                        })
                    },
                    onChannelContextMenu: e => {
                        let l = i.default.getGuild(t);
                        null != c.options.channel && null != l && (0, n.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("887127").then(s.bind(s, "887127"));
                            return t => (0, a.jsx)(e, {
                                ...t,
                                channel: c.options.channel
                            })
                        })
                    },
                    onTargetContextMenu: e => {
                        switch (c.targetType) {
                            case d.AuditLogTargetTypes.CHANNEL:
                            case d.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                                let o = l.default.getChannel(c.targetId),
                                    E = i.default.getGuild(t);
                                if (null != o && null != E) return (0, n.openContextMenuLazy)(e, async () => {
                                    let {
                                        default: e
                                    } = await s.el("887127").then(s.bind(s, "887127"));
                                    return t => (0, a.jsx)(e, {
                                        ...t,
                                        channel: o
                                    })
                                });
                                return (0, n.openContextMenuLazy)(e, async () => {
                                    let {
                                        default: e
                                    } = await s.el("443070").then(s.bind(s, "443070"));
                                    return t => (0, a.jsx)(e, {
                                        ...t,
                                        id: c.targetId,
                                        label: u.default.Messages.COPY_ID_UNKNOWN
                                    })
                                });
                            case d.AuditLogTargetTypes.USER:
                                let _ = r.default.getUser(c.targetId);
                                if (null != _ && null != t) return (0, n.openContextMenuLazy)(e, async () => {
                                    let {
                                        default: e
                                    } = await s.el("471085").then(s.bind(s, "471085"));
                                    return s => (0, a.jsx)(e, {
                                        ...s,
                                        guildId: t,
                                        user: _
                                    })
                                })
                        }
                        return null
                    }
                })
            }
        },
        423290: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildAuditLogSearch: function() {
                    return S
                }
            }), s("222007"), s("781738");
            var a = s("37983"),
                n = s("884691"),
                l = s("98159"),
                i = s("77078"),
                r = s("137223"),
                o = s("76385"),
                d = s("955513"),
                u = s("172483"),
                c = s("891152"),
                E = s("202752"),
                _ = s("751520"),
                T = s("782340"),
                I = s("110846");
            s("525840");

            function S(e) {
                let {
                    className: t
                } = e;
                n.useEffect(() => {
                    _.clearTokenCache()
                }, []);
                let [s, S] = n.useState({
                    editorState: E.createEmptyEditorState([])
                }), {
                    editorState: N
                } = s, [f, g] = n.useState(!0), A = null, L = e => {
                    S(t => ({
                        ...t,
                        editorState: e
                    }))
                }, m = e => {
                    let t = _.tokenizeQuery(E.getFirstTextBlock(e)).filter(e => e.type !== o.default.NON_TOKEN_TYPE);
                    return E.applyTokensAsEntities(t, e, d.default)
                }, C = () => {}, O = () => {
                    null != A && Promise.resolve().then(() => null == A ? void 0 : A.focus())
                }, h = () => {
                    null == A || A.blur()
                }, R = e => {
                    A = e
                }, D = () => {
                    g(!0)
                }, M = () => {
                    g(!1), null != N && E.isEmpty(N) && C()
                }, G = e => {
                    if (null == N) return;
                    let t = E.getFirstTextBlock(N);
                    if (t.length >= 512) return !0;
                    let s = N;
                    return s = E.updateContent(e, s), L(s = m(s = E.truncateContent(s, 512))), !f && g(!0), !0
                }, x = e => (e.preventDefault(), !0), p = e => {
                    if (e = null != e ? e.replace(/\n/g, "") : "", null == N) return;
                    let t = N;
                    return t = E.updateContent(e, t), t = m(t = E.truncateContent(t, 512)), !f && g(!0), L(t), !0
                }, U = null != N && E.getFirstTextBlock(N).length > 0;
                return (0, a.jsx)("div", {
                    className: t,
                    children: (0, a.jsxs)("div", {
                        className: I.search,
                        children: [(0, a.jsxs)("div", {
                            className: I.searchBar,
                            children: [(0, a.jsx)(l.Editor, {
                                ref: R,
                                onBlur: M,
                                onFocus: D,
                                handleReturn: x,
                                handleBeforeInput: G,
                                handlePastedText: p,
                                placeholder: T.default.Messages.SEARCH,
                                editorState: N,
                                onChange: L,
                                role: "combobox",
                                ariaLabel: T.default.Messages.SEARCH
                            }), (0, a.jsx)(r.SearchBarIcon, {
                                onClear: e => {
                                    if (null == N) return;
                                    e.preventDefault(), e.stopPropagation();
                                    let t = E.getFirstTextBlock(N);
                                    if ("" === t) {
                                        O();
                                        return
                                    }
                                    let s = N;
                                    L(s = E.truncateContent(s, 0)), !f && Promise.resolve().then(() => h())
                                },
                                hasContent: U,
                                className: I.searchIcon
                            }), (0, a.jsxs)(i.Button, {
                                look: i.Button.Looks.BLANK,
                                className: I.filter,
                                innerClassName: I.filterButton,
                                onClick: () => {},
                                children: [T.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_FILTER, (0, a.jsx)(u.default, {
                                    className: I.filterIcon,
                                    width: 16,
                                    height: 16
                                })]
                            })]
                        }), (0, a.jsxs)(i.Button, {
                            color: i.Button.Colors.PRIMARY,
                            className: I.sort,
                            innerClassName: I.sortButton,
                            size: i.Button.Sizes.SMALL,
                            onClick: () => {},
                            children: [T.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_SORT, (0, a.jsx)(c.default, {
                                className: I.sortIcon,
                                width: 16,
                                height: 16
                            })]
                        })]
                    })
                })
            }
        },
        773372: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return U
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("817736"),
                o = s.n(r),
                d = s("974667"),
                u = s("118810"),
                c = s("446674"),
                E = s("77078"),
                _ = s("642950"),
                T = s("206625"),
                I = s("84339"),
                S = s("510889"),
                N = s("287103"),
                f = s("900938"),
                g = s("161778"),
                A = s("305961"),
                L = s("102985"),
                m = s("941886"),
                C = s("309021"),
                O = s("203114"),
                h = s("423290"),
                R = s("782340"),
                D = s("808414"),
                M = s("241372");
            let G = s("170456"),
                x = s("90578");

            function p(e) {
                let {
                    logs: t,
                    guildId: s,
                    expandedId: l,
                    lastExpandedId: i,
                    scroller: r,
                    setExpandedRef: o,
                    setLastExpandedRef: u,
                    onHeaderClick: c,
                    onContentClick: E
                } = e, _ = n.useRef(r);
                n.useEffect(() => {
                    _.current = r
                }, [r]);
                let T = (0, S.default)("audit-log", _);
                return (0, a.jsx)(d.ListNavigatorProvider, {
                    navigator: T,
                    children: (0, a.jsx)(d.ListNavigatorContainer, {
                        children: e => {
                            let {
                                ref: n,
                                ...r
                            } = e;
                            return (0, a.jsx)("div", {
                                ref: n,
                                ...r,
                                className: D.listContainer,
                                children: null == t ? void 0 : t.map(e => {
                                    let t = l === e.id,
                                        n = i === e.id;
                                    return (0, a.jsx)(O.default, {
                                        guildId: s,
                                        ref: t ? o : n ? u : null,
                                        className: D.row,
                                        onHeaderClick: c,
                                        onContentClick: E,
                                        log: e,
                                        expanded: t
                                    }, e.id)
                                })
                            })
                        }
                    })
                })
            }

            function U() {
                let e, t;
                let {
                    guildId: s,
                    guild: l,
                    isInitialLoading: r,
                    isLoading: d,
                    isLoadingNextPage: S,
                    showLoadMore: O,
                    hasError: U,
                    hasOlderLogs: v,
                    rawLogs: j,
                    theme: P,
                    hide: y
                } = (0, c.useStateFromStoresObject)([f.default, A.default, N.default, L.default, g.default], () => {
                    let e = f.default.getGuildId(),
                        t = A.default.getGuild(e),
                        s = N.default.logs;
                    return {
                        guildId: e,
                        guild: t,
                        isInitialLoading: N.default.isInitialLoading,
                        isLoading: N.default.isLoading,
                        isLoadingNextPage: N.default.isLoadingNextPage,
                        showLoadMore: N.default.groupedFetchCount > 2,
                        hasError: N.default.hasError,
                        hasOlderLogs: N.default.hasOlderLogs,
                        rawLogs: null != s && null != t ? s : [],
                        theme: g.default.theme,
                        hide: L.default.enabled
                    }
                }), [b, B] = n.useState({
                    expandedId: null,
                    lastExpandedId: null,
                    actionFilterQuery: ""
                }), F = C.transformLogs(j, l), H = !1, V = n.useRef(null), k = (0, I.default)(b), w = (0, I.default)(F), Y = () => {
                    var e;
                    return (null === (e = V.current) || void 0 === e ? void 0 : e.isScrolledToBottom()) || !1
                };
                O || (null == F ? void 0 : F.length) === (null == w ? void 0 : w.length) || null == V || Y();
                let K = () => {
                        let s = {
                            expanded: null,
                            lastExpanded: null
                        };
                        if (null != t) {
                            let e = o.findDOMNode(t);
                            null != e && (0, u.isElement)(e) && (s.lastExpanded = e.getBoundingClientRect())
                        }
                        if (null != e) {
                            let t = o.findDOMNode(e);
                            null != t && (0, u.isElement)(t) && (s.expanded = t.getBoundingClientRect())
                        }
                        return s
                    },
                    W = K(),
                    z = (0, T.default)(null, () => {
                        let {
                            expandedId: s
                        } = b;
                        null == s || H ? null != s && (H = !1) : (e = null, t = null, B(e => ({
                            ...e,
                            expandedId: null,
                            lastExpandedId: null
                        })), W = K())
                    });
                n.useEffect(() => {
                    b.expandedId !== (null == k ? void 0 : k.expandedId) && X()
                }, []);
                let X = () => {
                        let e = V.current;
                        if (null == e) return;
                        let t = K(),
                            s = W;
                        if (null == t.expanded || null == t.lastExpanded || null == s.expanded || t.expanded.top < t.lastExpanded.top) return;
                        let a = s.expanded.height - t.lastExpanded.height,
                            n = e.getScrollerState(),
                            l = n.scrollTop - a;
                        e.scrollTo({
                            to: l
                        })
                    },
                    Z = s => {
                        let {
                            expandedId: a
                        } = b;
                        a !== s.id ? (H = !0, B(e => ({
                            ...e,
                            expandedId: null == s ? void 0 : s.id,
                            lastExpandedId: a
                        })), W = K()) : (e = null, t = null, null != a && (W = K()), B(e => ({
                            ...e,
                            expandedId: null,
                            lastExpandedId: null
                        })))
                    },
                    J = e => {
                        H = !0, e.stopPropagation()
                    },
                    Q = () => {},
                    q = t => {
                        e = t
                    },
                    $ = e => {
                        t = e
                    },
                    ee = () => (0, a.jsx)(E.Spinner, {
                        type: E.Spinner.Type.SPINNING_CIRCLE,
                        className: D.spinner
                    });
                return (0, a.jsx)("div", {
                    ref: z,
                    className: M.customColumn,
                    children: (0, a.jsx)("div", {
                        className: M.customContainer,
                        children: (0, a.jsx)(E.AdvancedScrollerAuto, {
                            className: i(M.customScroller, D.scroller),
                            onScroll: () => {
                                Y() && Q()
                            },
                            ref: V,
                            children: (0, a.jsxs)("div", {
                                className: D.content,
                                children: [(0, a.jsxs)(a.Fragment, {
                                    children: [(0, a.jsx)("div", {
                                        className: D.customHeader,
                                        children: (0, a.jsx)(E.FormTitle, {
                                            tag: E.FormTitleTags.H1,
                                            className: D.formTitle,
                                            children: R.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG
                                        })
                                    }), (0, a.jsx)(E.FormDivider, {
                                        className: D.divider
                                    })]
                                }), (0, a.jsx)(h.GuildAuditLogSearch, {
                                    className: D.search
                                }), (() => {
                                    if (y) return (0, a.jsx)(_.default, {});
                                    if (d || r) return ee();
                                    if ((null == F ? void 0 : F.length) === 0) {
                                        let e = U ? R.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_BODY : R.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_BODY,
                                            t = U ? R.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_TITLE : R.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_TITLE;
                                        return (0, a.jsxs)(m.default, {
                                            theme: P,
                                            className: D.empty,
                                            children: [(0, a.jsx)(m.EmptyStateImage, {
                                                darkSrc: G,
                                                lightSrc: x,
                                                width: 272,
                                                height: 130
                                            }), (0, a.jsx)(m.EmptyStateText, {
                                                note: e,
                                                style: {
                                                    maxWidth: 300
                                                },
                                                children: t
                                            })]
                                        })
                                    }
                                    let {
                                        expandedId: e,
                                        lastExpandedId: t
                                    } = b;
                                    return (0, a.jsx)(p, {
                                        logs: F,
                                        guildId: s,
                                        expandedId: e,
                                        lastExpandedId: t,
                                        setExpandedRef: q,
                                        setLastExpandedRef: $,
                                        onHeaderClick: Z,
                                        onContentClick: J,
                                        scroller: V.current
                                    })
                                })(), (() => {
                                    if (O && v && !y) return (0, a.jsx)(E.Button, {
                                        color: E.Button.Colors.PRIMARY,
                                        className: D.loadMore,
                                        onClick: Q,
                                        children: R.default.Messages.GUILD_SETTINGS_AUDIT_LOG_LOAD_MORE
                                    })
                                })(), !S || y || d ? null : ee()]
                            })
                        })
                    })
                })
            }
        },
        156557: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return D
                }
            }), s("686130"), s("781738");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("866227"),
                o = s.n(r),
                d = s("974667"),
                u = s("77078"),
                c = s("679653"),
                E = s("506885"),
                _ = s("981601"),
                T = s("242020"),
                I = s("27618"),
                S = s("697218"),
                N = s("461380"),
                f = s("258078"),
                g = s("404008"),
                A = s("158998"),
                L = s("309021"),
                m = s("49111"),
                C = s("491070");

            function O(e, t) {
                let s = L.NotRenderedChanges[e.targetType];
                return null != s && !0 === s[t.key]
            }
            class h extends n.PureComponent {
                render() {
                    let {
                        user: e,
                        hideDiscriminator: t,
                        onContextMenu: s,
                        guildId: n
                    } = this.props;
                    return (0, a.jsx)(u.Popout, {
                        preload: () => (0, E.default)(e.id, e.getAvatarURL(n, 80), {
                            guildId: n
                        }),
                        renderPopout: t => (0, a.jsx)(_.default, {
                            ...t,
                            userId: e.id,
                            guildId: n
                        }),
                        children: n => (0, a.jsx)(u.Clickable, {
                            ...n,
                            onClick: e => {
                                e.stopPropagation(), n.onClick(e)
                            },
                            onContextMenu: s,
                            className: C.userHook,
                            children: (0, a.jsxs)("div", {
                                className: C.username,
                                children: [(0, a.jsx)(u.Text, {
                                    variant: "text-sm/normal",
                                    children: A.default.getUserTag(e, {
                                        mode: "username",
                                        identifiable: t ? "never" : "always"
                                    })
                                }), !t && !e.isPomelo() && (0, a.jsxs)(u.Text, {
                                    variant: "text-sm/normal",
                                    children: ["#", e.discriminator]
                                })]
                            })
                        })
                    })
                }
            }
            class R extends n.PureComponent {
                hasChangesToRender() {
                    let {
                        log: e
                    } = this.props, {
                        changes: t
                    } = e;
                    return (e.actionType !== m.AuditLogActionTypes.DELETE || e.action === m.AuditLogActions.MEMBER_BAN_ADD || e.action === m.AuditLogActions.MEMBER_KICK || e.action === m.AuditLogActions.MEMBER_PRUNE) && null != t && t.some(t => !O(e, t))
                }
                getActionTypeColor(e) {
                    switch (e) {
                        case m.AuditLogActionTypes.CREATE:
                            return f.default.Colors.STATUS_GREEN;
                        case m.AuditLogActionTypes.DELETE:
                            return f.default.Colors.STATUS_RED;
                        default:
                            return f.default.Colors.STATUS_YELLOW
                    }
                }
                getRowAccentColor() {
                    let {
                        log: e
                    } = this.props;
                    if (e.action === m.AuditLogActions.MEMBER_BAN_ADD) return C.accentRed
                }
                renderTitle() {
                    let {
                        log: e,
                        guildId: t,
                        onUserContextMenu: s,
                        onTargetContextMenu: n,
                        onChannelContextMenu: l
                    } = this.props, {
                        user: i,
                        target: r,
                        options: o
                    } = e, d = L.getChangeTitle(e), E = L.getStringForBanReason(e);
                    return null != d ? (0, a.jsx)(u.Text, {
                        className: C.overflowEllipsis,
                        variant: "text-sm/normal",
                        children: d.format({
                            user: i,
                            target: r,
                            reason: E,
                            userHook: (n, l) => (0, a.jsx)(h, {
                                guildId: t,
                                user: e.user,
                                onContextMenu: s,
                                hideDiscriminator: !0
                            }, l),
                            targetHook: (s, l) => e.targetType === m.AuditLogTargetTypes.USER ? (0, a.jsx)(h, {
                                guildId: t,
                                user: e.target,
                                onContextMenu: n,
                                hideDiscriminator: !1
                            }, l) : (0, a.jsx)("span", {
                                onContextMenu: n,
                                children: s
                            }, l),
                            count: o.count,
                            channel: o.channel ? "string" == typeof o.channel ? o.channel : (0, c.computeChannelName)(o.channel, S.default, I.default, !0) : null,
                            channelHook: (e, t) => (0, a.jsx)("span", {
                                onContextMenu: l,
                                children: e
                            }, t)
                        })
                    }) : null
                }
                renderRoleUpdate(e) {
                    let {
                        newValue: t
                    } = e;
                    return Array.isArray(t) ? t.map(e => (0, a.jsxs)("div", {
                        className: C.subListItem,
                        children: [(0, a.jsx)(u.Text, {
                            className: C.bullet,
                            color: "text-muted",
                            variant: "text-sm/normal",
                            children: "•"
                        }), (0, a.jsx)(u.Text, {
                            variant: "text-xs/normal",
                            color: "text-normal",
                            children: e.name
                        })]
                    }, e.id)) : null
                }
                renderPermissionUpdate(e) {
                    let {
                        newValue: t
                    } = e;
                    return Array.isArray(t) ? t.map(e => {
                        if (null != L.getStringForPermission(e, this.props.log)) return (0, a.jsxs)("div", {
                            className: C.subListItem,
                            children: [(0, a.jsx)(u.Text, {
                                className: C.bullet,
                                color: "text-muted",
                                variant: "text-sm/normal",
                                children: "•"
                            }), (0, a.jsx)(u.Text, {
                                variant: "text-xs/normal",
                                color: "text-normal",
                                children: L.getStringForPermission(e, this.props.log)
                            })]
                        }, e)
                    }) : null
                }
                renderChangeDetails(e) {
                    let {
                        log: t,
                        onContentClick: s
                    } = this.props;
                    if (null == t.changes) return null;
                    let n = 0,
                        l = t.changes.map((s, l) => {
                            let {
                                oldValue: i,
                                newValue: r
                            } = s, d = null;
                            if (t.action === m.AuditLogActions.MEMBER_ROLE_UPDATE ? d = this.renderRoleUpdate(s) : (t.targetType === m.AuditLogTargetTypes.ROLE || t.action === m.AuditLogActions.CHANNEL_OVERWRITE_CREATE || t.action === m.AuditLogActions.CHANNEL_OVERWRITE_UPDATE) && (d = this.renderPermissionUpdate(s)), (t.action === m.AuditLogActions.CHANNEL_UPDATE || t.action === m.AuditLogActions.CHANNEL_CREATE) && s.key === m.AuditLogChangeKeys.TYPE && (null != i && (i = (0, g.channelTypeString)({
                                    type: i
                                })), null != r && (r = (0, g.channelTypeString)({
                                    type: r
                                }))), t.action === m.AuditLogActions.MEMBER_UPDATE && s.key === m.AuditLogChangeKeys.COMMUNICATION_DISABLED_UNTIL) {
                                if (null == (r = o(r)) || !r.isValid()) return null;
                                r = r.calendar()
                            }
                            let c = e[s.key];
                            if (O(t, s)) return null;
                            if ("function" == typeof c && (c = c(s)), null != c && "object" == typeof c) {
                                if (null == c.format) {
                                    let e = c[s.newValue];
                                    null == e && null != c[L.DEFAULT_FOR_STRINGS_KEY] ? c = c[L.DEFAULT_FOR_STRINGS_KEY] : null != e && (c = e)
                                }
                                if (null != c && null != c.format) {
                                    var E, _;
                                    c = c.format({
                                        user: t.user,
                                        target: t.target,
                                        oldValue: i,
                                        newValue: r,
                                        count: Array.isArray(r) ? r.length : null,
                                        subtarget: null !== (_ = null !== (E = t.options.subtarget) && void 0 !== E ? E : s.subtarget) && void 0 !== _ ? _ : null,
                                        newColorHook: (e, t) => (0, a.jsx)("div", {
                                            className: C.colorHook,
                                            style: {
                                                backgroundColor: s.newValue
                                            }
                                        }, t),
                                        oldColorHook: (e, t) => (0, a.jsx)("div", {
                                            className: C.colorHook,
                                            style: {
                                                backgroundColor: s.oldValue
                                            }
                                        }, t)
                                    })
                                }
                            }
                            return c ? (n++, (0, a.jsxs)("div", {
                                className: C.detail,
                                children: [(0, a.jsxs)("div", {
                                    className: C.prefix,
                                    children: [(0, a.jsx)(u.Text, {
                                        variant: "text-xs/semibold",
                                        color: "text-muted",
                                        children: n < 10 ? "0".concat(n) : n
                                    }), (0, a.jsx)(u.Text, {
                                        variant: "text-xs/semibold",
                                        color: "text-muted",
                                        className: C.dash,
                                        children: "—"
                                    })]
                                }), (0, a.jsxs)("div", {
                                    className: C.change,
                                    children: [null != d ? (0, a.jsx)(u.Text, {
                                        className: C.changeStr,
                                        variant: "text-xs/normal",
                                        children: c.concat(":")
                                    }) : (0, a.jsx)(u.Text, {
                                        className: C.changeStr,
                                        variant: "text-xs/normal",
                                        children: c
                                    }), null != d ? (0, a.jsx)(u.Text, {
                                        variant: "text-xs/normal",
                                        children: d
                                    }) : null]
                                })]
                            }, l)) : (console.warn("No change string for", s), null)
                        });
                    return (0, a.jsx)(u.Clickable, {
                        onClick: s,
                        className: C.changeDetails,
                        children: l
                    })
                }
                renderChangeSummary() {
                    let {
                        expanded: e,
                        log: t
                    } = this.props;
                    if (e) switch (t.targetType) {
                        case m.AuditLogTargetTypes.GUILD:
                            return this.renderChangeDetails(L.GuildChangeStrings());
                        case m.AuditLogTargetTypes.CHANNEL:
                        case m.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                            return this.renderChangeDetails(L.ChannelChangeStrings());
                        case m.AuditLogTargetTypes.USER:
                            return this.renderChangeDetails(L.UserChangeStrings());
                        case m.AuditLogTargetTypes.ROLE:
                            return this.renderChangeDetails(L.RoleChangeStrings());
                        case m.AuditLogTargetTypes.INVITE:
                            return this.renderChangeDetails(L.InviteChangeStrings());
                        case m.AuditLogTargetTypes.WEBHOOK:
                            return this.renderChangeDetails(L.WebhookChangeStrings());
                        case m.AuditLogTargetTypes.EMOJI:
                            return this.renderChangeDetails(L.EmojiChangeStrings());
                        case m.AuditLogTargetTypes.STICKER:
                            return this.renderChangeDetails(L.StickerChangeStrings());
                        case m.AuditLogTargetTypes.INTEGRATION:
                            return this.renderChangeDetails(L.IntegrationChangeStrings());
                        case m.AuditLogTargetTypes.STAGE_INSTANCE:
                            return this.renderChangeDetails(L.StageInstanceChangeStrings());
                        case m.AuditLogTargetTypes.GUILD_SCHEDULED_EVENT:
                            return this.renderChangeDetails(L.GuildScheduledEventChangeStrings());
                        case m.AuditLogTargetTypes.THREAD:
                            return this.renderChangeDetails(L.ThreadChangeStrings());
                        case m.AuditLogTargetTypes.APPLICATION_COMMAND:
                            return this.renderChangeDetails(L.CommandPermissionChangeStrings(t.changes))
                    }
                    return null
                }
                formatActionTagName(e) {
                    return e.replaceAll("_", " ").toLocaleLowerCase()
                }
                renderActionTag() {
                    let {
                        log: e
                    } = this.props, t = (0, T.getTargetType)(e.action);
                    if (null != t) return (0, a.jsx)("div", {
                        className: C.tag,
                        children: (0, a.jsx)(u.Text, {
                            variant: "text-xs/normal",
                            className: C.tagString,
                            children: this.formatActionTagName(t)
                        })
                    })
                }
                render() {
                    let e;
                    let {
                        log: t,
                        className: s,
                        expanded: n,
                        onHeaderClick: l,
                        guildId: r
                    } = this.props, o = t.user;
                    if (null == o) return null;
                    let c = this.hasChangesToRender(),
                        T = C.headerDefault;
                    n ? T = C.headerExpanded : c && (T = C.headerClickable);
                    let I = t.timestampStart.calendar(),
                        S = t.timestampEnd.calendar();
                    e = I === S ? (0, a.jsx)(u.Text, {
                        className: C.timestamp,
                        variant: "text-xs/normal",
                        children: "• ".concat(I)
                    }) : (0, a.jsx)(u.Text, {
                        className: C.timestamp,
                        variant: "text-xs/normal",
                        children: "• ".concat(I, "—").concat(S)
                    });
                    let f = c ? l : m.NOOP;
                    return (0, a.jsx)(d.ListNavigatorItem, {
                        id: t.id,
                        children: l => (0, a.jsxs)("div", {
                            className: i(this.getRowAccentColor(), C.auditLog, s),
                            children: [(0, a.jsxs)(u.Clickable, {
                                className: T,
                                "aria-expanded": n,
                                onClick: f,
                                ...l,
                                children: [(0, a.jsx)(u.Popout, {
                                    preload: () => (0, E.default)(t.userId, o.getAvatarURL(r, 80), {
                                        guildId: r
                                    }),
                                    renderPopout: e => (0, a.jsx)(_.default, {
                                        ...e,
                                        userId: t.userId,
                                        guildId: r
                                    }),
                                    children: e => (0, a.jsx)(u.Avatar, {
                                        ...e,
                                        onClick: t => {
                                            t.stopPropagation(), e.onClick(t)
                                        },
                                        src: o.getAvatarURL(r, 40),
                                        "aria-hidden": !0,
                                        size: u.AvatarSizes.SIZE_40
                                    })
                                }), (0, a.jsxs)("div", {
                                    className: C.timeWrap,
                                    children: [(0, a.jsx)("div", {
                                        className: C.title,
                                        children: this.renderTitle()
                                    }), (0, a.jsxs)("div", {
                                        className: C.meta,
                                        children: [this.renderActionTag(), e]
                                    })]
                                }), c ? (0, a.jsx)(N.default, {
                                    className: C.expand,
                                    foreground: C.expandForeground,
                                    expanded: n,
                                    "aria-hidden": !0
                                }) : null]
                            }), this.renderChangeSummary()]
                        })
                    })
                }
            }
            var D = R
        },
        4443: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("216375");

            function i() {
                return (0, a.jsx)("div", {
                    className: l.centerContainer,
                    children: (0, a.jsx)(n.Spinner, {
                        type: n.Spinner.Type.SPINNING_CIRCLE
                    })
                })
            }
        },
        329606: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return R
                }
            }), s("222007"), s("834022");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("669491"),
                r = s("77078"),
                o = s("900938"),
                d = s("817674"),
                u = s("944441"),
                c = s("956089"),
                E = s("449008"),
                _ = s("701909"),
                T = s("523096"),
                I = s("353575"),
                S = s("296839"),
                N = s("4443"),
                f = s("151866"),
                g = s("646834"),
                A = s("124188"),
                L = s("155158"),
                m = s("143460"),
                C = s("49111"),
                O = s("782340"),
                h = s("202276");

            function R(e) {
                var t, s;
                let {
                    guildId: R,
                    setPreventNavigation: D = () => {}
                } = e, {
                    editingRule: M,
                    setEditingRule: G
                } = (0, f.useAutomodEditingRuleState)(), {
                    guild: x,
                    subsection: p
                } = (0, l.useStateFromStoresObject)([o.default], () => o.default.getProps()), U = null !== (s = null !== (t = null == x ? void 0 : x.id) && void 0 !== t ? t : R) && void 0 !== s ? s : "", v = null != M, [j] = (0, I.useSyncAutomodRulesEffect)(U), {
                    rulesByTriggerType: P
                } = (0, I.useAutomodRulesList)(U), y = {
                    [S.AutomodTriggerCategory.MEMBERS]: O.default.Messages.GUILD_SETTINGS_AUTOMOD_MEMBER_CATEGORY_TITLE,
                    [S.AutomodTriggerCategory.CONTENT]: O.default.Messages.GUILD_SETTINGS_AUTOMOD_CONTENT_CATEGORY_TITLE
                }, b = n.useMemo(() => Object.values(null != P ? P : {}).flat().filter(E.isNotNullish), [P]);
                n.useEffect(() => {
                    v && G(null)
                }, [U]);
                let B = n.useCallback((e, t) => {
                        if (null != e) {
                            var s, a;
                            return null !== (a = null === (s = b.find(t => {
                                let {
                                    id: s
                                } = t;
                                return s === e
                            })) || void 0 === s ? void 0 : s.name) && void 0 !== a ? a : null
                        }
                        return null != t ? (0, S.triggerConfigs)[t].getDefaultRuleName() : null
                    }, [b]),
                    F = n.useMemo(() => {
                        var e, t;
                        return B(null !== (e = null == M ? void 0 : M.id) && void 0 !== e ? e : null, null !== (t = null == M ? void 0 : M.triggerType) && void 0 !== t ? t : null)
                    }, [B, M]);
                n.useEffect(() => {
                    D(v, (0, L.createOnPreventNavigation)(F))
                }, [D, v, F]);
                let H = (0, S.useAvailableTriggerTypes)(U),
                    V = e => (0, a.jsx)(a.Fragment, {
                        children: e.map(e => {
                            var t;
                            return (0, a.jsx)(A.default, {
                                guildId: U,
                                triggerType: e,
                                rules: null !== (t = P[e]) && void 0 !== t ? t : [],
                                initWithEdit: p === C.GuildSettingsSubsections.AUTOMOD_MENTION_SPAM && e === m.AutomodTriggerType.MENTION_SPAM
                            }, e)
                        })
                    });
                return (0, a.jsxs)(r.FormSection, {
                    title: O.default.Messages.GUILD_SETTINGS_AUTOMOD_TITLE,
                    tag: "h1",
                    children: [(0, a.jsxs)("div", {
                        className: h.descriptionContainer,
                        children: [(0, a.jsxs)(r.FormSection, {
                            tag: "h3",
                            className: h.description,
                            titleClassName: h.descriptionHeader,
                            children: [(0, a.jsx)(r.Text, {
                                variant: "text-md/medium",
                                color: "header-secondary",
                                children: O.default.Messages.GUILD_SETTINGS_AUTOMOD_MESSAGE_FILTER_DESCRIPTION
                            }), (0, a.jsx)(r.Text, {
                                variant: "text-sm/medium",
                                className: h.helpUrl,
                                children: O.default.Messages.GUILD_AUTOMOD_LEARN_MORE_LINK.format({
                                    helpUrl: _.default.getArticleURL(C.HelpdeskArticles.GUILD_AUTOMOD_BLOCKED_MESSAGE)
                                })
                            })]
                        }), (0, a.jsxs)("div", {
                            className: h.descriptionAvatarContainer,
                            children: [(0, a.jsx)(r.Avatar, {
                                src: (0, T.getAutomodAvatarURL)(),
                                size: r.AvatarSizes.SIZE_80,
                                "aria-label": O.default.Messages.GUILD_AUTOMOD_USERNAME
                            }), (0, a.jsx)(c.TextBadge, {
                                text: (0, a.jsxs)("div", {
                                    className: h.automodBadgeText,
                                    children: [(0, a.jsx)(u.default, {
                                        width: 12,
                                        height: 12,
                                        className: h.checkmarkIcon
                                    }), (0, a.jsx)(r.Text, {
                                        variant: "text-xs/bold",
                                        className: h.automodText,
                                        children: O.default.Messages.GUILD_AUTOMOD_USERNAME
                                    })]
                                }),
                                color: i.default.unsafe_rawColors.BRAND_500.css,
                                className: h.textBadge
                            })]
                        })]
                    }), j ? (0, a.jsx)(N.default, {}) : Object.entries(H).map(e => {
                        let [t, s] = e;
                        if (0 === s.length) return (0, a.jsx)(n.Fragment, {}, t);
                        let l = null != y[t] ? (0, a.jsx)(r.FormSection, {
                            tag: "h3",
                            className: h.categoryHeader,
                            children: (0, a.jsx)(r.Text, {
                                variant: "text-lg/normal",
                                color: "header-primary",
                                children: y[t]
                            })
                        }) : null;
                        return (0, a.jsxs)("div", {
                            className: h.categoryContainer,
                            children: [l, V(s)]
                        }, t)
                    }), null != x && (0, a.jsx)(d.GuildExplicitContentFilter, {
                        guild: x,
                        withDivider: !1,
                        className: h.explicitContentFilterSection
                    }), (0, a.jsx)(g.default, {
                        guildId: U,
                        existingRules: b
                    }), v && (0, a.jsx)("div", {
                        className: h.endSpacer
                    })]
                })
            }
        },
        646834: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("266491"),
                l = s("77078"),
                i = s("45299"),
                r = s("965397"),
                o = s("454686"),
                d = s("353575"),
                u = s("151866"),
                c = s("782340"),
                E = s("964101");

            function _(e) {
                let {
                    guildId: t,
                    existingRules: s
                } = e, {
                    cancelEditingRule: _,
                    isLoading: T,
                    hasChanges: I,
                    editingRule: S,
                    errorMessage: N,
                    saveEditingRule: f
                } = (0, u.useAutomodEditingRuleActions)(), {
                    updateRule: g
                } = (0, d.useAutomodRulesList)(t), A = null != S, L = A && !(0, o.isBackendPersistedRule)(S), m = A || I || L, C = async () => {
                    if (!I && !L) return _();
                    null != S && !L && g(S);
                    let e = s.find(e => {
                        let {
                            id: t
                        } = e;
                        return t === (null == S ? void 0 : S.id)
                    });
                    try {
                        let e = await f(s);
                        null != e && g(e)
                    } catch (t) {
                        null != e && g(e)
                    }
                }, O = c.default.Messages.CANCEL, h = !I && A ? c.default.Messages.GUILD_AUTOMOD_EDIT_NO_CHANGES.format({
                    ruleName: null == S ? void 0 : S.name
                }) : void 0;
                return null != N && (h = (0, a.jsx)(l.Text, {
                    variant: "text-md/normal",
                    color: "text-danger",
                    className: E.message,
                    children: N
                })), (0, a.jsx)(n.default, {
                    component: "div",
                    className: E.saveNoticeContainer,
                    children: m && (0, a.jsx)(r.default, {
                        children: (0, a.jsx)(i.default, {
                            submitting: T,
                            disabled: T,
                            onSave: C,
                            onReset: _,
                            onResetText: O,
                            message: h
                        })
                    })
                })
            }
        },
        914559: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("462392"),
                i = s("613375"),
                r = s("426016"),
                o = s("450546"),
                d = s("143460"),
                u = s("245225");

            function c(e) {
                let {
                    action: t,
                    triggerType: s,
                    toggled: i,
                    onToggleAction: r
                } = e, o = (0, l.getActionInfo)(t.type, t, s);
                if (null == o) return null;
                let {
                    headerText: d,
                    descriptionText: c,
                    icon: E
                } = o;
                return (0, a.jsxs)("div", {
                    className: u.actionContainer,
                    children: [(0, a.jsx)("div", {
                        className: u.actionIconContainer,
                        children: (0, a.jsx)(E, {
                            width: 24,
                            height: 24,
                            className: u.actionIcon
                        })
                    }), (0, a.jsxs)("div", {
                        className: u.actionTextContainer,
                        children: [(0, a.jsx)(n.Heading, {
                            variant: "heading-sm/semibold",
                            children: d
                        }), (0, a.jsx)(n.Text, {
                            color: "interactive-normal",
                            variant: "text-xs/medium",
                            children: c
                        })]
                    }), (0, a.jsx)("div", {
                        children: (0, a.jsx)(n.Checkbox, {
                            disabled: !o.isEditable,
                            type: n.Checkbox.Types.INVERTED,
                            value: i,
                            onChange: () => r(!1),
                            className: u.actionCheckbox
                        })
                    })]
                })
            }

            function E(e) {
                let {
                    action: t,
                    guildId: s,
                    triggerType: n,
                    toggled: l,
                    onToggleAction: u
                } = e;
                switch (t.type) {
                    case d.AutomodActionType.FLAG_TO_CHANNEL:
                        return (0, a.jsx)(o.default, {
                            action: t,
                            triggerType: n,
                            toggled: l,
                            onToggleAction: u
                        });
                    case d.AutomodActionType.USER_COMMUNICATION_DISABLED:
                        return (0, a.jsx)(r.default, {
                            action: t,
                            guildId: s,
                            triggerType: n,
                            toggled: l,
                            onToggleAction: u
                        });
                    case d.AutomodActionType.BLOCK_MESSAGE:
                        return (0, a.jsx)(i.default, {
                            action: t,
                            triggerType: n,
                            toggled: l,
                            onToggleAction: u
                        });
                    default:
                        return (0, a.jsx)(c, {
                            action: t,
                            guildId: s,
                            toggled: l,
                            triggerType: n,
                            onToggleAction: u
                        })
                }
            }
        },
        88063: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return N
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("301165"),
                i = s("733724"),
                r = s("446674"),
                o = s("77078"),
                d = s("206230"),
                u = s("351825"),
                c = s("454686"),
                E = s("296839"),
                _ = s("151866"),
                T = s("842357"),
                I = s("782340"),
                S = s("975456");

            function N(e) {
                let {
                    guildId: t,
                    triggerType: s
                } = e, N = n.useMemo(() => () => (0, c.createDefaultRule)(t, s), [t, s]), [f] = n.useState(N), [g, A] = n.useState(!1), {
                    editingRule: L,
                    createNewEditingRule: m
                } = (0, _.useAutomodEditingRuleState)(), {
                    getDefaultRuleName: C
                } = E.triggerConfigs[s], O = (0, r.useStateFromStores)([d.default], () => d.default.useReducedMotion), h = !(0, c.isBackendPersistedRule)(L) && (null == L ? void 0 : L.triggerType) === s, [R, D] = n.useState(h ? L : f), M = (0, l.useSpring)({
                    opacity: h ? 0 : 1,
                    pointerEvents: h ? "none" : "all",
                    config: {
                        ...l.config.stiff,
                        clamp: !0
                    },
                    immediate: O
                }), G = (0, l.useSpring)({
                    opacity: h ? 1 : 0,
                    pointerEvents: h ? "all" : "none",
                    config: {
                        ...l.config.stiff,
                        clamp: !0
                    },
                    immediate: O,
                    onStart: () => {
                        D(h ? L : f)
                    },
                    onRest: () => {
                        D(h ? L : f), A(h)
                    }
                });
                return null == L || h ? (0, a.jsxs)("div", {
                    className: S.mainRuleContainer,
                    style: {
                        height: h ? "auto" : "60px"
                    },
                    children: [(0, a.jsx)(l.animated.div, {
                        className: S.animatedRuleCardContainer,
                        style: G,
                        children: (0, a.jsx)(T.default, {
                            rule: R,
                            persistEdit: g
                        })
                    }), (0, a.jsx)(l.animated.div, {
                        className: S.animatedNewRuleContainer,
                        style: M,
                        children: (0, a.jsxs)(o.Clickable, {
                            className: S.addAnotherRuleCardContainer,
                            onClick: () => {
                                m(t, s)
                            },
                            children: [(0, a.jsx)(u.default, {
                                width: 20,
                                height: 20,
                                color: i.default.BLUE_345,
                                className: S.plusIcon
                            }), (0, a.jsx)(o.Text, {
                                variant: "text-md/semibold",
                                color: "text-link",
                                children: I.default.Messages.GUILD_AUTOMOD_ADD_ADDITIONAL_RULE.format({
                                    ruleName: C()
                                })
                            })]
                        })
                    })]
                }) : null
            }
        },
        320493: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("454686"),
                i = s("842357");

            function r(e) {
                let {
                    guildId: t,
                    triggerType: s
                } = e, r = n.useMemo(() => () => (0, l.createDefaultRule)(t, s), [t, s]), [o] = n.useState(r);
                return (0, a.jsx)(i.default, {
                    rule: o
                })
            }
        },
        169456: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("837899"),
                r = s("425190"),
                o = s("301341"),
                d = s("782340"),
                u = s("744451");

            function c(e) {
                let {
                    onChange: t,
                    initialValue: s,
                    maxWordCount: c,
                    collapsed: E = !1
                } = e, [_, T] = n.useState(!E);
                return (0, a.jsx)(l.Collapsible, {
                    isExpanded: _,
                    collapsibleContent: (0, a.jsx)(o.default, {
                        onChangeText: t,
                        maxWordCount: c,
                        className: u.keywordTextAreaContainer,
                        textAreaClassName: u.keywordTextArea,
                        subtitleText: d.default.Messages.GUILD_AUTOMOD_ALLOW_LIST_SUBTITLE,
                        initialValue: s
                    }),
                    className: u.collapseable,
                    children: e => {
                        let {
                            onClick: t
                        } = e;
                        return (0, a.jsx)(l.Clickable, {
                            onClick: e => {
                                T(!_), t(e)
                            },
                            children: (0, a.jsxs)("div", {
                                className: u.header,
                                children: [(0, a.jsx)(l.Heading, {
                                    variant: "text-sm/medium",
                                    children: d.default.Messages.GUILD_AUTOMOD_ALLOW_LIST_TITLE
                                }), _ ? (0, a.jsx)(r.default, {
                                    className: u.arrow
                                }) : (0, a.jsx)(i.default, {
                                    className: u.arrow
                                })]
                            })
                        })
                    }
                })
            }
        },
        219555: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("731898"),
                u = s("206230"),
                c = s("945330"),
                E = s("673122"),
                _ = s("79189");
            let T = n.forwardRef(function(e, t) {
                var s, l;
                let {
                    value: r,
                    isSelected: d,
                    isEditing: u,
                    forceShowErrorTooltip: c = !1,
                    error: E
                } = e, [T, I, S] = n.useMemo(() => {
                    if (null == E) return [];
                    let {
                        erroringCharacterOffset: e = 0,
                        erroringCharacterLength: t = r.length
                    } = null != E ? E : {}, s = r.slice(0, e), a = r.slice(e, e + t), n = r.slice(e + t);
                    return [s, a, n]
                }, [r, E]);
                if (null == E) return (0, a.jsx)("div", {
                    className: i(_.chipletValue, {
                        [_.isEditing]: u,
                        [_.isSelected]: d
                    }),
                    ref: t,
                    children: r
                });
                let N = (null !== (s = null == T ? void 0 : T.length) && void 0 !== s ? s : 0) + (null !== (l = null == I ? void 0 : I.length) && void 0 !== l ? l : 0) > 70;
                return N ? (0, a.jsx)(o.Tooltip, {
                    "aria-label": E.message,
                    text: () => (0, a.jsxs)("div", {
                        "aria-label": E.message,
                        children: [E.message, " ", (0, a.jsx)("span", {
                            className: _.errorOverflowValue,
                            children: I
                        })]
                    }),
                    tooltipClassName: _.errorTooltip,
                    color: o.Tooltip.Colors.RED,
                    position: "left",
                    forceOpen: c || void 0,
                    children: e => (0, a.jsxs)("div", {
                        ref: t,
                        className: i(_.chipletValue, {
                            [_.isEditing]: u,
                            [_.isError]: null != E && !u,
                            [_.isOverflowing]: null != E && !u
                        }),
                        ...e,
                        children: [(0, a.jsx)("span", {
                            children: T
                        }), (0, a.jsx)("span", {
                            className: _.errorValue,
                            children: I
                        }), (0, a.jsx)("span", {
                            children: S
                        })]
                    })
                }) : (0, a.jsxs)("div", {
                    ref: t,
                    className: i(_.chipletValue, {
                        [_.isEditing]: u,
                        [_.isError]: null != E && !u
                    }),
                    children: [(0, a.jsx)("span", {
                        children: T
                    }), (0, a.jsx)(o.Tooltip, {
                        text: E.message,
                        color: o.Tooltip.Colors.RED,
                        position: "top",
                        forceOpen: c || void 0,
                        children: e => (0, a.jsx)("span", {
                            ...e,
                            className: _.errorValue,
                            children: I
                        })
                    }), (0, a.jsx)("span", {
                        children: S
                    })]
                })
            });

            function I(e) {
                let {
                    value: t,
                    onChange: s,
                    onBlur: l,
                    onFocus: I,
                    onRemove: S,
                    isSelected: N,
                    isSelecting: f,
                    error: g,
                    forceShowErrorTooltip: A
                } = e, L = n.useRef(null), m = n.useRef(null), [C, O] = n.useState(!1), {
                    ref: h,
                    width: R = 0
                } = (0, d.default)(C), {
                    ref: D,
                    width: M = 0
                } = (0, d.default)(C), G = (0, r.useStateFromStores)([u.default], () => u.default.useReducedMotion), [x, p] = n.useState(A), U = n.useRef(null), v = R > M ? R : M;
                n.useEffect(() => {
                    A ? (p(!0), U.current = setTimeout(() => {
                        p(!1), U.current = null
                    }, E.CHIPLET_ERROR_FORCE_SHOW_TOOLTIP_TIMER_MS)) : p(!1)
                }, [A]), n.useEffect(() => () => {
                    clearTimeout(U.current)
                }, []);
                let j = n.useCallback(e => {
                        s(e.target.value)
                    }, [s]),
                    P = n.useCallback(function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                            s = t.trim().length <= 0;
                        if (s && S(), null != L.current && null != h.current && null != m.current) {
                            var a;
                            L.current.scrollTo(0, 0), L.current.setSelectionRange(0, 0), L.current.scrollLeft = 0, h.current.scrollLeft = 0, (null === (a = m.current) || void 0 === a ? void 0 : a.ref) != null && (m.current.ref.scrollLeft = 0)
                        }
                        O(!1), l(e)
                    }, [t, h, l, S]),
                    y = n.useCallback(e => {
                        let s = t.trim().length <= 0;
                        E.NEXT_CHIP_INPUT_KEY.has(e.key) ? (e.preventDefault(), e.stopPropagation(), P(!0)) : "Backspace" === e.key && s && (e.preventDefault(), e.stopPropagation(), P(!0))
                    }, [P, t]),
                    b = n.useCallback(e => {
                        let t = e.metaKey || e.ctrlKey;
                        I(t), t ? e.preventDefault() : O(!0), e.stopPropagation()
                    }, [I]),
                    B = n.useCallback(e => {
                        S()
                    }, [S]);
                return (0, a.jsx)("div", {
                    className: _.chipletFlexContainer,
                    children: (0, a.jsxs)("div", {
                        ref: D,
                        className: i(_.chipletContainer, {
                            [_.isEditing]: C,
                            [_.smallBlink]: !C && !G,
                            [_.isSelected]: N,
                            [_.isSelecting]: f,
                            [_.isError]: null != g && !C
                        }),
                        children: [(0, a.jsxs)(o.Clickable, {
                            tag: "div",
                            onBlur: () => P(!1),
                            onClick: b,
                            ignoreKeyPress: !0,
                            onMouseEnter: () => p(!0),
                            onMouseLeave: () => p(!1),
                            className: i(_.chipletContainerInner, {
                                [_.isSelecting]: f,
                                [_.isEditing]: C
                            }),
                            ref: m,
                            children: [(0, a.jsx)("input", {
                                className: i(_.chipletInput, {
                                    [_.isEditing]: C,
                                    [_.isSelecting]: f
                                }),
                                ref: L,
                                onChange: j,
                                onKeyDownCapture: y,
                                value: t,
                                style: {
                                    width: v > 0 ? v : "calc(".concat(t.length, "ch + 10px)")
                                }
                            }), (0, a.jsx)(T, {
                                ref: h,
                                value: t,
                                isEditing: C,
                                isSelected: N,
                                error: g,
                                forceShowErrorTooltip: x || C
                            })]
                        }), !C && (0, a.jsx)(o.Clickable, {
                            className: _.closeIconContainer,
                            onClick: B,
                            children: (0, a.jsx)(c.default, {
                                className: _.closeIcon,
                                width: 12,
                                height: 12
                            })
                        })]
                    })
                })
            }
        },
        995482: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            }), s("222007"), s("860677");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("594203"),
                d = s("219555"),
                u = s("673122"),
                c = s("955198"),
                E = s("163600");

            function _(e) {
                let {
                    resizableNode: t,
                    onResize: s,
                    onResizeEnd: n
                } = e, l = (0, o.default)({
                    minDimension: u.CHIPLET_TEXT_AREA_MIN_HEIGHT,
                    resizableDomNodeRef: t,
                    onElementResize: s,
                    onElementResizeEnd: n,
                    orientation: o.ResizeOrientation.VERTICAL_BOTTOM,
                    throttleDuration: 16
                });
                return (0, a.jsx)("div", {
                    onMouseDown: l,
                    className: E.resizeHandle
                })
            }
            let T = n.forwardRef(function(e, t) {
                let {
                    children: s,
                    onFocus: l,
                    onBlur: i,
                    onClick: o
                } = e, d = n.useRef(null), [c, T] = n.useState(u.CHIPLET_TEXT_AREA_MIN_HEIGHT);
                return (0, a.jsxs)(r.Clickable, {
                    className: E.textArea,
                    onFocus: l,
                    onBlur: i,
                    onClick: o,
                    innerRef: d,
                    ignoreKeyPress: !0,
                    style: {
                        minHeight: c
                    },
                    children: [(0, a.jsx)(r.AdvancedScroller, {
                        className: E.innerScroller,
                        style: {
                            minHeight: c - 2
                        },
                        ref: t,
                        children: s
                    }), (0, a.jsx)(_, {
                        resizableNode: d,
                        onResize: T,
                        onResizeEnd: e => {
                            T(e), null == l || l()
                        }
                    })]
                })
            });

            function I(e) {
                var t;
                let {
                    initialValue: s,
                    onChangeTags: l,
                    onChangeNewTagValue: o,
                    tagErrors: u = {},
                    placeholder: _,
                    className: I,
                    maxTags: S
                } = e, N = n.useRef(null), f = n.useRef(null), g = n.useRef(null), A = (0, c.useChipletState)(s), {
                    handlePasteEvent: L,
                    handleInputChange: m,
                    handleKeyDown: C,
                    handleContainerKeyUp: O,
                    handleRemoveTag: h,
                    handleTagChangeEvent: R,
                    handleSelectTag: D,
                    handleUnselectTag: M,
                    handleResetTagSelections: G,
                    handleInputBlurEvent: x
                } = (0, c.useChipletStateHandlers)(A, {
                    scrollerRef: g,
                    mainInputRef: N,
                    mainContainerRef: f
                }), {
                    state: {
                        value: p,
                        tags: U,
                        selections: v,
                        isSelecting: j
                    }
                } = A, [P, y] = n.useState(!1), b = n.useCallback(() => {
                    var e;
                    y(!1), G(), null === (e = N.current) || void 0 === e || e.focus({
                        preventScroll: !0
                    })
                }, [G]);
                n.useEffect(() => {
                    !P && l(U)
                }, [l, U, P]), n.useEffect(() => {
                    !P && o(p)
                }, [o, p, P]);
                let B = n.useCallback(function() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                        e && b(), y(!1)
                    }, [b]),
                    F = n.useCallback(e => t => {
                        if (t) {
                            var s;
                            let t = v.includes(U[e]);
                            null === (s = N.current) || void 0 === s || s.focus(), t ? M(e) : (D(e), setImmediate(() => {
                                var e;
                                null === (e = N.current) || void 0 === e || e.blur(), setTimeout(() => {
                                    var e;
                                    return null === (e = f.current) || void 0 === e ? void 0 : e.focus()
                                }, 16)
                            }))
                        } else M(e, !0), y(!0)
                    }, [D, M, v, U]);
                return (0, a.jsxs)("div", {
                    className: i(E.mainContainer, I),
                    ref: f,
                    tabIndex: 0,
                    onKeyUp: O,
                    children: [(0, a.jsxs)(T, {
                        ref: g,
                        onClick: b,
                        children: [U.map((e, t) => (0, a.jsx)(d.default, {
                            value: e,
                            onChange: R(t),
                            onBlur: B,
                            onFocus: F(t),
                            onRemove: () => h(t),
                            isSelected: v.includes(e),
                            isSelecting: j,
                            error: u[e],
                            forceShowErrorTooltip: !P && t === U.length - 1
                        }, t)), (0, a.jsx)("input", {
                            className: i(E.mainTextInput, {
                                [E.isEditingOtherNodes]: P
                            }),
                            ref: N,
                            onChange: m,
                            onKeyDownCapture: C,
                            onPaste: L,
                            onBlur: x,
                            placeholder: 0 === U.length ? _ : void 0,
                            value: p
                        })]
                    }), null != S && (0, a.jsxs)(r.Text, {
                        variant: "text-xs/normal",
                        color: "text-muted",
                        className: E.maxTags,
                        children: [null !== (t = null == U ? void 0 : U.length) && void 0 !== t ? t : 0, "/", S]
                    })]
                })
            }
        },
        673122: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                NEXT_CHIP_INPUT_KEY: function() {
                    return a
                },
                CHIPLET_STATE_HISTORY_KEYS: function() {
                    return n
                },
                CHIPLET_ERROR_FORCE_SHOW_TOOLTIP_TIMER_MS: function() {
                    return l
                },
                CHIPLET_TEXT_AREA_MIN_HEIGHT: function() {
                    return i
                },
                CHIPLET_PASTE_SEPERATOR: function() {
                    return r
                }
            }), s("222007");
            let a = new Set(["Enter", "Tab"]),
                n = new Set(["z", "y"]),
                l = 5e3,
                i = 100,
                r = /[\n\t\r\f\v\x10]/
        },
        484811: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("143460"),
                r = s("782340"),
                o = s("593532");

            function d(e) {
                let {
                    preset: t,
                    toggled: s,
                    onToggle: n
                } = e, {
                    headerText: d,
                    subtitleText: u
                } = function(e) {
                    let t = null,
                        s = null;
                    switch (e) {
                        case i.KeywordPreset.PROFANITY:
                            t = r.default.Messages.GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_PROFANITY_HEADER, s = (0, a.jsx)(a.Fragment, {
                                children: r.default.Messages.GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_PROFANITY_SUBTITLE
                            });
                            break;
                        case i.KeywordPreset.SEXUAL_CONTENT:
                            t = r.default.Messages.GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SEXUAL_CONTENT_HEADER, s = (0, a.jsx)(a.Fragment, {
                                children: r.default.Messages.GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SEXUAL_CONTENT_SUBTITLE
                            });
                            break;
                        case i.KeywordPreset.SLURS:
                            t = r.default.Messages.GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SLURS_HEADER, s = (0, a.jsx)(a.Fragment, {
                                children: r.default.Messages.GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SLURS_SUBTITLE
                            });
                            break;
                        default:
                            t = "Error", s = "Unrecognized list"
                    }
                    return {
                        headerText: t,
                        subtitleText: s
                    }
                }(t);
                return (0, a.jsxs)("div", {
                    className: o.keywordListContainer,
                    children: [(0, a.jsxs)("div", {
                        className: o.keywordListTextContainer,
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-sm/semibold",
                            children: d
                        }), (0, a.jsx)(l.Text, {
                            color: "interactive-normal",
                            variant: "text-xs/medium",
                            children: u
                        })]
                    }), (0, a.jsx)(l.Checkbox, {
                        className: o.toggle,
                        type: l.Checkbox.Types.INVERTED,
                        value: s,
                        onChange: () => n(t)
                    })]
                })
            }

            function u(e) {
                var t;
                let {
                    rule: s,
                    onChangeRule: l
                } = e, [r, o] = n.useState(new Set(null == s ? void 0 : null === (t = s.triggerMetadata) || void 0 === t ? void 0 : t.presets)), u = n.useMemo(() => e => {
                    l({
                        ...s,
                        triggerMetadata: {
                            ...s.triggerMetadata,
                            presets: e
                        }
                    })
                }, [l, s]), c = e => {
                    let t = new Set(r);
                    t.has(e) ? t.delete(e) : t.add(e), o(t), u(Array.from(t))
                };
                return (0, a.jsxs)("div", {
                    children: [(0, a.jsx)(d, {
                        preset: i.KeywordPreset.PROFANITY,
                        toggled: r.has(i.KeywordPreset.PROFANITY),
                        onToggle: c
                    }), (0, a.jsx)(d, {
                        preset: i.KeywordPreset.SLURS,
                        toggled: r.has(i.KeywordPreset.SLURS),
                        onToggle: c
                    }), (0, a.jsx)(d, {
                        preset: i.KeywordPreset.SEXUAL_CONTENT,
                        toggled: r.has(i.KeywordPreset.SEXUAL_CONTENT),
                        onToggle: c
                    })]
                })
            }
        },
        839670: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return T
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("169456"),
                i = s("484811"),
                r = s("185709"),
                o = s("260928"),
                d = s("67310"),
                u = s("296416"),
                c = s("143460"),
                E = s("782340"),
                _ = s("452938");

            function T(e) {
                var t, s, T;
                let {
                    rule: I,
                    onChangeRule: S
                } = e, N = n.useCallback(e => {
                    S({
                        ...I,
                        triggerMetadata: {
                            ...I.triggerMetadata,
                            allowList: e
                        }
                    })
                }, [S, I]);
                return (0, a.jsx)(a.Fragment, {
                    children: (0, a.jsxs)("div", {
                        className: _.cardContentsContainer,
                        children: [(0, a.jsxs)(d.default, {
                            step: 1,
                            header: E.default.Messages.GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_TRIGGER_DESCRIPTION,
                            children: [(0, a.jsx)(i.default, {
                                rule: I,
                                onChangeRule: S
                            }), (0, a.jsx)(l.default, {
                                onChange: N,
                                initialValue: null === (t = I.triggerMetadata) || void 0 === t ? void 0 : t.allowList,
                                maxWordCount: c.MAX_KEYWORDS_PER_ALLOWLIST_DEFAULT_KEYWORD_RULE,
                                collapsed: (null === (s = I.triggerMetadata) || void 0 === s ? void 0 : s.allowList) == null || (null === (T = I.triggerMetadata) || void 0 === T ? void 0 : T.allowList.length) === 0
                            })]
                        }), (0, a.jsx)(u.default, {
                            type: u.default.Type.ARROW_DOWN
                        }), (0, a.jsx)(d.default, {
                            step: 2,
                            header: E.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                            children: (0, a.jsx)(r.default, {
                                rule: I,
                                onChangeRule: S
                            })
                        }), (0, a.jsx)(u.default, {
                            type: u.default.Type.CROSS
                        }), (0, a.jsx)(d.default, {
                            step: 3,
                            header: E.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                            children: (0, a.jsx)(o.default, {
                                rule: I,
                                onChangeRule: S
                            })
                        })]
                    })
                })
            }
        },
        316841: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("462392"),
                i = s("490291");

            function r(e) {
                var t;
                let {
                    action: s,
                    actionType: r,
                    triggerType: o
                } = e, d = (0, l.getActionInfo)(null !== (t = null == s ? void 0 : s.type) && void 0 !== t ? t : r, s, o);
                if (null == d) return null;
                let {
                    headerText: u,
                    helperText: c,
                    icon: E
                } = d;
                return (0, a.jsxs)("div", {
                    className: i.actionContainer,
                    children: [(0, a.jsx)("div", {
                        className: i.actionIconContainer,
                        children: (0, a.jsx)(E, {
                            width: 14,
                            height: 14,
                            className: i.actionIcon
                        })
                    }), (0, a.jsx)("div", {
                        className: i.actionTextContainer,
                        children: (0, a.jsxs)(n.Text, {
                            className: i.actionTextHeader,
                            variant: "text-xs/medium",
                            color: "interactive-normal",
                            children: [u, null != c && (0, a.jsx)(n.Text, {
                                className: i.actionTextHelper,
                                variant: "text-xs/medium",
                                color: "text-muted",
                                tag: "span",
                                children: c
                            })]
                        })
                    })]
                })
            }
        },
        613375: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("462392"),
                i = s("782340"),
                r = s("245225");

            function o(e) {
                let {
                    action: t,
                    triggerType: s,
                    toggled: o,
                    onToggleAction: d
                } = e, u = e => () => d(e), c = (0, l.getActionInfo)(t.type, t, s);
                if (null == c) return null;
                let {
                    headerText: E,
                    descriptionText: _,
                    icon: T
                } = c;
                return (0, a.jsxs)("div", {
                    className: r.actionContainer,
                    children: [(0, a.jsx)("div", {
                        className: r.actionIconContainer,
                        children: (0, a.jsx)(T, {
                            width: 24,
                            height: 24,
                            className: r.actionIcon
                        })
                    }), (0, a.jsxs)("div", {
                        className: r.actionTextContainer,
                        children: [(0, a.jsx)(n.Heading, {
                            variant: "heading-sm/semibold",
                            children: E
                        }), (0, a.jsx)(n.Text, {
                            color: "interactive-normal",
                            variant: "text-xs/medium",
                            children: _
                        }), o ? (0, a.jsxs)(n.Text, {
                            color: "text-muted",
                            variant: "text-xs/medium",
                            children: [i.default.Messages.GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_CUSTOM_MESSAGE_HELPER, (0, a.jsx)(n.Clickable, {
                                onClick: u(!0),
                                className: r.editChannel,
                                tag: "span",
                                role: "link",
                                children: i.default.Messages.GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_CUSTOM_MESSAGE_CTA
                            })]
                        }) : null]
                    }), (0, a.jsx)("div", {
                        children: (0, a.jsx)(n.Checkbox, {
                            type: n.Checkbox.Types.INVERTED,
                            value: o,
                            onChange: u(!1),
                            className: r.actionCheckbox
                        })
                    })]
                })
            }
        },
        426016: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return T
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("305961"),
                r = s("957255"),
                o = s("462392"),
                d = s("143460"),
                u = s("49111"),
                c = s("903639"),
                E = s("782340"),
                _ = s("245225");

            function T(e) {
                var t;
                let {
                    action: s,
                    triggerType: T,
                    guildId: I,
                    toggled: S,
                    onToggleAction: N
                } = e, f = e => () => N(e), g = (0, o.getActionInfo)(s.type, s, T), A = null === (t = s.metadata) || void 0 === t ? void 0 : t.durationSeconds, L = null != A ? (0, c.getFriendlyDurationString)(A) : null, m = (0, n.useStateFromStores)([r.default, i.default], () => r.default.can(u.Permissions.MODERATE_MEMBERS, i.default.getGuild(I)), [I]);
                if (null == g) return null;
                let {
                    headerText: C,
                    descriptionText: O,
                    icon: h
                } = g;
                return (0, a.jsxs)("div", {
                    className: _.actionContainer,
                    children: [(0, a.jsx)("div", {
                        className: _.actionIconContainer,
                        children: (0, a.jsx)(h, {
                            width: 24,
                            height: 24,
                            className: _.actionIcon
                        })
                    }), (0, a.jsxs)("div", {
                        className: _.actionTextContainer,
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-sm/semibold",
                            children: C
                        }), (0, a.jsx)(l.Text, {
                            color: "interactive-normal",
                            variant: "text-xs/medium",
                            children: O
                        }), S && (0, a.jsxs)(l.Text, {
                            color: "interactive-normal",
                            variant: "text-xs/medium",
                            children: [function(e, t) {
                                if (null === t) return null;
                                if (e === d.AutomodTriggerType.MENTION_SPAM) return E.default.Messages.GUILD_AUTOMOD_ACTIONS_TIMEOUT_EDIT_HELPER_MENTION_SPAM.format({
                                    friendlyDurationString: t
                                });
                                return E.default.Messages.GUILD_AUTOMOD_ACTIONS_TIMEOUT_EDIT_HELPER.format({
                                    friendlyDurationString: t
                                })
                            }(T, L), m && (0, a.jsx)(l.Clickable, {
                                onClick: f(!0),
                                className: _.editChannel,
                                tag: "span",
                                role: "link",
                                children: E.default.Messages.GUILD_AUTOMOD_ACTIONS_TIMEOUT_UPDATE_DURATION
                            })]
                        })]
                    }), (0, a.jsx)(l.Tooltip, {
                        text: E.default.Messages.GUILD_AUTOMOD_MISSING_TIMEOUT_PERMISSIONS.format(),
                        "aria-label": E.default.Messages.GUILD_AUTOMOD_MISSING_TIMEOUT_PERMISSIONS.plainFormat(),
                        shouldShow: !m,
                        children: e => (0, a.jsx)("div", {
                            ...e,
                            children: (0, a.jsx)(l.Checkbox, {
                                type: l.Checkbox.Types.INVERTED,
                                value: S,
                                onChange: f(!1),
                                disabled: !m,
                                className: _.actionCheckbox
                            })
                        })
                    })]
                })
            }
        },
        450546: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("679653"),
                r = s("42203"),
                o = s("27618"),
                d = s("697218"),
                u = s("462392"),
                c = s("782340"),
                E = s("245225");

            function _(e) {
                var t;
                let {
                    action: s,
                    triggerType: _,
                    toggled: T,
                    onToggleAction: I
                } = e, S = e => () => I(e), N = (0, u.getActionInfo)(s.type, s, _), f = null === (t = s.metadata) || void 0 === t ? void 0 : t.channelId, g = (0, n.useStateFromStores)([d.default, o.default, r.default], () => {
                    let e = r.default.getChannel(f);
                    if (null == e) return null;
                    let t = (0, i.computeChannelName)(e, d.default, o.default);
                    return t
                }, [f]);
                if (null == N) return null;
                let {
                    headerText: A,
                    descriptionText: L,
                    icon: m
                } = N;
                return (0, a.jsxs)("div", {
                    className: E.actionContainer,
                    children: [(0, a.jsx)("div", {
                        className: E.actionIconContainer,
                        children: (0, a.jsx)(m, {
                            width: 24,
                            height: 24,
                            className: E.actionIcon
                        })
                    }), (0, a.jsxs)("div", {
                        className: E.actionTextContainer,
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-sm/semibold",
                            children: A
                        }), (0, a.jsx)(l.Text, {
                            color: "interactive-normal",
                            variant: "text-xs/medium",
                            children: L
                        }), T && (0, a.jsxs)(l.Text, {
                            color: "text-muted",
                            variant: "text-xs/medium",
                            children: [null != g && c.default.Messages.GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_EDIT_HELPER.format({
                                channelName: g
                            }), (0, a.jsx)(l.Clickable, {
                                onClick: S(!0),
                                className: E.editChannel,
                                tag: "span",
                                role: "link",
                                children: c.default.Messages.EDIT_CHANNEL
                            })]
                        })]
                    }), (0, a.jsx)("div", {
                        children: (0, a.jsx)(l.Checkbox, {
                            type: l.Checkbox.Types.INVERTED,
                            value: T,
                            onChange: S(!1),
                            className: E.actionCheckbox
                        })
                    })]
                })
            }
        },
        185709: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("369035"),
                i = s("296839"),
                r = s("928098"),
                o = s("914559");

            function d(e) {
                let {
                    rule: t,
                    onChangeRule: s
                } = e, d = n.useMemo(() => (0, i.getAvailableActionTypes)(t.triggerType), [t.triggerType]), u = r.getPromiseableActionHandlers(t.guildId), c = n.useMemo(() => (0, l.getDefaultActions)(), []), E = (e, a) => {
                    if (null == a) return;
                    let n = t.actions.some(e => e.type === a.type),
                        l = [...t.actions, a];
                    if (n) {
                        let s = t.actions.filter(e => e.type !== a.type);
                        l = e ? [...s, a] : s
                    }
                    s({
                        ...t,
                        actions: l
                    })
                }, _ = e => async s => {
                    let a = t.actions.find(t => t.type === e),
                        n = null != a,
                        l = c[e],
                        i = s ? a : l;
                    if (null != i && (!n || s)) {
                        let s = u[e];
                        if (null != s) {
                            let e = await s(t, i);
                            E(!0, e)
                        } else E(!0, i)
                    } else E(!1, n ? a : l)
                };
                return (0, a.jsx)(a.Fragment, {
                    children: d.map(e => {
                        let s = t.actions.find(t => t.type === e);
                        return (0, a.jsx)(o.default, {
                            guildId: t.guildId,
                            triggerType: t.triggerType,
                            action: null != s ? s : c[e],
                            toggled: null != s,
                            onToggleAction: _(e)
                        }, e)
                    })
                })
            }
        },
        872708: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("454686"),
                l = s("839670"),
                i = s("279843"),
                r = s("447820"),
                o = s("154639"),
                d = s("599646"),
                u = s("309175");

            function c(e) {
                let {
                    rule: t,
                    isLoading: s,
                    onChangeRule: c
                } = e;
                return null == t ? null : (0, n.isRuleKeywordFilter)(t) ? (0, a.jsx)(i.default, {
                    rule: t,
                    isLoading: s,
                    onChangeRule: c
                }) : (0, n.isRuleMLSpamFilter)(t) ? (0, a.jsx)(r.default, {
                    rule: t,
                    isLoading: s,
                    onChangeRule: c
                }) : (0, n.isRuleDefaultKeywordListFilter)(t) ? (0, a.jsx)(l.default, {
                    rule: t,
                    isLoading: s,
                    onChangeRule: c
                }) : (0, n.isRuleMentionSpamFilter)(t) ? (0, a.jsx)(o.default, {
                    rule: t,
                    isLoading: s,
                    onChangeRule: c
                }) : (0, n.isRuleServerPolicyFilter)(t) ? (0, a.jsx)(d.default, {
                    rule: t,
                    isLoading: s,
                    onChangeRule: c
                }) : (0, n.isRuleUserProfileFilter)(t) ? (0, a.jsx)(u.default, {
                    rule: t,
                    isLoading: s,
                    onChangeRule: c
                }) : null
            }
        },
        279843: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("169456"),
                i = s("185709"),
                r = s("432107"),
                o = s("301341"),
                d = s("260928"),
                u = s("67310"),
                c = s("296416"),
                E = s("143460"),
                _ = s("782340"),
                T = s("452938");

            function I(e) {
                var t, s, I, S, N, f;
                let {
                    rule: g,
                    onChangeRule: A
                } = e, L = n.useCallback(e => {
                    A({
                        ...g,
                        triggerMetadata: {
                            ...g.triggerMetadata,
                            keywordFilter: e
                        }
                    })
                }, [A, g]), m = n.useCallback(e => {
                    A({
                        ...g,
                        triggerMetadata: {
                            ...g.triggerMetadata,
                            allowList: e
                        }
                    })
                }, [A, g]);
                return (0, a.jsx)(a.Fragment, {
                    children: (0, a.jsxs)("div", {
                        className: T.cardContentsContainer,
                        children: [(0, a.jsxs)(u.default, {
                            step: 1,
                            header: _.default.Messages.GUILD_AUTOMOD_KEYWORD_FILTER_TRIGGER_HEADER,
                            children: [(0, a.jsx)(o.default, {
                                onChangeText: L,
                                maxWordCount: E.MAX_KEYWORDS_PER_KEYWORD_FILTER,
                                initialValue: null === (t = g.triggerMetadata) || void 0 === t ? void 0 : t.keywordFilter
                            }), (0, a.jsx)(r.default, {
                                rule: g,
                                onChangeRule: A,
                                collapsed: (null == g ? void 0 : null === (s = g.triggerMetadata) || void 0 === s ? void 0 : s.regexPatterns) == null || (null == g ? void 0 : null === (I = g.triggerMetadata) || void 0 === I ? void 0 : I.regexPatterns.length) === 0
                            }), (0, a.jsx)(l.default, {
                                onChange: m,
                                initialValue: null === (S = g.triggerMetadata) || void 0 === S ? void 0 : S.allowList,
                                maxWordCount: E.MAX_KEYWORDS_PER_ALLOWLIST_KEYWORD_FILTER_RULE,
                                collapsed: (null === (N = g.triggerMetadata) || void 0 === N ? void 0 : N.allowList) == null || (null === (f = g.triggerMetadata) || void 0 === f ? void 0 : f.allowList.length) === 0
                            })]
                        }), (0, a.jsx)(c.default, {
                            type: c.default.Type.ARROW_DOWN
                        }), (0, a.jsx)(u.default, {
                            step: 2,
                            header: _.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                            children: (0, a.jsx)(i.default, {
                                rule: g,
                                onChangeRule: A
                            })
                        }), (0, a.jsx)(c.default, {
                            type: c.default.Type.CROSS
                        }), (0, a.jsx)(u.default, {
                            step: 3,
                            header: _.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                            children: (0, a.jsx)(d.default, {
                                rule: g,
                                onChangeRule: A
                            })
                        })]
                    })
                })
            }
        },
        432107: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("837899"),
                r = s("425190"),
                o = s("183866"),
                d = s("464847"),
                u = s("782340"),
                c = s("820656");

            function E(e) {
                var t;
                let {
                    rule: s,
                    onChangeRule: E,
                    collapsed: _ = !1
                } = e, [T, I] = n.useState(!_), S = n.useCallback(() => {
                    I(!T)
                }, [T, I]), N = n.useCallback(e => {
                    E({
                        ...s,
                        triggerMetadata: {
                            ...s.triggerMetadata,
                            regexPatterns: e
                        }
                    })
                }, [E, s]);
                return (0, o.isRegexSupported)(s.triggerType) ? (0, a.jsx)(l.Collapsible, {
                    isExpanded: T,
                    collapsibleContent: (0, a.jsx)(d.default, {
                        rule: s,
                        onChangeText: N,
                        className: c.textAreaContainer,
                        initialValue: null === (t = s.triggerMetadata) || void 0 === t ? void 0 : t.regexPatterns
                    }),
                    className: c.collapseable,
                    children: e => {
                        let {
                            onClick: t
                        } = e;
                        return (0, a.jsx)(l.Clickable, {
                            onClick: e => {
                                S(), t(e)
                            },
                            children: (0, a.jsxs)("div", {
                                className: c.header,
                                children: [(0, a.jsx)(l.Heading, {
                                    variant: "text-sm/medium",
                                    children: u.default.Messages.GUILD_AUTOMOD_REGEX_TEXTAREA_TITLE
                                }), T ? (0, a.jsx)(r.default, {
                                    className: c.arrow
                                }) : (0, a.jsx)(i.default, {
                                    className: c.arrow
                                })]
                            })
                        })
                    }
                }) : null
            }
        },
        464847: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return N
                }
            }), s("222007"), s("808653");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("701909"),
                d = s("995482"),
                u = s("16207"),
                c = s("143460"),
                E = s("49111"),
                _ = s("782340"),
                T = s("493265");
            let I = o.default.getArticleURL(E.HelpdeskArticles.GUILD_AUTOMOD_REGEX);

            function S(e) {
                let {
                    hasErrors: t,
                    text: s,
                    errorText: n
                } = e;
                return t ? (0, a.jsx)("div", {
                    className: i(T.subtext),
                    children: (0, a.jsx)(r.Text, {
                        className: i(T.errorSpan),
                        variant: "text-xs/medium",
                        color: "text-danger",
                        children: null != n ? n : _.default.Messages.GUILD_AUTOMOD_REGEX_ERROR_HELP.format({
                            helpArticle: I
                        })
                    })
                }) : (0, a.jsx)(r.Text, {
                    className: T.subtext,
                    variant: "text-xs/medium",
                    color: "text-muted",
                    children: s
                })
            }

            function N(e) {
                var t, s;
                let {
                    rule: l,
                    onChangeText: r,
                    className: o
                } = e, {
                    patterns: E,
                    valueError: N,
                    errors: f,
                    validatePatternsChanged: g,
                    validateEditingValueChanged: A
                } = (0, u.default)(l, r), [L] = n.useState(() => ({
                    tags: E,
                    value: "",
                    selections: [],
                    isSelecting: !1
                })), m = n.useMemo(() => f.reduce((e, t) => {
                    let {
                        pattern: s,
                        message: a,
                        description: n,
                        erroringCharacterLength: l = s.length,
                        erroringCharacterOffset: i = 0
                    } = t, r = E.find(e => e === s);
                    return null == r ? e : (e[s] = {
                        value: s,
                        message: null != n ? n : a,
                        erroringCharacterLength: l,
                        erroringCharacterOffset: i
                    }, e)
                }, {}), [f, E]), C = n.useCallback(e => {
                    g(e, E)
                }, [g, E]), O = n.useCallback(e => {
                    A(e)
                }, [A]);
                return (0, a.jsxs)("div", {
                    className: i(T.keywordsContainer, o),
                    children: [(0, a.jsx)(d.default, {
                        placeholder: "^b(a|@)d$\nw(o|0)rd(s|$)",
                        initialValue: L,
                        onChangeTags: C,
                        onChangeNewTagValue: O,
                        tagErrors: m,
                        maxTags: c.MAX_REGEX_PATTERNS_PER_KEYWORD_FILTER
                    }), (0, a.jsx)(S, {
                        text: _.default.Messages.GUILD_AUTOMOD_REGEX_SUBTEXT.format({
                            helpArticle: I
                        }),
                        hasErrors: f.length > 0 || null != N,
                        errorText: null !== (s = null === (t = f.find(e => {
                            let {
                                pattern: t
                            } = e;
                            return t === u.SCHEMA_ERROR_KEY
                        })) || void 0 === t ? void 0 : t.message) && void 0 !== s ? s : null == N ? void 0 : N.message
                    })]
                })
            }
        },
        301341: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("201074"),
                d = s("782340"),
                u = s("581796");

            function c(e) {
                let {
                    onChangeText: t,
                    maxWordCount: s,
                    className: l,
                    textAreaClassName: c,
                    subtitleText: E,
                    initialValue: _
                } = e, T = n.useMemo(() => null != _ ? _ : [], [_]), {
                    value: I,
                    onChange: S,
                    errorMessage: N
                } = (0, o.default)(t, _, s);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: i(u.keywordsContainer, l),
                        children: [(0, a.jsx)(r.TextAreaAutosize, {
                            className: i(u.keywordsTextArea, c),
                            value: I,
                            onChange: S,
                            placeholder: d.default.Messages.GUILD_AUTOMOD_KEYWORDS_PLACEHOLDER
                        }), (0, a.jsx)(r.Text, {
                            className: u.keywordsCounter,
                            variant: "text-xs/normal",
                            color: "text-muted",
                            children: "".concat(T.length, " / ").concat(s)
                        })]
                    }), null != N ? (0, a.jsx)(r.Text, {
                        className: u.paddingTop,
                        variant: "text-xs/medium",
                        color: "text-danger",
                        children: N
                    }) : (0, a.jsx)(r.Text, {
                        className: u.paddingTop,
                        variant: "text-xs/normal",
                        color: "header-secondary",
                        children: null != E ? E : d.default.Messages.GUILD_AUTOMOD_KEYWORD_ENTRY_HINT
                    })]
                })
            }
        },
        447820: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("185709"),
                l = s("260928"),
                i = s("67310"),
                r = s("296416"),
                o = s("782340"),
                d = s("452938");

            function u(e) {
                let {
                    rule: t,
                    onChangeRule: s
                } = e;
                return (0, a.jsx)(a.Fragment, {
                    children: (0, a.jsxs)("div", {
                        className: d.cardContentsContainer,
                        children: [(0, a.jsx)(i.default, {
                            step: 1,
                            header: o.default.Messages.GUILD_AUTOMOD_ML_SPAM_FILTER_TRIGGER_HEADER
                        }), (0, a.jsx)(r.default, {
                            type: r.default.Type.ARROW_DOWN
                        }), (0, a.jsx)(i.default, {
                            step: 2,
                            header: o.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                            children: (0, a.jsx)(n.default, {
                                rule: t,
                                onChangeRule: s
                            })
                        }), (0, a.jsx)(r.default, {
                            type: r.default.Type.CROSS
                        }), (0, a.jsx)(i.default, {
                            step: 3,
                            header: o.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                            children: (0, a.jsx)(l.default, {
                                rule: t,
                                onChangeRule: s
                            })
                        })]
                    })
                })
            }
        },
        154639: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return N
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("751433"),
                r = s("116320"),
                o = s("412131"),
                d = s("926809"),
                u = s("185709"),
                c = s("260928"),
                E = s("67310"),
                _ = s("296416"),
                T = s("143460"),
                I = s("782340"),
                S = s("744432");

            function N(e) {
                var t, s;
                let {
                    rule: N,
                    onChangeRule: f
                } = e, [g, A] = n.useState(null === (t = N.triggerMetadata) || void 0 === t ? void 0 : t.mentionTotalLimit), L = (0, d.useIsMentionRaidExperimentEnabled)(N.guildId, !1);
                return (0, a.jsx)(a.Fragment, {
                    children: (0, a.jsxs)("div", {
                        className: S.cardContentsContainer,
                        children: [(0, a.jsxs)(E.default, {
                            step: 1,
                            header: I.default.Messages.GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_HEADER,
                            children: [(0, a.jsxs)("div", {
                                className: S.mentionLimitContainer,
                                children: [(0, a.jsx)("div", {
                                    className: S.mentionLimitIconContainer,
                                    children: (0, a.jsx)(r.default, {
                                        width: 24,
                                        height: 24,
                                        className: S.mentionLimitIcon
                                    })
                                }), (0, a.jsxs)("div", {
                                    className: S.mentionLimitTextContainer,
                                    children: [(0, a.jsx)(l.Heading, {
                                        variant: "heading-sm/semibold",
                                        children: I.default.Messages.GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_DESCRIPTION
                                    }), (0, a.jsx)(l.Text, {
                                        color: "interactive-normal",
                                        variant: "text-xs/medium",
                                        className: S.descriptionHint,
                                        children: I.default.Messages.GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_DESCRIPTION_HINT
                                    })]
                                }), (0, a.jsx)("div", {
                                    className: S.stepperContainer,
                                    children: (0, a.jsx)(i.default, {
                                        value: g,
                                        onChange: e => {
                                            A(e), f({
                                                ...N,
                                                triggerMetadata: {
                                                    ...N.triggerMetadata,
                                                    mentionTotalLimit: e
                                                }
                                            })
                                        },
                                        minValue: T.MIN_MENTION_SPAM_LIMIT,
                                        maxValue: T.MAX_MENTION_SPAM_LIMIT,
                                        className: S.stepper
                                    })
                                })]
                            }), L ? (0, a.jsxs)("div", {
                                className: S.mentionLimitContainer,
                                children: [(0, a.jsx)("div", {
                                    className: S.mentionLimitIconContainer,
                                    children: (0, a.jsx)(o.default, {
                                        width: 24,
                                        height: 24,
                                        className: S.mentionLimitIcon
                                    })
                                }), (0, a.jsxs)("div", {
                                    className: S.mentionLimitTextContainer,
                                    children: [(0, a.jsx)(l.Heading, {
                                        variant: "heading-sm/semibold",
                                        children: I.default.Messages.GUILD_AUTOMOD_MENTION_SPAM_FILTER_RAID_DESCRIPTION
                                    }), (0, a.jsx)(l.Text, {
                                        color: "interactive-normal",
                                        variant: "text-xs/medium",
                                        className: S.descriptionHint,
                                        children: I.default.Messages.GUILD_AUTOMOD_MENTION_SPAM_FILTER_RAID_DESCRIPTION_HINT
                                    })]
                                }), (0, a.jsx)("div", {
                                    children: (0, a.jsx)(l.Checkbox, {
                                        type: l.Checkbox.Types.INVERTED,
                                        value: null === (s = N.triggerMetadata) || void 0 === s ? void 0 : s.mentionRaidProtectionEnabled,
                                        onChange: (e, t) => {
                                            f({
                                                ...N,
                                                triggerMetadata: {
                                                    ...N.triggerMetadata,
                                                    mentionRaidProtectionEnabled: t
                                                }
                                            })
                                        },
                                        className: S.actionCheckbox
                                    })
                                })]
                            }) : null]
                        }), (0, a.jsx)(_.default, {
                            type: _.default.Type.ARROW_DOWN
                        }), (0, a.jsx)(E.default, {
                            step: 2,
                            header: I.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                            children: (0, a.jsx)(u.default, {
                                rule: N,
                                onChangeRule: f
                            })
                        }), (0, a.jsx)(_.default, {
                            type: _.default.Type.CROSS
                        }), (0, a.jsx)(E.default, {
                            step: 3,
                            header: I.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                            children: (0, a.jsx)(c.default, {
                                rule: N,
                                onChangeRule: f
                            })
                        })]
                    })
                })
            }
        },
        842357: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("454686"),
                i = s("254365"),
                r = s("151866"),
                o = s("155158"),
                d = s("872708"),
                u = s("567062"),
                c = s("248182"),
                E = n.memo(function(e) {
                    let {
                        rule: t,
                        persistEdit: s = !1,
                        initWithEdit: E = !1
                    } = e, {
                        hasChanges: _,
                        editingRule: T,
                        createNewEditingRule: I,
                        setEditingRule: S
                    } = (0, r.useAutomodEditingRuleState)(), {
                        isLoading: N
                    } = (0, r.useAutomodEditingRuleActions)(), [f] = n.useState(() => !(0, l.isBackendPersistedRule)(t)), g = (null == T ? void 0 : T.id) === t.id || s, A = (0, i.isDefaultRuleId)(null == t ? void 0 : t.id), L = g && null != T ? T : t, m = n.useMemo(() => (0, o.createOnPreventNavigation)(t.name), [null == t ? void 0 : t.name]), C = n.useCallback(() => {
                        I(t.guildId, t.triggerType)
                    }, [t.guildId, t.triggerType, I]), O = n.useCallback(e => {
                        !N && S(e, !0)
                    }, [N, S]);
                    n.useEffect(() => {
                        E && S(t, !0)
                    }, [E, t, S]);
                    let h = n.useCallback(() => {
                        g ? !_ && S(null) : _ ? m(() => {
                            S(t)
                        }) : S(t)
                    }, [g, _, m, t, S]);
                    return (0, a.jsx)(u.default, {
                        renderHeader: (0, a.jsx)(c.default, {
                            rule: L,
                            forceSetup: f && !g && !A,
                            triggerType: t.triggerType,
                            isEditMode: g,
                            isDefaultRule: A,
                            onChangeRule: O,
                            onSetupRule: C
                        }),
                        isStuck: g && _,
                        isExpanded: g,
                        onExpand: h,
                        children: g && (0, a.jsx)(d.default, {
                            rule: L,
                            isLoading: N,
                            onChangeRule: O
                        })
                    })
                })
        },
        567062: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return T
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("301165"),
                o = s("446674"),
                d = s("77078"),
                u = s("731898"),
                c = s("206230"),
                E = s("782340"),
                _ = s("610990"),
                T = n.memo(function(e) {
                    let {
                        renderHeader: t,
                        children: s,
                        isExpanded: l,
                        isStuck: T,
                        onExpand: I
                    } = e, S = (0, o.useStateFromStores)([c.default], () => c.default.useReducedMotion), [N, f] = n.useState(!0), [g, A] = n.useState(!1), {
                        ref: L,
                        height: m = 0
                    } = (0, u.default)(), {
                        ref: C,
                        height: O = 0
                    } = (0, u.default)(), [h, R] = n.useState(l), D = (0, r.useSpring)({
                        height: h ? O + m : m,
                        immediate: N || S,
                        config: {
                            ...r.config.stiff,
                            clamp: !0
                        },
                        onStart: () => {
                            A(!1)
                        },
                        onRest: () => {
                            A(!0)
                        }
                    });
                    n.useLayoutEffect(() => {
                        A(!1), R(l)
                    }, [l]);
                    let [M, G] = n.useState(!1), x = () => {
                        G(!1)
                    };
                    return n.useLayoutEffect(() => {
                        let e = setTimeout(() => {
                            f(!1)
                        }, 100);
                        return () => clearTimeout(e)
                    }, []), (0, a.jsx)(d.Clickable, {
                        className: i(_.editCard, {
                            [_.toggled]: l,
                            [_.active]: M
                        }),
                        onMouseLeave: x,
                        onMouseDown: () => {
                            G(!0)
                        },
                        onMouseUp: x,
                        children: (0, a.jsxs)(r.animated.div, {
                            className: i(_.contentExpandContainer, {
                                [_.showOverflow]: l && g
                            }),
                            style: D,
                            children: [(0, a.jsx)(d.Clickable, {
                                innerRef: L,
                                onClick: T ? void 0 : I,
                                className: i(_.innerHeader, {
                                    [_.toggled]: l && T
                                }),
                                "aria-label": E.default.Messages.EXPAND,
                                children: t
                            }), (0, a.jsx)("div", {
                                ref: C,
                                children: s
                            })]
                        })
                    })
                })
        },
        260928: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("165426"),
                r = s("571067"),
                o = s("782340"),
                d = s("49305"),
                u = n.memo(function(e) {
                    let {
                        rule: t,
                        onlyRoles: s = !1,
                        onChangeRule: n
                    } = e, u = (0, a.jsx)(i.default, {
                        guildId: t.guildId,
                        selectedChannelIds: t.exemptChannels,
                        selectedRoleIds: t.exemptRoles,
                        onChange: (e, s) => n({
                            ...t,
                            exemptChannels: e,
                            exemptRoles: s
                        }),
                        disableEveryoneRole: !0,
                        includeRoleRestrictedPrivateChannels: !0
                    });
                    return s && (u = (0, a.jsx)(r.default, {
                        guildId: t.guildId,
                        selectedRoleIds: t.exemptRoles,
                        onChange: e => n({
                            ...t,
                            exemptRoles: e
                        }),
                        placeholder: o.default.Messages.GUILD_AUTOMOD_EXEMPTION_SEARCH_ROLE_PLACEHOLDER,
                        disableEveryoneRole: !0
                    })), (0, a.jsxs)(l.FormItem, {
                        children: [u, (0, a.jsx)(l.Text, {
                            color: "header-secondary",
                            variant: "text-xs/normal",
                            className: d.exemptionHint,
                            children: o.default.Messages.GUILD_AUTOMOD_EXEMPTION_HINT
                        })]
                    })
                })
        },
        248182: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return G
                }
            }), s("808653"), s("424973"), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("917351"),
                i = s("77078"),
                r = s("272030"),
                o = s("740822"),
                d = s("298878"),
                u = s("663745"),
                c = s("454686"),
                E = s("353575"),
                _ = s("296839"),
                T = s("151866"),
                I = s("183866"),
                S = s("316841"),
                N = s("788112"),
                f = s("143460"),
                g = s("782340"),
                A = s("69754");

            function L(e) {
                let {
                    rule: t,
                    triggerType: s
                } = e, l = n.useMemo(() => null == t ? (0, _.getAvailableActionTypes)(s).map(e => (0, a.jsx)(S.default, {
                    actionType: e,
                    triggerType: s
                }, e)) : (0, _.getAvailableActionTypes)(s).reduce((e, n) => {
                    var l;
                    let i = t.actions.find(e => {
                        let {
                            type: t
                        } = e;
                        return n === t
                    });
                    return null == i ? e : (e.push((0, a.jsx)(S.default, {
                        actionType: n,
                        action: i,
                        triggerType: null !== (l = null == t ? void 0 : t.triggerType) && void 0 !== l ? l : s
                    }, n)), e)
                }, []), [t, s]);
                return 0 === l.length ? null : (0, a.jsx)("div", {
                    className: A.actionRuleListContainer,
                    children: l
                })
            }
            let m = (e, t) => () => t({
                    ...e,
                    enabled: !e.enabled
                }),
                C = e => {
                    e.stopPropagation(), e.preventDefault()
                },
                O = e => {
                    let {
                        className: t,
                        children: s,
                        ...n
                    } = e;
                    return (0, a.jsx)(i.Clickable, {
                        className: t,
                        onClick: C,
                        onMouseDown: C,
                        onMouseUp: C,
                        ...n,
                        children: s
                    })
                };

            function h(e) {
                var t;
                let {
                    rule: s,
                    onChangeRule: n,
                    onContextMenu: l
                } = e, r = m(s, n), o = e => {
                    C(e), l(e)
                };
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)("div", {
                        className: A.ruleTextContainer,
                        children: (0, a.jsx)(N.default, {
                            rule: s,
                            onChangeRule: n
                        })
                    }), (0, a.jsxs)(O, {
                        className: A.actionContainer,
                        children: [(0, a.jsx)(i.Switch, {
                            className: A.toggle,
                            onChange: r,
                            checked: null !== (t = null == s ? void 0 : s.enabled) && void 0 !== t && t
                        }), (0, a.jsx)(i.Tooltip, {
                            text: g.default.Messages.MORE,
                            position: "top",
                            "aria-label": g.default.Messages.MORE_OPTIONS,
                            children: e => (0, a.jsx)(i.Clickable, {
                                ...e,
                                onClick: o,
                                className: A.menuIconButton,
                                children: (0, a.jsx)(u.default, {
                                    width: 24,
                                    height: 24,
                                    className: A.menuIcon
                                })
                            })
                        })]
                    })]
                })
            }

            function R(e) {
                return (0, _.checkTriggerTypeForFlag)(e, _.AutomodTriggerConfigFlags.ALPHA) ? (0, a.jsx)(o.default, {
                    className: A.alphaBetaTag
                }) : (0, _.checkTriggerTypeForFlag)(e, _.AutomodTriggerConfigFlags.BETA) ? (0, a.jsx)(d.default, {
                    className: A.alphaBetaTag
                }) : null
            }

            function D(e) {
                let {
                    rule: t,
                    isDefaultRule: s,
                    onContextMenu: r
                } = e, o = (0, I.getRuleInfo)(t.triggerType, t), {
                    isLoading: d,
                    saveRule: _
                } = (0, T.useAutomodEditingRuleActions)(), {
                    updateRule: S
                } = (0, E.useAutomodRulesList)(t.guildId), [N, f] = n.useState(t.enabled), m = (0, l.throttle)(async (e, s) => {
                    if (s.preventDefault(), s.stopPropagation(), !d) {
                        let e = {
                            ...t,
                            enabled: !N
                        };
                        f(!N);
                        let s = await _(e, []);
                        if (null != s) S(s), f(s.enabled)
                    }
                }, 300), h = e => {
                    C(e), r(e)
                };
                if (null == o) return null;
                let {
                    headerText: D,
                    headerSubtext: M,
                    descriptionText: G,
                    icon: x
                } = o, p = !(0, c.isBackendPersistedRule)(t);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)("div", {
                        className: A.ruleIconContainer,
                        children: (0, a.jsx)(x, {
                            width: 24,
                            height: 24,
                            className: A.ruleIcon
                        })
                    }), (0, a.jsxs)("div", {
                        className: A.ruleTextContainer,
                        children: [(0, a.jsxs)(i.Heading, {
                            variant: "text-md/semibold",
                            color: "header-primary",
                            className: A.ruleTextHeaderContainer,
                            children: [(0, a.jsxs)("div", {
                                className: A.ruleTextHeader,
                                children: [D, R(t.triggerType)]
                            }), (0, a.jsx)(i.Text, {
                                className: A.ruleSubtextHeader,
                                variant: "text-sm/normal",
                                children: M
                            })]
                        }), p && (0, a.jsx)(i.Text, {
                            className: A.ruleTextDescription,
                            variant: "text-sm/normal",
                            children: G
                        }), (0, a.jsx)(L, {
                            rule: t,
                            triggerType: t.triggerType
                        })]
                    }), (0, a.jsxs)(O, {
                        className: A.actionContainer,
                        children: [(0, a.jsx)(i.Switch, {
                            className: A.toggle,
                            onChange: m,
                            checked: null != N && N
                        }), !s && (0, a.jsx)(i.Tooltip, {
                            text: g.default.Messages.MORE,
                            position: "top",
                            "aria-label": g.default.Messages.MORE_OPTIONS,
                            children: e => (0, a.jsx)(i.Clickable, {
                                ...e,
                                onClick: h,
                                className: A.menuIconButton,
                                children: (0, a.jsx)(u.default, {
                                    width: 24,
                                    height: 24,
                                    className: A.menuIcon
                                })
                            })
                        })]
                    })]
                })
            }

            function M(e) {
                let {
                    triggerType: t,
                    onSetupRule: s
                } = e, l = n.useMemo(() => (0, I.getRuleInfo)(t), [t]);
                if (null == l) return null;
                let {
                    headerText: r,
                    descriptionText: o,
                    icon: d
                } = l;
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)("div", {
                        className: A.ruleIconContainer,
                        children: (0, a.jsx)(d, {
                            width: 24,
                            height: 24,
                            className: A.ruleIcon
                        })
                    }), (0, a.jsxs)("div", {
                        className: A.ruleTextContainer,
                        children: [(0, a.jsx)(i.Heading, {
                            className: A.ruleTextHeader,
                            variant: "text-md/semibold",
                            color: "header-primary",
                            children: (0, a.jsxs)("div", {
                                className: A.ruleTextHeader,
                                children: [r, R(t)]
                            })
                        }), (0, a.jsx)(i.Text, {
                            className: A.ruleTextDescription,
                            variant: "text-sm/normal",
                            children: o
                        }), (0, a.jsx)(L, {
                            triggerType: t
                        })]
                    }), (0, a.jsx)(O, {
                        className: A.actionContainer,
                        children: (0, a.jsx)(i.Button, {
                            size: i.Button.Sizes.SMALL,
                            onClick: s,
                            children: t === f.AutomodTriggerType.KEYWORD ? g.default.Messages.CREATE : g.default.Messages.GUILD_AUTOMOD_RULE_SETUP_BUTTON
                        })
                    })]
                })
            }

            function G(e) {
                let {
                    rule: t,
                    triggerType: n,
                    isEditMode: l,
                    isDefaultRule: o,
                    forceSetup: d,
                    onSetupRule: u,
                    onChangeRule: c
                } = e, E = e => {
                    null != t && (e.preventDefault(), e.stopPropagation(), (0, r.openContextMenuLazy)(e, async () => {
                        let {
                            default: e
                        } = await s.el("730153").then(s.bind(s, "730153"));
                        return s => (0, a.jsx)(e, {
                            rule: t,
                            ...s
                        })
                    }))
                }, _ = (0, a.jsx)(M, {
                    triggerType: n,
                    onSetupRule: u
                });
                return null != t && !d && (_ = l ? (0, a.jsx)(h, {
                    rule: t,
                    onChangeRule: c,
                    onContextMenu: E
                }) : (0, a.jsx)(D, {
                    rule: t,
                    isDefaultRule: o,
                    onContextMenu: E
                })), (0, a.jsx)(i.Clickable, {
                    className: A.mainContainer,
                    onContextMenu: E,
                    children: _
                })
            }
        },
        788112: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("143460"),
                r = s("49111"),
                o = s("782340"),
                d = s("198030"),
                u = s("705749");

            function c(e) {
                let {
                    rule: t,
                    onChangeRule: s
                } = e, [c, E] = n.useState(t.name);
                return (0, a.jsxs)(l.FormItem, {
                    children: [(0, a.jsx)(l.Text, {
                        className: u.triggerHeader,
                        variant: "text-sm/semibold",
                        children: o.default.Messages.GUILD_AUTOMOD_INPUT_FILTER_NAME
                    }), (0, a.jsx)(l.TextInput, {
                        className: d.ruleNameInput,
                        onChange: e => {
                            E(e), s({
                                ...t,
                                name: e
                            })
                        },
                        onClick: e => e.stopPropagation(),
                        onKeyPress: e => {
                            e.which === r.KeyboardKeys.SPACE && e.stopPropagation()
                        },
                        placeholder: o.default.Messages.GUILD_AUTOMOD_INPUT_FILTER_NAME_PLACEHOLDER,
                        maxLength: i.MAX_RULE_NAME_LENGTH,
                        value: c
                    })]
                })
            }
        },
        124188: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("296839"),
                l = s("88063"),
                i = s("320493"),
                r = s("842357");

            function o(e) {
                let {
                    guildId: t,
                    rules: s,
                    triggerType: o,
                    initWithEdit: d
                } = e, {
                    perGuildMaxCount: u
                } = n.triggerConfigs[o], c = 0 === s.length, E = u > s.length && !c;
                return (0, a.jsxs)(a.Fragment, {
                    children: [c && (0, a.jsx)(i.default, {
                        guildId: t,
                        triggerType: o
                    }), s.map(e => (0, a.jsx)(r.default, {
                        rule: e,
                        initWithEdit: d
                    }, e.id)), E && (0, a.jsx)(l.default, {
                        guildId: t,
                        triggerType: o
                    })]
                })
            }
        },
        599646: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return g
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("592407"),
                r = s("42203"),
                o = s("305961"),
                d = s("759885"),
                u = s("185709"),
                c = s("260928"),
                E = s("67310"),
                _ = s("296416"),
                T = s("49111"),
                I = s("782340"),
                S = s("452938");

            function N(e) {
                let {
                    channel: t,
                    beforeTransition: s
                } = e;
                return null != t ? (0, a.jsx)(d.default, {
                    channel: t,
                    className: S.channelName,
                    beforeTransition: s,
                    openChatWithoutConnecting: !0
                }) : null
            }

            function f(e) {
                let {
                    guildId: t
                } = e, s = (0, n.useStateFromStores)([o.default], () => o.default.getGuild(t), [t]), d = (0, n.useStateFromStores)([r.default], () => null != s ? r.default.getChannel(s.rulesChannelId) : null, [s]), u = () => {
                    i.default.close()
                }, c = () => {
                    i.default.setSection(T.GuildSettingsSections.MEMBER_VERIFICATION)
                }, E = null != d ? I.default.Messages.GUILD_AUTOMOD_SERVER_POLICY_FILTER_TRIGGER_SUBHEADER_WITH_CHANNEL.format({
                    onClick: c,
                    channelName: d.name,
                    channelHook: () => (0, a.jsx)(N, {
                        channel: d,
                        beforeTransition: u
                    })
                }) : I.default.Messages.GUILD_AUTOMOD_SERVER_POLICY_FILTER_TRIGGER_SUBHEADER.format({
                    onClick: c
                });
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(l.Text, {
                        variant: "text-md/normal",
                        children: I.default.Messages.GUILD_AUTOMOD_SERVER_POLICY_FILTER_TRIGGER_HEADER
                    }), (0, a.jsx)(l.Text, {
                        variant: "text-xs/normal",
                        className: S.subHeaderText,
                        children: E
                    })]
                })
            }

            function g(e) {
                let {
                    rule: t,
                    onChangeRule: s
                } = e;
                return (0, a.jsx)(a.Fragment, {
                    children: (0, a.jsxs)("div", {
                        className: S.cardContentsContainer,
                        children: [(0, a.jsx)(E.default, {
                            step: 1,
                            header: (0, a.jsx)(f, {
                                guildId: t.guildId
                            })
                        }), (0, a.jsx)(_.default, {
                            type: _.default.Type.ARROW_DOWN
                        }), (0, a.jsx)(E.default, {
                            step: 2,
                            header: I.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                            children: (0, a.jsx)(u.default, {
                                rule: t,
                                onChangeRule: s
                            })
                        }), (0, a.jsx)(_.default, {
                            type: _.default.Type.CROSS
                        }), (0, a.jsx)(E.default, {
                            step: 3,
                            header: I.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                            children: (0, a.jsx)(c.default, {
                                rule: t,
                                onChangeRule: s
                            })
                        })]
                    })
                })
            }
        },
        67310: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("705749");

            function i(e) {
                let {
                    step: t,
                    header: s,
                    children: i
                } = e;
                return (0, a.jsxs)("div", {
                    className: l.triggerContainer,
                    children: [(0, a.jsx)("div", {
                        className: l.triggerCounterContainer,
                        children: (0, a.jsx)("div", {
                            className: l.stepCountIcon,
                            children: (0, a.jsx)(n.Text, {
                                className: l.stepCount,
                                variant: "text-sm/bold",
                                children: t
                            })
                        })
                    }), (0, a.jsxs)("div", {
                        className: l.triggerMainContainer,
                        children: [(0, a.jsx)("div", {
                            className: l.triggerHeaderContainer,
                            children: (0, a.jsx)(n.Text, {
                                className: l.triggerHeader,
                                variant: "text-sm/normal",
                                children: s
                            })
                        }), null != i && (0, a.jsx)("div", {
                            className: l.triggerSettingsContainer,
                            children: i
                        })]
                    })]
                })
            }
        },
        296416: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a, n, l = s("37983");
            s("884691");
            var i = s("217928"),
                r = s("945330"),
                o = s("982624");
            (a = n || (n = {})).ARROW_DOWN = "arrow_down", a.CROSS = "cross";

            function d(e) {
                let {
                    type: t
                } = e;
                return (0, l.jsx)("div", {
                    className: o.dividerContainer,
                    children: (0, l.jsx)("div", {
                        className: o.dividerIconContainer,
                        children: function(e) {
                            switch (e) {
                                case "arrow_down":
                                    return (0, l.jsx)(i.default, {
                                        width: 24,
                                        height: 24,
                                        className: o.dividierIcon
                                    });
                                case "cross":
                                    return (0, l.jsx)(r.default, {
                                        width: 24,
                                        height: 24,
                                        className: o.dividierIcon
                                    });
                                default:
                                    return null
                            }
                        }(t)
                    })
                })
            }
            d.Type = n
        },
        309175: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("169456"),
                i = s("185709"),
                r = s("432107"),
                o = s("301341"),
                d = s("260928"),
                u = s("67310"),
                c = s("296416"),
                E = s("143460"),
                _ = s("782340"),
                T = s("452938");

            function I(e) {
                var t, s, I, S, N, f;
                let {
                    rule: g,
                    onChangeRule: A
                } = e, L = n.useCallback(e => {
                    A({
                        ...g,
                        triggerMetadata: {
                            ...g.triggerMetadata,
                            keywordFilter: e
                        }
                    })
                }, [A, g]), m = n.useCallback(e => {
                    A({
                        ...g,
                        triggerMetadata: {
                            ...g.triggerMetadata,
                            allowList: e
                        }
                    })
                }, [A, g]);
                return (0, a.jsx)(a.Fragment, {
                    children: (0, a.jsxs)("div", {
                        className: T.cardContentsContainer,
                        children: [(0, a.jsxs)(u.default, {
                            step: 1,
                            header: _.default.Messages.GUILD_AUTOMOD_KEYWORD_FILTER_TRIGGER_HEADER,
                            children: [(0, a.jsx)(o.default, {
                                onChangeText: L,
                                maxWordCount: E.MAX_KEYWORDS_PER_KEYWORD_FILTER,
                                initialValue: null === (t = g.triggerMetadata) || void 0 === t ? void 0 : t.keywordFilter
                            }), (0, a.jsx)(r.default, {
                                rule: g,
                                onChangeRule: A,
                                collapsed: (null == g ? void 0 : null === (s = g.triggerMetadata) || void 0 === s ? void 0 : s.regexPatterns) == null || (null == g ? void 0 : null === (I = g.triggerMetadata) || void 0 === I ? void 0 : I.regexPatterns.length) === 0
                            }), (0, a.jsx)(l.default, {
                                onChange: m,
                                initialValue: null === (S = g.triggerMetadata) || void 0 === S ? void 0 : S.allowList,
                                maxWordCount: E.MAX_KEYWORDS_PER_ALLOWLIST_KEYWORD_FILTER_RULE,
                                collapsed: (null === (N = g.triggerMetadata) || void 0 === N ? void 0 : N.allowList) == null || (null === (f = g.triggerMetadata) || void 0 === f ? void 0 : f.allowList.length) === 0
                            })]
                        }), (0, a.jsx)(c.default, {
                            type: c.default.Type.ARROW_DOWN
                        }), (0, a.jsx)(u.default, {
                            step: 2,
                            header: _.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                            children: (0, a.jsx)(i.default, {
                                rule: g,
                                onChangeRule: A
                            })
                        }), (0, a.jsx)(c.default, {
                            type: c.default.Type.CROSS
                        }), (0, a.jsx)(u.default, {
                            step: 3,
                            header: _.default.Messages.GUILD_AUTOMOD_ROLES_EXEMPTION_HEADER,
                            children: (0, a.jsx)(d.default, {
                                rule: g,
                                onChangeRule: A,
                                onlyRoles: !0
                            })
                        })]
                    })
                })
            }
        },
        955198: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useChipletState: function() {
                    return o
                },
                useChipletStateHandlers: function() {
                    return d
                }
            }), s("222007"), s("424973"), s("860677");
            var a = s("884691"),
                n = s("714617"),
                l = s.n(n),
                i = s("817736"),
                r = s("673122");

            function o(e) {
                let [t, s] = a.useState([e]), [n, i] = a.useState(0), r = a.useMemo(() => t[n], [t, n]), o = a.useCallback(e => {
                    let a = e(r);
                    if (l(r, a)) return;
                    let o = t.slice(0, n + 1);
                    o.push(a), s(o), i(o.length - 1)
                }, [n, r, t]), d = a.useCallback(function() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
                        s = Math.max(0, n - e);
                    return i(s), t[s]
                }, [n, t]), u = a.useCallback(function() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
                        s = Math.min(t.length - 1, n + e);
                    return i(s), t[s]
                }, [n, t]);
                return {
                    state: r,
                    setState: o,
                    goBack: d,
                    goForward: u
                }
            }

            function d(e, t) {
                let {
                    scrollerRef: s,
                    mainInputRef: n,
                    mainContainerRef: l
                } = t, {
                    state: {
                        value: o,
                        tags: d,
                        selections: u
                    },
                    setState: c,
                    goBack: E,
                    goForward: _
                } = e;
                a.useLayoutEffect(() => {
                    let e = e => t => {
                            let s = "Meta" === t.key || "Control" === t.key;
                            s && c(t => ({
                                ...t,
                                isSelecting: e
                            }))
                        },
                        t = e(!0),
                        s = e(!1);
                    return document.addEventListener("keydown", t), document.addEventListener("keyup", s), () => {
                        document.removeEventListener("keydown", t), document.removeEventListener("keyup", s)
                    }
                }, [c]);
                let T = a.useCallback(e => {
                        var t, a;
                        let n = null !== (a = e.clipboardData.getData("text")) && void 0 !== a ? a : "",
                            l = n.split(r.CHIPLET_PASTE_SEPERATOR).map(e => e.trim()).filter(e => e.length > 0);
                        !(l.length <= 1) && ((0, i.flushSync)(() => {
                            c(e => {
                                let {
                                    tags: t,
                                    value: s
                                } = e;
                                return {
                                    value: s,
                                    tags: [...t, ...l],
                                    selections: [],
                                    isSelecting: !1
                                }
                            })
                        }), e.preventDefault(), e.stopPropagation(), null === (t = s.current) || void 0 === t || t.scrollToBottom())
                    }, [c, s]),
                    I = a.useCallback(e => {
                        c(t => {
                            let {
                                tags: s,
                                value: a
                            } = t;
                            return {
                                value: a,
                                tags: [...s.filter((t, s) => s !== e)],
                                selections: [],
                                isSelecting: !1
                            }
                        })
                    }, [c]),
                    S = a.useCallback(e => t => {
                        c(s => {
                            let {
                                tags: a,
                                value: n
                            } = s, l = [...a];
                            return l[e] = t, {
                                value: n,
                                tags: l,
                                selections: [],
                                isSelecting: !1
                            }
                        })
                    }, [c]),
                    N = a.useCallback(e => {
                        c(t => {
                            let {
                                tags: s,
                                value: a,
                                selections: n,
                                isSelecting: l
                            } = t;
                            return {
                                value: a,
                                tags: s,
                                selections: [...n, s[e]],
                                isSelecting: l
                            }
                        })
                    }, [c]),
                    f = a.useCallback(function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                        c(s => {
                            let {
                                tags: a,
                                value: n,
                                selections: l,
                                isSelecting: i
                            } = s;
                            return {
                                value: n,
                                tags: a,
                                selections: t ? [] : l.filter(t => t !== a[e]),
                                isSelecting: i
                            }
                        })
                    }, [c]),
                    g = a.useCallback(e => {
                        var t;
                        c(e => {
                            let {
                                tags: t,
                                value: s
                            } = e;
                            return {
                                value: s,
                                tags: t,
                                selections: [],
                                isSelecting: !1
                            }
                        }), null != e && (e.preventDefault(), e.stopPropagation()), null === (t = n.current) || void 0 === t || t.focus()
                    }, [n, c]),
                    A = a.useCallback(e => {
                        c(t => {
                            let {
                                tags: s
                            } = t;
                            return {
                                value: e.target.value,
                                tags: s,
                                selections: [],
                                isSelecting: !1
                            }
                        })
                    }, [c]),
                    L = a.useCallback(function(e) {
                        let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
                            a = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2],
                            n = o.trim().length <= 0;
                        !n && ((0, i.flushSync)(() => {
                            c(e => {
                                let {
                                    tags: t
                                } = e;
                                return {
                                    value: "",
                                    tags: [...t, o],
                                    selections: [],
                                    isSelecting: !1
                                }
                            })
                        }), a && null != s.current && s.current.scrollToBottom(), t && (e.preventDefault(), e.stopPropagation()))
                    }, [s, c, o]),
                    m = a.useCallback(e => {
                        let t = o.trim().length <= 0;
                        if (u.length > 0) {
                            var s;
                            (0, i.flushSync)(() => {
                                c(e => {
                                    let {
                                        tags: t,
                                        value: s,
                                        selections: a
                                    } = e;
                                    return {
                                        value: s,
                                        tags: t.filter(e => !a.includes(e)),
                                        selections: [],
                                        isSelecting: !1
                                    }
                                })
                            }), null === (s = n.current) || void 0 === s || s.focus(), e.preventDefault(), e.stopPropagation()
                        } else t && ((0, i.flushSync)(() => {
                            c(e => {
                                let {
                                    tags: t
                                } = e, s = [...t], a = s.pop();
                                return {
                                    value: null != a ? a : "",
                                    tags: [...s],
                                    selections: [],
                                    isSelecting: !1
                                }
                            })
                        }), e.preventDefault(), e.stopPropagation())
                    }, [n, u.length, c, o]),
                    C = a.useCallback(e => {
                        var t, s, a, l;
                        let i = e.metaKey || e.ctrlKey;
                        if ("z" === e.key && i) {
                            let a = E();
                            a.selections.length > 0 ? null === (t = n.current) || void 0 === t || t.blur() : null === (s = n.current) || void 0 === s || s.focus(), e.preventDefault(), e.stopPropagation()
                        } else if ("y" === e.key && i) {
                            let t = _();
                            t.selections.length > 0 ? null === (a = n.current) || void 0 === a || a.blur() : null === (l = n.current) || void 0 === l || l.focus(), e.preventDefault(), e.stopPropagation()
                        }
                    }, [E, _, n]),
                    O = a.useCallback(e => {
                        var t;
                        let s = o.trim().length > 0,
                            {
                                selectionStart: a = 0,
                                selectionEnd: r = 0
                            } = null !== (t = n.current) && void 0 !== t ? t : {};
                        0 !== d.length && (!s || a !== r) && ((0, i.flushSync)(() => {
                            c(e => {
                                let {
                                    tags: t,
                                    value: s
                                } = e;
                                return {
                                    value: s,
                                    tags: t,
                                    selections: [...t],
                                    isSelecting: !1
                                }
                            })
                        }), setImmediate(() => {
                            var e;
                            null === (e = n.current) || void 0 === e || e.blur(), setTimeout(() => {
                                var e;
                                null === (e = l.current) || void 0 === e || e.focus()
                            }, 16)
                        }), e.preventDefault(), e.stopPropagation())
                    }, [l, n, c, d.length, o]),
                    h = a.useCallback(e => {
                        e.relatedTarget !== e.currentTarget && L(e, !1, !1)
                    }, [L]),
                    R = a.useCallback(e => {
                        let t = e.metaKey || e.ctrlKey;
                        "Meta" !== e.key && (r.NEXT_CHIP_INPUT_KEY.has(e.key) ? L(e) : "Backspace" === e.key ? m(e) : "Escape" === e.key ? g(e) : "a" === e.key && t ? O(e) : r.CHIPLET_STATE_HISTORY_KEYS.has(e.key) && t && C(e))
                    }, [L, m, g, O, C]),
                    D = a.useCallback(e => {
                        if (document.activeElement !== l.current) return;
                        let t = e.metaKey || e.ctrlKey;
                        "Backspace" === e.key ? m(e) : "a" === e.key && t ? O(e) : "Escape" === e.key ? g(e) : r.CHIPLET_STATE_HISTORY_KEYS.has(e.key) && t ? C(e) : "Meta" !== e.key && g(e)
                    }, [C, m, O, g, l]);
                return {
                    handlePasteEvent: T,
                    handleInputChange: A,
                    handleKeyDown: R,
                    handleContainerKeyUp: D,
                    handleRemoveTag: I,
                    handleTagChangeEvent: S,
                    handleSelectTag: N,
                    handleUnselectTag: f,
                    handleResetTagSelections: g,
                    handleInputBlurEvent: h
                }
            }
        },
        201074: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            }), s("222007");
            var a = s("884691"),
                n = s("917351"),
                l = s("454686"),
                i = s("314865");

            function r(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
                    s = arguments.length > 2 ? arguments[2] : void 0,
                    [r, o] = a.useState((0, i.getKeywordStringFromKeywordFilter)(t)),
                    {
                        errorMessage: d,
                        handleValidateKeywords: u
                    } = function(e) {
                        let [t, s] = a.useState(null), i = a.useRef(null), r = a.useCallback(() => (0, n.debounce)(t => {
                            clearTimeout(i.current), i.current = setTimeout(() => {
                                try {
                                    (0, l.validateKeywordsOrThrow)(t, e), s(null)
                                } catch (e) {
                                    s(e.message)
                                }
                                clearTimeout(i.current)
                            }, 500)
                        }, 300, {
                            leading: !0,
                            trailing: !0
                        }), [e]);
                        return {
                            errorMessage: t,
                            handleValidateKeywords: r
                        }
                    }(s),
                    c = a.useCallback(e => 0 !== e.length && (0, i.isKeywordParseableString)(e) ? (0, i.getKeywordStringFromKeywordFilter)((0, i.getKeywordsFromString)(e)) : e, []),
                    E = a.useCallback(t => {
                        let s = t.currentTarget.value,
                            a = "insertFromPaste" === t.nativeEvent.inputType;
                        a && (s = c(s));
                        let n = (0, i.getKeywordsFromString)(s);
                        o(s), e(n), u()(n)
                    }, [u, c, e]);
                return {
                    value: r,
                    errorMessage: d,
                    onChange: E
                }
            }
        },
        16207: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                SCHEMA_ERROR_KEY: function() {
                    return o
                },
                default: function() {
                    return E
                }
            }), s("222007"), s("424973");
            var a = s("884691"),
                n = s("917351"),
                l = s("448993"),
                i = s("702873"),
                r = s("782340");
            let o = "_errors",
                d = "GENERIC_REGEX_ERROR";
            async function u(e, t) {
                if (null == e.triggerMetadata.regexPatterns || 0 === e.triggerMetadata.regexPatterns.length) {
                    t([]);
                    return
                }
                try {
                    await (0, i.validateAutomodRule)(e), t([])
                } catch (u) {
                    var s, a;
                    let e = new l.APIError(u),
                        n = e.errors;
                    if (!("object" == typeof(s = n) && (null == s ? void 0 : null === (a = s.trigger_metadata) || void 0 === a ? void 0 : a.regex_patterns) != null)) return;
                    let i = function(e) {
                        var t;
                        let s = null == e ? void 0 : null === (t = e.trigger_metadata) || void 0 === t ? void 0 : t.regex_patterns;
                        return null == s ? [] : function(e) {
                            let {
                                [o]: t = [], ...s
                            } = e, a = Object.entries(s).map(e => {
                                var t;
                                let [s, a] = e, n = a[o], {
                                    code: l,
                                    message: i
                                } = null !== (t = null == n ? void 0 : n[0]) && void 0 !== t ? t : {
                                    code: d,
                                    message: r.default.Messages.GUILD_AUTOMOD_REGEX_GENERIC_SAVE_ERROR
                                };
                                return {
                                    pattern: s,
                                    message: i,
                                    code: l,
                                    description: null == a ? void 0 : a.description,
                                    erroringCharacterLength: null == a ? void 0 : a.erroring_character_length,
                                    erroringCharacterOffset: null == a ? void 0 : a.erroring_character_offset,
                                    regexErrorCode: null == a ? void 0 : a.regex_error_code
                                }
                            });
                            if (t.length > 0) {
                                var n, l, i, u;
                                a.push({
                                    pattern: o,
                                    message: null !== (i = null === (n = t[0]) || void 0 === n ? void 0 : n.message) && void 0 !== i ? i : r.default.Messages.GUILD_AUTOMOD_REGEX_GENERIC_SAVE_ERROR,
                                    code: null !== (u = null === (l = t[0]) || void 0 === l ? void 0 : l.code) && void 0 !== u ? u : d
                                })
                            }
                            return a
                        }(s)
                    }(n);
                    i.length > 0 && t(i)
                }
            }
            let c = (0, n.throttle)(u, 1e3, {
                leading: !1
            });

            function E(e, t) {
                var s, l;
                let [i, r] = a.useState([]), [o, d] = a.useState(null), [E, _] = a.useState(null !== (l = null == e ? void 0 : null === (s = e.triggerMetadata) || void 0 === s ? void 0 : s.regexPatterns) && void 0 !== l ? l : []), T = a.useCallback(t => {
                    !(t.length < 3) && c({
                        ...e,
                        triggerMetadata: {
                            ...e.triggerMetadata,
                            regexPatterns: [t]
                        }
                    }, e => {
                        var t;
                        return d(null !== (t = e[0]) && void 0 !== t ? t : null)
                    })
                }, [e]), I = a.useCallback((s, a) => {
                    !(0, n.isEqual)(s, a) && (c.cancel(), u({
                        ...e,
                        triggerMetadata: {
                            ...e.triggerMetadata,
                            regexPatterns: s
                        }
                    }, e => {
                        r(e), 0 === e.length && d(null)
                    }), _(s), null == t || t(s))
                }, [e, t]);
                return {
                    patterns: E,
                    errors: i,
                    valueError: o,
                    validatePatternsChanged: I,
                    validateEditingValueChanged: T
                }
            }
        },
        183866: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                isRegexSupported: function() {
                    return E
                },
                getRuleInfo: function() {
                    return g
                }
            });
            var a = s("116320"),
                n = s("117300"),
                l = s("83900"),
                i = s("350932"),
                r = s("160237"),
                o = s("454686"),
                d = s("296839"),
                u = s("143460"),
                c = s("782340");
            let E = e => {
                    switch (e) {
                        case u.AutomodTriggerType.KEYWORD:
                        case u.AutomodTriggerType.USER_PROFILE:
                            return !0;
                        default:
                            return !1
                    }
                },
                _ = e => {
                    switch (e) {
                        case u.AutomodTriggerType.KEYWORD:
                        case u.AutomodTriggerType.ML_SPAM:
                        case u.AutomodTriggerType.DEFAULT_KEYWORD_LIST:
                        case u.AutomodTriggerType.MENTION_SPAM:
                        case u.AutomodTriggerType.SERVER_POLICY:
                        case u.AutomodTriggerType.USER_PROFILE:
                            return !0;
                        default:
                            return !1
                    }
                },
                T = (e, t) => {
                    var s;
                    return null !== (s = null == t ? void 0 : t.name) && void 0 !== s ? s : (0, d.triggerConfigs)[e].getDefaultRuleName()
                },
                I = (e, t) => {
                    if ((0, o.isBackendPersistedRule)(t) && (0, o.isRuleKeywordFilter)(t)) return t.triggerMetadata.regexPatterns.length > 0 ? c.default.Messages.GUILD_AUTOMOD_KEYWORD_FILTER_HEADER_WORD_AND_REGEX_COUNT.format({
                        keywordCount: t.triggerMetadata.keywordFilter.length,
                        regexPatternCount: t.triggerMetadata.regexPatterns.length
                    }) : c.default.Messages.GUILD_AUTOMOD_KEYWORD_FILTER_HEADER_WORD_COUNT.format({
                        keywordCount: t.triggerMetadata.keywordFilter.length
                    })
                },
                S = e => {
                    switch (e) {
                        case u.AutomodTriggerType.KEYWORD:
                            return c.default.Messages.GUILD_AUTOMOD_KEYWORD_FILTER_DESCRIPTION;
                        case u.AutomodTriggerType.ML_SPAM:
                            return c.default.Messages.GUILD_AUTOMOD_ML_SPAM_FILTER_DESCRIPTION;
                        case u.AutomodTriggerType.DEFAULT_KEYWORD_LIST:
                            return c.default.Messages.GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_DESCRIPTION_TEXT;
                        case u.AutomodTriggerType.MENTION_SPAM:
                            return c.default.Messages.GUILD_AUTOMOD_MENTION_SPAM_FILTER_DESCRIPTION;
                        case u.AutomodTriggerType.SERVER_POLICY:
                            return c.default.Messages.GUILD_AUTOMOD_SERVER_POLICY_FILTER_DESCRIPTION;
                        case u.AutomodTriggerType.USER_PROFILE:
                            return c.default.Messages.GUILD_AUTOMOD_USER_PROFILE_FILTER_DESCRIPTION;
                        default:
                            return null
                    }
                },
                N = e => {
                    if (e === u.AutomodTriggerType.KEYWORD) return c.default.Messages.GUILD_AUTOMOD_LINK_FILTER_MATCHING_STRATEGY_DESCRIPTION.format()
                },
                f = e => {
                    switch (e) {
                        case u.AutomodTriggerType.MENTION_SPAM:
                            return a.default;
                        case u.AutomodTriggerType.KEYWORD:
                            return i.default;
                        case u.AutomodTriggerType.ML_SPAM:
                        case u.AutomodTriggerType.USER_PROFILE:
                            return n.default;
                        case u.AutomodTriggerType.DEFAULT_KEYWORD_LIST:
                            return r.default
                    }
                };

            function g(e, t) {
                var s, a, n, i, r;
                return null != e && _(e) ? {
                    headerText: null !== (s = T(e, t)) && void 0 !== s ? s : "",
                    headerSubtext: null !== (a = I(e, t)) && void 0 !== a ? a : "",
                    descriptionText: null !== (n = S(e)) && void 0 !== n ? n : "",
                    descriptionSubtext: null !== (i = N(e)) && void 0 !== i ? i : "",
                    icon: null !== (r = f(e)) && void 0 !== r ? r : l.default
                } : null
            }
        },
        983065: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getPerkIcon: function() {
                    return g
                }
            }), s("70102");
            var a = s("414456"),
                n = s.n(a),
                l = s("36694"),
                i = s("46829"),
                r = s("272339"),
                o = s("110006"),
                d = s("682344"),
                u = s("238521"),
                c = s("754576"),
                E = s("228427"),
                _ = s("290581"),
                T = s("595086"),
                I = s("619911"),
                S = s("698015"),
                N = s("427459"),
                f = s("392568");

            function g(e, t) {
                if (t) return {
                    icon: l.default,
                    className: f.unlocked
                };
                switch (e) {
                    case N.PerkIcons.EMOJI:
                        return {
                            icon: i.default, className: n(f.icon, f.emoji)
                        };
                    case N.PerkIcons.AUDIO:
                        return {
                            icon: r.default, className: n(f.icon, f.audio)
                        };
                    case N.PerkIcons.ANIMATED:
                        return {
                            icon: o.default, className: n(f.icon, f.animated)
                        };
                    case N.PerkIcons.CUSTOMIZATION:
                        return {
                            icon: u.default, className: n(f.icon, f.customization)
                        };
                    case N.PerkIcons.UPLOAD:
                        return {
                            icon: S.default, className: n(f.icon, f.upload)
                        };
                    case N.PerkIcons.VANITY:
                        return {
                            icon: _.default, className: n(f.icon, f.vanity)
                        };
                    case N.PerkIcons.STREAM:
                        return {
                            icon: I.default, className: n(f.icon, f.stream)
                        };
                    case N.PerkIcons.STICKER:
                        return {
                            icon: T.default, className: n(f.icon, f.sticker)
                        };
                    case N.PerkIcons.CUSTOM_ROLE_ICON:
                        return {
                            icon: d.default, className: n(f.icon, f.customRoleIcon)
                        };
                    case N.PerkIcons.STAGE_VIDEO:
                        return {
                            icon: E.default, className: n(f.icon, f.stage)
                        };
                    case N.PerkIcons.SOUNDBOARD:
                        return {
                            icon: c.default, className: n(f.icon, f.soundboard)
                        }
                }
                throw Error("Unexpected perk icon ".concat(e))
            }
        },
        345988: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("812204"),
                o = s("685665"),
                d = s("617917"),
                u = s("782340"),
                c = s("460633");
            let E = e => {
                let {
                    guild: t,
                    analyticsLocation: s,
                    className: n,
                    buttonProps: l = {
                        color: void 0,
                        look: i.ButtonLooks.INVERTED,
                        text: u.default.Messages.PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_BUTTON
                    }
                } = e, {
                    color: r,
                    look: o,
                    text: c
                } = l, E = t.premiumTier + 1;
                return (0, a.jsx)(d.default, {
                    color: r,
                    look: o,
                    analyticsLocation: s,
                    guild: t,
                    buttonText: c,
                    targetBoostedGuildTier: E,
                    className: n
                })
            };

            function _(e) {
                let {
                    header: t,
                    text: n,
                    analyticsLocation: d,
                    guild: u,
                    className: _,
                    textColor: T,
                    headerColor: I,
                    buttonProps: S
                } = e, {
                    AnalyticsLocationProvider: N
                } = (0, o.default)(r.default.GUILD_BOOSTING_UPSELL_BANNER);
                return (0, a.jsx)(N, {
                    children: (0, a.jsxs)("div", {
                        className: l(c.banner, _),
                        children: [(0, a.jsx)("img", {
                            className: c.headerGraphic,
                            alt: "",
                            src: s("250719")
                        }), (0, a.jsxs)("div", {
                            className: c.content,
                            children: [(0, a.jsx)(i.Text, {
                                variant: "text-lg/semibold",
                                color: null != I ? I : "always-white",
                                className: c.header,
                                children: t
                            }), (0, a.jsx)(i.Text, {
                                variant: "text-sm/normal",
                                color: null != T ? T : "always-white",
                                children: n
                            })]
                        }), (0, a.jsx)("div", {
                            className: c.ctaContainer,
                            children: (0, a.jsx)(E, {
                                guild: u,
                                analyticsLocation: d,
                                className: c.button,
                                buttonProps: S
                            })
                        })]
                    })
                })
            }
        },
        634544: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("118503"),
                o = s("427459"),
                d = s("782340"),
                u = s("884737"),
                c = e => {
                    let t, s, n, {
                            guildFeature: c,
                            guild: E,
                            className: _,
                            hideTooltip: T = !1,
                            tooltipPosition: I = "left",
                            onClick: S
                        } = e,
                        N = E.hasFeature(c),
                        f = (0, o.minimumRequiredTierForGuildFeature)(c);
                    return (N ? (null != f && (n = d.default.Messages.PREMIUM_GUILD_INCLUDED), t = (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(r.default, {
                            className: u.unlockedIcon
                        }), (0, a.jsx)(i.Heading, {
                            variant: "eyebrow",
                            className: u.description,
                            children: d.default.Messages.PREMIUM_GUILD_TIER_UNLOCKED
                        })]
                    })) : (null != f && (n = d.default.Messages.CLICK_TO_LEARN_MORE), t = (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(r.default, {
                            className: u.icon
                        }), (0, a.jsx)(i.Heading, {
                            variant: "eyebrow",
                            className: u.description,
                            children: null != f && (0, o.getShortenedTierName)(f)
                        })]
                    })), s = T || null == n ? (0, a.jsx)("div", {
                        className: l(u.availabilityIndicator, _),
                        children: t
                    }) : (0, a.jsx)(i.Tooltip, {
                        position: I,
                        text: n,
                        children: e => (0, a.jsx)("div", {
                            ...e,
                            className: l(u.availabilityIndicator, _),
                            children: t
                        })
                    }), null == S || N) ? s : (0, a.jsx)(i.Clickable, {
                        onClick: S,
                        className: u.clickable,
                        children: s
                    })
                }
        },
        836275: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                openGuildBannerUpsellModal: function() {
                    return T
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("366634"),
                i = s("974755"),
                r = s("427459"),
                o = s("379532"),
                d = s("944305"),
                u = s("49111"),
                c = s("782340"),
                E = s("670362");

            function _(e) {
                let {
                    guild: t,
                    banner: s
                } = e;
                return (0, a.jsx)("div", {
                    className: E.guildBanner,
                    style: {
                        backgroundImage: "url(".concat(s)
                    },
                    children: (0, a.jsxs)("div", {
                        className: E.guildHeader,
                        children: [(0, a.jsx)(i.default, {
                            guild: t,
                            isBannerVisible: !0
                        }), (0, a.jsx)(n.Heading, {
                            className: E.guildName,
                            variant: "heading-md/semibold",
                            children: t.toString()
                        }), (0, a.jsx)(l.default, {
                            className: E.dropdown,
                            open: !1
                        })]
                    })
                })
            }

            function T(e) {
                let {
                    analyticsLocations: t,
                    analyticsLocation: s,
                    guild: n,
                    isGIF: l,
                    banner: i
                } = e, E = l ? (0, r.minimumRequiredTierForGuildFeature)(u.GuildFeatures.ANIMATED_BANNER) : (0, r.minimumRequiredTierForGuildFeature)(u.GuildFeatures.BANNER);
                null != E && (0, o.default)({
                    analyticsLocations: t,
                    analyticsSourceLocation: s,
                    guild: n,
                    headerProps: {
                        title: c.default.Messages.GUILD_BANNER_UPSELL_MODAL_TITLE,
                        subtitle: function(e, t) {
                            let s = (0, r.getTierName)(e);
                            return t ? c.default.Messages.GUILD_BANNER_UPSELL_MODAL_SUBTITLE_ANIMATED.format({
                                targetLevelOrPlan: s
                            }) : c.default.Messages.GUILD_BANNER_UPSELL_MODAL_SUBTITLE_STATIC.format({
                                targetLevelOrPlan: s
                            })
                        }(E, l),
                        image: (0, a.jsx)(_, {
                            guild: n,
                            banner: i
                        })
                    },
                    perkIntro: c.default.Messages.GUILD_BANNER_UPSELL_MODAL_PERK_INTRO,
                    perks: l ? (0, d.animatedGuildBannerUpsellPerks)() : (0, d.guildBannerUpsellPerks)()
                })
            }
        },
        146005: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildHomeHeaderRedesignExperiment: function() {
                    return n
                }
            });
            var a = s("862205");
            let n = (0, a.createExperiment)({
                kind: "guild",
                id: "2022-12_home_header_redesign",
                label: "Home New Header",
                defaultConfig: {
                    hasNewHeader: !1
                },
                treatments: [{
                    id: 1,
                    label: "New Header",
                    config: {
                        hasNewHeader: !0
                    }
                }]
            })
        },
        90490: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return D
                }
            }), s("424973"), s("222007");
            var a = s("446674"),
                n = s("407846"),
                l = s("913144"),
                i = s("697218"),
                r = s("591023"),
                o = s("567054"),
                d = s("982527");
            let u = {};

            function c(e) {
                var t;
                return null !== (t = u[e]) && void 0 !== t ? t : 0
            }

            function E(e, t) {
                u[e] = t
            }

            function _(e, t, s) {
                if (t !== s && null != t) {
                    var a, n, l, i;
                    if (t === o.GuildJoinRequestApplicationStatuses.SUBMITTED) {
                        ;
                        let t = c(e);
                        a = e, n = t + 1, u[a] = n
                    }
                    if (s === o.GuildJoinRequestApplicationStatuses.SUBMITTED) {
                        ;
                        let t = c(e);
                        l = e, i = Math.max(0, t - 1), u[l] = i
                    }
                }
            }
            let T = !1,
                I = {
                    GUILD_JOIN_REQUESTS_BY_ID: e => "guild-join-request=".concat(e),
                    GUILD_JOIN_REQUESTS_BY_STATUS: (e, t) => "guild-".concat(e, "-").concat(t)
                };

            function S(e) {
                let t = [];
                return t.push(I.GUILD_JOIN_REQUESTS_BY_ID(e.id)), t.push(I.GUILD_JOIN_REQUESTS_BY_STATUS(e.guildId, e.applicationStatus)), t
            }
            let N = new n.default(S, e => "".concat(e.id)),
                f = new n.default(S, e => "".concat(e.id)),
                g = new n.default(S, e => "".concat(e.actionedAt));

            function A(e) {
                return N.get(e)
            }

            function L(e) {
                N.set(e.id, e), (0, r.isSubmittedApplicationStatus)(e.applicationStatus) && (g.delete(e.id), f.set(e.id, e)), (0, r.isActionedApplicationStatus)(e.applicationStatus) && (f.delete(e.id), g.set(e.id, e))
            }

            function m(e) {
                var t, s;
                let {
                    guildId: a,
                    request: n
                } = e, l = (0, d.joinRequestFromServer)(n), r = i.default.getCurrentUser();
                if (null == r || l.userId === r.id) return !1;
                let o = null === (s = l.id, t = N.get(s)) || void 0 === t ? void 0 : t.applicationStatus;
                return _(a, l.applicationStatus, o), L(l), !0
            }
            let C = {},
                O = {},
                h = {};
            class R extends a.default.Store {
                getRequests(e, t) {
                    let s = I.GUILD_JOIN_REQUESTS_BY_STATUS(e, t);
                    return (0, r.isActionedApplicationStatus)(t) ? g.values(s) : (0, r.isSubmittedApplicationStatus)(t) ? f.values(s) : N.values(s)
                }
                getSubmittedGuildJoinRequestTotal(e) {
                    return c(e)
                }
                isFetching() {
                    return T
                }
                getSelectedApplicationStatus(e) {
                    var t;
                    return null !== (t = C[e]) && void 0 !== t ? t : o.GuildJoinRequestApplicationStatuses.SUBMITTED
                }
                getSelectedSortOrder(e) {
                    var t;
                    return null !== (t = O[e]) && void 0 !== t ? t : o.GuildJoinRequestSortOrders.TIMESTAMP_DESC
                }
                getSelectedGuildJoinRequest(e) {
                    var t;
                    let s = h[e];
                    return null != s ? (t = s.id, N.get(t)) : null
                }
            }
            R.displayName = "GuildJoinRequestStoreV2";
            var D = new R(l.default, {
                GUILD_JOIN_REQUESTS_FETCH_SUCCESS: function(e) {
                    let {
                        status: t,
                        requests: s,
                        total: a,
                        guildId: n
                    } = e;
                    if (T = !1, t === o.GuildJoinRequestApplicationStatuses.SUBMITTED) {
                        var l, i;
                        l = n, i = a, u[l] = i
                    }
                    s.forEach(e => {
                        L(e)
                    })
                },
                GUILD_JOIN_REQUESTS_FETCH_START: function() {
                    T = !0
                },
                GUILD_JOIN_REQUESTS_FETCH_FAILURE: function() {
                    T = !1
                },
                GUILD_JOIN_REQUESTS_BULK_ACTION: function(e) {
                    let {
                        guildId: t,
                        action: s
                    } = e, a = N.values(I.GUILD_JOIN_REQUESTS_BY_STATUS(t, o.GuildJoinRequestApplicationStatuses.SUBMITTED));
                    a.forEach(e => {
                        L({
                            ...e,
                            applicationStatus: s
                        })
                    }), u[t] = 0
                },
                GUILD_JOIN_REQUEST_CREATE: m,
                GUILD_JOIN_REQUEST_UPDATE: m,
                GUILD_JOIN_REQUEST_DELETE: function(e) {
                    var t, s;
                    let {
                        id: a,
                        guildId: n
                    } = e;
                    let l = (t = a, N.get(t));
                    if (null != l) {
                        ;
                        _(n, null, l.applicationStatus), s = a, N.delete(s), f.delete(s), g.delete(s)
                    }
                },
                GUILD_JOIN_REQUESTS_SET_APPLICATION_STATUS: function(e) {
                    let {
                        guildId: t,
                        applicationStatus: s
                    } = e;
                    s !== C[t] && (C[t] = s)
                },
                GUILD_JOIN_REQUESTS_SET_SORT_ORDER: function(e) {
                    var t;
                    let {
                        guildId: s,
                        sortOrder: a
                    } = e;
                    if (a === O[s]) return;
                    O[s] = a;
                    let n = null !== (t = C[s]) && void 0 !== t ? t : o.GuildJoinRequestApplicationStatuses.SUBMITTED;
                    (0, r.isActionedApplicationStatus)(n) && g.clear(), (0, r.isSubmittedApplicationStatus)(n) && f.clear()
                },
                GUILD_JOIN_REQUESTS_SET_SELECTED: function(e) {
                    let {
                        guildId: t,
                        request: s
                    } = e;
                    h[t] = s
                }
            })
        },
        859130: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useSubmittedGuildJoinRequestTotal: function() {
                    return l
                }
            });
            var a = s("446674"),
                n = s("90490");

            function l(e) {
                let {
                    guildId: t
                } = e, s = (0, a.useStateFromStores)([n.default], () => n.default.getSubmittedGuildJoinRequestTotal(t), [t]);
                return s
            }
        },
        414989: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("100300"),
                r = s("879478"),
                o = s("151185"),
                d = s("179016"),
                u = s("567054"),
                c = s("546470"),
                E = s("782340"),
                _ = s("977618");

            function T(e) {
                let {
                    onClick: t,
                    text: s,
                    icon: n
                } = e;
                return (0, a.jsx)("div", {
                    className: _.addFormFieldContainer,
                    children: (0, a.jsxs)(l.Clickable, {
                        className: _.addFormField,
                        onClick: t,
                        children: [(0, a.jsx)(n, {
                            className: _.icon,
                            height: 16,
                            width: 16
                        }), (0, a.jsx)(l.FormText, {
                            className: _.addFormFieldText,
                            children: s
                        })]
                    })
                })
            }
            var I = function(e) {
                let {
                    addFormField: t,
                    hasManualFormFields: I
                } = e, S = n.useCallback(e => {
                    (0, c.openEmptyFormFieldModal)(e, t)
                }, [t]), N = n.useCallback(e => {
                    I ? S(e) : (0, l.openModalLazy)(async () => {
                        let {
                            default: t
                        } = await s.el("331761").then(s.bind(s, "331761"));
                        return s => (0, a.jsx)(t, {
                            ...s,
                            onSubmit: () => S(e)
                        })
                    })
                }, [I, S]);
                return (0, a.jsxs)("div", {
                    className: _.backgroundContainer,
                    children: [(0, a.jsx)("div", {
                        className: _.containerTopHat,
                        children: (0, a.jsx)(l.Text, {
                            className: _.containerTopHatText,
                            variant: "text-xs/bold",
                            color: "header-secondary",
                            children: E.default.Messages.GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_APPROVAL_REQUIRED
                        })
                    }), (0, a.jsxs)("div", {
                        className: _.leftRailIconContainer,
                        children: [(0, a.jsx)("div", {
                            className: _.iconContainer,
                            children: (0, a.jsx)(o.default, {
                                width: 18,
                                height: 20,
                                className: _.icon
                            })
                        }), (0, a.jsxs)(l.FormSection, {
                            children: [(0, a.jsx)(l.FormTitle, {
                                tag: "h3",
                                className: _.leftRailIconContainerTitle,
                                children: E.default.Messages.MEMBER_VERIFICATION_ADD_QUESTIONS
                            }), (0, a.jsx)(l.FormText, {
                                className: _.leftRailIconContainerDescription,
                                type: l.FormText.Types.DESCRIPTION,
                                children: E.default.Messages.MEMBER_VERIFICATION_ADD_QUESTIONS_DESCRIPTION
                            }), (0, a.jsx)(T, {
                                formFieldType: u.VerificationFormFieldTypes.TEXT_INPUT,
                                addFormField: t,
                                icon: d.default,
                                text: E.default.Messages.MEMBER_VERIFICATION_FORM_ITEM_TEXT_INPUT,
                                onClick: () => N(u.VerificationFormFieldTypes.TEXT_INPUT)
                            }), (0, a.jsx)(T, {
                                formFieldType: u.VerificationFormFieldTypes.PARAGRAPH,
                                addFormField: t,
                                icon: r.default,
                                text: E.default.Messages.MEMBER_VERIFICATION_FORM_ITEM_PARAGRAPH,
                                onClick: () => N(u.VerificationFormFieldTypes.PARAGRAPH)
                            }), (0, a.jsx)(T, {
                                formFieldType: u.VerificationFormFieldTypes.MULTIPLE_CHOICE,
                                addFormField: t,
                                icon: i.default,
                                text: E.default.Messages.MEMBER_VERIFICATION_FORM_ITEM_MULTIPLE_CHOICE,
                                onClick: () => N(u.VerificationFormFieldTypes.MULTIPLE_CHOICE)
                            })]
                        })]
                    })]
                })
            }
        },
        64284: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return T
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("448993"),
                o = s("50926"),
                d = s("526253"),
                u = s("192918"),
                c = s("394294"),
                E = s("782340"),
                _ = s("977618"),
                T = function(e) {
                    var t;
                    let {
                        guildId: s
                    } = e, T = (0, l.useStateFromStores)([d.default], () => d.default.get(s)), [I, S] = n.useState(null), [N, f] = n.useState(null !== (t = null == T ? void 0 : T.description) && void 0 !== t ? t : ""), g = n.useRef(!1), A = n.useRef(!1);
                    n.useEffect(() => () => {
                        A.current = !0
                    }, []);
                    let L = n.useCallback(async () => {
                        if (!g.current) {
                            S(null);
                            try {
                                await o.default.updateVerificationFormDescription(s, N)
                            } catch (t) {
                                if (A.current) return;
                                let e = new r.APIError(t);
                                S(e.getAnyErrorMessage())
                            } finally {
                                if (A.current) return;
                                g.current = !1
                            }
                        }
                    }, [N, s]);
                    return (0, a.jsxs)(u.default, {
                        title: E.default.Messages.GUILD_SETTINGS_MEMBER_VERIFICATION_DESCRIPTION_TITLE,
                        children: [(0, a.jsx)(i.TextArea, {
                            className: _.fieldBackground,
                            maxLength: c.MAX_DESCRIPTION_LENGTH,
                            value: null != N ? N : "",
                            placeholder: E.default.Messages.GUILD_SETTINGS_MEMBER_VERIFICATION_DESCRIPTION_PLACEHOLDER,
                            onChange: e => {
                                f(e)
                            },
                            onBlur: L,
                            autosize: !0
                        }), null != I && "" !== I ? (0, a.jsx)(i.Text, {
                            className: _.errorText,
                            variant: "text-xs/normal",
                            color: "text-danger",
                            children: I
                        }) : null]
                    })
                }
        },
        335724: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("213523"),
                o = s("567054"),
                d = s("546470"),
                u = s("782340"),
                c = s("977618"),
                E = function(e) {
                    let {
                        addFormField: t
                    } = e;
                    return (0, a.jsxs)("div", {
                        className: l(c.spacingContainer, c.leftRailIconContainer, c.backgroundContainer),
                        children: [(0, a.jsx)("div", {
                            className: c.iconContainer,
                            children: (0, a.jsx)(r.default, {
                                width: 18,
                                height: 20,
                                className: c.icon
                            })
                        }), (0, a.jsxs)(i.FormSection, {
                            children: [(0, a.jsx)(i.FormTitle, {
                                tag: "h3",
                                className: c.leftRailIconContainerTitle,
                                children: u.default.Messages.MEMBER_VERIFICATION_GET_STARTED_TITLE
                            }), (0, a.jsx)(i.FormText, {
                                className: c.leftRailIconContainerDescription,
                                type: i.FormText.Types.DESCRIPTION,
                                children: u.default.Messages.MEMBER_VERIFICATION_GET_STARTED_DESCRIPTION
                            }), (0, a.jsx)(i.Button, {
                                onClick: () => (0, d.openEmptyFormFieldModal)(o.VerificationFormFieldTypes.TERMS, t),
                                children: u.default.Messages.MEMBER_VERIFICATION_GET_STARTED_BUTTON
                            })]
                        })]
                    })
                }
        },
        403025: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("472850"),
                r = s("933351"),
                o = s("977618"),
                d = function(e) {
                    let {
                        formField: t,
                        index: s,
                        isDragEnabled: n,
                        isDropHovered: d,
                        onDrop: u,
                        onEdit: c,
                        onRemove: E
                    } = e, {
                        label: _
                    } = t;
                    return (0, a.jsx)(r.default, {
                        field: t,
                        index: s,
                        isDragEnabled: n,
                        isDropHovered: d,
                        onDrop: u,
                        onEdit: c,
                        onRemove: E,
                        title: _,
                        children: (0, a.jsx)(i.MultipleChoiceFieldBody, {
                            field: t,
                            value: void 0,
                            radioItemClassName: l(o.fieldBackground, o.multipleChoiceFixedTextColor),
                            disabled: !1
                        })
                    })
                }
        },
        933351: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return N
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s("476042"),
                d = s("669491"),
                u = s("77078"),
                c = s("673220"),
                E = s("782340"),
                _ = s("977618");

            function T(e) {
                let {
                    title: t,
                    children: s,
                    onEdit: n,
                    onRemove: l
                } = e;
                return (0, a.jsxs)("div", {
                    className: _.backgroundContainer,
                    children: [(0, a.jsxs)("div", {
                        className: _.containerPadding,
                        children: [(0, a.jsx)(u.FormTitle, {
                            tag: "h3",
                            className: _.containerTitle,
                            children: t
                        }), s]
                    }), (0, a.jsxs)(u.FormSection, {
                        className: _.containerFooter,
                        children: [(0, a.jsx)(u.Button, {
                            className: i(_.removeButton, _.button),
                            size: u.Button.Sizes.SMALL,
                            look: u.Button.Looks.BLANK,
                            onClick: l,
                            children: E.default.Messages.REMOVE
                        }), (0, a.jsx)(u.Button, {
                            className: _.button,
                            size: u.Button.Sizes.SMALL,
                            color: u.Button.Colors.PRIMARY,
                            onClick: n,
                            children: E.default.Messages.EDIT
                        })]
                    })]
                })
            }
            let I = "FORM_FIELD";

            function S(e) {
                let {
                    index: t,
                    field: s,
                    isDropHovered: l,
                    onDrop: u
                } = e, E = (0, r.debounce)(async (e, t, s) => {
                    await u(e, t, s)
                }), S = n.useRef(null), [, N] = (0, o.useDrag)({
                    type: I,
                    item: {
                        index: t,
                        field: s
                    },
                    end: (e, t) => {
                        null != e && !t.didDrop() && E(e.field, null, !0)
                    }
                }), [, f] = (0, o.useDrop)({
                    accept: I,
                    hover: (e, s) => {
                        var a;
                        let {
                            index: n
                        } = e, l = null === (a = S.current) || void 0 === a ? void 0 : a.getBoundingClientRect(), i = s.getClientOffset();
                        if (null == l || null == i) return;
                        let r = (l.bottom - l.top) / 2,
                            o = i.y - l.top;
                        (!(n < t) || !(o < r)) && (!(n > t) || !(o < r)) && n !== t && E(e.field, t, !1)
                    },
                    drop: e => {
                        E(e.field, t, !0)
                    }
                });
                return n.useLayoutEffect(() => (N(f(S)), () => {
                    f(null), N(null)
                }), [N, f]), (0, a.jsxs)("div", {
                    ref: S,
                    "data-dnd-name": "field-".concat(t),
                    className: i(_.dragContainer, {
                        [_.dropHovered]: l
                    }),
                    children: [(0, a.jsx)("div", {
                        className: _.dragIconContainer,
                        children: (0, a.jsx)(c.default, {
                            className: _.dragIcon,
                            color: d.default.unsafe_rawColors.PRIMARY_400.css
                        })
                    }), (0, a.jsx)(T, {
                        ...e
                    })]
                })
            }

            function N(e) {
                return (0, a.jsx)("div", {
                    className: _.spacingContainer,
                    children: e.isDragEnabled ? (0, a.jsx)(S, {
                        ...e
                    }) : (0, a.jsx)(T, {
                        ...e
                    })
                })
            }
        },
        263974: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("199901"),
                l = s("933351"),
                i = s("977618"),
                r = function(e) {
                    let {
                        formField: t,
                        index: s,
                        isDragEnabled: r,
                        isDropHovered: o,
                        onDrop: d,
                        onEdit: u,
                        onRemove: c
                    } = e, {
                        label: E,
                        placeholder: _
                    } = t;
                    return (0, a.jsx)(l.default, {
                        field: t,
                        index: s,
                        isDragEnabled: r,
                        isDropHovered: o,
                        onDrop: d,
                        onEdit: u,
                        onRemove: c,
                        title: E,
                        children: (0, a.jsx)(n.ParagraphFieldBody, {
                            className: i.fieldBackground,
                            placeholder: _,
                            disabled: !0
                        })
                    })
                }
        },
        192918: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("977618");

            function o(e) {
                let {
                    title: t,
                    children: s
                } = e;
                return (0, a.jsxs)(i.FormSection, {
                    className: l(r.backgroundContainer, r.spacingContainer, r.containerPadding),
                    children: [(0, a.jsx)(i.FormTitle, {
                        tag: "h3",
                        className: r.containerTitle,
                        children: t
                    }), s]
                })
            }
        },
        169324: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            }), s("222007");
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("669491"),
                r = s("77078"),
                o = s("461380"),
                d = s("772970"),
                u = s("933351"),
                c = s("782340"),
                E = s("977618"),
                _ = function(e) {
                    let {
                        channelId: t,
                        formField: s,
                        index: n,
                        isDragEnabled: _,
                        isDropHovered: T,
                        onDrop: I,
                        onEdit: S,
                        onRemove: N,
                        title: f
                    } = e, g = s.values, A = g.slice(0, 1), L = g.length - A.length;
                    return (0, a.jsxs)(u.default, {
                        field: s,
                        index: n,
                        isDragEnabled: _,
                        isDropHovered: T,
                        onDrop: I,
                        onEdit: S,
                        onRemove: N,
                        title: f,
                        children: [(0, a.jsx)(d.TermsFieldBody, {
                            className: l(E.fieldBackground, {
                                [E.withFooter]: 0 !== L
                            }),
                            terms: A,
                            channelId: t
                        }), 0 !== L && (0, a.jsxs)(r.Clickable, {
                            className: l(E.fieldFooterContainer, E.clickable),
                            onClick: S,
                            children: [(0, a.jsx)(r.FormText, {
                                className: E.clickable,
                                children: c.default.Messages.MEMBER_VERIFICATION_OTHER_RULES.format({
                                    count: L
                                })
                            }), (0, a.jsx)(o.default, {
                                className: E.termsFieldCaretIcon,
                                height: 14,
                                width: 14,
                                color: i.default.unsafe_rawColors.WHITE_500.css
                            })]
                        }), (0, a.jsx)(d.TermsFieldCheckbox, {
                            disabled: !0,
                            checked: !1
                        })]
                    })
                }
        },
        333554: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("621115"),
                l = s("933351"),
                i = s("977618"),
                r = function(e) {
                    let {
                        formField: t,
                        index: s,
                        isDragEnabled: r,
                        isDropHovered: o,
                        onDrop: d,
                        onEdit: u,
                        onRemove: c
                    } = e, {
                        label: E,
                        placeholder: _
                    } = t;
                    return (0, a.jsx)(l.default, {
                        field: t,
                        index: s,
                        isDragEnabled: r,
                        isDropHovered: o,
                        onDrop: d,
                        onEdit: u,
                        onRemove: c,
                        title: E,
                        children: (0, a.jsx)(n.TextInputFieldBody, {
                            className: i.fieldBackground,
                            placeholder: _,
                            disabled: !0
                        })
                    })
                }
        },
        925993: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getVerificationLevelText: function() {
                    return I
                },
                default: function() {
                    return N
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("669491"),
                i = s("77078"),
                r = s("957255"),
                o = s("556081"),
                d = s("216947"),
                u = s("987772"),
                c = s("192918"),
                E = s("49111"),
                _ = s("782340"),
                T = s("977618");

            function I(e) {
                switch (e) {
                    case E.VerificationLevels.LOW:
                        return _.default.Messages.VERIFICATION_LEVEL_LOW;
                    case E.VerificationLevels.MEDIUM:
                        return _.default.Messages.VERIFICATION_LEVEL_MEDIUM;
                    case E.VerificationLevels.HIGH:
                        return _.default.Messages.VERIFICATION_LEVEL_HIGH;
                    case E.VerificationLevels.VERY_HIGH:
                        return _.default.Messages.VERIFICATION_LEVEL_VERY_HIGH;
                    default:
                        return ""
                }
            }
            let S = {
                [E.VerificationLevels.NONE]: "",
                [E.VerificationLevels.LOW]: l.default.unsafe_rawColors.GREEN_360.css,
                [E.VerificationLevels.MEDIUM]: l.default.unsafe_rawColors.YELLOW_300.css,
                [E.VerificationLevels.HIGH]: l.default.unsafe_rawColors.ORANGE_345.css,
                [E.VerificationLevels.VERY_HIGH]: l.default.unsafe_rawColors.RED_400.css
            };
            var N = function(e) {
                let {
                    guild: t
                } = e, l = r.default.can(E.Permissions.MANAGE_GUILD, t), N = t.verificationLevel, f = N === E.VerificationLevels.VERY_HIGH ? d.default : o.default, g = n.useMemo(() => I(N), [N]), A = S[N], L = (0, a.jsx)("div", {
                    className: T.verificationLevelTitle,
                    children: _.default.Messages.MEMBER_VERIFICATION_GUILD_VERIFICATION_LEVEL.format({
                        verificationLevelHook: function() {
                            return (0, a.jsx)(i.Text, {
                                className: T.verificationLevelHook,
                                style: {
                                    color: A
                                },
                                variant: "text-sm/semibold",
                                children: g
                            }, "hook")
                        }
                    })
                }), m = N === E.VerificationLevels.VERY_HIGH ? _.default.Messages.MEMBER_VERIFICATION_FORM_ITEM_PHONE_VERIFICATION_SETTINGS_LABEL : _.default.Messages.MEMBER_VERIFICATION_FORM_ITEM_EMAIL_VERIFICATION_SETTINGS_LABEL;
                return (0, a.jsx)(c.default, {
                    title: L,
                    children: (0, a.jsxs)("div", {
                        className: T.verificationContainer,
                        children: [(0, a.jsx)(f, {
                            width: 20,
                            height: 20,
                            className: T.icon
                        }), (0, a.jsx)(i.Text, {
                            className: T.guildVerificationText,
                            variant: "text-sm/normal",
                            children: m
                        }), l && (0, a.jsx)(i.Clickable, {
                            className: T.iconInteractiveContainer,
                            onClick: () => (0, i.openModalLazy)(async () => {
                                let {
                                    default: e
                                } = await s.el("161069").then(s.bind(s, "161069"));
                                return s => (0, a.jsx)(e, {
                                    ...s,
                                    guild: t
                                })
                            }),
                            children: (0, a.jsx)(u.default, {
                                width: 20,
                                height: 20,
                                className: T.iconInteractive
                            })
                        })]
                    })
                })
            }
        },
        832285: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("272030"),
                i = s("100300"),
                r = s("879478"),
                o = s("151185"),
                d = s("179016"),
                u = s("567054"),
                c = s("546470"),
                E = s("782340"),
                _ = s("667456");

            function T(e) {
                let {
                    addFormField: t,
                    onSelect: s
                } = e;
                return (0, a.jsx)(n.Menu, {
                    navId: "add-questions",
                    className: _.menu,
                    onClose: l.closeContextMenu,
                    "aria-label": E.default.Messages.USER_ACTIONS_MENU_LABEL,
                    onSelect: s,
                    children: (0, a.jsxs)(n.MenuGroup, {
                        children: [(0, a.jsx)(n.MenuItem, {
                            id: "text-input",
                            icon: d.default,
                            label: E.default.Messages.MEMBER_VERIFICATION_FORM_ITEM_TEXT_INPUT,
                            action: () => (0, c.openEmptyFormFieldModal)(u.VerificationFormFieldTypes.TEXT_INPUT, t)
                        }), (0, a.jsx)(n.MenuItem, {
                            id: "paragraph",
                            icon: r.default,
                            label: E.default.Messages.MEMBER_VERIFICATION_FORM_ITEM_PARAGRAPH,
                            action: () => (0, c.openEmptyFormFieldModal)(u.VerificationFormFieldTypes.PARAGRAPH, t)
                        }), (0, a.jsx)(n.MenuItem, {
                            id: "multiple-choice",
                            icon: i.default,
                            label: E.default.Messages.MEMBER_VERIFICATION_FORM_ITEM_MULTIPLE_CHOICE,
                            action: () => (0, c.openEmptyFormFieldModal)(u.VerificationFormFieldTypes.MULTIPLE_CHOICE, t)
                        })]
                    })
                })
            }
            var I = function(e) {
                let {
                    addFormField: t
                } = e, s = e => {
                    (0, l.openContextMenu)(e, e => (0, a.jsx)(T, {
                        ...e,
                        addFormField: t
                    }), {
                        position: "top",
                        align: "center"
                    })
                };
                return (0, a.jsx)("div", {
                    className: _.container,
                    children: (0, a.jsx)(n.Tooltip, {
                        text: E.default.Messages.GUILD_SETTINGS_MEMBER_VERIFICATION_QUESTION_LIMIT,
                        children: e => (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(n.Clickable, {
                                ...e,
                                className: _.iconContainer,
                                onClick: s,
                                children: (0, a.jsx)(o.default, {
                                    width: 18,
                                    height: 20,
                                    className: _.icon
                                })
                            }), (0, a.jsx)(n.Text, {
                                color: "interactive-normal",
                                variant: "text-sm/normal",
                                children: E.default.Messages.MEMBER_VERIFICATION_ADD_QUESTION
                            })]
                        })
                    })
                })
            }
        },
        26754: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("614351"),
                i = function(e) {
                    let {
                        text: t
                    } = e;
                    return (0, a.jsxs)("div", {
                        className: l.container,
                        children: [(0, a.jsx)(n.FormDivider, {}), (0, a.jsx)(n.Text, {
                            variant: "text-xs/bold",
                            color: "header-secondary",
                            className: l.text,
                            children: t.toUpperCase()
                        }), (0, a.jsx)(n.FormDivider, {})]
                    })
                }
        },
        546470: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getFormFieldBuilderComponent: function() {
                    return _
                },
                openEmptyFormFieldModal: function() {
                    return T
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("917351"),
                l = s("77078"),
                i = s("567054"),
                r = s("403025"),
                o = s("263974"),
                d = s("169324"),
                u = s("333554"),
                c = s("49111"),
                E = s("782340");

            function _(e) {
                let {
                    dropHoveredIndex: t,
                    formField: c,
                    guild: _,
                    index: T,
                    isDragEnabled: S,
                    submittedGuildJoinRequestsCount: N,
                    removeFormField: f,
                    updateFormField: g,
                    updateFormFieldOrder: A
                } = e, L = async () => {
                    await f(T)
                }, m = async e => {
                    await g(T, e)
                }, C = async (e, t, s) => {
                    await A(e, t, s)
                }, O = (0, n.uniqueId)(), h = t === T, R = {
                    key: O,
                    index: T,
                    isDragEnabled: S,
                    isDropHovered: h,
                    onEdit: () => {
                        0 === N ? I(c, m) : (0, l.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("265397").then(s.bind(s, "265397"));
                            return t => (0, a.jsx)(e, {
                                ...t,
                                guildId: _.id,
                                submittedGuildJoinRequestsCount: N,
                                onConfirm: () => I(c, m)
                            })
                        })
                    },
                    onRemove: L,
                    onDrop: C
                };
                switch (c.field_type) {
                    case i.VerificationFormFieldTypes.TERMS:
                        return (0, a.jsx)(d.default, {
                            channelId: _.rulesChannelId,
                            title: E.default.Messages.GUILD_RULES_HEADER,
                            formField: c,
                            ...R
                        });
                    case i.VerificationFormFieldTypes.PARAGRAPH:
                        return (0, a.jsx)(o.default, {
                            formField: c,
                            ...R
                        });
                    case i.VerificationFormFieldTypes.TEXT_INPUT:
                        return (0, a.jsx)(u.default, {
                            formField: c,
                            ...R
                        });
                    case i.VerificationFormFieldTypes.MULTIPLE_CHOICE:
                        return (0, a.jsx)(r.default, {
                            formField: c,
                            ...R
                        });
                    default:
                        return null
                }
            }

            function T(e, t) {
                let n = {
                    onCloseRequest: c.NOOP
                };
                switch (e) {
                    case i.VerificationFormFieldTypes.TERMS:
                        return (0, l.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("262099").then(s.bind(s, "262099"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                field: void 0,
                                onSave: t
                            })
                        }, n);
                    case i.VerificationFormFieldTypes.PARAGRAPH:
                        return (0, l.openModalLazy)(async () => {
                            let {
                                ParagraphFormFieldModal: e
                            } = await s.el("198784").then(s.bind(s, "198784"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                field: void 0,
                                onSave: t
                            })
                        }, n);
                    case i.VerificationFormFieldTypes.TEXT_INPUT:
                        return (0, l.openModalLazy)(async () => {
                            let {
                                TextInputFormFieldModal: e
                            } = await s.el("198784").then(s.bind(s, "198784"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                field: void 0,
                                onSave: t
                            })
                        }, n);
                    case i.VerificationFormFieldTypes.MULTIPLE_CHOICE:
                        return (0, l.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("827619").then(s.bind(s, "827619"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                field: void 0,
                                onSave: t
                            })
                        }, n)
                }
            }

            function I(e, t) {
                let n = {
                    onCloseRequest: c.NOOP
                };
                switch (e.field_type) {
                    case i.VerificationFormFieldTypes.TERMS:
                        return (0, l.openModalLazy)(async () => {
                            let {
                                default: n
                            } = await s.el("262099").then(s.bind(s, "262099"));
                            return s => (0, a.jsx)(n, {
                                ...s,
                                field: e,
                                onSave: t
                            })
                        }, n);
                    case i.VerificationFormFieldTypes.PARAGRAPH:
                        return (0, l.openModalLazy)(async () => {
                            let {
                                ParagraphFormFieldModal: n
                            } = await s.el("198784").then(s.bind(s, "198784"));
                            return s => (0, a.jsx)(n, {
                                ...s,
                                field: e,
                                onSave: t
                            })
                        }, n);
                    case i.VerificationFormFieldTypes.TEXT_INPUT:
                        return (0, l.openModalLazy)(async () => {
                            let {
                                TextInputFormFieldModal: n
                            } = await s.el("198784").then(s.bind(s, "198784"));
                            return s => (0, a.jsx)(n, {
                                ...s,
                                field: e,
                                onSave: t
                            })
                        }, n);
                    case i.VerificationFormFieldTypes.MULTIPLE_CHOICE:
                        return (0, l.openModalLazy)(async () => {
                            let {
                                default: n
                            } = await s.el("827619").then(s.bind(s, "827619"));
                            return s => (0, a.jsx)(n, {
                                ...s,
                                field: e,
                                onSave: t
                            })
                        }, n)
                }
            }
        },
        613786: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return g
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("50926"),
                r = s("520141"),
                o = s("567054"),
                d = s("409464"),
                u = s("414989"),
                c = s("64284"),
                E = s("335724"),
                _ = s("925993"),
                T = s("832285"),
                I = s("26754"),
                S = s("546470"),
                N = s("394294"),
                f = s("782340"),
                g = function(e) {
                    let {
                        guild: t,
                        submittedGuildJoinRequestsCount: s,
                        onFormFieldUpdate: g,
                        hideVerificationLevelField: A
                    } = e, L = n.useRef(!1), [m, C] = n.useState(null), [O, h] = n.useState(e.formFields), R = n.useRef(e.formFields), D = n.useMemo(() => O.filter(d.isAutomaticApprovalFormField), [O]), M = n.useMemo(() => O.filter(d.isManualApprovalFormField), [O]), G = M.length, x = n.useMemo(() => O.length === N.MAX_FORM_ELEMENTS, [O]), p = n.useMemo(() => O.some(o.isTermsFormField), [O]), U = n.useMemo(() => O.some(e => !(0, o.isTermsFormField)(e)), [O]), v = G > 1, j = (0, r.useIsMemberVerificationManualApproval)(t.id), P = n.useCallback(() => {
                        (0, l.showToast)((0, l.createToast)(f.default.Messages.ERROR_GENERIC_TITLE, l.ToastType.FAILURE))
                    }, []), y = n.useCallback(async e => {
                        if (!L.current) {
                            L.current = !0;
                            try {
                                await i.default.updateVerificationForm(t.id, e), g(), h(e), R.current = e
                            } catch (e) {
                                throw h(R.current), e
                            } finally {
                                null != m && C(null), L.current = !1
                            }
                        }
                    }, [m, t.id, g]), b = n.useCallback(async e => {
                        let t = e.field_type === o.VerificationFormFieldTypes.TERMS ? [e, ...O] : [...O, e];
                        await y(t)
                    }, [O, y]), B = n.useCallback(async (e, t) => {
                        if (O[e] === t) return;
                        let s = [...O];
                        s[e] = t, await y(s)
                    }, [O, y]), F = n.useCallback(async (e, t, s) => {
                        let a = O.indexOf(e),
                            n = [...O];
                        if (null != t && t !== a && (n.splice(a, 1), n.splice(t, 0, e), h(n)), s) try {
                            await y(n), null !== m && C(null)
                        } catch (e) {
                            P()
                        } else m !== t && C(t)
                    }, [m, O, y, P]), H = n.useCallback(async e => {
                        try {
                            await y([...O.slice(0, e), ...O.slice(e + 1)])
                        } catch (e) {
                            P()
                        }
                    }, [O, y, P]), V = (0, a.jsxs)(a.Fragment, {
                        children: [!A && (0, a.jsx)(_.default, {
                            guild: t
                        }), (0, a.jsx)(c.default, {
                            guildId: t.id
                        }), !p && !x && (0, a.jsx)(E.default, {
                            addFormField: b
                        }), D.map(e => (0, S.getFormFieldBuilderComponent)({
                            dropHoveredIndex: m,
                            formField: e,
                            guild: t,
                            index: O.indexOf(e),
                            isDragEnabled: !1,
                            submittedGuildJoinRequestsCount: s,
                            removeFormField: H,
                            updateFormField: B,
                            updateFormFieldOrder: F
                        }))]
                    });
                    return j ? (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(I.default, {
                            text: f.default.Messages.GUILD_SETTINGS_MEMBER_VERIFICATION_AUTOMATIC_APPROVAL_DIVIDER
                        }), V, (0, a.jsx)(I.default, {
                            text: f.default.Messages.GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_APPROVAL_DIVIDER
                        }), !U && (0, a.jsx)(u.default, {
                            addFormField: b,
                            hasManualFormFields: G > 0
                        }), M.map(e => (0, S.getFormFieldBuilderComponent)({
                            dropHoveredIndex: m,
                            formField: e,
                            guild: t,
                            index: O.indexOf(e),
                            isDragEnabled: v,
                            submittedGuildJoinRequestsCount: s,
                            removeFormField: H,
                            updateFormField: B,
                            updateFormFieldOrder: F
                        })), U && !x && (0, a.jsx)(T.default, {
                            addFormField: b
                        })]
                    }) : V
                }
        },
        284234: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return D
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("65597"),
                o = s("77078"),
                d = s("812204"),
                u = s("685665"),
                c = s("592407"),
                E = s("401642"),
                _ = s("305961"),
                T = s("178406"),
                I = s("645266"),
                S = s("914985"),
                N = s("308073"),
                f = s("565556"),
                g = s("553275"),
                A = s("691307"),
                L = s("314143"),
                m = s("721302"),
                C = s("948512"),
                O = s("49111"),
                h = s("782340"),
                R = s("117102");

            function D(e) {
                let {
                    guildId: t
                } = e, s = (0, r.default)([_.default], () => _.default.getGuild(t)), {
                    AnalyticsLocationProvider: l
                } = (0, u.default)(d.default.GUILD_SETTINGS_MEMBERS_PAGE), D = !1 == !!(null == s ? void 0 : s.hasFeature(O.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY)), M = (0, r.default)([T.default], () => T.default.getEstimatedMemberSearchCountByGuildId(t), [t]), G = n.useCallback(e => {
                    null != e && (0, E.openUserProfileModal)({
                        userId: e.userId,
                        guildId: e.guildId,
                        analyticsLocation: {
                            section: O.AnalyticsSections.GUILD_SETTINGS_MEMBERS
                        }
                    })
                }, []);
                if (null == s) return null;
                let x = (0, g.getSearchState)(!1, !1, M);
                return (0, a.jsx)(l, {
                    children: (0, a.jsx)("div", {
                        className: R.settingsColumn,
                        children: (0, a.jsx)("div", {
                            className: R.settingsContainer,
                            children: (0, a.jsx)(o.ScrollerAuto, {
                                className: R.settingsScroller,
                                orientation: "auto",
                                children: (0, a.jsxs)("main", {
                                    className: R.settingsContent,
                                    children: [(0, a.jsx)(o.FormSection, {
                                        className: i(R.header),
                                        children: (0, a.jsx)(o.FormTitle, {
                                            tag: o.FormTitleTags.H1,
                                            children: h.default.Messages.GUILD_SETTINGS_MEMBERS_SERVER_MEMBERS
                                        })
                                    }, "header"), (0, a.jsx)(o.FormSection, {
                                        children: (0, a.jsxs)("div", {
                                            className: i(R.tableContainer),
                                            children: [(0, a.jsx)(N.default, {
                                                guild: s
                                            }), (0, a.jsx)(S.default, {
                                                guild: s
                                            }), D ? (0, a.jsxs)("div", {
                                                className: i(R.mainTableContainer),
                                                children: [(0, a.jsx)(m.default, {
                                                    guild: s
                                                }), (0, a.jsx)(A.default, {
                                                    guild: s,
                                                    searchState: x,
                                                    compact: !0,
                                                    onSelectRow: G
                                                }), x !== g.SearchState.SUCCESS_STILL_INDEXING && (0, a.jsx)(L.default, {
                                                    guildId: s.id
                                                })]
                                            }) : (0, a.jsx)("div", {
                                                className: i(R.movedTable),
                                                children: (0, a.jsxs)("div", {
                                                    className: i(R.noResultsContainer),
                                                    children: [(0, a.jsx)("div", {
                                                        className: i(R.noResultsIconContainer),
                                                        children: (0, a.jsx)(C.default, {})
                                                    }), (0, a.jsx)(o.Text, {
                                                        variant: "text-md/normal",
                                                        color: "text-muted",
                                                        children: h.default.Messages.GUILD_SETTINGS_SAFETY_MODERATION_EXPERIENCE_ENABLED.format({
                                                            onClick: e => {
                                                                null != s && (e.preventDefault(), c.default.close(), (0, I.goToMemberSafetyDashboard)(s.id))
                                                            }
                                                        })
                                                    })]
                                                })
                                            })]
                                        })
                                    }, "body"), (0, a.jsx)(f.default, {
                                        guildId: s.id
                                    })]
                                })
                            })
                        })
                    })
                })
            }
        },
        308073: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("65597"),
                i = s("77078"),
                r = s("817674"),
                o = s("957255"),
                d = s("841803"),
                u = s("49111"),
                c = s("782340"),
                E = s("297716");

            function _(e) {
                let {
                    guild: t
                } = e, s = n.useId(), _ = (0, l.default)([o.default], () => null != t && o.default.can(u.Permissions.MANAGE_GUILD, t), [t]), T = t.hasFeature(u.GuildFeatures.COMMUNITY), [I, S] = n.useState(t.hasFeature(u.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY)), N = n.useCallback(async e => {
                    S(e), await (0, r.toggleModerationExperienceGuildFeature)(t, e)
                }, [t]);
                return T ? null : (0, a.jsxs)("div", {
                    className: E.bannerContainer,
                    children: [(0, a.jsx)(d.default, {
                        width: 64,
                        height: 64
                    }), (0, a.jsxs)("div", {
                        className: E.headingContainer,
                        children: [(0, a.jsx)(i.Heading, {
                            variant: "heading-lg/semibold",
                            children: c.default.Messages.GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE
                        }), (0, a.jsx)(i.Text, {
                            variant: "text-sm/medium",
                            children: c.default.Messages.GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE_DESCRIPTION
                        })]
                    }), (0, a.jsx)("div", {
                        className: E.buttonContainer,
                        children: (0, a.jsx)(i.Switch, {
                            id: s,
                            checked: I,
                            onChange: N,
                            disabled: !_
                        })
                    })]
                })
            }
        },
        841803: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return n
                }
            });
            var a = s("37983");

            function n(e) {
                let {
                    width: t = 69,
                    height: s = 62
                } = e;
                return (0, a.jsxs)("svg", {
                    width: t,
                    height: s,
                    xmlns: "http://www.w3.org/2000/svg",
                    viewBox: "0 0 69 62",
                    fill: "none",
                    children: [(0, a.jsxs)("g", {
                        "clip-path": "url(#clip0_2732_42516)",
                        children: [(0, a.jsx)("path", {
                            d: "M64.8828 23.5441L26.6128 26.5941L26.1843 29.4645L26.1333 29.8034L24.178 42.9828L22.5661 53.5595C22.5202 53.8649 22.5439 54.1766 22.6356 54.4716C22.7273 54.7665 22.8846 55.0371 23.0957 55.2631C23.3068 55.4891 23.5663 55.6648 23.855 55.777C24.1436 55.8893 24.4539 55.9352 24.7629 55.9114L30.6493 55.4539C30.6493 55.4539 29.017 60.0425 28.7313 60.8185C28.7115 60.9106 28.7157 61.0061 28.7434 61.0961C28.771 61.1861 28.8213 61.2675 28.8895 61.3327C28.9576 61.3979 29.0413 61.4446 29.1327 61.4685C29.224 61.4924 29.32 61.4926 29.4114 61.4692C29.4523 61.4692 31.36 60.256 33.788 58.7208L34.8966 58.0193L35.0938 57.8939L34.9102 54.4644L55.7829 52.6343L56.2488 53.4375L59.7582 53.1359C60.6838 53.0634 61.5576 52.6806 62.2369 52.0497C62.9162 51.4189 63.361 50.5774 63.4988 49.6623L67.0694 25.8757C67.1157 25.5721 67.0923 25.262 67.0011 24.9687C66.9099 24.6753 66.7533 24.4064 66.5429 24.1821C66.3325 23.9577 66.0738 23.7838 65.7863 23.6733C65.4988 23.5628 65.1899 23.5186 64.8828 23.5441Z",
                            fill: "url(#paint0_linear_2732_42516)"
                        }), (0, a.jsx)("path", {
                            d: "M60.2106 44.2164C59.6869 42.522 58.5103 41.8679 57.7656 40.8276C57.2827 39.6889 56.7454 37.9741 55.6708 35.8662C54.2188 33.0602 53.0864 30.6846 52.9504 30.3017C52.5899 29.1766 52.9674 26.3875 51.3793 24.9066C50.2265 23.8255 47.9957 23.551 46.6185 23.1172L46.0302 23.1884L45.8092 22.8156V22.7682C46.5981 20.5112 47.7543 17.8339 48.0706 14.5298C48.4684 10.3987 48.0706 6.05755 45.0951 3.80394C42.1196 1.55033 38.4911 0.14055 34.7879 0.584494C31.0847 1.02844 27.4563 2.74322 25.4431 5.79999C24.423 7.35888 23.345 12.6828 24.763 17.1324C26.2593 21.8769 28.0854 26.2011 28.0854 26.2011C28.0854 26.2011 22.6683 28.0413 21.3318 30.0373C19.7574 32.3892 19.3833 34.2158 18.795 35.1817C16.6969 38.6248 13.014 43.3794 13.014 43.3794L13.2861 58.7683C16.4078 59.1716 18.7984 56.3792 21.24 52.9157C21.9712 51.8787 22.8111 50.5909 23.6204 49.2998L23.685 49.1981C23.9197 48.8355 24.8276 45.7482 24.8276 45.7482L25.7356 31.0303L40.4669 29.3053L48.8357 49.9776L46.6117 54.0442C48.7983 55.9793 50.9236 57.0502 52.7872 56.6469C54.7935 56.2131 56.1027 54.2137 57.4119 51.6889C58.7212 49.1642 60.6697 45.7109 60.2106 44.2164Z",
                            fill: "#3343D8"
                        }), (0, a.jsx)("path", {
                            d: "M53.5318 53.6822L40.1267 54.7226L34.9103 58.0267C34.4376 56.6441 33.6589 54.7327 33.6589 54.7327C28.6702 54.2956 26.7693 53.4992 25.3648 51.432C24.5487 50.2357 24.1134 47.1721 24.178 42.9902C24.178 42.3125 24.2019 41.5997 24.2495 40.8519C24.5147 35.5889 25.1404 29.8719 25.1404 29.8719L26.1334 29.8109H26.1844L49.5837 28.3672L53.5318 53.6822Z",
                            fill: "url(#paint1_linear_2732_42516)"
                        }), (0, a.jsx)("path", {
                            d: "M40.1879 16.0889C39.535 13.6048 39.3888 11.3817 40.4498 9.11453C38.6373 8.67397 35.8556 7.89453 34.5974 5.16309C33.2711 7.24047 30.8975 8.42997 28.8572 8.93831C29.6427 10.6328 29.5577 13.0389 28.5511 15.1739C30.5915 15.8008 31.7001 17.2241 33.5806 18.966C35.3319 17.1055 37.6953 16.5667 40.1879 16.0889Z",
                            fill: "url(#paint2_linear_2732_42516)"
                        }), (0, a.jsx)("path", {
                            d: "M55.9803 42.1834C55.9157 42.1854 55.8515 42.1727 55.7926 42.1462C55.7336 42.1198 55.6815 42.0804 55.6402 42.0309C53.8107 39.8484 51.0664 39.0215 48.1827 38.3031C48.1285 38.2895 48.0774 38.2654 48.0325 38.2322C47.9876 38.1989 47.9497 38.1572 47.921 38.1094C47.8922 38.0616 47.8732 38.0086 47.8651 37.9534C47.8569 37.8983 47.8597 37.842 47.8733 37.788C47.8869 37.7339 47.9111 37.683 47.9444 37.6383C47.9778 37.5935 48.0196 37.5557 48.0676 37.5271C48.1156 37.4984 48.1688 37.4795 48.2242 37.4714C48.2795 37.4632 48.3359 37.466 48.3902 37.4796C51.4167 38.2319 54.297 39.1062 56.2931 41.4886C56.3418 41.5512 56.3718 41.6262 56.3796 41.7051C56.3874 41.7839 56.3727 41.8633 56.3371 41.9342C56.3016 42.005 56.2467 42.0644 56.1787 42.1055C56.1108 42.1466 56.0325 42.1677 55.9531 42.1664L55.9803 42.1834Z",
                            fill: "black"
                        }), (0, a.jsx)("path", {
                            d: "M32.3462 14.0553C32.8534 13.3913 33.5107 12.8561 34.2648 12.4934C35.0188 12.1306 35.8482 11.9505 36.6854 11.9677C36.8843 11.9681 37.083 11.9806 37.2805 12.005C37.2822 11.9836 37.2822 11.9621 37.2805 11.9406C37.2328 10.4055 35.9712 10.4258 34.4274 10.4258C32.8835 10.4258 31.5675 10.4055 31.5675 12.0355C31.5614 12.7621 31.8241 13.4655 32.3054 14.0112L32.3462 14.0553Z",
                            fill: "black"
                        }), (0, a.jsx)("path", {
                            d: "M37.2805 12.0227C37.2941 12.7918 37.001 13.535 36.4655 14.089C35.93 14.643 35.1957 14.9627 34.424 14.9778C34.0219 14.9783 33.6244 14.8923 33.2588 14.7256C32.8931 14.5589 32.5679 14.3155 32.3054 14.012C32.7971 13.3394 33.4449 12.7954 34.1934 12.4266C34.9419 12.0577 35.7689 11.875 36.6037 11.8939C36.8311 11.8932 37.0582 11.9068 37.2839 11.9346C37.2842 11.964 37.2831 11.9934 37.2805 12.0227Z",
                            fill: "#D01582"
                        }), (0, a.jsx)("path", {
                            d: "M18.6657 46.636C17.4279 40.4547 16.003 35.1477 14.3334 34.1344C12.9493 33.2973 10.4465 34.5004 6.78749 35.761C3.40051 36.9302 1.90086 37.2962 1.29556 39.8108C0.771871 41.9898 1.5642 43.9045 4.18265 46.7851C6.80109 49.6657 8.54898 52.0684 8.77682 52.9664C9.00466 53.8645 10.1745 58.3683 13.2928 58.775C15.2413 59.0258 16.9042 58.0328 18.4753 56.4028C19.4172 55.42 19.7505 52.0379 18.6657 46.636Z",
                            fill: "url(#paint3_linear_2732_42516)"
                        }), (0, a.jsx)("path", {
                            d: "M2.76464 38.2352C2.25115 36.795 1.57444 34.1957 2.35997 33.0333C3.19991 31.8031 10.3411 30.0612 11.6163 31.183C12.6773 32.1183 12.9766 34.1313 13.048 35.3039C13.1364 36.5645 11.2389 37.6456 8.84486 38.32C6.86913 38.8859 3.25092 39.5976 2.76464 38.2352Z",
                            fill: "#8089FF"
                        }), (0, a.jsx)("path", {
                            d: "M2.83957 32.6534C2.97559 33.4193 3.33605 34.0936 5.18936 33.7344C7.04268 33.3752 9.31086 32.7178 9.97737 32.04C10.5419 31.4401 11.375 30.3218 11.8511 29.7288C12.3272 29.1357 13.8914 24.1032 13.8914 24.1032L5.17236 18.376C5.17236 18.376 2.94498 22.2495 2.67294 25.3537C2.48362 27.7864 2.53944 30.2318 2.83957 32.6534Z",
                            fill: "#FFC518"
                        }), (0, a.jsx)("path", {
                            d: "M8.43338 26.8522C8.36729 26.8527 8.30202 26.8376 8.24291 26.8082C8.1838 26.7787 8.13254 26.7358 8.09332 26.6827C8.02655 26.5926 7.99805 26.4798 8.01395 26.3689C8.02986 26.2579 8.0889 26.1576 8.17833 26.0897C10.1711 24.602 11.7999 23.7785 13.8029 23.2464C13.9092 23.2241 14.02 23.2432 14.1127 23.2997C14.2053 23.3563 14.2727 23.4461 14.3009 23.5506C14.3292 23.6551 14.3163 23.7665 14.2648 23.8618C14.2133 23.9571 14.1271 24.0292 14.0239 24.0631C12.1332 24.5681 10.5893 25.3509 8.68842 26.7742C8.614 26.8268 8.52458 26.8542 8.43338 26.8522Z",
                            fill: "#EC5F00"
                        }), (0, a.jsx)("path", {
                            d: "M25.222 20.8031L21.801 14.5879L5.62109 20.4303C5.62109 20.4303 12.0822 24.7342 12.7997 25.1375C13.4963 25.578 14.2924 25.8378 15.1155 25.8932C15.7079 25.9118 16.2967 25.7954 16.8371 25.5529C17.3775 25.3103 17.8552 24.948 18.2338 24.4936C18.2501 24.4732 18.2707 24.4566 18.2943 24.4453C18.3178 24.4339 18.3437 24.428 18.3698 24.428C18.396 24.428 18.4219 24.4339 18.4454 24.4453C18.469 24.4566 18.4896 24.4732 18.5059 24.4936C18.8717 24.9327 19.3301 25.2861 19.8485 25.5286C20.3669 25.7711 20.9325 25.8967 21.5052 25.8966C22.4641 25.8966 25.5859 25.8119 25.5859 25.8119C25.5859 25.8119 25.4975 23.0432 25.4124 21.7452C25.39 21.4243 25.326 21.1076 25.222 20.8031Z",
                            fill: "#D01582"
                        }), (0, a.jsx)("path", {
                            d: "M18.2305 12.1379C17.2141 12.0188 16.1868 12.2381 15.3084 12.7616C14.4301 13.285 13.7502 14.0833 13.3745 15.032C13.3522 15.0998 13.3089 15.1588 13.2509 15.2007C13.1929 15.2425 13.1231 15.2651 13.0515 15.2651C12.9798 15.2651 12.9101 15.2425 12.852 15.2007C12.794 15.1588 12.7508 15.0998 12.7284 15.032C12.3325 14.0296 11.5979 13.1964 10.6514 12.6761C9.70495 12.1557 8.60592 11.9809 7.54393 12.1817C6.48193 12.3825 5.52356 12.9464 4.83414 13.7761C4.14471 14.6057 3.76746 15.6492 3.76746 16.7264C3.76746 17.8037 4.14471 18.8471 4.83414 19.6768C5.52356 20.5065 6.48193 21.0704 7.54393 21.2712C8.60592 21.472 9.70495 21.2971 10.6514 20.7768C11.5979 20.2564 12.3325 19.4232 12.7284 18.4209C12.7499 18.3518 12.7931 18.2914 12.8515 18.2485C12.9099 18.2056 12.9806 18.1825 13.0532 18.1825C13.1257 18.1825 13.1964 18.2056 13.2548 18.2485C13.3133 18.2914 13.3564 18.3518 13.3779 18.4209C13.6777 19.1834 14.1753 19.853 14.8198 20.3611C15.4643 20.8693 16.2326 21.1978 17.0462 21.3131C17.8598 21.4284 18.6896 21.3264 19.4507 21.0175C20.2118 20.7086 20.8769 20.2038 21.3782 19.5548C21.8794 18.9058 22.1988 18.1358 22.3037 17.3236C22.4085 16.5113 22.2951 15.6858 21.975 14.9315C21.6549 14.1772 21.1395 13.5211 20.4817 13.0303C19.8238 12.5395 19.047 12.2315 18.2305 12.1379Z",
                            fill: "#FF78B8"
                        }), (0, a.jsx)("path", {
                            d: "M6.37945 18.9592L10.6268 14.6824C10.3506 14.38 10.0156 14.1367 9.64209 13.9675C9.26858 13.7982 8.8644 13.7065 8.45419 13.6979C8.04397 13.6894 7.63629 13.7641 7.25599 13.9176C6.87568 14.0711 6.53071 14.3001 6.24209 14.5907C5.95346 14.8814 5.72722 15.2275 5.57715 15.6081C5.42707 15.9886 5.35631 16.3957 5.36916 16.8044C5.38201 17.213 5.47821 17.6149 5.6519 17.9853C5.82559 18.3558 6.07313 18.6871 6.37945 18.9592Z",
                            fill: "#423D80"
                        }), (0, a.jsx)("path", {
                            d: "M10.5418 18.8648C11.1087 18.2992 11.4271 17.5326 11.4271 16.7332C11.4271 15.9338 11.1087 15.1671 10.5418 14.6016L6.27405 18.8648C6.84112 19.4266 7.60826 19.742 8.40791 19.742C9.20755 19.742 9.9747 19.4266 10.5418 18.8648Z",
                            fill: "black"
                        }), (0, a.jsx)("path", {
                            d: "M15.7277 19.0232L19.9648 14.7532C19.6927 14.4372 19.3579 14.1808 18.9813 14.0002C18.6048 13.8196 18.1948 13.7188 17.7772 13.704C17.3597 13.6893 16.9435 13.761 16.5552 13.9146C16.1668 14.0682 15.8146 14.3004 15.5208 14.5965C15.2269 14.8926 14.9979 15.2462 14.8481 15.6349C14.6983 16.0236 14.631 16.4391 14.6505 16.8551C14.6699 17.271 14.7757 17.6784 14.9611 18.0516C15.1465 18.4248 15.4075 18.7556 15.7277 19.0232Z",
                            fill: "#423D80"
                        }), (0, a.jsx)("path", {
                            d: "M19.8254 18.8648C20.1069 18.5852 20.3303 18.253 20.4827 17.8872C20.6351 17.5214 20.7136 17.1292 20.7136 16.7332C20.7136 16.3371 20.6351 15.9449 20.4827 15.5791C20.3303 15.2133 20.1069 14.8811 19.8254 14.6016L15.5475 18.8648C16.115 19.4297 16.8843 19.7471 17.6864 19.7471C18.4886 19.7471 19.2579 19.4297 19.8254 18.8648Z",
                            fill: "black"
                        }), (0, a.jsx)("path", {
                            d: "M26.3783 24.4662C25.3618 24.1105 24.2961 23.9139 23.2192 23.8833C21.274 23.7952 20.1586 24.5137 19.9206 25.3236C19.7302 26.0014 20.0566 27.2146 22.1344 27.2587C24.2121 27.3027 27.3101 28.8311 27.8847 29.3259L26.3783 24.4662Z",
                            fill: "#FFC518"
                        }), (0, a.jsx)("path", {
                            d: "M35.5871 29.0518L31.0235 34.3893C31.0235 34.3893 26.3307 30.1295 25.875 29.594C24.1373 27.5607 25.4466 22.596 25.0623 21.4912C24.7222 20.4745 23.243 17.3805 22.8281 16.6519L21.5155 14.1C21.5155 14.1 23.0526 13.5476 23.9571 14.1339C24.6372 14.5711 25.1099 14.8117 25.1099 14.8117L25.1643 14.7676L25.7356 14.6185L25.9362 14.2288C26.1506 14.1087 26.3791 14.0153 26.6164 13.9509C27.7964 13.6459 33.3087 15.6454 34.4037 17.394C35.1586 18.5734 33.0332 23.5449 32.4007 26.256L35.5871 29.0518Z",
                            fill: "#FFE65C"
                        }), (0, a.jsx)("path", {
                            d: "M6.7467 29.2578C6.7467 29.2578 9.28693 25.2725 13.5002 24.31C15.3944 23.883 16.6322 24.1643 17.0538 24.8997C17.3939 25.5165 17.3939 26.767 15.3876 27.3194C13.9658 27.6973 12.7173 28.5503 11.851 29.7357L6.7467 29.2578Z",
                            fill: "#FFC518"
                        }), (0, a.jsx)("path", {
                            d: "M30.2344 18.9221C30.1859 18.942 30.1339 18.9524 30.0814 18.9526C29.9959 18.9522 29.9126 18.9261 29.8422 18.8777C29.7718 18.8294 29.7177 18.761 29.6869 18.6815C29.0306 16.9871 26.9665 15.7637 25.1642 14.7673C25.3991 14.5578 25.6582 14.3769 25.9361 14.2285C27.7588 15.2452 29.7652 16.5397 30.4793 18.3765C30.4995 18.4283 30.5092 18.4836 30.5078 18.5392C30.5064 18.5948 30.4939 18.6495 30.4712 18.7003C30.4484 18.751 30.4158 18.7968 30.3751 18.8348C30.3345 18.8729 30.2867 18.9026 30.2344 18.9221Z",
                            fill: "#FF8B18"
                        }), (0, a.jsx)("path", {
                            d: "M31.2205 36.7916C31.2205 36.7916 28.4661 34.4499 28.4661 32.7249C28.4661 31.2372 32.9718 26.8046 34.6551 27.0519C36.7771 27.3671 38.0557 29.4242 38.0557 29.4242L31.2205 36.7916Z",
                            fill: "#8089FF"
                        }), (0, a.jsx)("path", {
                            d: "M30.1698 38.2355C30.7581 43.817 38.7392 46.1993 42.7519 50.2592C47.6759 55.2578 49.213 56.6981 52.1477 56.1559C54.6879 55.6882 56.6841 50.0017 55.3816 46.5857C54.1778 43.4306 51.1717 38.8658 48.7165 35.4735C46.9237 32.9963 44.6703 30.8852 42.0786 29.2549C40.1131 28.0518 37.1546 27.9265 33.7676 31.3458C30.5404 34.5958 29.9249 35.8124 30.1698 38.2355Z",
                            fill: "url(#paint4_linear_2732_42516)"
                        }), (0, a.jsx)("path", {
                            d: "M24.4128 48.066C24.405 48.0825 24.3959 48.0984 24.3856 48.1134C24.1578 48.4727 23.9333 48.8353 23.7055 49.1979C23.1828 45.1485 23.1726 41.0498 23.6749 36.9979C23.6907 36.8864 23.7502 36.7858 23.8405 36.7181C23.8851 36.6846 23.936 36.6602 23.9902 36.6463C24.0443 36.6323 24.1007 36.6292 24.1561 36.637C24.2114 36.6448 24.2647 36.6633 24.3129 36.6917C24.3611 36.72 24.4032 36.7575 24.4368 36.802C24.4704 36.8465 24.4949 36.8972 24.5089 36.9512C24.5229 37.0051 24.526 37.0613 24.5182 37.1165C24.0779 40.7513 24.0425 44.4235 24.4128 48.066Z",
                            fill: "black"
                        }), (0, a.jsx)("path", {
                            d: "M46.6389 23.1042C46.0098 24.1208 44.6461 25.6391 41.8781 26.0017H41.827C41.7143 26.0089 41.6033 25.9711 41.5185 25.8968C41.4337 25.8224 41.382 25.7175 41.3748 25.6052C41.3676 25.4928 41.4054 25.3822 41.48 25.2977C41.5547 25.2132 41.6599 25.1616 41.7726 25.1544C44.0884 24.8494 45.231 23.6871 45.8159 22.7822C46.0834 22.9061 46.3583 23.0136 46.6389 23.1042Z",
                            fill: "black"
                        }), (0, a.jsx)("path", {
                            d: "M3.99563 5.96274C3.69447 5.77014 3.43799 5.51576 3.24331 5.21655C3.04862 4.91735 2.92021 4.58021 2.86664 4.22763L2.6796 2.99746C2.67652 2.96723 2.66192 2.93933 2.6388 2.91951C2.61963 2.89447 2.59171 2.87753 2.56058 2.87207C2.53052 2.8747 2.50201 2.88654 2.47897 2.90596C2.45787 2.92687 2.44465 2.9544 2.44156 2.9839L2.25113 4.22763C2.19948 4.5826 2.07191 4.92238 1.87707 5.22396C1.68033 5.52036 1.42309 5.77209 1.12214 5.96274L0.962313 6.0644C0.945336 6.07558 0.931334 6.0907 0.921506 6.10846C0.908 6.14569 0.908 6.18645 0.921506 6.22368C0.931334 6.24144 0.945336 6.25656 0.962313 6.26774L1.12214 6.3694C1.42449 6.56397 1.68183 6.82043 1.87707 7.12174C2.07191 7.42332 2.19948 7.7631 2.25113 8.11807L2.44156 9.33468C2.44547 9.3637 2.46 9.39026 2.48237 9.40924C2.50449 9.42705 2.53214 9.43664 2.56058 9.43635C2.58893 9.43611 2.61642 9.42658 2.6388 9.40924C2.66117 9.39026 2.6757 9.3637 2.6796 9.33468L2.86664 8.11807C2.91838 7.76309 3.04593 7.42329 3.2407 7.12163C3.43546 6.81997 3.69289 6.56345 3.99563 6.3694L4.15885 6.26774C4.17583 6.25656 4.18983 6.24144 4.19966 6.22368C4.21317 6.18645 4.21317 6.14569 4.19966 6.10846C4.18983 6.0907 4.17583 6.07558 4.15885 6.0644L3.99563 5.96274Z",
                            fill: "#66BBFF"
                        }), (0, a.jsx)("path", {
                            d: "M55.5551 15.8179C55.2508 15.6264 54.9921 15.371 54.7971 15.0695C54.6021 14.7681 54.4755 14.4279 54.4261 14.0726L54.2357 12.856C54.2326 12.8265 54.2194 12.7989 54.1983 12.778C54.1752 12.7586 54.1467 12.7468 54.1166 12.7441C54.0876 12.7468 54.0602 12.7587 54.0384 12.778C54.0153 12.7978 54.0007 12.8257 53.9976 12.856L53.8106 14.0726C53.7575 14.4267 53.6294 14.7655 53.4347 15.0664C53.2401 15.3674 52.9833 15.6235 52.6816 15.8179L52.5184 15.9229C52.5009 15.9326 52.4876 15.9482 52.481 15.967C52.4759 15.9858 52.4759 16.0057 52.481 16.0246C52.4762 16.0435 52.4762 16.0633 52.481 16.0822C52.4885 16.1004 52.5016 16.1158 52.5184 16.1263L52.6816 16.2279C52.9837 16.4216 53.2401 16.6783 53.4331 16.9803C53.6284 17.2807 53.7571 17.6192 53.8106 17.9732L53.9976 19.1932C54.0029 19.2218 54.0172 19.2479 54.0384 19.2678C54.0608 19.2851 54.0883 19.2946 54.1166 19.2949C54.146 19.2946 54.1746 19.2851 54.1983 19.2678C54.2185 19.2476 54.2316 19.2214 54.2357 19.1932L54.4261 17.9732C54.4771 17.6186 54.6035 17.2789 54.7967 16.9769C54.9943 16.6772 55.2526 16.4221 55.5551 16.2279L55.7183 16.1263C55.7376 16.1173 55.755 16.1047 55.7693 16.089C55.7741 16.0701 55.7741 16.0503 55.7693 16.0314C55.7744 16.0125 55.7744 15.9926 55.7693 15.9738C55.7606 15.9563 55.7477 15.9412 55.7319 15.9297L55.5551 15.8179Z",
                            fill: "#59F186"
                        }), (0, a.jsx)("path", {
                            d: "M63.5909 7.14595C63.1489 6.86363 62.7729 6.49 62.4883 6.05033C62.2038 5.61066 62.0173 5.11521 61.9416 4.59751L61.6695 2.81834C61.6631 2.77402 61.6415 2.7333 61.6083 2.70312C61.5932 2.68795 61.5751 2.67592 61.5553 2.66771C61.5355 2.6595 61.5142 2.65527 61.4927 2.65527C61.4712 2.65527 61.4499 2.6595 61.4301 2.66771C61.4103 2.67592 61.3922 2.68795 61.3771 2.70312C61.3449 2.73363 61.3245 2.77439 61.3193 2.81834L61.0438 4.59751C60.9653 5.11387 60.7788 5.60803 60.4963 6.04795C60.2124 6.48847 59.8366 6.86295 59.3945 7.14595L59.1565 7.29506C59.1322 7.31192 59.1133 7.33547 59.1021 7.36284C59.0882 7.38888 59.0811 7.41805 59.0817 7.44756C59.0816 7.47595 59.0886 7.50392 59.1021 7.5289C59.1133 7.55626 59.1322 7.57981 59.1565 7.59667L59.3945 7.74578C59.8359 8.02969 60.2114 8.40399 60.4963 8.84378C60.7788 9.28371 60.9653 9.77786 61.0438 10.2942L61.3193 12.0734C61.3252 12.1152 61.3456 12.1536 61.3771 12.1818C61.4095 12.2092 61.4503 12.2247 61.4927 12.2259C61.5354 12.2259 61.5765 12.2102 61.6083 12.1818C61.6421 12.155 61.664 12.1161 61.6695 12.0734L61.9416 10.2942C62.0173 9.77653 62.2038 9.28108 62.4883 8.84141C62.7729 8.40174 63.1489 8.0281 63.5909 7.74578L63.8289 7.59667C63.8534 7.57906 63.8732 7.55581 63.8867 7.5289C63.8935 7.5022 63.8935 7.47425 63.8867 7.44756C63.8938 7.41976 63.8938 7.39064 63.8867 7.36284C63.8732 7.33593 63.8534 7.31267 63.8289 7.29506L63.5909 7.14595Z",
                            fill: "#FFC518"
                        })]
                    }), (0, a.jsxs)("defs", {
                        children: [(0, a.jsxs)("linearGradient", {
                            id: "paint0_linear_2732_42516",
                            x1: "44.816",
                            y1: "54.749",
                            x2: "44.816",
                            y2: "-25.4118",
                            gradientUnits: "userSpaceOnUse",
                            children: [(0, a.jsx)("stop", {
                                "stop-color": "#FF78B8"
                            }), (0, a.jsx)("stop", {
                                offset: "0.99",
                                "stop-color": "#EA459E"
                            })]
                        }), (0, a.jsxs)("linearGradient", {
                            id: "paint1_linear_2732_42516",
                            x1: "38.8447",
                            y1: "73.9003",
                            x2: "38.8447",
                            y2: "33.176",
                            gradientUnits: "userSpaceOnUse",
                            children: [(0, a.jsx)("stop", {
                                offset: "0.01",
                                "stop-color": "#0A1BAC"
                            }), (0, a.jsx)("stop", {
                                offset: "0.31",
                                "stop-color": "#1D2DC0"
                            }), (0, a.jsx)("stop", {
                                offset: "0.68",
                                "stop-color": "#2D3DD2"
                            }), (0, a.jsx)("stop", {
                                offset: "0.95",
                                "stop-color": "#3343D8"
                            })]
                        }), (0, a.jsxs)("linearGradient", {
                            id: "paint2_linear_2732_42516",
                            x1: "34.4545",
                            y1: "7.83692",
                            x2: "34.6977",
                            y2: "31.0068",
                            gradientUnits: "userSpaceOnUse",
                            children: [(0, a.jsx)("stop", {
                                "stop-color": "#FFC518"
                            }), (0, a.jsx)("stop", {
                                offset: "1",
                                "stop-color": "#FF8B18"
                            })]
                        }), (0, a.jsxs)("linearGradient", {
                            id: "paint3_linear_2732_42516",
                            x1: "7.54241",
                            y1: "37.3538",
                            x2: "18.2698",
                            y2: "58.8588",
                            gradientUnits: "userSpaceOnUse",
                            children: [(0, a.jsx)("stop", {
                                offset: "0.05",
                                "stop-color": "#5765F1"
                            }), (0, a.jsx)("stop", {
                                offset: "0.65",
                                "stop-color": "#3645DA"
                            }), (0, a.jsx)("stop", {
                                offset: "0.69",
                                "stop-color": "#3343D8"
                            })]
                        }), (0, a.jsxs)("linearGradient", {
                            id: "paint4_linear_2732_42516",
                            x1: "33.0263",
                            y1: "32.5997",
                            x2: "54.2705",
                            y2: "49.568",
                            gradientUnits: "userSpaceOnUse",
                            children: [(0, a.jsx)("stop", {
                                offset: "0.05",
                                "stop-color": "#5765F1"
                            }), (0, a.jsx)("stop", {
                                offset: "0.47",
                                "stop-color": "#4857E7"
                            }), (0, a.jsx)("stop", {
                                offset: "0.91",
                                "stop-color": "#3343D8"
                            })]
                        }), (0, a.jsx)("clipPath", {
                            id: "clip0_2732_42516",
                            children: (0, a.jsx)("rect", {
                                width: "68.0115",
                                height: "61",
                                fill: "white",
                                transform: "translate(0 0.5)"
                            })
                        })]
                    })]
                })
            }
            s("884691")
        },
        615303: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return n
                }
            });
            var a = s("625990");

            function n() {
                let {
                    createGuildApplication: e,
                    submitting: t,
                    error: s
                } = (0, a.default)();
                return {
                    enableGuildMonetizationForTeam: (t, s, a) => e(t, s, a, "guildcr".concat(t.id)),
                    submitting: t,
                    error: s
                }
            }
        },
        124152: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useAdvancedModeExperiment: function() {
                    return l
                }
            });
            var a = s("862205");
            let n = (0, a.createExperiment)({
                kind: "guild",
                id: "2023-02_onboarding_advanced_mode",
                label: "Enables setting up onboarding with advanced mode",
                defaultConfig: {
                    advancedModeAllowed: !1
                },
                treatments: [{
                    id: 1,
                    label: "On",
                    config: {
                        advancedModeAllowed: !0
                    }
                }]
            });

            function l(e) {
                return n.useExperiment({
                    guildId: e,
                    location: "ed5d33_1"
                }, {
                    autoTrackExposure: !1
                })
            }
        },
        559821: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("884691"),
                n = s("228100"),
                l = s("717559"),
                i = s("38904"),
                r = s("988268"),
                o = s("397056");

            function d(e) {
                var t;
                let {
                    application: s,
                    loading: d
                } = (0, n.default)(e, r.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS), {
                    payoutsByPeriod: u,
                    loading: c
                } = (0, i.default)(null == s ? void 0 : s.id, {
                    groupType: o.PaymentPayoutGroupTypes.GUILD_PRODUCT,
                    teamId: null == s ? void 0 : null === (t = s.team) || void 0 === t ? void 0 : t.id
                }), {
                    currentPeriod: E,
                    previousPeriods: _,
                    metrics: T
                } = a.useMemo(() => {
                    let {
                        currentPeriod: e,
                        previousPeriods: t
                    } = (0, l.splitCurrentPeriod)(u), s = (0, l.calculateMetrics)(e, t[0]);
                    return {
                        currentPeriod: e,
                        previousPeriods: t,
                        metrics: s
                    }
                }, [u]);
                return {
                    loading: d || c,
                    payoutsByPeriod: u,
                    currentPeriod: E,
                    previousPeriods: _,
                    metrics: T,
                    application: s
                }
            }
        },
        533161: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("627445"),
                l = s.n(n),
                i = s("446674"),
                r = s("218567"),
                o = s("835706"),
                d = s("412939"),
                u = s("305961"),
                c = s("191814"),
                E = s("782340");

            function _(e) {
                let {
                    guildId: t
                } = e, s = (0, i.useStateFromStores)([u.default], () => u.default.getGuild(t));
                return l(null != s, "Guild not found"), (0, a.jsxs)(r.CreatorMonetizationSettingsDisabledContextProvider, {
                    guildId: t,
                    children: [(0, a.jsx)(o.default, {
                        children: E.default.Messages.GUILD_PRODUCTS_BASIC_INFO_SYNC_DISCLAIMER
                    }), (0, a.jsx)(c.default, {
                        size: 32
                    }), (0, a.jsx)(d.default, {
                        guild: s,
                        isGuildProducts: !0
                    })]
                })
            }
        },
        166364: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return A
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("281071"),
                l = s("77078"),
                i = s("763838"),
                r = s("465869"),
                o = s("191814"),
                d = s("151185"),
                u = s("911530"),
                c = s("442379"),
                E = s("757515"),
                _ = s("727411"),
                T = s("35018"),
                I = s("739726"),
                S = s("782340"),
                N = s("540583");
            let f = "guild-product-listings-header";

            function g(e) {
                let {
                    guildId: t,
                    handleCreateOrEditProduct: o
                } = e, d = (0, c.useGuildProductsForGuild)(t, {
                    publishedOnly: !1
                }), {
                    shouldRestrictUpdatingCreatorMonetizationSettings: _
                } = (0, r.useShouldRestrictUpdatingCreatorMonetizationSettings)(t), g = e => {
                    (0, u.updateGuildProductListing)(t, e, {
                        published: !1
                    })
                }, A = (e, n) => {
                    (0, l.openModalLazy)(async () => {
                        let {
                            default: l
                        } = await s.el("757949").then(s.bind(s, "757949"));
                        return s => (0, a.jsx)(l, {
                            guildId: t,
                            productId: e,
                            productName: n,
                            ...s
                        })
                    })
                }, L = (e, t) => {
                    (0, n.copy)((0, E.getGuildProductListingUrl)(e, t))
                }, m = d.length > 0;
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(l.FormTitle, {
                        className: N.productListingsHeader,
                        id: f,
                        children: m ? S.default.Messages.GUILD_PRODUCTS_YOUR_PRODUCTS_HEADER : S.default.Messages.GUILD_PRODUCTS_NO_PRODUCTS_HEADER
                    }), m ? (0, a.jsx)("ul", {
                        className: N.productListings,
                        "aria-labelledby": f,
                        children: d.map(e => (0, a.jsx)("li", {
                            children: (0, a.jsx)(I.default, {
                                guildId: t,
                                product: e,
                                onEditProduct: () => o(e.id),
                                onUnpublishProduct: () => g(e.id),
                                onDeleteProduct: () => A(e.id, e.name),
                                onCopyProductLink: () => L(t, e.id),
                                onTestDownload: () => T.default.open({
                                    guildId: t,
                                    productId: e.id
                                }),
                                onReportProduct: () => {},
                                disabled: _
                            })
                        }, e.id))
                    }) : (0, a.jsx)(i.default, {
                        guildId: t,
                        showCTA: !1,
                        responsive: !1
                    })]
                })
            }

            function A(e) {
                let {
                    guildId: t
                } = e, {
                    shouldRestrictUpdatingCreatorMonetizationSettings: s
                } = (0, r.useShouldRestrictUpdatingCreatorMonetizationSettings)(t), n = e => {
                    _.openModal(t, e)
                };
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)(l.Button, {
                        className: N.addButton,
                        innerClassName: N.addButtonInner,
                        onClick: () => n(null),
                        disabled: s,
                        children: [(0, a.jsx)(d.default, {
                            width: 20,
                            height: 20,
                            "aria-hidden": !0
                        }), (0, a.jsx)(o.default, {
                            size: 6,
                            horizontal: !0
                        }), S.default.Messages.GUILD_PRODUCTS_CREATE_PRODUCT_BUTTON]
                    }), (0, a.jsx)(o.default, {
                        size: 24
                    }), (0, a.jsx)(g, {
                        guildId: t,
                        handleCreateOrEditProduct: n
                    })]
                })
            }
        },
        691659: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return g
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("65597"),
                l = s("77078"),
                i = s("218567"),
                r = s("207353"),
                o = s("898411"),
                d = s("887229"),
                u = s("313584"),
                c = s("657960"),
                E = s("657650"),
                _ = s("900938"),
                T = s("442379"),
                I = s("559821"),
                S = s("762051"),
                N = s("782340");

            function f(e) {
                let {
                    listingId: t
                } = e, s = (0, T.useGuildProductListingById)(t);
                return null == s ? null : (0, a.jsx)(r.Cell, {
                    children: s.name
                })
            }

            function g(e) {
                var t, s, r;
                let {
                    guildId: T
                } = e, g = (0, I.default)(T), A = (0, i.useCreatorMonetizationSettingsDisabled)(), L = (0, n.default)([_.default], () => _.default.getGuild());
                return g.loading || null == L ? (0, a.jsx)(l.Spinner, {}) : null == g.application ? (0, a.jsx)(c.default, {
                    guild: L,
                    hideDisableSection: !0
                }) : (0, a.jsxs)(u.default, {
                    children: [(0, a.jsx)(d.default, {
                        revenue: g.metrics.revenue,
                        revenueTrend: g.metrics.revenuePctChange,
                        summaryMetricLabel: N.default.Messages.GUILD_PRODUCT_PURCHASES_TITLE,
                        summaryMetricValue: null !== (s = g.metrics.paymentsCount) && void 0 !== s ? s : "-",
                        summaryMetricTrend: null !== (r = g.metrics.paymentsCountChange) && void 0 !== r ? r : 0,
                        summaryMetricTrendIsPercent: !1,
                        children: (0, a.jsx)(S.default, {
                            guildId: T,
                            earningsData: g
                        })
                    }), (0, a.jsx)(l.FormSection, {
                        title: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_HEADER,
                        children: (0, a.jsx)(o.default, {
                            ListingIdLabel: f,
                            payoutsByPeriod: g.payoutsByPeriod,
                            team: null === (t = g.application) || void 0 === t ? void 0 : t.team
                        })
                    }), (0, a.jsx)(l.FormSection, {
                        title: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_TITLE,
                        disabled: A,
                        children: (0, a.jsx)(E.default, {
                            guildId: T,
                            application: g.application
                        })
                    })]
                })
            }
        },
        310266: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildProductsSettingsOverview: function() {
                    return O
                }
            }), s("222007"), s("794252");
            var a, n, l = s("37983"),
                i = s("884691"),
                r = s("506838"),
                o = s("65597"),
                d = s("77078"),
                u = s("741515"),
                c = s("218567"),
                E = s("97031"),
                _ = s("258984"),
                T = s("305961"),
                I = s("697218"),
                S = s("701909"),
                N = s("442379"),
                f = s("533161"),
                g = s("166364"),
                A = s("691659"),
                L = s("49111"),
                m = s("782340"),
                C = s("80920");

            function O(e) {
                let {
                    guildId: t,
                    hasValidApplication: s
                } = e, {
                    listingsLoaded: a
                } = (0, N.useFetchGuildProductListingsForGuild)(t), n = (0, o.default)([T.default], () => T.default.getGuild(t)), O = (0, o.default)([I.default], () => I.default.getCurrentUser()), h = null == n ? void 0 : n.isOwner(O), {
                    loading: R
                } = (0, u.useMonetizationSettings)(t), [D, M] = i.useState(s ? "manage_listings" : "payment");
                if (!a || R) return (0, l.jsx)(d.Spinner, {});
                if (null == n) return null;
                let G = (0, l.jsxs)(l.Fragment, {
                        children: [(0, l.jsx)(d.FormTitle, {
                            tag: d.FormTitleTags.H1,
                            children: m.default.Messages.GUILD_PRODUCTS_TITLE
                        }), (0, l.jsx)(d.FormText, {
                            type: d.FormText.Types.DESCRIPTION,
                            children: m.default.Messages.GUILD_PRODUCTS_SETTINGS_DESCRIPTION.format({
                                monetizationPolicyLink: S.default.getArticleURL(L.HelpdeskArticles.CREATOR_POLICY),
                                serverProductsSupportLink: S.default.getCreatorSupportArticleURL(L.HelpdeskArticles.SERVER_PRODUCTS)
                            })
                        })]
                    }),
                    x = (0, l.jsxs)(d.TabBar, {
                        type: "top",
                        look: "brand",
                        className: C.tabBar,
                        "aria-label": m.default.Messages.GUILD_PRODUCTS_TITLE,
                        selectedItem: D,
                        onItemSelect: M,
                        children: [(0, l.jsx)(E.default, {
                            id: "basic_info",
                            disabledTooltip: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                            disabled: !s,
                            children: m.default.Messages.GUILD_PRODUCTS_BASIC_INFO_SECTION
                        }), (0, l.jsx)(E.default, {
                            id: "manage_listings",
                            disabledTooltip: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                            disabled: !s,
                            children: m.default.Messages.GUILD_PRODUCTS_LISTINGS_SECTION
                        }), h ? (0, l.jsx)(d.TabBar.Item, {
                            id: "payment",
                            className: C.tabBarItem,
                            children: m.default.Messages.GUILD_PRODUCTS_PAYMENT_SECTION
                        }) : null]
                    }),
                    p = (0, r.match)(D).with("basic_info", () => (0, l.jsx)(f.default, {
                        guildId: t
                    })).with("manage_listings", () => (0, l.jsx)(g.default, {
                        guildId: t
                    })).with("payment", () => (0, l.jsx)(A.default, {
                        guildId: t
                    })).exhaustive(),
                    U = a ? (0, l.jsx)(d.TabBar.Panel, {
                        id: D,
                        children: p
                    }) : (0, l.jsx)(d.Spinner, {});
                return (0, l.jsxs)(c.CreatorMonetizationSettingsDisabledContextProvider, {
                    guildId: t,
                    children: [G, (0, l.jsx)(_.default, {
                        guild: n
                    }), x, U]
                })
            }(n = a || (a = {})).MANAGE_LISTINGS = "manage_listings", n.PAYMENT = "payment", n.BASIC_INFO = "basic_info"
        },
        883206: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("65597"),
                l = s("77078"),
                i = s("228100"),
                r = s("900938"),
                o = s("287883"),
                d = s("310266"),
                u = s("49111"),
                c = s("988268");

            function E() {
                let e = (0, n.default)([r.default], () => r.default.getGuild()),
                    t = (0, o.useGuildEligibleForGuildProducts)(null == e ? void 0 : e.id, "guild_product_settings"),
                    {
                        application: s,
                        loading: E
                    } = (0, i.default)(null == e ? void 0 : e.id, c.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS),
                    _ = null != s && (null == e ? void 0 : e.hasFeature(u.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED)) === !0;
                return (0, a.jsx)("main", {
                    children: null == e || !t || E ? (0, a.jsx)(l.Spinner, {}) : (0, a.jsx)(d.GuildProductsSettingsOverview, {
                        guildId: e.id,
                        hasValidApplication: _
                    })
                })
            }
        },
        762051: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            });
            var a, n, l = s("37983"),
                i = s("884691"),
                r = s("207353"),
                o = s("442379"),
                d = s("782340"),
                u = s("781564");
            (a = n || (n = {})).LISTING_NAME = "LISTING_NAME", a.PAYMENTS_COUNT = "PAYMENTS_COUNT", a.PRICE = "PRICE";
            let c = (0, r.createTableColumns)([(0, r.createListingNameColumn)({
                key: "LISTING_NAME",
                cellClassName: u.listingNameColumn,
                renderHeader: () => (0, l.jsx)(r.HeaderCell, {
                    children: d.default.Messages.GUILD_PRODUCT_EARNINGS_TABLE_LISTING_COLUMN_TITLE
                }),
                sort: (0, r.getDefaultSorter)(e => e.listing.name.toLowerCase())
            }), (0, r.createPersonCountColumn)({
                key: "PAYMENTS_COUNT",
                cellClassName: u.paymentsCountColumn,
                renderHeader: () => (0, l.jsx)(r.HeaderCell, {
                    children: d.default.Messages.GUILD_PRODUCT_EARNINGS_TABLE_PURCHASES_COLUMN_TITLE
                }),
                getCount: e => e.paymentsCount,
                sort: (0, r.getDefaultSorter)(e => {
                    var t;
                    return null !== (t = e.paymentsCount) && void 0 !== t ? t : 0
                })
            }), (0, r.createCurrencyAmountColumn)({
                key: "PRICE",
                cellClassName: u.priceColumn,
                renderHeader: () => (0, l.jsx)(r.HeaderCell, {
                    children: d.default.Messages.GUILD_PRODUCT_EARNINGS_TABLE_PRICE_COLUMN_TITLE
                }),
                getAmount(e) {
                    let {
                        listing: t
                    } = e;
                    return t.price_tier
                },
                sort: (0, r.getDefaultSorter)(e => {
                    var t;
                    return null !== (t = e.listing.price_tier) && void 0 !== t ? t : 0
                })
            })]);

            function E(e) {
                let {
                    earningsData: t,
                    guildId: s
                } = e, a = (0, o.useGuildProductsForGuild)(s, {
                    publishedOnly: !1
                }), n = t.currentPeriod, d = i.useMemo(() => a.map(e => {
                    var t;
                    let s = null == n ? void 0 : n.ppgs[e.id];
                    return {
                        ...null != s ? s : {},
                        key: e.id,
                        listing: e,
                        paymentsCount: null !== (t = null == s ? void 0 : s.payments_count) && void 0 !== t ? t : 0
                    }
                }).filter(e => e.listing.published || e.paymentsCount > 0), [a, null == n ? void 0 : n.ppgs]);
                return null == a || 0 === a.length ? null : (0, l.jsx)(r.default, {
                    columns: c,
                    data: d,
                    initialSortKey: "LISTING_NAME"
                })
            }
        },
        434014: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                formatMetricTrend: function() {
                    return l
                },
                formatNextPaymentDate: function() {
                    return i
                }
            });
            var a = s("866227"),
                n = s.n(a);

            function l(e, t) {
                let s = "",
                    a = e >= 0;
                return a && (s += "+"), t ? s += "".concat(Math.floor(100 * e), "%") : s += e, {
                    formattedValue: s,
                    isPositive: a
                }
            }

            function i(e, t) {
                return null != e ? n(e).format(t) : "-"
            }
        },
        488499: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("397056"),
                n = s("782340"),
                l = {
                    getStatusErrorText: function(e) {
                        switch (e) {
                            case a.PayoutStatuses.CANCELED:
                            case a.PayoutStatuses.DEFERRED:
                                return n.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED;
                            case a.PayoutStatuses.DEFERRED_INTERNAL:
                                return n.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_DEFERRED;
                            case a.PayoutStatuses.ERROR:
                                return n.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_ERROR;
                            case a.PayoutStatuses.REJECTED:
                                return n.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_REJECTED;
                            case a.PayoutStatuses.RISK_REVIEW:
                                return n.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_RISK_REVIEW
                        }
                    }
                }
        },
        757715: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useRoleSubscriptionSettingsDisabled: function() {
                    return a.useCreatorMonetizationSettingsDisabled
                },
                RoleSubscriptionSettingsDisabledContextProvider: function() {
                    return a.CreatorMonetizationSettingsDisabledContextProvider
                }
            });
            var a = s("218567")
        },
        880993: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("316693"),
                n = s("991170"),
                l = s("49111");

            function i(e, t) {
                let s = {
                    [t.id]: t
                };
                return e.filter(e => {
                    let t = n.default.computePermissionsForRoles({
                            forceRoles: s,
                            context: e
                        }),
                        i = l.Permissions.VIEW_CHANNEL;
                    return e.isGuildVocal() && (i = a.default.add(i, l.Permissions.CONNECT)), a.default.has(t, i) && !n.default.canEveryoneRole(i, e)
                })
            }
        },
        406876: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useEditStateContext: function() {
                    return i
                },
                EditStateContextProvider: function() {
                    return r
                }
            }), s("70102");
            var a = s("37983"),
                n = s("884691");
            let l = n.createContext(void 0);

            function i() {
                let e = n.useContext(l);
                if (null == e) throw Error("No edit state; are you missing an <EditStateContextProvider />?");
                return e
            }

            function r(e) {
                let {
                    children: t,
                    ...s
                } = e;
                return (0, a.jsx)(l.Provider, {
                    value: s,
                    children: t
                })
            }
        },
        490683: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("627445"),
                n = s.n(a),
                l = s("545158"),
                i = s("592407"),
                r = s("65722"),
                o = s("49111"),
                d = s("782340");

            function u(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    s = (0, r.useGuildRoleSubscriptionSettingsVisibility)(e);
                switch (s) {
                    case r.GuildRoleSubscriptionSettingsVisibility.NEEDS_COMMUNITY:
                        return {
                            visibility: s, noticeText: t ? d.default.Messages.GUILD_ROLE_SUBSCRIPTION_COMMUNITY_REQUIREMENT_NOTICE_WITH_GUILD_PRODUCT_EXP : d.default.Messages.GUILD_ROLE_SUBSCRIPTION_COMMUNITY_REQUIREMENT_NOTICE, ctaLabel: d.default.Messages.GUILD_ROLE_SUBSCRIPTION_COMMUNITY_REQUIREMENT_CTA_LABEL, ctaClickable: null != e, onCtaClicked() {
                                var t;
                                n(null != e, "Guild must be not null open COMMUNITY settings"), i.default.open(null !== (t = null == e ? void 0 : e.id) && void 0 !== t ? t : "", o.GuildSettingsSections.COMMUNITY)
                            }
                        };
                    case r.GuildRoleSubscriptionSettingsVisibility.WAITLIST_ONLY:
                        return {
                            visibility: s, noticeText: d.default.Messages.GUILD_ROLE_SUBSCRIPTION_WAITLIST_NOTICE, ctaLabel: d.default.Messages.GUILD_ROLE_SUBSCRIPTION_WAITLIST_CTA_LABEL, ctaClickable: !0, onCtaClicked() {
                                (0, l.default)("https://dis.gd/creators-waitlist")
                            }
                        };
                    default:
                        return
                }
            }
        },
        238498: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return n
                }
            });
            var a = s("782340");

            function n(e) {
                return e > 0 && e % 7 == 0 ? a.default.Messages.DURATION_WEEKS.format({
                    weeks: e / 7
                }) : a.default.Messages.DURATION_DAYS.format({
                    days: e
                })
            }
        },
        195367: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return n
                }
            }), s("222007"), s("881410");
            var a = s("971150");

            function n(e) {
                let t = (0, a.useEditStateStore)(t => t.editStateIdsForGroup[e]),
                    s = (0, a.useEditStateStore)(e => e.listings);
                if (null == t) return !1;
                let n = Object.keys(s),
                    l = t.every(e => n.includes(e)),
                    i = Object.entries(s).filter(e => {
                        let [s] = e;
                        return null == t ? void 0 : t.includes(s)
                    }),
                    r = i.flatMap(e => null == e[1] || Object.values(e[1]).every(e => null == e || "" === e));
                return !l || r.includes(!0)
            }
        },
        619389: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("884691"),
                n = s("717559"),
                l = s("38904"),
                i = s("257869"),
                r = s("452111"),
                o = s("397056");

            function d(e, t) {
                let s = null == t ? void 0 : t.team,
                    {
                        payoutsByPeriod: d,
                        loading: u
                    } = (0, l.default)(null == t ? void 0 : t.id, {
                        groupType: o.PaymentPayoutGroupTypes.SERVER_ROLE_SUBSCRIPTION,
                        teamId: null == s ? void 0 : s.id
                    }),
                    c = (0, i.useGroupListingsFetchContext)("useEarningMetrics"),
                    E = (0, r.default)(e),
                    {
                        currentPeriod: _,
                        previousPeriods: T,
                        metrics: I
                    } = a.useMemo(() => {
                        let {
                            currentPeriod: e,
                            previousPeriods: t
                        } = (0, n.splitCurrentPeriod)(d), s = (0, n.calculateMetrics)(e, t[0]), a = {
                            ...s,
                            subscribers: E,
                            subscriberChange: s.paymentsCountChange
                        };
                        return {
                            currentPeriod: e,
                            previousPeriods: t,
                            metrics: a
                        }
                    }, [d, E]);
                return {
                    loading: u || !c,
                    team: s,
                    currentPeriod: _,
                    previousPeriods: T,
                    allPeriods: d,
                    metrics: I
                }
            }
        },
        458961: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            }), s("222007");
            var a = s("884691"),
                n = s("719726");

            function l(e) {
                let [t, s] = a.useState(!0), [l, i] = a.useState(), [r, o] = a.useState(), d = a.useCallback(async e => {
                    s(!0), i(void 0);
                    try {
                        let t = await n.fetchHighlightedCreatorGuildDetails(e);
                        o(t)
                    } catch (e) {
                        i(e)
                    } finally {
                        s(!1)
                    }
                }, []);
                return a.useEffect(() => {
                    d(e)
                }, [e, d]), {
                    isLoading: t,
                    error: l,
                    highlightedCreatorDetails: r
                }
            }
        },
        608775: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("884691"),
                n = s("446674"),
                l = s("150021"),
                i = s("84339"),
                r = s("816880"),
                o = s("153043");
            let d = [];

            function u(e) {
                let {
                    revision: t,
                    emojis: s
                } = (0, n.useStateFromStoresObject)([r.default], () => ({
                    revision: r.default.getEmojiRevision(e),
                    emojis: r.default.getEmojis(e)
                })), u = (0, i.default)(t);
                return a.useEffect(() => {
                    (0, l.fetchEmoji)(e)
                }, [e]), a.useEffect(() => {
                    null != u && u < t && (0, l.fetchEmoji)(e)
                }, [t, u, e]), a.useMemo(() => null == s ? d : s.filter(t => (0, o.isRoleSubscriptionEmoji)(t, e)), [s, e])
            }
        },
        111462: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            }), s("222007");
            var a = s("884691"),
                n = s("315102"),
                l = s("458961"),
                i = s("49111");

            function r(e, t, s) {
                var r, o;
                let {
                    isLoading: d,
                    error: u,
                    highlightedCreatorDetails: c
                } = (0, l.default)(e), E = null == c ? void 0 : c.store_page, _ = a.useMemo(() => {
                    var e, t;
                    let s = function(e) {
                            let t = new Set;
                            return null == e || e.forEach(e => {
                                var s;
                                null === (s = e.subscription_listings) || void 0 === s || s.forEach(e => {
                                    t.add(e.role_id)
                                })
                            }), t
                        }(null == E ? void 0 : null === (e = E.role_subscription) || void 0 === e ? void 0 : e.group_listings),
                        a = null == E ? void 0 : null === (t = E.role_subscription) || void 0 === t ? void 0 : t.benefit_emojis;
                    return null == a ? void 0 : a.filter(e => e.roles.some(e => s.has(e)))
                }, [null == E ? void 0 : E.role_subscription]), T = null == E ? void 0 : E.guild.icon_hash, I = n.default.getGuildIconURL({
                    id: e,
                    icon: T,
                    size: s
                }), S = a.useMemo(() => null != _ && _.length > t ? _.slice(0, t) : _, [_, t]), N = null != _ && _.length > t ? _.length - t : null, f = null == c ? void 0 : c.slug, g = null != f ? i.MarketingURLs.ROLE_SUBSCRIPTION_STORE_PAGE(f) : void 0, A = null == E ? void 0 : null === (r = E.guild) || void 0 === r ? void 0 : r.name, L = null == E ? void 0 : null === (o = E.role_subscription) || void 0 === o ? void 0 : o.subscriber_count, m = !d && null != A && null != T && null != I;
                return m ? {
                    hasAllImperativeDetails: m,
                    isLoading: d,
                    details: {
                        guildName: A,
                        guildIcon: T,
                        guildAvatarUrl: I,
                        storePageUrl: g,
                        subscriberCount: L,
                        emojisToShow: S,
                        notShownEmojiCount: N
                    }
                } : {
                    hasAllImperativeDetails: m,
                    isLoading: d,
                    error: u
                }
            }
        },
        620199: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            }), s("222007");
            var a = s("884691"),
                n = s("782340");

            function l(e) {
                let [t, s] = a.useState(n.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMAGE_CTA_DEFAULT_FILENAME), l = null == e ? n.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_UPLOAD : n.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_EDIT, i = null == e ? n.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_UPLOAD : n.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_EDIT_A11Y.format({
                    filename: t
                });
                return {
                    imageCTA: l,
                    imageAriaLabel: i,
                    setFilename: s
                }
            }
        },
        165169: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("884691"),
                n = s("837008"),
                l = s("795228");

            function i(e, t) {
                let s = (0, n.useSubscriptionListingsForGuild)(e),
                    i = (0, l.default)(e);
                return a.useMemo(() => s.map(e => {
                    var s;
                    let a = null == e ? void 0 : e.role_id;
                    return {
                        ...null !== (s = null == t ? void 0 : t.ppgs[e.id]) && void 0 !== s ? s : {},
                        key: e.id,
                        subscriptionListing: e,
                        roleMemberCount: null == a ? void 0 : null == i ? void 0 : i[a]
                    }
                }), [s, null == t ? void 0 : t.ppgs, i])
            }
        },
        7370: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("884691"),
                n = s("316693"),
                l = s("446674"),
                i = s("305961"),
                r = s("677795"),
                o = s("49111");
            let d = o.Permissions.VIEW_CHANNEL;

            function u(e) {
                let t = (0, l.useStateFromStores)([i.default], () => i.default.getGuild(e), [e]),
                    s = null == t ? void 0 : t.roles[t.id],
                    o = a.useMemo(() => {
                        if (null == s) return r.GuildRoleSubscriptionFormat.SOME_CHANNELS;
                        let e = n.default.has(s.permissions, d);
                        return e ? r.GuildRoleSubscriptionFormat.SOME_CHANNELS : r.GuildRoleSubscriptionFormat.ALL_CHANNELS
                    }, [s]),
                    u = o === r.GuildRoleSubscriptionFormat.ALL_CHANNELS;
                return {
                    format: o,
                    isFullServerGating: u
                }
            }
        },
        44737: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useRoleSubscriptionInsightsAccess: function() {
                    return o
                }
            });
            var a = s("316693"),
                n = s("446674"),
                l = s("305961"),
                i = s("957255"),
                r = s("49111");

            function o(e) {
                let t = (0, n.useStateFromStores)([l.default, i.default], () => {
                    let t = l.default.getGuild(e);
                    if (null == t) return !1;
                    let s = i.default.getGuildPermissions(t);
                    return null != s && a.default.has(s, r.Permissions.VIEW_CREATOR_MONETIZATION_ANALYTICS)
                });
                return t
            }
        },
        452111: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            }), s("222007");
            var a = s("884691"),
                n = s("837008"),
                l = s("795228");

            function i(e) {
                let t = (0, n.useSubscriptionListingsForGuild)(e),
                    s = (0, l.default)(e);
                return a.useMemo(() => {
                    let e = 0;
                    for (let a of t) {
                        let t = null == a ? void 0 : a.role_id;
                        if (null != t) {
                            let a = null == s ? void 0 : s[t];
                            null != a && (e += a)
                        }
                    }
                    return e
                }, [t, s])
            }
        },
        979778: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("884691"),
                n = s("782340");

            function l() {
                return a.useMemo(() => [{
                    value: null,
                    label: n.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_NONE_OPTION
                }, {
                    value: 10,
                    label: "10"
                }, {
                    value: 25,
                    label: "25"
                }, {
                    value: 50,
                    label: "50"
                }, {
                    value: 100,
                    label: "100"
                }], [])
            }
        },
        561205: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("476765"),
                d = s("461380"),
                u = s("306073"),
                c = s("782340"),
                E = s("929921");

            function _(e) {
                let {
                    intiallyExpanded: t = !1,
                    title: s,
                    description: l,
                    children: _
                } = e, [T, I] = n.useState(t), S = () => I(e => !e), N = (0, o.useUID)();
                return (0, a.jsxs)("div", {
                    className: E.container,
                    children: [(0, a.jsx)(u.default, {
                        className: i(E.header, {
                            [E.headerWithDescription]: T && null != l
                        }),
                        onClick: S,
                        children: e => {
                            let {
                                areaRef: t,
                                handleStopPropagation: n
                            } = e;
                            return (0, a.jsxs)(a.Fragment, {
                                children: [(0, a.jsx)(r.Heading, {
                                    variant: "heading-md/semibold",
                                    children: s
                                }), (0, a.jsx)(r.Clickable, {
                                    onClick: n(S),
                                    "aria-label": c.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TOGGLE_SECTION_LABEL,
                                    "aria-controls": N,
                                    "aria-expanded": T,
                                    focusProps: {
                                        ringTarget: t
                                    },
                                    children: (0, a.jsx)(d.default, {
                                        className: E.caret,
                                        direction: T ? d.default.Directions.UP : d.default.Directions.DOWN
                                    })
                                })]
                            })
                        }
                    }), T && (0, a.jsxs)("div", {
                        id: N,
                        children: [null != l && (0, a.jsx)(r.FormText, {
                            type: r.FormText.Types.DESCRIPTION,
                            className: E.description,
                            children: l
                        }), (0, a.jsx)("div", {
                            className: E.divider
                        }), (0, a.jsx)("div", {
                            className: E.content,
                            children: _
                        })]
                    })]
                })
            }
        },
        395905: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("381546"),
                l = s("223984");

            function i(e) {
                return (0, a.jsx)(l.default, {
                    color: l.MessageBlockColors.RED,
                    icon: n.default,
                    ...e
                })
            }
        },
        258984: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("756717"),
                l = s("395905"),
                i = s("264742"),
                r = s("49111"),
                o = s("782340"),
                d = s("99658");

            function u(e) {
                let t, {
                        guild: s
                    } = e,
                    {
                        resubmittingEnableRequest: u,
                        resubmissionError: c,
                        createEnableRequest: E,
                        resubmittedRequest: _,
                        requestRejectedNoticeText: T,
                        reapplyNoticeText: I
                    } = (0, n.default)(s),
                    S = s.hasFeature(r.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED),
                    N = s.hasFeature(r.GuildFeatures.CREATOR_MONETIZABLE_PENDING_NEW_OWNER_ONBOARDING);
                if (null != c) return (0, a.jsx)(l.default, {
                    className: d.noticeContainer,
                    children: c.getAnyErrorMessage()
                });
                let f = null;
                return null != T ? f = T : _ ? f = o.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_PENDING : null != I ? (f = I, t = o.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SUBMIT_APPEAL_CTA) : N ? f = o.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_READ_ONLY_FOR_PENDING_NEW_OWNER_PENDING_NOTICE : S && (f = o.default.Messages.CREATOR_MONETIZATION_SETTINGS_RESTRICTED_NOTICE), null != f ? (0, a.jsx)(i.default, {
                    className: d.noticeContainer,
                    notice: f,
                    ctaLabel: t,
                    ctaLoading: u,
                    onClick: E
                }) : null
            }
        },
        120856: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("862337"),
                o = s("77078"),
                d = s("461380"),
                u = s("926633"),
                c = s("782340"),
                E = s("809102"),
                _ = function(e) {
                    let {
                        items: t,
                        carouselClassName: s,
                        paginationCaretClassName: l,
                        intervalBetweenAutomaticItemRotations: _,
                        renderItem: T
                    } = e, I = n.useMemo(() => new r.Interval, []), [S, N] = n.useState(u.SlideDirection.LEFT), [f, g] = n.useState(0), [A, L] = n.useState(!1), [m, C] = n.useState(!1), O = n.useCallback((e, t) => {
                        g(s => {
                            let a = s + t;
                            return a < 0 ? a = e.length - 1 : a > e.length - 1 && (a = 0), a
                        })
                    }, [g]), h = n.useCallback(() => {
                        !m && O(t, 1)
                    }, [O, t, m]), R = n.useCallback(() => {
                        !m && O(t, -1)
                    }, [O, t, m]);
                    return n.useEffect(() => {
                        null != _ && (A ? A && I.stop() : I.start(_, h))
                    }, [A, I, _, h]), (0, a.jsxs)("div", {
                        className: E.root,
                        onMouseEnter: () => L(!0),
                        onMouseLeave: () => L(!1),
                        children: [(0, a.jsx)(o.Clickable, {
                            className: i(E.carouselCaret, l),
                            onClick: R,
                            onMouseEnter: () => N(u.SlideDirection.RIGHT),
                            ignoreKeyPress: m,
                            children: (0, a.jsx)(d.default, {
                                direction: d.default.Directions.LEFT,
                                height: 48,
                                width: 48,
                                "aria-label": c.default.Messages.GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_PREVIOUS_CARD_ARIA_LABEL
                            })
                        }), (0, a.jsx)(u.default, {
                            step: f,
                            direction: S,
                            onAnimationStart: () => C(!0),
                            onAnimationEnd: () => C(!1),
                            className: i(E.carousel, s),
                            children: T(t[f])
                        }), (0, a.jsx)(o.Clickable, {
                            className: i(E.carouselCaret, l),
                            onClick: h,
                            onMouseEnter: () => N(u.SlideDirection.LEFT),
                            ignoreKeyPress: m,
                            children: (0, a.jsx)(d.default, {
                                direction: d.default.Directions.RIGHT,
                                height: 48,
                                width: 48,
                                "aria-label": c.default.Messages.GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_NEXT_CARD_ARIA_LABEL
                            })
                        })]
                    })
                }
        },
        926633: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                SlideDirection: function() {
                    return n
                },
                default: function() {
                    return T
                }
            });
            var a, n, l = s("37983"),
                i = s("884691"),
                r = s("414456"),
                o = s.n(r),
                d = s("458960"),
                u = s("266491"),
                c = s("187615");
            (a = n || (n = {}))[a.RIGHT = -1] = "RIGHT", a[a.LEFT = 1] = "LEFT";
            let E = {
                friction: 10,
                tension: 40,
                overshootClamping: !0
            };
            class _ extends i.PureComponent {
                componentWillEnter(e) {
                    var t, s;
                    null === (t = (s = this.props).onAnimationStart) || void 0 === t || t.call(s), this._animated.setValue(-this.props.direction), d.default.spring(this._animated, {
                        toValue: 0,
                        ...E
                    }).start(() => {
                        var t, s;
                        e(), null === (t = (s = this.props).onAnimationEnd) || void 0 === t || t.call(s)
                    })
                }
                componentDidAppear() {
                    this._animated.setValue(0)
                }
                componentWillLeave(e) {
                    d.default.spring(this._animated, {
                        toValue: this.props.direction,
                        ...E
                    }).start(e)
                }
                getStyle() {
                    return d.default.accelerate({
                        transform: [{
                            translateX: this._animated.interpolate({
                                inputRange: [0, 1],
                                outputRange: ["0%", "-100%"]
                            })
                        }]
                    })
                }
                render() {
                    return (0, l.jsx)(d.default.div, {
                        style: this.getStyle(),
                        className: c.item,
                        children: this.props.children
                    })
                }
                constructor(e) {
                    super(e), this._animated = new d.default.Value(-1 * e.direction)
                }
            }
            var T = e => {
                let {
                    children: t,
                    step: s,
                    direction: a,
                    className: n,
                    onAnimationStart: i,
                    onAnimationEnd: r
                } = e;
                return (0, l.jsx)(u.default, {
                    component: "div",
                    className: o(c.animator, n),
                    children: (0, l.jsx)(_, {
                        direction: a,
                        onAnimationStart: i,
                        onAnimationEnd: r,
                        children: t
                    }, s)
                })
            }
        },
        752520: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("139375"),
                n = s("679653"),
                l = s("42203"),
                i = s("27618"),
                r = s("697218"),
                o = s("677795"),
                d = s("49111"),
                u = s("782340");

            function c(e) {
                switch (e.ref_type) {
                    case o.GuildRoleSubscriptionBenefitTypes.CHANNEL: {
                        let t = l.default.getChannel(e.ref_id);
                        return null != t ? function(e) {
                            let t = (0, n.computeChannelName)(e, r.default, i.default);
                            switch (e.type) {
                                case d.ChannelTypes.GUILD_VOICE:
                                    return u.default.Messages.GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL.format({
                                        channelName: t
                                    });
                                case d.ChannelTypes.GUILD_STAGE_VOICE:
                                    return u.default.Messages.GUILD_SIDEBAR_STAGE_CHANNEL_A11Y_LABEL.format({
                                        channelName: t
                                    });
                                default:
                                    return (0, a.default)({
                                        channel: e
                                    })
                            }
                        }(t) : ""
                    }
                    case o.GuildRoleSubscriptionBenefitTypes.INTANGIBLE:
                        var t;
                        return null !== (t = e.name) && void 0 !== t ? t : ""
                }
            }
        },
        973956: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return O
                }
            }), s("424973"), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("679653"),
                u = s("419830"),
                c = s("233069"),
                E = s("245997"),
                _ = s("27618"),
                T = s("697218"),
                I = s("151185"),
                S = s("432153"),
                N = s("782340"),
                f = s("490984");

            function g(e) {
                return String(e)
            }

            function A(e) {
                let {
                    icon: t,
                    title: s,
                    subtitle: n,
                    className: l
                } = e;
                return (0, a.jsxs)("div", {
                    className: i(f.label, l),
                    children: [t, (0, a.jsxs)("div", {
                        className: f.labelText,
                        children: [(0, a.jsx)(o.Text, {
                            variant: "text-md/normal",
                            color: "none",
                            className: f.labelTitle,
                            children: s
                        }), null != n && "" !== n ? (0, a.jsx)(o.Text, {
                            variant: "text-xs/semibold",
                            color: "text-muted",
                            className: f.labelSubtitle,
                            children: n
                        }) : null]
                    })]
                })
            }

            function L() {
                return (0, a.jsx)(A, {
                    icon: (0, a.jsx)(I.default, {
                        className: f.labelIcon
                    }),
                    title: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_SELECT_CREATE_LABEL,
                    className: f.createLabel
                })
            }

            function m(e) {
                var t;
                let {
                    channelId: s
                } = e, n = (0, S.useChannelWithTemplateFallback)(s), l = (0, S.useChannelWithTemplateFallback)(null !== (t = null == n ? void 0 : n.parent_id) && void 0 !== t ? t : "");
                if (null == n) return null;
                let i = (0, u.getChannelIconComponent)(n),
                    r = (0, d.computeChannelName)(n, T.default, _.default),
                    o = null != l ? (0, d.computeChannelName)(l, T.default, _.default) : void 0;
                return (0, a.jsx)(A, {
                    icon: null != i && (0, a.jsx)(i, {
                        className: f.labelIcon
                    }),
                    title: r,
                    subtitle: o
                })
            }

            function C(e) {
                let {
                    value: t
                } = e;
                return null != t ? (0, a.jsx)(m, {
                    channelId: t
                }) : (0, a.jsx)(L, {})
            }

            function O(e) {
                let {
                    guildId: t,
                    value: l,
                    initialChannelId: i,
                    omitChannelIds: u,
                    "aria-labelledby": I,
                    onChange: f
                } = e, A = N.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_SELECT_CREATE_LABEL, L = (0, r.useStateFromStores)([E.default], () => E.default.getCategories(t), [t]), m = (0, S.useChannelWithTemplateFallback)(null != l ? l : ""), O = n.useMemo(() => {
                    let e = [{
                            value: null,
                            label: A
                        }],
                        t = !1;
                    for (let s of L._categories)
                        for (let {
                                channel: a
                            }
                            of L[s.channel.id]) {
                            if (!!(0, c.isGuildSelectableChannelType)(a.type) || !!(0, c.isGuildVocalChannelType)(a.type))(!(a.id !== l && (null == u ? void 0 : u.has(a.id))) || a.id === i && l !== i) && (l === a.id && (t = !0), e.push({
                                value: a.id,
                                label: (0, d.computeChannelName)(a, T.default, _.default)
                            }))
                        }
                    return null != l && !t && null != m && e.push({
                        value: l,
                        label: m.name
                    }), e
                }, [A, l, m, L, u, i]);
                return (0, a.jsx)(o.Select, {
                    placeholder: N.default.Messages.CHANNEL_SELECT,
                    options: O,
                    select: function(e) {
                        null == e ? (0, o.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("341072").then(s.bind(s, "341072"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                guildId: t,
                                onSubmit: f
                            })
                        }) : f(e)
                    },
                    isSelected: e => null != l && g(e) === g(l),
                    serialize: g,
                    renderOptionLabel: C,
                    renderOptionValue: e => {
                        let [t] = e;
                        return C(t)
                    },
                    "aria-labelledby": I
                })
            }
        },
        989210: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                EditChannelBenefitModal: function() {
                    return R
                },
                EditIntangibleBenefitModal: function() {
                    return D
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("627445"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("430568"),
                u = s("86678"),
                c = s("385976"),
                E = s("867805"),
                _ = s("923959"),
                T = s("882641"),
                I = s("145131"),
                S = s("555158"),
                N = s("191814"),
                f = s("476765"),
                g = s("228220"),
                A = s("973956"),
                L = s("958706"),
                m = s("782340"),
                C = s("777750");

            function O(e) {
                let {
                    guildId: t,
                    emojiData: s,
                    "aria-labelledby": l,
                    onSelectEmoji: i
                } = e, I = (0, r.useStateFromStores)([c.default], () => null != s.id ? c.default.getCustomEmojiById(s.id) : void 0), S = (0, r.useStateFromStores)([_.default], () => _.default.getDefaultChannel(t)), N = n.useCallback(e => {
                    let {
                        closePopout: t
                    } = e;
                    return (0, a.jsx)(u.default, {
                        pickerIntention: L.EmojiIntention.GUILD_ROLE_BENEFIT_EMOJI,
                        channel: S,
                        closePopout: t,
                        onNavigateAway: t,
                        onSelectEmoji: (e, s) => {
                            null != e && i(null != e.id ? {
                                id: e.id,
                                name: void 0
                            } : {
                                id: void 0,
                                name: e.optionallyDiverseSequence
                            }), s && t()
                        }
                    })
                }, [i, S]), f = n.useMemo(() => null == I && null == s.name ? null : function() {
                    return (0, a.jsx)(d.default, {
                        className: C.emoji,
                        emojiId: s.id,
                        emojiName: s.name,
                        animated: null == I ? void 0 : I.animated
                    })
                }, [s, I]), g = "";
                return null != I ? g = ":".concat(I.name, ":") : null != s.name && (g = E.default.convertSurrogateToName(s.name)), (0, a.jsx)(o.Popout, {
                    animation: o.Popout.Animation.NONE,
                    position: "top",
                    renderPopout: N,
                    children: (e, t) => {
                        let {
                            isShown: s
                        } = t;
                        return (0, a.jsxs)("div", {
                            className: C.emojiInputContainer,
                            ...e,
                            children: [(0, a.jsx)(T.default, {
                                className: C.emojiButton,
                                active: s,
                                tabIndex: 0,
                                renderButtonContents: f
                            }), (0, a.jsx)(o.TextInput, {
                                inputClassName: C.emojiText,
                                placeholder: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_EMOJI_PLACEHOLDER,
                                value: g,
                                "aria-labelledby": l,
                                readOnly: !0
                            })]
                        })
                    }
                })
            }

            function h(e) {
                var t;
                let {
                    guildId: s,
                    initialData: l,
                    benefitTypeInput: i,
                    descriptionPlaceholder: r,
                    canSubmit: d,
                    onSave: u,
                    onDelete: c,
                    transitionState: E,
                    onClose: _
                } = e, T = (0, f.useUID)(), S = (0, f.useUID)(), A = (0, f.useUID)(), [L, h] = n.useState(null !== (t = null == l ? void 0 : l.description) && void 0 !== t ? t : ""), [R, D] = n.useState(() => ({
                    id: null == l ? void 0 : l.emoji_id,
                    name: null == l ? void 0 : l.emoji_name
                })), M = d && "" !== L && (null != R.id || null != R.name);
                return (0, a.jsx)("form", {
                    onSubmit: function(e) {
                        e.preventDefault(), M && (u({
                            description: L,
                            emojiId: R.id,
                            emojiName: R.name
                        }), _())
                    },
                    children: (0, a.jsxs)(o.ModalRoot, {
                        transitionState: E,
                        "aria-labelledby": T,
                        children: [(0, a.jsxs)(o.ModalHeader, {
                            children: [(0, a.jsx)(o.Heading, {
                                id: T,
                                variant: "heading-md/semibold",
                                children: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_MODAL_TITLE
                            }), (0, a.jsx)(o.ModalCloseButton, {
                                className: C.closeButton,
                                onClick: _
                            })]
                        }), (0, a.jsxs)(o.ModalContent, {
                            className: C.modalContent,
                            children: [i, (0, a.jsx)(N.default, {
                                size: 24
                            }), (0, a.jsx)(o.FormSection, {
                                title: m.default.Messages.DESCRIPTION,
                                titleId: S,
                                children: (0, a.jsx)(o.TextArea, {
                                    placeholder: r,
                                    value: L,
                                    rows: 1,
                                    autosize: !0,
                                    onChange: h,
                                    "aria-labelledby": S
                                })
                            }), (0, a.jsx)(N.default, {
                                size: 24
                            }), (0, a.jsx)(o.FormSection, {
                                title: m.default.Messages.EMOJI,
                                titleId: A,
                                children: (0, a.jsx)(O, {
                                    guildId: s,
                                    emojiData: R,
                                    onSelectEmoji: D,
                                    "aria-labelledby": A
                                })
                            })]
                        }), (0, a.jsxs)(o.ModalFooter, {
                            justify: I.default.Justify.BETWEEN,
                            children: [(0, a.jsxs)("div", {
                                className: C.primaryButtons,
                                children: [(0, a.jsx)(o.Button, {
                                    type: "submit",
                                    disabled: !M,
                                    children: null == l ? m.default.Messages.ADD : m.default.Messages.SAVE
                                }), null != c && (0, a.jsx)(o.Button, {
                                    look: o.Button.Looks.BLANK,
                                    size: o.Button.Sizes.ICON,
                                    className: C.deleteButton,
                                    onClick: () => {
                                        c(), _()
                                    },
                                    children: (0, a.jsx)(g.default, {
                                        "aria-label": m.default.Messages.DELETE
                                    })
                                })]
                            }), (0, a.jsx)(o.Button, {
                                look: o.Button.Looks.LINK,
                                color: o.Button.Colors.PRIMARY,
                                className: C.cancelButton,
                                onClick: _,
                                children: m.default.Messages.CANCEL
                            })]
                        })]
                    })
                })
            }

            function R(e) {
                let {
                    guildId: t,
                    omitChannelIds: s,
                    initialData: l,
                    onSave: r,
                    onDelete: d,
                    transitionState: u,
                    onClose: c
                } = e, [E, _] = n.useState(null == l ? void 0 : l.ref_id), T = (0, f.useUID)(), I = (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(S.default, {
                        messageType: S.HelpMessageTypes.WARNING,
                        children: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_MODAL_WARNING
                    }), (0, a.jsx)(N.default, {
                        size: 24
                    }), (0, a.jsx)(o.FormSection, {
                        title: m.default.Messages.CHANNEL,
                        titleId: T,
                        children: (0, a.jsx)(A.default, {
                            guildId: t,
                            value: E,
                            initialChannelId: null == l ? void 0 : l.ref_id,
                            omitChannelIds: s,
                            onChange: function(e) {
                                _(e)
                            },
                            "aria-labelledby": T
                        })
                    })]
                });
                return (0, a.jsx)(h, {
                    guildId: t,
                    initialData: l,
                    benefitTypeInput: I,
                    descriptionPlaceholder: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_DESCRIPTION_PLACEHOLDER,
                    canSubmit: null != E,
                    onSave: function(e) {
                        i(null != E, "Cannot submit null channel"), r({
                            ...e,
                            channelId: E
                        })
                    },
                    transitionState: u,
                    onClose: c,
                    onDelete: d
                })
            }

            function D(e) {
                var t;
                let {
                    initialData: s,
                    onSave: l,
                    transitionState: r,
                    onClose: d,
                    onDelete: u,
                    guildId: c
                } = e, [E, _] = n.useState(null !== (t = null == s ? void 0 : s.name) && void 0 !== t ? t : ""), T = (0, f.useUID)(), I = (0, a.jsx)(o.FormSection, {
                    title: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_NAME_TITLE,
                    titleId: T,
                    children: (0, a.jsx)(o.TextArea, {
                        placeholder: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_NAME_TITLE,
                        value: E,
                        rows: 1,
                        onChange: function(e) {
                            _(e)
                        },
                        "aria-labelledby": T
                    })
                });
                return (0, a.jsx)(h, {
                    guildId: c,
                    initialData: s,
                    benefitTypeInput: I,
                    descriptionPlaceholder: m.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_DESCRIPTION_PLACEHOLDER,
                    canSubmit: "" !== E,
                    onSave: function(e) {
                        i("" !== E, "Cannot submit empty name"), l({
                            ...e,
                            name: E
                        })
                    },
                    transitionState: r,
                    onClose: d,
                    onDelete: u
                })
            }
        },
        363966: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                EditableBenefitsList: function() {
                    return m
                },
                AddBenefitCard: function() {
                    return C
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("476042"),
                o = s("77078"),
                d = s("476765"),
                u = s("673220"),
                c = s("987772"),
                E = s("351825"),
                _ = s("577357"),
                T = s("757715"),
                I = s("484456"),
                S = s("559979"),
                N = s("752520"),
                f = s("498030"),
                g = s("782340"),
                A = s("405625");

            function L(e) {
                let {
                    guildId: t,
                    emojiId: s,
                    emojiName: l,
                    title: r,
                    description: d,
                    targetType: E,
                    index: _,
                    dndName: T,
                    onEdit: S,
                    onMove: N,
                    disabled: L = !1
                } = e, m = n.useRef(null), C = n.useRef(null), {
                    drag: O,
                    dragPreview: h,
                    drop: R,
                    isDragging: D
                } = (0, f.default)(m, E, _, N);
                return O(C), h(R(m)), (0, a.jsxs)("div", {
                    ref: m,
                    className: i(A.card, {
                        [A.cardDragging]: D,
                        [A.disabled]: L
                    }),
                    children: [(0, a.jsxs)("div", {
                        className: A.emojiWrapper,
                        children: [(0, a.jsx)(I.default, {
                            guildId: t,
                            emojiId: s,
                            emojiName: l,
                            className: A.emoji
                        }), !L && (0, a.jsx)("div", {
                            ref: C,
                            className: A.dragIconWrapper,
                            "data-dnd-name": T,
                            children: (0, a.jsx)(u.default, {
                                className: A.dragIcon
                            })
                        })]
                    }), (0, a.jsxs)("div", {
                        className: A.cardText,
                        children: [(0, a.jsx)(o.Text, {
                            color: "header-primary",
                            variant: "text-md/semibold",
                            children: r
                        }), (0, a.jsx)(o.Text, {
                            color: "interactive-normal",
                            variant: "text-sm/normal",
                            children: d
                        })]
                    }), (0, a.jsx)("div", {
                        className: A.cardActions,
                        children: !L && (0, a.jsx)(o.Clickable, {
                            className: A.cardActionButton,
                            onClick: L ? void 0 : S,
                            "aria-label": g.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_EDIT_ARIA_LABEL,
                            "aria-disabled": L,
                            children: (0, a.jsx)(c.default, {
                                className: A.cardActionButtonIcon
                            })
                        })
                    })]
                })
            }

            function m(e) {
                let {
                    benefits: t,
                    onEdit: s,
                    onMove: l,
                    guildId: o
                } = e, u = (0, d.useUID)(), {
                    isDragging: c
                } = (0, r.useDragLayer)(e => ({
                    isDragging: e.getItemType() === u
                })), E = (0, T.useRoleSubscriptionSettingsDisabled)();
                return 0 === t.length ? null : (0, a.jsx)("div", {
                    className: i(A.container, {
                        [A.isDragging]: c
                    }),
                    children: t.map((e, t) => (0, a.jsxs)(n.Fragment, {
                        children: [t > 0 ? (0, a.jsx)("div", {
                            className: A.divider
                        }) : null, (0, a.jsx)(L, {
                            guildId: o,
                            emojiId: e.emoji_id,
                            emojiName: e.emoji_name,
                            title: (0, S.default)(e),
                            description: e.description,
                            targetType: u,
                            index: t,
                            dndName: (0, N.default)(e),
                            onEdit: () => s(t),
                            onMove: l,
                            disabled: E
                        })]
                    }, (0, _.getBenefitKey)(e)))
                })
            }

            function C(e) {
                let {
                    onClick: t,
                    children: s,
                    disabled: n = !1
                } = e;
                return (0, a.jsx)(o.Clickable, {
                    className: A.container,
                    onClick: n ? void 0 : t,
                    "aria-disabled": n,
                    children: (0, a.jsxs)("div", {
                        className: i(A.card, A.addBenefit, {
                            [A.disabled]: n
                        }),
                        children: [(0, a.jsx)("div", {
                            className: A.emojiWrapper,
                            children: (0, a.jsx)(E.default, {
                                className: A.addBenefitIcon
                            })
                        }), (0, a.jsx)("div", {
                            className: A.cardText,
                            children: (0, a.jsx)(o.Text, {
                                color: "header-primary",
                                variant: "text-md/normal",
                                children: s
                            })
                        })]
                    })
                })
            }
        },
        851015: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                EmojiList: function() {
                    return T
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("228220"),
                o = s("315102"),
                d = s("757715"),
                u = s("41391"),
                c = s("782340"),
                E = s("182131");

            function _(e) {
                let {
                    emoji: t,
                    onRemoveEmoji: s,
                    disabled: n = !1
                } = e, d = o.default.getEmojiURL({
                    id: t.id,
                    animated: t.animated,
                    size: 32
                });
                return (0, a.jsxs)("div", {
                    className: l(E.emojiRow, {
                        [E.disabled]: n
                    }),
                    children: [(0, a.jsx)("img", {
                        className: E.emojiImage,
                        src: d,
                        alt: t.name
                    }), (0, a.jsx)(i.Text, {
                        color: "header-primary",
                        variant: "text-md/medium",
                        className: E.emojiAlias,
                        children: t.name
                    }), (0, a.jsx)(i.Button, {
                        look: i.Button.Looks.BLANK,
                        size: i.Button.Sizes.ICON,
                        className: E.deleteButton,
                        onClick: () => s(t),
                        "aria-label": c.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_REMOVE_BUTTON_ARIA_LABEL,
                        disabled: n,
                        children: (0, a.jsx)(r.default, {
                            className: E.trashIcon
                        })
                    })]
                })
            }

            function T(e) {
                let {
                    tierEmojiIds: t,
                    guildId: s,
                    onRemoveEmoji: n
                } = e, l = (0, u.default)(s), i = null != t ? l.filter(e => t.has(e.id)) : [], r = (0, d.useRoleSubscriptionSettingsDisabled)();
                return (0, a.jsx)("div", {
                    className: E.container,
                    children: i.map(e => (0, a.jsx)(_, {
                        emoji: e,
                        onRemoveEmoji: () => n(e),
                        disabled: r
                    }, e.id))
                })
            }
        },
        922835: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return L
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("151426"),
                r = s("77078"),
                o = s("228100"),
                d = s("805233"),
                u = s("10641"),
                c = s("287883"),
                E = s("900938"),
                _ = s("490683"),
                T = s("432153"),
                I = s("505705"),
                S = s("179234"),
                N = s("459662"),
                f = s("49111"),
                g = s("988268"),
                A = s("276541");

            function L() {
                let e;
                let t = (0, l.useStateFromStores)([E.default], () => E.default.getGuild()),
                    s = (0, c.useGuildEligibleForGuildProducts)(null == t ? void 0 : t.id, "role_sub_settings"),
                    {
                        application: L,
                        loading: m
                    } = (0, o.default)(null == t ? void 0 : t.id, g.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS),
                    C = n.useRef(null),
                    O = (0, _.default)(null != t ? t : void 0, s);
                n.useEffect(() => {
                    null != t && (0, T.isEligibleForNewBadge)(t) && (0, u.markDismissibleContentAsDismissed)(i.DismissibleContent.SERVER_SUBSCRIPTION_SETTINGS_NEW_BADGE_TIER_TEMPLATE)
                }, [t]);
                let h = (null == t ? void 0 : t.hasFeature(f.GuildFeatures.CREATOR_MONETIZABLE)) === !1 && (null == t ? void 0 : t.hasFeature(f.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL)) === !1;
                return e = null == t || m ? (0, a.jsx)(r.Spinner, {}) : null != O ? (0, a.jsx)(S.default, {
                    guild: t,
                    config: O
                }) : h ? (0, a.jsx)(N.default, {
                    guild: t
                }) : (0, a.jsx)(I.default, {
                    guild: t,
                    application: L
                }), (0, a.jsx)(d.CreatorMonetizationExperimentContextProvider, {
                    isEligibleForGuildProducts: s,
                    children: (0, a.jsx)("div", {
                        className: A.settingsColumn,
                        children: (0, a.jsx)("div", {
                            className: A.settingsContainer,
                            children: (0, a.jsx)(r.ScrollerAuto, {
                                className: A.settingsScroller,
                                children: (0, a.jsx)("main", {
                                    ref: C,
                                    className: A.settingsContent,
                                    children: (0, a.jsx)(r.FocusRingScope, {
                                        containerRef: C,
                                        children: e
                                    })
                                })
                            })
                        })
                    })
                })
            }
        },
        412939: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return B
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("627445"),
                o = s.n(r),
                d = s("917351"),
                u = s.n(d),
                c = s("775560"),
                E = s("266491"),
                _ = s("769846"),
                T = s("77078"),
                I = s("45299"),
                S = s("731898"),
                N = s("608684"),
                f = s("965397"),
                g = s("191814"),
                A = s("476765"),
                L = s("950603"),
                m = s("593195"),
                C = s("178837"),
                O = s("271560"),
                h = s("159885"),
                R = s("837008"),
                D = s("757715"),
                M = s("620199"),
                G = s("7370"),
                x = s("395905"),
                p = s("677795"),
                U = s("874146"),
                v = s("782340"),
                j = s("254981");
            let P = (0, h.cssValueToNumber)(_.default.GUILD_SETTINGS_ROLE_SUBSCRIPTIONS_OVERVIEW_SETTINGS_MAX_WIDTH);

            function y() {
                return [{
                    name: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_SOME_CHANNELS_NAME,
                    desc: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_SOME_CHANNELS_DESCRIPTION,
                    value: p.GuildRoleSubscriptionFormat.SOME_CHANNELS,
                    icon: m.default
                }, {
                    name: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_NAME,
                    desc: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DESCRIPTION,
                    value: p.GuildRoleSubscriptionFormat.ALL_CHANNELS,
                    icon: C.default
                }]
            }

            function b(e) {
                let {
                    value: t,
                    "aria-labelledby": s,
                    onChange: l,
                    disabled: r = !1
                } = e, {
                    ref: o,
                    width: d
                } = (0, S.default)(), u = (0, c.useLazyValue)(y), E = n.useMemo(() => u.map(e => ({
                    ...e,
                    icon: function() {
                        let {
                            icon: t
                        } = e;
                        return (0, a.jsx)("div", {
                            className: j.formatRadioIconWrapper,
                            children: (0, a.jsx)(t, {
                                className: j.formatRadioIcon
                            })
                        })
                    },
                    radioBarClassName: j.formatOptionRadioBar,
                    radioItemIconClassName: j.formatOptionRadioItemIcon
                })), [u]), _ = null != d && d >= 400;
                return (0, a.jsx)("div", {
                    ref: o,
                    children: (0, a.jsx)(T.RadioGroup, {
                        options: E,
                        value: t,
                        orientation: _ ? "horizontal" : "vertical",
                        size: T.RadioGroup.Sizes.NONE,
                        className: i({
                            [j.radioGroupHorizontal]: _
                        }),
                        radioItemClassName: j.formatOptionRadioItem,
                        onChange: e => {
                            let {
                                value: t
                            } = e;
                            return l(t)
                        },
                        "aria-labelledby": s,
                        disabled: r
                    })
                })
            }

            function B(e) {
                var t;
                let {
                    guild: s,
                    isGuildProducts: l = !1
                } = e, {
                    format: i
                } = (0, G.default)(s.id), r = (0, R.useSubscriptionsSettings)(s.id), d = n.useCallback(() => {
                    var e;
                    return (null == r ? void 0 : null === (e = r.cover_image_asset) || void 0 === e ? void 0 : e.application_id) == null ? null : (0, O.getAssetURL)(r.cover_image_asset.application_id, r.cover_image_asset, P)
                }, [r]), [c, _] = n.useState(i), [S, m] = n.useState(null !== (t = null == r ? void 0 : r.description) && void 0 !== t ? t : ""), [C, h] = n.useState(d), [y, B] = n.useState(null == r ? void 0 : r.store_page_guild_products_default_sort), [F, H] = n.useState(null == r ? void 0 : r.server_shop_tab_order), {
                    loading: V,
                    error: k,
                    updateSubscriptionsSettings: w
                } = (0, R.useUpdateSubscriptionsSettings)(), {
                    imageCTA: Y,
                    imageAriaLabel: K,
                    setFilename: W
                } = (0, M.default)(null == r ? void 0 : r.cover_image_asset), z = (0, A.useUID)(), X = (0, A.useUID)(), Z = (0, A.useUID)();

                function J(e, t) {
                    o(null != e, "Null value not allowed"), null != t && W(t.name), h(e)
                }
                let Q = n.useMemo(() => {
                        var e;
                        return null != S && S !== (null !== (e = null == r ? void 0 : r.description) && void 0 !== e ? e : "") || (null == C ? void 0 : C.startsWith("data:")) === !0 || c !== i || (null == r ? void 0 : r.store_page_guild_products_default_sort) !== y || (null == r ? void 0 : r.server_shop_tab_order) !== F
                    }, [C, i, S, r, c, y, F]),
                    q = null != S && "" !== S && null != C;
                n.useEffect(() => {
                    var e;
                    if ((null == r ? void 0 : null === (e = r.cover_image_asset) || void 0 === e ? void 0 : e.application_id) != null) {
                        let e = (0, O.getAssetURL)(r.cover_image_asset.application_id, r.cover_image_asset, P);
                        h(e)
                    }
                }, [null == r ? void 0 : r.cover_image_asset]);
                let $ = (0, D.useRoleSubscriptionSettingsDisabled)(),
                    ee = n.useMemo(() => U.DISPLAYED_SORT_OPTIONS.map(e => ({
                        label: (0, U.getGuildProductSortOptionLabel)(e),
                        value: e
                    })), []),
                    et = n.useMemo(() => [{
                        label: v.default.Messages.GUILD_PRODUCTS_TITLE,
                        value: U.ServerShopTabOrder.PRODUCTS_FIRST
                    }, {
                        label: v.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TITLE,
                        value: U.ServerShopTabOrder.SUBS_FIRST
                    }], []);
                return (0, a.jsxs)("div", {
                    className: j.container,
                    children: [null != k && (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(x.default, {
                            children: k.getAnyErrorMessage()
                        }), (0, a.jsx)(g.default, {
                            size: 16
                        })]
                    }), l ? null : (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsxs)(T.FormSection, {
                            title: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_TITLE,
                            titleId: z,
                            disabled: $,
                            children: [(0, a.jsx)(T.FormText, {
                                type: T.FormText.Types.DESCRIPTION,
                                className: j.formDescription,
                                disabled: $,
                                children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_DESCRIPTION
                            }), (0, a.jsx)(b, {
                                value: c,
                                onChange: e => {
                                    i !== e && e === p.GuildRoleSubscriptionFormat.ALL_CHANNELS && (0, T.openModal)(e => (0, a.jsx)(T.ConfirmModal, {
                                        ...e,
                                        header: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DIALOG_TITLE,
                                        confirmText: v.default.Messages.GOT_IT,
                                        confirmButtonColor: T.Button.Colors.BRAND,
                                        children: (0, a.jsx)(T.Text, {
                                            variant: "text-md/normal",
                                            children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DIALOG_TEXT
                                        })
                                    })), _(e)
                                },
                                "aria-labelledby": z,
                                disabled: $
                            })]
                        }), (0, a.jsx)(T.FormDivider, {
                            className: j.divider
                        })]
                    }), (0, a.jsx)(T.FormSection, {
                        title: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_DESCRIPTION_TITLE,
                        titleId: X,
                        disabled: $,
                        children: (0, a.jsx)(T.TextArea, {
                            placeholder: l ? v.default.Messages.GUILD_PRODUCT_SETUP_INFO_DESCRIPTION_PLACEHOLDER : v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_DESCRIPTION_PLACEHOLDER,
                            maxLength: 1500,
                            value: S,
                            rows: 2,
                            autosize: !0,
                            onChange: m,
                            "aria-labelledby": X,
                            disabled: $
                        })
                    }), (0, a.jsx)(T.FormDivider, {
                        className: j.divider
                    }), (0, a.jsxs)(T.FormSection, {
                        title: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_TITLE,
                        disabled: $,
                        children: [(0, a.jsx)(T.FormText, {
                            type: T.FormText.Types.DESCRIPTION,
                            className: j.formDescription,
                            disabled: $,
                            children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_DESCRIPTION
                        }), (0, a.jsx)(N.default, {
                            image: C,
                            hint: Y,
                            showIcon: !0,
                            showRemoveButton: !1,
                            hideSize: !0,
                            className: j.coverImageUploader,
                            iconWrapperClassName: j.coverImageUploaderIconWrapper,
                            imageClassName: j.coverImageUploaderInner,
                            iconClassName: j.coverImageUploaderIcon,
                            onChange: J,
                            "aria-label": K,
                            disabled: $
                        }), (0, a.jsx)(g.default, {
                            size: 16
                        }), (0, a.jsx)(L.default, {
                            onChange: J,
                            buttonCTA: Y,
                            "aria-label": K,
                            disabled: $,
                            look: T.Button.Looks.OUTLINED,
                            color: T.Button.Colors.PRIMARY
                        })]
                    }), l ? (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(T.FormDivider, {
                            className: j.divider
                        }), (0, a.jsxs)(T.FormSection, {
                            title: v.default.Messages.CREATOR_MONETIZATION_SETTINGS_GUILD_PRODUCT_SORT_OPTION_TITLE,
                            titleId: Z,
                            disabled: $,
                            children: [(0, a.jsx)(T.FormText, {
                                type: T.FormText.Types.DESCRIPTION,
                                className: j.formDescription,
                                disabled: $,
                                children: v.default.Messages.CREATOR_MONETIZATION_SETTINGS_GUILD_PRODUCT_SORT_OPTION_DESCRIPTION
                            }), (0, a.jsx)(T.SingleSelect, {
                                value: y,
                                placeholder: v.default.Messages.SELECT,
                                options: ee,
                                onChange: e => B(e)
                            })]
                        })]
                    }) : null, et.length > 0 && (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(T.FormDivider, {
                            className: j.divider
                        }), (0, a.jsxs)(T.FormSection, {
                            title: v.default.Messages.CREATOR_MONETIZATION_SETTINGS_SERVER_SHOP_DEFAULT_TAB_OPTION_TITLE,
                            titleId: Z,
                            disabled: $,
                            children: [(0, a.jsx)(T.FormText, {
                                type: T.FormText.Types.DESCRIPTION,
                                className: j.formDescription,
                                disabled: $,
                                children: v.default.Messages.CREATOR_MONETIZATION_SETTINGS_SERVER_SHOP_DEFAULT_TAB_OPTION_DESCRIPTION
                            }), (0, a.jsx)(T.SingleSelect, {
                                value: F,
                                placeholder: v.default.Messages.SELECT,
                                options: et,
                                onChange: e => H(e)
                            })]
                        })]
                    }), (0, a.jsx)(E.default, {
                        component: "div",
                        className: j.contentRegion,
                        children: Q && (0, a.jsx)(f.default, {
                            children: (0, a.jsx)(I.default, {
                                submitting: V,
                                disabled: !q,
                                onReset: () => {
                                    var e;
                                    _(i), m(null !== (e = null == r ? void 0 : r.description) && void 0 !== e ? e : ""), h(d), B(null == r ? void 0 : r.store_page_guild_products_default_sort), H(null == r ? void 0 : r.server_shop_tab_order)
                                },
                                onSave: () => {
                                    o(null != r, "Settings must be defined");
                                    let e = {};
                                    S !== r.description && (e.description = S), null != C && C.startsWith("data:") && (e.cover_image = C), c !== i && (e.full_server_gate = c === p.GuildRoleSubscriptionFormat.ALL_CHANNELS), y !== r.store_page_guild_products_default_sort && (e.store_page_guild_products_default_sort = y), F !== r.server_shop_tab_order && (e.server_shop_tab_order = F), !u.isEmpty(e) && w(s.id, e)
                                },
                                saveButtonTooltip: q ? void 0 : v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_FULL_OUT_ALL_INFO
                            })
                        })
                    })]
                })
            }
        },
        451419: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return f
                }
            }), s("222007"), s("881410");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("301165"),
                o = s("446674"),
                d = s("669491"),
                u = s("77078"),
                c = s("206230"),
                E = s("461380"),
                _ = s("578706"),
                T = s("677795"),
                I = s("782340"),
                S = s("717580");

            function N(e) {
                let {
                    checked: t,
                    children: s
                } = e;
                return (0, a.jsxs)("div", {
                    className: S.row,
                    children: [(0, a.jsx)(u.Text, {
                        variant: "text-md/normal",
                        color: "interactive-active",
                        className: S.rowText,
                        children: s
                    }), t ? (0, a.jsx)(_.default, {
                        backgroundColor: d.default.unsafe_rawColors.WHITE_500.css,
                        className: i(S.rowIcon, S.rowIconChecked)
                    }) : (0, a.jsx)("div", {
                        className: i(S.rowIcon, S.rowIconEmpty)
                    })]
                })
            }

            function f(e) {
                let {
                    children: t
                } = e, [s, l] = n.useState(!1), i = (0, o.useStateFromStores)([c.default], () => c.default.useReducedMotion), d = t.flatMap(e => e.items.map(e => e.completed)), _ = d.filter(e => e).length / d.length, f = 1 === _, g = (0, r.useSpring)({
                    width: "".concat(100 * _, "%"),
                    immediate: i
                }), A = [I.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_PROMO_PAGE.format({
                    promoPageGuideUrl: T.SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS.PROMO_PAGE_GUIDE
                }), I.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_CASE_STUDIES.format({
                    caseStudiesUrl: T.SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS.CASE_STUDIES
                }), I.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_SUBSCRIPTION_OFFERING.format({
                    subscriptionOfferingGuideUrl: T.SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS.SUBSCRIPTION_OFFERING_GUIDE
                }), I.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_TIER_STRUCTURE.format({
                    tierStructureGuideUrl: T.SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS.TIER_STRUCTURE_GUIDE
                })], L = s ? null : (0, a.jsxs)(a.Fragment, {
                    children: [!f && t.map((e, t) => {
                        let {
                            title: s,
                            items: l
                        } = e;
                        return (0, a.jsxs)(n.Fragment, {
                            children: [t > 0 && (0, a.jsx)(u.FormDivider, {
                                className: S.divider
                            }), (0, a.jsx)(u.FormTitle, {
                                className: S.categoryTitle,
                                children: s
                            }), l.map((e, t) => (0, a.jsx)(N, {
                                children: e.description,
                                checked: e.completed
                            }, t))]
                        }, t)
                    }), (0, a.jsx)(u.FormDivider, {
                        className: S.divider
                    }), (0, a.jsx)(u.FormTitle, {
                        className: S.categoryTitle,
                        children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LEARN_MORE_SECTION_TITLE
                    }), A.map((e, t) => (0, a.jsx)("div", {
                        className: S.row,
                        children: (0, a.jsx)(u.Text, {
                            variant: "text-md/normal",
                            children: e
                        })
                    }, t))]
                });
                return (0, a.jsx)("div", {
                    className: S.checklist,
                    children: (0, a.jsxs)("div", {
                        className: S.container,
                        children: [(0, a.jsxs)(u.Clickable, {
                            className: S.headerBar,
                            onClick: () => l(e => !e),
                            children: [(0, a.jsx)(u.Heading, {
                                variant: "heading-md/semibold",
                                className: S.headerText,
                                children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_HEADER
                            }), (0, a.jsx)(E.default, {
                                direction: s ? E.default.Directions.DOWN : E.default.Directions.UP,
                                className: S.headerCaret
                            })]
                        }), !f && (0, a.jsx)("div", {
                            className: S.progressBarOuter,
                            children: (0, a.jsx)(r.animated.div, {
                                className: S.progressBarInner,
                                style: g
                            })
                        }), L]
                    })
                })
            }
        },
        505705: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return b
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("97031"),
                o = s("592407"),
                d = s("900938"),
                u = s("479756"),
                c = s("507950"),
                E = s("393414"),
                _ = s("719887"),
                T = s("697218"),
                I = s("191814"),
                S = s("449008"),
                N = s("257869"),
                f = s("837008"),
                g = s("757715"),
                A = s("432153"),
                L = s("195367"),
                m = s("258984"),
                C = s("417186"),
                O = s("751886"),
                h = s("412939"),
                R = s("451419"),
                D = s("326127"),
                M = s("988449"),
                G = s("514377"),
                x = s("49111"),
                p = s("724210"),
                U = s("810367"),
                v = s("782340"),
                j = s("621452");

            function P(e) {
                let {
                    application: t,
                    guild: s
                } = e, n = (0, f.useSubscriptionsSettings)(s.id), l = (0, f.useSubscriptionListingsForGuild)(s.id), i = l.some(e => null != e.name && null != e.subscription_plans[0] && null != e.description && null != e.image_asset), r = l.map(e => null == s ? void 0 : s.roles[e.role_id]), o = r.some(e => null != e && 0 !== e.color), d = l.some(e => e.role_benefits.benefits.length > 0), u = null != t && s.hasFeature(x.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED), c = [{
                    title: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PAYMENT,
                    items: [{
                        description: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_PAYMENT_ENABLE,
                        completed: u
                    }]
                }, {
                    title: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO,
                    items: [{
                        description: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_FORMAT,
                        completed: !0
                    }, {
                        description: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_DESCRIPTION,
                        completed: (null == n ? void 0 : n.description) != null && "" !== n.description
                    }, {
                        description: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_COVER_IMAGE,
                        completed: (null == n ? void 0 : n.cover_image_asset) != null
                    }]
                }, {
                    title: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_TIERS,
                    items: [{
                        description: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_BASICS,
                        completed: i
                    }, {
                        description: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_FLAIR,
                        completed: o
                    }, {
                        description: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_PERKS,
                        completed: d
                    }]
                }];
                return (0, a.jsx)(R.default, {
                    children: c
                })
            }

            function y(e) {
                let {
                    application: t
                } = e, {
                    teams: s
                } = (0, _.default)({
                    refreshOnDepChange: !1
                }), n = s.find(e => {
                    var s;
                    return e.id === (null == t ? void 0 : null === (s = t.team) || void 0 === s ? void 0 : s.id)
                }), l = [U.PayoutAccountStatuses.ACTION_REQUIRED, U.PayoutAccountStatuses.BLOCKED, U.PayoutAccountStatuses.SUSPENDED];
                return (null == n ? void 0 : n.payout_account_status) != null && l.includes(null == n ? void 0 : n.payout_account_status) ? (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(I.default, {
                        size: 16
                    }), (0, a.jsx)(C.default, {
                        children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYOUTS_PROBLEM_WARNING.format({
                            url: x.MarketingURLs.DEVELOPER_PORTAL_PAYOUT_SETTINGS(n.id)
                        })
                    }), (0, a.jsx)(I.default, {
                        size: 16
                    })]
                }) : null
            }

            function b(e) {
                let t, {
                        guild: r,
                        application: o
                    } = e,
                    u = (0, l.useStateFromStores)([d.default], () => d.default.getProps().subsection),
                    c = null != o && r.hasFeature(x.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED);
                t = c ? function(e) {
                    if (e === x.GuildSettingsSubsections.ROLE_SUBSCRIPTION_EMOJI) return M.TabBarSection.EMOJIS;
                    return M.TabBarSection.TIERS
                }(u) : M.TabBarSection.PAYMENT;
                let E = r.hasFeature(x.GuildFeatures.CREATOR_MONETIZABLE_PENDING_NEW_OWNER_ONBOARDING),
                    _ = r.hasFeature(x.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED),
                    I = (0, l.useStateFromStores)([T.default], () => T.default.getCurrentUser()),
                    S = r.isOwner(I);
                return n.useEffect(() => {
                    E && S && (0, i.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("677879").then(s.bind(s, "677879"));
                        return t => (0, a.jsx)(e, {
                            ...t,
                            guildId: r.id,
                            requireTeamSetup: _
                        })
                    })
                }, [E, _, r.id, S]), (0, a.jsx)(N.GroupListingsFetchContextProvider, {
                    guildId: r.id,
                    refetchOnMount: !0,
                    children: (0, a.jsx)(g.RoleSubscriptionSettingsDisabledContextProvider, {
                        guildId: r.id,
                        children: (0, a.jsx)(M.TabBarContextProvider, {
                            initialTab: t,
                            children: (0, a.jsx)(B, {
                                guild: r,
                                application: o
                            })
                        })
                    })
                })
            }

            function B(e) {
                let t, {
                        guild: s,
                        application: n
                    } = e,
                    d = null != n && s.hasFeature(x.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED),
                    {
                        currentTab: _,
                        setCurrentTab: I
                    } = (0, M.useTabBarState)(),
                    f = (0, N.useGroupListingsFetchContext)(),
                    g = (0, l.useStateFromStores)([T.default], () => T.default.getCurrentUser()),
                    C = (0, L.default)(s.id),
                    R = s.isOwner(g),
                    U = () => {
                        let e = s.roles[s.id];
                        o.default.close();
                        let t = {
                            [e.id]: e
                        };
                        (0, u.startImpersonating)(s.id, {
                            type: c.ImpersonateType.ROLE_SUBSCRIPTION,
                            roles: t
                        }), (0, A.announceCreateTemplateChannels)(s.id), (0, E.transitionTo)(x.Routes.CHANNEL(s.id, p.StaticChannelRoute.ROLE_SUBSCRIPTIONS))
                    };
                if (!f) return (0, a.jsx)(i.Spinner, {});
                switch (_) {
                    case M.TabBarSection.BASIC_INFO:
                        t = (0, a.jsx)(h.default, {
                            guild: s
                        });
                        break;
                    case M.TabBarSection.TIERS:
                        t = (0, a.jsx)(D.default, {
                            guildId: s.id
                        });
                        break;
                    case M.TabBarSection.PAYMENT:
                        t = (0, a.jsx)(O.default, {
                            guild: s
                        });
                        break;
                    case M.TabBarSection.EMOJIS:
                        t = (0, a.jsx)(G.default, {
                            guild: s
                        });
                        break;
                    default:
                        (0, S.assertNever)(_)
                }
                return (0, a.jsxs)("div", {
                    className: j.container,
                    children: [(0, a.jsxs)("div", {
                        className: j.mainContent,
                        children: [(0, a.jsx)(i.FormTitle, {
                            tag: "h1",
                            children: v.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TITLE
                        }), (0, a.jsx)(i.FormText, {
                            type: i.FormText.Types.DESCRIPTION,
                            children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_DESCRIPTION
                        }), (0, a.jsx)(m.default, {
                            guild: s
                        }), d && (0, a.jsx)(y, {
                            application: n
                        }), (0, a.jsxs)("div", {
                            className: j.tabBarContainer,
                            children: [(0, a.jsxs)(i.TabBar, {
                                className: j.tabBar,
                                "aria-label": v.default.Messages.OPTIONS,
                                selectedItem: _,
                                type: "top",
                                look: "brand",
                                onItemSelect: I,
                                children: [(0, a.jsx)(r.default, {
                                    id: M.TabBarSection.BASIC_INFO,
                                    disabledTooltip: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                                    disabled: !d,
                                    children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO
                                }), (0, a.jsx)(r.default, {
                                    id: M.TabBarSection.TIERS,
                                    disabledTooltip: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                                    disabled: !d,
                                    children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_TIERS
                                }), (0, a.jsx)(r.default, {
                                    id: M.TabBarSection.EMOJIS,
                                    disabledTooltip: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                                    disabled: !d,
                                    children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_EMOJI
                                }), R ? (0, a.jsx)(i.TabBar.Item, {
                                    className: j.tabBarItem,
                                    id: M.TabBarSection.PAYMENT,
                                    children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PAYMENT
                                }) : null]
                            }), d && (0, a.jsx)("div", {
                                className: j.previewButton,
                                children: (0, a.jsx)(i.Tooltip, {
                                    text: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PREVIEW_DISABLED,
                                    children: e => {
                                        let {
                                            onMouseEnter: t,
                                            onMouseLeave: s
                                        } = e;
                                        return (0, a.jsx)(i.Button, {
                                            disabled: C,
                                            onMouseEnter: C ? t : void 0,
                                            onMouseLeave: C ? s : void 0,
                                            onClick: U,
                                            color: i.Button.Colors.PRIMARY,
                                            size: i.Button.Sizes.SMALL,
                                            grow: !C,
                                            look: i.Button.Looks.OUTLINED,
                                            className: j.previewButton,
                                            children: v.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PREVIEW
                                        })
                                    }
                                })
                            })]
                        }), t]
                    }), (0, a.jsx)(P, {
                        application: n,
                        guild: s
                    })]
                })
            }
        },
        326127: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return G
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s("65597"),
                d = s("266491"),
                u = s("77078"),
                c = s("45299"),
                E = s("900938"),
                _ = s("965397"),
                T = s("191814"),
                I = s("351825"),
                S = s("858560"),
                N = s("808388"),
                f = s("837008"),
                g = s("719726"),
                A = s("757715"),
                L = s("167109"),
                m = s("172589"),
                C = s("49111"),
                O = s("782340"),
                h = s("514465");
            let R = "guild-role-subscription-tier-template-selector",
                D = e => {
                    let [t, s] = n.useState(!0), [a, l] = n.useState();
                    return n.useEffect(() => {
                        s(!0), (0, g.getPriceTiers)(e).then(e => {
                            l(e), s(!1)
                        })
                    }, [e]), {
                        loading: t,
                        priceTiers: a
                    }
                };

            function M(e) {
                let {
                    guildId: t,
                    priceTiers: l,
                    groupListingId: T
                } = e, g = (0, f.useSubscriptionListingsForGroup)(T), {
                    editStateIds: D,
                    addNewEditStateId: M,
                    addNewEditStateFromTemplate: G,
                    removeEditStateId: x
                } = L.useEditStateIds(T, t, {
                    includeSoftDeleted: !0
                }), [p, U] = n.useState({}), v = n.useMemo(() => {
                    let e = D.map(e => {
                        var t;
                        return null !== (t = p[e]) && void 0 !== t ? t : e
                    });
                    return (0, r.uniq)(e)
                }, [D, p]), j = (e, t) => {
                    U(s => ({
                        ...s,
                        [e]: t
                    }))
                }, P = (0, N.useGuildEligibleForTierTemplates)(t), y = (0, N.useUserEligibleForTierTemplates)(), b = n.useCallback(() => {
                    y && S.GuildRoleSubscriptionsTierTemplatesExperiment.trackExposure({
                        guildId: t,
                        location: "b2d9de_1"
                    }), y && P ? (0, u.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("183424").then(s.bind(s, "183424"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guildId: t,
                            addNewEditStateFromTemplate: G,
                            addNewEditStateFromScratch: M,
                            priceTiers: l
                        })
                    }, {
                        modalKey: R
                    }) : M()
                }, [t, G, M, l, y, P]), B = L.useHasChangesForEditStateIds(v), F = n.useCallback(() => v.forEach(L.clearEditState), [v]), H = (0, A.useRoleSubscriptionSettingsDisabled)(), V = (0, o.default)([E.default], () => E.default.getProps().subsection);
                return n.useEffect(() => (V === C.GuildSettingsSubsections.ROLE_SUBSCRIPTION_TIER_TEMPLATE && b(), () => {
                    (0, u.closeModal)(R)
                }), [V, b]), (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: h.groupListings,
                        children: [v.map(e => (0, a.jsx)(m.default, {
                            guildId: t,
                            initialEditStateId: e,
                            allSubscriptionListings: g,
                            priceTiers: l,
                            groupListingId: T,
                            onDeleteEditState: () => x(e),
                            onBeforeDispatchNewListing: t => j(t.id, e),
                            onAfterDispatchNewListing: () => x(e)
                        }, e)), (0, a.jsxs)(u.Clickable, {
                            onClick: H ? void 0 : b,
                            className: i(h.createTierButton, {
                                [h.disabled]: H
                            }),
                            "aria-disabled": H,
                            children: [(0, a.jsx)(I.default, {
                                className: h.createTierIcon
                            }), (0, a.jsx)(u.Text, {
                                variant: "text-md/normal",
                                color: "interactive-active",
                                children: O.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_CARD_CREATE
                            })]
                        })]
                    }), (0, a.jsx)(d.default, {
                        component: "div",
                        className: h.contentRegion,
                        children: B && (0, a.jsx)(_.default, {
                            children: (0, a.jsx)(c.default, {
                                onReset: F
                            })
                        })
                    })]
                })
            }

            function G(e) {
                let {
                    guildId: t
                } = e, {
                    priceTiers: s
                } = D(t), n = (0, f.useGroupListingsForGuild)(t), {
                    maxTiers: l
                } = (0, N.useRoleSubscriptionMaxTiersExperiment)(t), i = n.map(e => e.id);
                return (0, a.jsxs)(u.FormSection, {
                    title: O.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIERS_TAB_TITLE,
                    className: h.container,
                    children: [(0, a.jsx)(u.FormText, {
                        type: u.FormText.Types.DESCRIPTION,
                        children: O.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIERS_TAB_DESCRIPTION.format({
                            maxTiers: l
                        })
                    }), (0, a.jsx)(T.default, {
                        size: 16
                    }), (0, a.jsx)(M, {
                        priceTiers: s,
                        guildId: t,
                        groupListingId: i[0]
                    })]
                })
            }
        },
        801171: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return y
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("627445"),
                o = s.n(r),
                d = s("917351"),
                u = s.n(d),
                c = s("446674"),
                E = s("669491"),
                _ = s("266491"),
                T = s("77078"),
                I = s("913801"),
                S = s("45299"),
                N = s("545158"),
                f = s("716241"),
                g = s("465869"),
                A = s("900938"),
                L = s("973262"),
                m = s("965397"),
                C = s("578706"),
                O = s("781896"),
                h = s("599110"),
                R = s("257869"),
                D = s("837008"),
                M = s("49111"),
                G = s("782340"),
                x = s("704987");
            let p = [14361481, 12200937, 8804082, 6576370, 5335282, 2652110, 2128781, 2196594, 4752414, 13064760, 13058360, 12401e3, 12933021, 5659039, 4092591, 5868359, 6586142, 8876063, 8484432, 9979976, 5269106, 3421236],
                U = /^(https?:\/\/)?(?:m\.|www\.)?(youtu\.be|youtube\.com)\/(embed\/|v\/|watch\?v=|watch\?.+&v=)?((\w|-){11})(?:\S+)?$/,
                v = p[4],
                j = e => {
                    var t, s;
                    let {
                        guild: l,
                        canEnable: r
                    } = e, d = (0, D.useSubscriptionsSettings)(l.id), {
                        loading: c,
                        updateSubscriptionsSettings: A
                    } = (0, D.useUpdateSubscriptionsSettings)(), [R, j] = n.useState(l.hasFeature(M.GuildFeatures.CREATOR_STORE_PAGE)), [P, y] = n.useState(null !== (t = null == d ? void 0 : d.store_page_primary_color) && void 0 !== t ? t : v), [b, B] = n.useState(null == d ? void 0 : d.store_page_trailer_url), F = null == b || null != b.match(U), [H, V] = n.useState(null !== (s = null == d ? void 0 : d.store_page_show_subscriber_count) && void 0 !== s && s), k = n.useRef(null == d ? void 0 : d.store_page_slug).current, w = R !== l.hasFeature(M.GuildFeatures.CREATOR_STORE_PAGE) || (null == d ? void 0 : d.store_page_primary_color) == null && P !== v || (null == d ? void 0 : d.store_page_primary_color) != null && P !== (null == d ? void 0 : d.store_page_primary_color) || b !== (null == d ? void 0 : d.store_page_trailer_url) || null != H && H !== (null == d ? void 0 : d.store_page_show_subscriber_count), Y = async () => {
                        o(null != d, "Settings must be defined");
                        let e = {};
                        R !== l.hasFeature(M.GuildFeatures.CREATOR_STORE_PAGE) && (e.store_page_enabled = R), ((null == d ? void 0 : d.store_page_primary_color) == null && P !== v || (null == d ? void 0 : d.store_page_primary_color) != null && P !== (null == d ? void 0 : d.store_page_primary_color)) && (e.store_page_primary_color = P), b !== (null == d ? void 0 : d.store_page_trailer_url) && (e.store_page_trailer_url = b), H !== (null == d ? void 0 : d.store_page_show_subscriber_count) && (e.store_page_show_subscriber_count = H), !u.isEmpty(e) && (await A(l.id, e), "store_page_enabled" in e && h.default.track(M.AnalyticEvents.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_TOGGLED, {
                            enabled: R,
                            ...(0, f.collectGuildAnalyticsMetadata)(l.id)
                        }))
                    }, K = M.MarketingURLs.ROLE_SUBSCRIPTION_STORE_PAGE(k), W = null != b && b === (null == d ? void 0 : d.store_page_trailer_url), {
                        shouldRestrictUpdatingCreatorMonetizationSettings: z
                    } = (0, g.useShouldRestrictUpdatingCreatorMonetizationSettings)(l.id), X = z || !F;
                    return (0, a.jsxs)("div", {
                        children: [(0, a.jsx)(T.FormTitle, {
                            tag: "h1",
                            children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TITLE
                        }), (0, a.jsx)(T.FormText, {
                            type: T.FormText.Types.DESCRIPTION,
                            children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DESCRIPTION
                        }), (0, a.jsx)(T.FormSwitch, {
                            className: x.enableSwitch,
                            value: R,
                            disabled: z || !R && !r,
                            tooltipNote: R || r ? void 0 : G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_PRIMARY_TOGGLE_DISABLED_TOOLTIP,
                            hideBorder: !0,
                            onChange: e => j(e),
                            children: (0, a.jsx)(T.Text, {
                                variant: "text-md/semibold",
                                color: "header-primary",
                                children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ENABLE
                            })
                        }), (0, a.jsxs)(T.FormItem, {
                            title: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_PROMO_URL,
                            disabled: z,
                            children: [(0, a.jsx)(I.default, {
                                value: K,
                                className: i({
                                    [x.disabled]: z
                                })
                            }), (0, a.jsx)(T.Button, {
                                onClick: () => (0, N.default)(K),
                                className: x.openPageButton,
                                disabled: z,
                                children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_GO_TO_PAGE
                            })]
                        }), (0, a.jsx)(T.FormDivider, {
                            className: x.divider
                        }), (0, a.jsxs)(T.FormItem, {
                            title: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_TITLE,
                            disabled: z,
                            children: [(0, a.jsx)(T.FormText, {
                                disabled: z,
                                children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_DESCRIPTION
                            }), (0, a.jsxs)("div", {
                                className: x.accentColorContainer,
                                children: [(0, a.jsx)(T.Button, {
                                    onClick: () => null,
                                    color: T.Button.Colors.CUSTOM,
                                    style: {
                                        backgroundColor: "#".concat(P.toString(16).padStart(6, "0"))
                                    },
                                    className: x.buttonPreview,
                                    disabled: z,
                                    children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_BUTTON_PREVIEW
                                }), (0, a.jsx)(L.default, {
                                    colors: p,
                                    customColor: null,
                                    defaultColor: v,
                                    value: P,
                                    onChange: e => y(e),
                                    renderDefaultButton: () => null,
                                    renderCustomButton: () => null,
                                    colorContainerClassName: x.hideColorButtons,
                                    disabled: z
                                })]
                            })]
                        }), (0, a.jsx)(T.FormDivider, {
                            className: x.divider
                        }), (0, a.jsxs)(T.FormItem, {
                            title: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_TITLE,
                            disabled: z,
                            children: [(0, a.jsx)(T.FormText, {
                                disabled: z,
                                children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_DESCRIPTION
                            }), (0, a.jsx)(T.TextInput, {
                                value: null != b ? b : void 0,
                                onChange: e => B("" === e ? null : e),
                                error: F ? null : G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_BAD_LINK,
                                placeholder: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_PLACEHOLDER,
                                className: x.trailerInputWrapper,
                                inputClassName: i(x.trailerInput, {
                                    [x.error]: !F,
                                    [x.trailerInputWithCheckmark]: W || !F
                                }),
                                prefixElement: F && W && (0, a.jsx)(C.default, {
                                    color: E.default.unsafe_rawColors.BRAND_500.css,
                                    backgroundColor: E.default.unsafe_rawColors.WHITE_500.css,
                                    className: x.inputCheckmark
                                }),
                                disabled: z
                            })]
                        }), (0, a.jsx)(T.FormDivider, {
                            className: x.divider
                        }), (0, a.jsxs)(T.FormItem, {
                            title: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_TITLE,
                            disabled: z,
                            children: [(0, a.jsx)(T.FormText, {
                                disabled: z,
                                children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_DESCRIPTION
                            }), (0, a.jsx)(T.FormSwitch, {
                                className: x.premiumMemberCountSwitchContainer,
                                value: H,
                                hideBorder: !0,
                                onChange: e => V(e),
                                disabled: z,
                                children: (0, a.jsxs)("div", {
                                    className: x.iconSwitchLabel,
                                    children: [(0, a.jsx)("div", {
                                        className: x.iconContainer,
                                        children: (0, a.jsx)(O.default, {
                                            width: 28,
                                            height: 28,
                                            className: x.premiumMemberCountIcon
                                        })
                                    }), (0, a.jsxs)("div", {
                                        children: [(0, a.jsx)(T.Text, {
                                            variant: "text-md/medium",
                                            color: "header-primary",
                                            children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_PREMIUM_MEMBER_COUNT
                                        }), (0, a.jsx)(T.Text, {
                                            variant: "text-sm/normal",
                                            color: "header-secondary",
                                            children: G.default.Messages.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_PREMIUM_MEMBER_COUNT_DESCRIPTION
                                        })]
                                    })]
                                })
                            })]
                        }), (0, a.jsx)(_.default, {
                            component: "div",
                            className: x.contentRegion,
                            children: w && (0, a.jsx)(m.default, {
                                children: (0, a.jsx)(S.default, {
                                    submitting: c,
                                    onReset: () => {
                                        var e, t;
                                        j(l.hasFeature(M.GuildFeatures.CREATOR_STORE_PAGE)), y(null !== (e = null == d ? void 0 : d.store_page_primary_color) && void 0 !== e ? e : v), B(null == d ? void 0 : d.store_page_trailer_url), V(null !== (t = null == d ? void 0 : d.store_page_show_subscriber_count) && void 0 !== t && t)
                                    },
                                    onSave: Y,
                                    disabled: X
                                })
                            })
                        })]
                    })
                };

            function P() {
                let e = (0, c.useStateFromStores)([A.default], () => A.default.getGuild()),
                    t = (0, R.useGroupListingsFetchContext)(),
                    s = (0, D.useSubscriptionListingsForGuild)(null == e ? void 0 : e.id),
                    n = s.some(e => e.published);
                return null != e && t ? (0, a.jsx)(j, {
                    guild: e,
                    canEnable: n
                }) : (0, a.jsx)(T.Spinner, {})
            }

            function y() {
                let e = (0, c.useStateFromStores)([A.default], () => A.default.getGuild());
                return (0, a.jsxs)(R.GroupListingsFetchContextProvider, {
                    guildId: null == e ? void 0 : e.id,
                    refetchOnMount: !0,
                    children: [(0, a.jsx)(P, {}), ";"]
                })
            }
        },
        701973: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ImportBenefitsFromSubscriptionListingModal: function() {
                    return Y
                },
                ImportBenefitsFromRoleModal: function() {
                    return Z
                }
            }), s("222007"), s("881410");
            var a, n, l = s("37983"),
                i = s("884691"),
                r = s("414456"),
                o = s.n(r),
                d = s("775560"),
                u = s("316693"),
                c = s("509043"),
                E = s("446674"),
                _ = s("233736"),
                T = s("769846"),
                I = s("77078"),
                S = s("430568"),
                N = s("419830"),
                f = s("385976"),
                g = s("405645"),
                A = s("233069"),
                L = s("245997"),
                m = s("305961"),
                C = s("476765"),
                O = s("461380"),
                h = s("593195"),
                R = s("36694"),
                D = s("375352"),
                M = s("682344"),
                G = s("483093"),
                x = s("159885"),
                p = s("577357"),
                U = s("880993"),
                v = s("833531"),
                j = s("559979"),
                P = s("49111"),
                y = s("782340"),
                b = s("943134");
            let B = (0, C.uid)(),
                F = (0, C.uid)(),
                H = (0, x.cssValueToNumber)(T.default.IMPORT_BENEFITS_MODAL_ROLE_ICON_SIZE);

            function V(e) {
                var t;
                let {
                    emojiId: s,
                    emojiName: a,
                    className: n
                } = e, i = (0, E.useStateFromStores)([f.default], () => null != s ? f.default.getCustomEmojiById(s) : void 0);
                return (0, l.jsx)(S.default, {
                    emojiId: s,
                    emojiName: a,
                    animated: null !== (t = null == i ? void 0 : i.animated) && void 0 !== t && t,
                    className: n
                })
            }

            function k(e) {
                let {
                    icon: t,
                    children: s,
                    checked: a,
                    disabled: n = !1,
                    onChange: i
                } = e, r = a || n;
                return (0, l.jsxs)("label", {
                    className: o(b.row, {
                        [b.checked]: r,
                        [b.disabled]: n
                    }),
                    children: [(0, l.jsx)("div", {
                        className: b.rowIconWrapper,
                        children: t
                    }), (0, l.jsx)("div", {
                        className: b.rowText,
                        children: s
                    }), (0, l.jsxs)("div", {
                        className: b.rowCheckbox,
                        children: [(0, l.jsx)(I.FocusRing, {
                            children: (0, l.jsx)("input", {
                                type: "checkbox",
                                checked: r,
                                disabled: n,
                                className: b.checkboxInput,
                                onChange: function(e) {
                                    i(e.target.checked)
                                }
                            })
                        }), (0, l.jsx)("div", {
                            className: b.checkboxDisplay,
                            children: (0, l.jsx)(R.default, {
                                className: b.checkboxIcon,
                                "aria-hidden": !0
                            })
                        })]
                    })]
                })
            }

            function w(e) {
                let {
                    title: t,
                    selectAllText: s,
                    benefits: a,
                    dupeBenefits: n,
                    selectedBenefits: i,
                    onToggleBenefit: r
                } = e, o = a.every(e => i.has(e));
                return a.length > 0 ? (0, l.jsxs)(I.FormSection, {
                    title: t,
                    className: b.section,
                    children: [a.length - n.size > 1 && (0, l.jsx)("div", {
                        className: b.list,
                        children: (0, l.jsx)(k, {
                            icon: (0, l.jsx)(D.default, {
                                className: b.rowIcon
                            }),
                            checked: o,
                            onChange: function(e) {
                                for (let t of a) !n.has(t) && r(t, e)
                            },
                            children: (0, l.jsx)(I.Text, {
                                color: "header-primary",
                                variant: "text-md/normal",
                                children: s
                            })
                        })
                    }), (0, l.jsx)("div", {
                        className: b.list,
                        children: a.map(e => (0, l.jsxs)(k, {
                            icon: (0, l.jsx)(V, {
                                emojiId: e.emoji_id,
                                emojiName: e.emoji_name,
                                className: b.rowIcon
                            }),
                            checked: i.has(e),
                            disabled: n.has(e),
                            onChange: t => r(e, t),
                            children: [(0, l.jsx)(I.Text, {
                                color: "header-primary",
                                variant: "text-md/semibold",
                                children: (0, j.default)(e)
                            }), (0, l.jsx)(I.Text, {
                                color: "interactive-normal",
                                variant: "text-sm/normal",
                                children: e.description
                            })]
                        }, (0, p.getBenefitKey)(e)))
                    })]
                }) : null
            }

            function Y(e) {
                let {
                    transitionState: t,
                    fromSubscriptionListing: s,
                    existingChannelBenefits: a,
                    existingIntangibleBenefits: n,
                    onSubmit: r,
                    onClose: o
                } = e, d = s.role_benefits.benefits, [u, c] = i.useState(() => new Set(d)), E = i.useMemo(() => d.filter(p.isChannelBenefit), [d]), T = (0, v.default)(E), S = i.useMemo(() => d.filter(p.isIntangibleBenefit), [d]), N = i.useMemo(() => new Set(T.filter(e => a.some(t => t.ref_id === e.ref_id))), [T, a]), f = i.useMemo(() => new Set(S.filter(e => n.some(t => (0, _.default)(e, t)))), [n, S]), g = (0, C.useUID)();

                function A(e, t) {
                    c(s => {
                        let a = new Set(s);
                        return t ? a.add(e) : a.delete(e), a
                    })
                }
                return (0, l.jsx)("form", {
                    onSubmit: function(e) {
                        e.preventDefault();
                        let t = d.filter(e => u.has(e)),
                            s = t.filter(p.isChannelBenefit).filter(e => !N.has(e)),
                            a = t.filter(p.isIntangibleBenefit).filter(e => !f.has(e));
                        r(s, a), o()
                    },
                    children: (0, l.jsxs)(I.ModalRoot, {
                        transitionState: t,
                        "aria-labelledby": g,
                        children: [(0, l.jsxs)(I.ModalHeader, {
                            children: [(0, l.jsx)(I.Heading, {
                                id: g,
                                variant: "heading-md/semibold",
                                children: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_MODAL_HEADER.format({
                                    tierName: s.name
                                })
                            }), (0, l.jsx)(I.ModalCloseButton, {
                                className: b.modalCloseButton,
                                onClick: o
                            })]
                        }), (0, l.jsxs)(I.ModalContent, {
                            className: b.modalContent,
                            children: [(0, l.jsx)(w, {
                                title: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_CHANNELS_TITLE,
                                selectAllText: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_SELECT_ALL_CHANNEL_BENEFITS,
                                benefits: T,
                                dupeBenefits: N,
                                selectedBenefits: u,
                                onToggleBenefit: A
                            }), (0, l.jsx)(w, {
                                title: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_TITLE,
                                selectAllText: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_SELECT_ALL_INTANGIBLE_BENEFITS,
                                benefits: S,
                                dupeBenefits: f,
                                selectedBenefits: u,
                                onToggleBenefit: A
                            })]
                        }), (0, l.jsxs)(I.ModalFooter, {
                            children: [(0, l.jsx)(I.Button, {
                                type: "submit",
                                children: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_CONFIRM_BUTTON
                            }), (0, l.jsx)(I.Button, {
                                look: I.Button.Looks.LINK,
                                color: I.Button.Colors.PRIMARY,
                                onClick: o,
                                children: y.default.Messages.CANCEL
                            })]
                        })]
                    })
                })
            }

            function K(e) {
                var t;
                let {
                    guildId: s,
                    role: a,
                    channelCount: n,
                    onSelect: i
                } = e, r = (0, g.useRoleIcon)({
                    guildId: s,
                    roleId: a.id,
                    size: H
                });
                return (0, l.jsxs)(I.Clickable, {
                    className: b.roleRow,
                    onClick: i,
                    children: [(0, l.jsx)("div", {
                        className: b.rowIconWrapper,
                        children: null != r ? (0, l.jsx)(G.default, {
                            ...r
                        }) : (0, l.jsx)(M.default, {
                            color: null !== (t = a.colorString) && void 0 !== t ? t : (0, c.int2hex)(P.DEFAULT_ROLE_COLOR),
                            className: b.roleRowIconDefault
                        })
                    }), (0, l.jsxs)("div", {
                        className: b.rowText,
                        children: [(0, l.jsx)(I.Text, {
                            color: "header-primary",
                            variant: "text-md/normal",
                            className: b.benefitTitle,
                            children: a.name
                        }), (0, l.jsx)(I.Text, {
                            color: "header-secondary",
                            variant: "text-sm/normal",
                            children: y.default.Messages.NUM_CHANNELS.format({
                                num: n
                            })
                        })]
                    }), (0, l.jsx)("div", {
                        className: b.rowCheckbox,
                        children: (0, l.jsx)(O.default, {
                            direction: O.default.Directions.RIGHT
                        })
                    })]
                })
            }

            function W(e) {
                let {
                    guild: t,
                    onSelect: s
                } = e, a = (0, E.useStateFromStores)([L.default], () => L.default.getCategories(t.id)), n = i.useMemo(() => a._categories.flatMap(e => a[e.channel.id].filter(e => {
                    let {
                        channel: t
                    } = e;
                    return A.GUILD_NON_CATEGORY_CHANNEL_TYPES.has(t.type)
                }).map(e => {
                    let {
                        channel: t
                    } = e;
                    return t
                })), [a]), r = i.useMemo(() => Object.values(t.roles).flatMap(e => {
                    var s;
                    if (e.id === t.id || (null === (s = e.tags) || void 0 === s ? void 0 : s.subscription_listing_id) != null || u.default.hasAny(e.permissions, P.ElevatedPermissions)) return [];
                    let a = (0, U.default)(n, e).length;
                    return a > 0 ? {
                        role: e,
                        channelCount: a
                    } : []
                }), [t, n]);
                return r.length > 0 ? (0, l.jsx)("div", {
                    className: b.list,
                    children: r.map(e => (0, l.jsx)(K, {
                        guildId: t.id,
                        role: e.role,
                        channelCount: e.channelCount,
                        onSelect: () => s(e.role)
                    }, e.role.id))
                }) : (0, l.jsx)(I.Text, {
                    variant: "text-md/normal",
                    children: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_SELECT_ROLE_EMPTY
                })
            }

            function z(e) {
                let {
                    onClose: t,
                    guildId: s,
                    onSelect: a
                } = e, n = (0, E.useStateFromStores)([m.default], () => m.default.getGuild(s));
                return null == n ? null : (0, l.jsxs)(l.Fragment, {
                    children: [(0, l.jsxs)(I.ModalHeader, {
                        children: [(0, l.jsx)(I.Heading, {
                            id: B,
                            variant: "heading-md/semibold",
                            children: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_MODAL_HEADER_1
                        }), (0, l.jsx)(I.ModalCloseButton, {
                            className: b.modalCloseButton,
                            onClick: t
                        })]
                    }), (0, l.jsx)(I.ModalContent, {
                        className: b.modalContent,
                        children: (0, l.jsx)(W, {
                            guild: n,
                            onSelect: a
                        })
                    })]
                })
            }

            function X(e) {
                let {
                    onClose: t,
                    guildId: s,
                    role: a,
                    onCancel: n,
                    onImport: r
                } = e, o = i.useRef(a);
                null != a && (o.current = a);
                let u = null != a ? a : o.current,
                    c = (0, d.useLazyValue)(() => {
                        let e = L.default.getCategories(s);
                        return e._categories.flatMap(t => e[t.channel.id].filter(e => {
                            let {
                                channel: t
                            } = e;
                            return A.GUILD_NON_CATEGORY_CHANNEL_TYPES.has(t.type)
                        }).map(e => {
                            let {
                                channel: t
                            } = e;
                            return t
                        }))
                    }),
                    E = i.useMemo(() => (0, U.default)(c, u), [c, u]),
                    [_, T] = i.useState(() => new Set(E.map(e => e.id)));

                function S(e, t) {
                    T(s => {
                        let a = new Set(s);
                        return t ? a.add(e) : a.delete(e), a
                    })
                }
                return (0, l.jsxs)("form", {
                    onSubmit: function(e) {
                        e.preventDefault(), r(E.map(e => e.id).filter(e => _.has(e))), t()
                    },
                    className: b.slideForm,
                    children: [(0, l.jsxs)(I.ModalHeader, {
                        children: [(0, l.jsx)(I.Heading, {
                            id: F,
                            variant: "heading-md/semibold",
                            children: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_MODAL_HEADER_2.format({
                                roleName: u.name
                            })
                        }), (0, l.jsx)(I.ModalCloseButton, {
                            className: b.modalCloseButton,
                            onClick: t
                        })]
                    }), (0, l.jsxs)(I.ModalContent, {
                        className: b.modalContent,
                        children: [E.length > 1 && (0, l.jsx)("div", {
                            className: b.list,
                            children: (0, l.jsx)(k, {
                                icon: (0, l.jsx)(D.default, {}),
                                checked: _.size === E.length,
                                onChange: function(e) {
                                    for (let t of E) S(t.id, e)
                                },
                                children: (0, l.jsx)(I.Text, {
                                    color: "header-primary",
                                    variant: "text-md/normal",
                                    children: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_SELECT_ALL_CHANNEL_BENEFITS
                                })
                            })
                        }), (0, l.jsx)("div", {
                            className: b.list,
                            children: E.map(e => {
                                var t;
                                let s = null !== (t = (0, N.getSimpleChannelIconComponent)(e.type)) && void 0 !== t ? t : h.default;
                                return (0, l.jsx)(k, {
                                    icon: (0, l.jsx)("div", {
                                        className: b.rowIcon,
                                        children: (0, l.jsx)(s, {
                                            width: "100%",
                                            height: "100%"
                                        })
                                    }),
                                    checked: _.has(e.id),
                                    onChange: t => S(e.id, t),
                                    children: (0, l.jsx)(I.Text, {
                                        color: "header-primary",
                                        variant: "text-md/normal",
                                        className: b.benefitTitle,
                                        children: e.name
                                    })
                                }, e.id)
                            })
                        })]
                    }), (0, l.jsxs)(I.ModalFooter, {
                        children: [(0, l.jsx)(I.Button, {
                            type: "submit",
                            children: y.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_CONFIRM_BUTTON
                        }), (0, l.jsx)(I.Button, {
                            look: I.Button.Looks.LINK,
                            color: I.Button.Colors.PRIMARY,
                            onClick: n,
                            children: y.default.Messages.CANCEL
                        })]
                    })]
                })
            }

            function Z(e) {
                let {
                    transitionState: t,
                    guildId: s,
                    onClose: a,
                    onImport: n
                } = e, [r, o] = i.useState();
                return (0, l.jsx)(I.ModalRoot, {
                    transitionState: t,
                    "aria-labelledby": null == r ? B : F,
                    children: (0, l.jsxs)(I.Slides, {
                        contentDisplay: "flex",
                        activeSlide: null == r ? 0 : 1,
                        width: 440,
                        children: [(0, l.jsx)(I.Slide, {
                            id: 0,
                            children: (0, l.jsx)(z, {
                                onClose: a,
                                guildId: s,
                                onSelect: o
                            })
                        }), (0, l.jsx)(I.Slide, {
                            id: 1,
                            children: (0, l.jsx)(X, {
                                onClose: a,
                                guildId: s,
                                role: r,
                                onCancel: () => o(void 0),
                                onImport: n
                            })
                        })]
                    })
                })
            }(n = a || (a = {}))[n.SELECT_ROLE = 0] = "SELECT_ROLE", n[n.SELECT_CHANNELS = 1] = "SELECT_CHANNELS"
        },
        958671: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                },
                ImportRoleCard: function() {
                    return S
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("461380"),
                o = s("682344"),
                d = s("271560"),
                u = s("577357"),
                c = s("757715"),
                E = s("701973"),
                _ = s("782340"),
                T = s("919686");

            function I(e) {
                let {
                    channelBenefits: t,
                    intangibleBenefits: s,
                    subscriptionListings: n,
                    onImport: r
                } = e, o = (0, c.useRoleSubscriptionSettingsDisabled)();
                return (0, a.jsx)("div", {
                    className: T.container,
                    children: n.map(e => (0, a.jsxs)("div", {
                        className: T.row,
                        children: [(0, a.jsx)("img", {
                            alt: "",
                            src: null == e.image_asset ? void 0 : (0, d.getAssetURL)(e.application_id, e.image_asset, 512),
                            className: l(T.rowIcon, T.listingImage)
                        }), (0, a.jsxs)("div", {
                            className: T.rowBody,
                            children: [(0, a.jsx)(i.Text, {
                                variant: "text-md/normal",
                                color: "header-primary",
                                className: l(T.rowText, T.listingName),
                                children: e.name
                            }), (0, a.jsx)(i.Text, {
                                color: "header-secondary",
                                variant: "text-sm/normal",
                                children: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_NUM_BENEFITS.format({
                                    channels: e.role_benefits.benefits.filter(u.isChannelBenefit).length,
                                    benefits: e.role_benefits.benefits.filter(u.isIntangibleBenefit).length
                                })
                            })]
                        }), (0, a.jsx)(i.Button, {
                            look: i.Button.Looks.OUTLINED,
                            color: i.Button.Colors.PRIMARY,
                            onClick: () => {
                                var n;
                                return n = e, void(0, i.openModal)(e => (0, a.jsx)(E.ImportBenefitsFromSubscriptionListingModal, {
                                    ...e,
                                    fromSubscriptionListing: n,
                                    existingChannelBenefits: t,
                                    existingIntangibleBenefits: s,
                                    onSubmit: r
                                }))
                            },
                            disabled: o,
                            children: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_BUTTON
                        })]
                    }, e.id))
                })
            }

            function S(e) {
                let {
                    guildId: t,
                    onImport: s,
                    disabled: n = !1
                } = e;
                return (0, a.jsxs)(i.Clickable, {
                    className: l(T.importRoleCard, {
                        [T.disabled]: n
                    }),
                    onClick: n ? void 0 : function() {
                        (0, i.openModal)(e => (0, a.jsx)(E.ImportBenefitsFromRoleModal, {
                            ...e,
                            guildId: t,
                            onImport: s
                        }))
                    },
                    "aria-disabled": n,
                    children: [(0, a.jsx)(o.default, {
                        className: T.rowIcon
                    }), (0, a.jsx)(i.Text, {
                        variant: "text-md/normal",
                        color: "header-primary",
                        className: T.rowText,
                        children: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_SELECT_ROLE
                    }), (0, a.jsx)(r.default, {
                        direction: r.default.Directions.RIGHT,
                        className: T.caret
                    })]
                })
            }
        },
        301289: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return L
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("509043"),
                o = s("77078"),
                d = s("731898"),
                u = s("449918"),
                c = s("269936"),
                E = s("973262"),
                _ = s("36694"),
                T = s("422403"),
                I = s("49111"),
                S = s("782340"),
                N = s("153893");
            let f = (0, c.makeLazy)({
                createPromise: () => s.el("282585").then(s.bind(s, "282585")),
                webpackId: "282585"
            });

            function g(e) {
                let t = (0, r.getDarkness)(e) > .25;
                return (0, u.getColor)(t ? I.Color.WHITE_500 : I.Color.PRIMARY_530)
            }

            function A(e) {
                let {
                    value: t,
                    onChange: s,
                    disabled: l = !1
                } = e, [d, u] = n.useState(t);

                function c() {
                    s(d)
                }

                function f(e) {
                    s(e), u(e)
                }
                let A = t === I.DEFAULT_ROLE_COLOR,
                    L = A ? d : t,
                    m = (0, a.jsx)(_.default, {
                        width: 32,
                        height: 24,
                        color: g(t)
                    }),
                    C = (0, o.useRadioGroup)({
                        orientation: "horizontal",
                        isDisabled: l
                    }),
                    O = (0, o.useRadioItem)({
                        isSelected: A,
                        label: S.default.Messages.USER_SETTINGS_PROFILE_COLOR_DEFAULT_BUTTON.format({
                            colorHex: (0, r.int2hex)(I.DEFAULT_ROLE_COLOR)
                        })
                    }),
                    h = (0, o.useRadioItem)({
                        isSelected: !A,
                        label: S.default.Messages.USER_SETTINGS_PROFILE_COLOR_CUSTOM_BUTTON.format({
                            colorHex: (0, r.int2hex)(t)
                        })
                    });
                return (0, a.jsxs)("div", {
                    className: N.buttonsContainer,
                    "aria-label": S.default.Messages.USER_SETTINGS_PROFILE_COLOR,
                    ...C,
                    children: [(0, a.jsx)("div", {
                        className: i(N.colorSwatch, {
                            [N.disabled]: l
                        }),
                        children: (0, a.jsxs)(o.Clickable, {
                            onClick: l ? void 0 : function() {
                                s(I.DEFAULT_ROLE_COLOR)
                            },
                            "aria-disabled": l,
                            ...O,
                            children: [(0, a.jsx)("div", {
                                className: N.swatch,
                                style: {
                                    backgroundColor: (0, r.int2hex)(I.DEFAULT_ROLE_COLOR)
                                },
                                children: A ? m : null
                            }), (0, a.jsx)(o.Text, {
                                className: N.swatchDescription,
                                color: "header-secondary",
                                variant: "text-xs/normal",
                                "aria-hidden": !0,
                                children: S.default.Messages.USER_SETTINGS_PROFILE_COLOR_DEFAULT
                            })]
                        })
                    }), (0, a.jsxs)("div", {
                        className: i(N.colorSwatch, {
                            [N.disabled]: l
                        }),
                        children: [(0, a.jsxs)(o.Clickable, {
                            onClick: l ? void 0 : c,
                            "aria-disabled": l,
                            ...h,
                            children: [(0, a.jsx)("div", {
                                className: i(N.customSwatch, {
                                    [N.defaultSwatch]: L === I.DEFAULT_ROLE_COLOR
                                }),
                                style: {
                                    "--custom-color": (0, r.int2hex)(L)
                                },
                                children: A ? null : m
                            }), (0, a.jsx)(o.Text, {
                                className: N.swatchDescription,
                                color: "header-secondary",
                                variant: "text-xs/normal",
                                "aria-hidden": !0,
                                children: S.default.Messages.USER_SETTINGS_PROFILE_COLOR_CUSTOM
                            })]
                        }), !l && (0, a.jsx)(o.Popout, {
                            onRequestOpen: c,
                            renderPopout: e => (0, a.jsx)(E.CustomColorPicker, {
                                ...e,
                                value: t,
                                onChange: f
                            }),
                            children: e => (0, a.jsx)(o.Clickable, {
                                ...e,
                                className: N.dropperIconButton,
                                "aria-label": S.default.Messages.USER_SETTINGS_PROFILE_COLOR_SELECT_COLOR,
                                children: (0, a.jsx)(T.default, {
                                    className: N.dropperIcon,
                                    width: 14,
                                    height: 14,
                                    color: g(L)
                                })
                            })
                        })]
                    })]
                })
            }

            function L(e) {
                let t, {
                        value: s,
                        onChange: n,
                        disabled: l = !1
                    } = e,
                    {
                        ref: i,
                        width: r
                    } = (0, d.default)();
                return t = null == r || r < 440 ? (0, a.jsx)(A, {
                    value: s,
                    onChange: n,
                    disabled: l
                }) : (0, a.jsx)(f, {
                    defaultColor: I.DEFAULT_ROLE_COLOR,
                    colors: I.ROLE_COLORS,
                    value: s,
                    onChange: n,
                    disabled: l
                }), (0, a.jsx)("div", {
                    ref: i,
                    children: t
                })
            }
        },
        341778: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return N
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("769846"),
                o = s("77078"),
                d = s("405645"),
                u = s("608684"),
                c = s("818643"),
                E = s("483093"),
                _ = s("159885"),
                T = s("782340"),
                I = s("356072");
            let S = (0, _.cssValueToNumber)(r.default.ROLE_ICON_UPLOADER_ICON_SIZE);

            function N(e) {
                let {
                    role: t,
                    "aria-label": s = T.default.Messages.UPLOAD_IMAGE,
                    className: l,
                    onClick: r,
                    disabled: _ = !1
                } = e, N = n.useRef(null), f = n.useMemo(() => null != t ? (0, d.getRoleIconProps)(t, S) : null, [t]), g = null != f ? (0, a.jsx)(E.default, {
                    enableTooltip: !1,
                    className: I.icon,
                    ...f
                }) : (0, a.jsx)(c.default, {
                    className: I.icon
                });
                return (0, a.jsx)(o.FocusRing, {
                    ringTarget: N,
                    children: (0, a.jsxs)(o.Clickable, {
                        "aria-label": s,
                        className: i(I.container, l, {
                            [I.disabled]: _
                        }),
                        onClick: _ ? void 0 : r,
                        "aria-disabled": _,
                        children: [(0, a.jsx)("div", {
                            ref: N,
                            className: I.preview,
                            children: g
                        }), null != f ? (0, a.jsx)(u.ImageUploaderIcon, {
                            className: I.uploaderIcon
                        }) : null]
                    })
                })
            }
        },
        988449: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                TabBarSection: function() {
                    return a
                },
                useTabBarState: function() {
                    return o
                },
                TabBarContextProvider: function() {
                    return d
                }
            }), s("70102"), s("222007");
            var a, n, l = s("37983"),
                i = s("884691");
            (n = a || (a = {}))[n.BASIC_INFO = 0] = "BASIC_INFO", n[n.TIERS = 1] = "TIERS", n[n.PAYMENT = 2] = "PAYMENT", n[n.EMOJIS = 3] = "EMOJIS";
            let r = i.createContext({
                currentTab: 0,
                setCurrentTab: () => {
                    throw Error("useTabBarState must be used within TabBarContextProvider")
                }
            });

            function o() {
                return i.useContext(r)
            }

            function d(e) {
                let {
                    initialTab: t,
                    children: s
                } = e, [a, n] = i.useState(t);
                return (0, l.jsx)(r.Provider, {
                    value: {
                        currentTab: a,
                        setCurrentTab: n
                    },
                    children: s
                })
            }
        },
        172589: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return D
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("627445"),
                o = s.n(r),
                d = s("446674"),
                u = s("77078"),
                c = s("449918"),
                E = s("191814"),
                _ = s("987772"),
                T = s("956089"),
                I = s("153160"),
                S = s("577357"),
                N = s("837008"),
                f = s("648825"),
                g = s("757715"),
                A = s("406876"),
                L = s("167109"),
                m = s("110498"),
                C = s("21501"),
                O = s("49111"),
                h = s("782340"),
                R = s("332227");

            function D(e) {
                var t, s;
                let {
                    guildId: l,
                    initialEditStateId: r,
                    allSubscriptionListings: D,
                    priceTiers: M,
                    onDeleteEditState: G,
                    groupListingId: x,
                    onBeforeDispatchNewListing: p,
                    onAfterDispatchNewListing: U
                } = e, [v, j] = n.useState(r), P = (0, d.useStateFromStores)([f.default], () => f.default.getSubscriptionListing(v)), y = null == P, [b, B] = n.useState(y), F = null == P ? void 0 : P.subscription_plans[0], H = null !== (t = null == P ? void 0 : P.published) && void 0 !== t && t, V = null !== (s = null == P ? void 0 : P.archived) && void 0 !== s && s, k = (0, g.useRoleSubscriptionSettingsDisabled)(), [w] = L.useName(v), [Y] = L.usePriceTier(v), [K] = L.useDescription(v), [W] = L.useImage(v, 1024), z = "" !== w ? w : h.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INITIAL_TIER_NAME, X = "" !== w && null != W && "" !== K && null != Y && !k, Z = L.useHasChanges(v), {
                    loading: J,
                    error: Q,
                    handleCreateOrUpdateFromEditState: q
                } = L.useCreateOrUpdateListingFromEditState(), {
                    submitting: $,
                    error: ee,
                    publishSubscriptionListing: et
                } = (0, N.usePublishSubscriptionListing)(), es = J || $;
                return (0, a.jsxs)("div", {
                    className: R.container,
                    children: [(0, a.jsxs)("div", {
                        className: i(R.header, {
                            [R.headerExpanded]: b
                        }),
                        children: [(0, a.jsx)("div", {
                            className: R.headerImageContainer,
                            children: null == W ? (0, a.jsx)(m.default, {
                                className: R.starIcon,
                                "aria-hidden": !0
                            }) : (0, a.jsx)("img", {
                                className: R.headerImage,
                                src: W,
                                alt: z
                            })
                        }), (0, a.jsxs)("div", {
                            className: R.headerListingInfo,
                            children: [(0, a.jsx)(u.Text, {
                                variant: "text-md/medium",
                                color: "interactive-active",
                                children: z
                            }), (0, a.jsx)(E.default, {
                                size: 2
                            }), (0, a.jsxs)("div", {
                                className: R.headerDescriptionContainer,
                                children: [!V && !H && void 0 !== P && (0, a.jsx)(T.TextBadge, {
                                    color: (0, c.getColor)(O.Color.YELLOW_300),
                                    text: h.default.Messages.GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_DRAFT_LABEL,
                                    className: R.draftBadge
                                }), V && (0, a.jsx)(T.TextBadge, {
                                    color: (0, c.getColor)(O.Color.PRIMARY_500),
                                    text: h.default.Messages.GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_ARCHIVED_LABEL,
                                    className: R.archivedBadge
                                }), void 0 === P && (0, a.jsx)(T.TextBadge, {
                                    color: (0, c.getColor)(O.Color.PRIMARY_500),
                                    text: h.default.Messages.GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_UNSAVED_LABEL,
                                    className: R.unsavedBadge
                                }), null != F && (0, a.jsxs)(u.Text, {
                                    color: "interactive-normal",
                                    variant: "text-sm/normal",
                                    children: [(0, I.formatPrice)(F.price, F.currency), "/", (0, S.formatPlanInterval)(F)]
                                })]
                            })]
                        }), b ? (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(u.Button, {
                                look: u.Button.Looks.BLANK,
                                className: R.cancel,
                                onClick: () => {
                                    L.clearEditState(v), y ? null == G || G() : B(!1)
                                },
                                children: h.default.Messages.CANCEL
                            }), (0, a.jsx)(u.Button, {
                                onClick: () => q({
                                    guildId: l,
                                    editStateId: v,
                                    groupListingId: x,
                                    onBeforeDispatchNewListing: p,
                                    onAfterDispatchNewListing: e => {
                                        j(e.id), null == U || U(e)
                                    }
                                }),
                                disabled: !X || !Z,
                                className: R.autoWidth,
                                submitting: es,
                                children: h.default.Messages.SAVE
                            })]
                        }) : (0, a.jsx)(u.Clickable, {
                            onClick: () => B(!0),
                            "aria-label": h.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_EDIT_LABEL,
                            children: (0, a.jsx)(_.default, {
                                className: R.pencilIcon
                            })
                        })]
                    }), b && (0, a.jsx)(A.EditStateContextProvider, {
                        editStateId: v,
                        guildId: l,
                        groupListingId: x,
                        children: (0, a.jsx)(C.default, {
                            allSubscriptionListings: D,
                            priceTiers: M,
                            loading: es,
                            error: null != Q ? Q : ee,
                            handlePublishTier: () => {
                                o(null != x, "group listing doesnt exist"), o(null != P, "subscription listing doesnt exist"), et({
                                    guildId: l,
                                    groupListingId: x,
                                    listingId: P.id
                                })
                            },
                            onDeleteEditState: G
                        })
                    })]
                })
            }
        },
        21501: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return L
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("648825"),
                u = s("757715"),
                c = s("406876"),
                E = s("395905"),
                _ = s("700495"),
                T = s("903152"),
                I = s("851088"),
                S = s("385881"),
                N = s("253414"),
                f = s("782340"),
                g = s("332227"),
                A = s("888512");

            function L(e) {
                var t, s;
                let {
                    allSubscriptionListings: l,
                    priceTiers: L,
                    loading: m,
                    error: C,
                    handlePublishTier: O,
                    onDeleteEditState: h
                } = e, {
                    editStateId: R
                } = (0, c.useEditStateContext)(), D = (0, r.useStateFromStores)([d.default], () => d.default.getSubscriptionListing(R)), M = (0, u.useRoleSubscriptionSettingsDisabled)(), G = n.useMemo(() => {
                    let e = l.filter(e => e.id !== R).map(e => {
                        var t;
                        return null === (t = e.subscription_plans[0]) || void 0 === t ? void 0 : t.price
                    });
                    return null == L ? void 0 : L.filter(t => !e.includes(t))
                }, [l, R, L]), x = null == D, p = null !== (t = null == D ? void 0 : D.published) && void 0 !== t && t, U = null !== (s = null == D ? void 0 : D.archived) && void 0 !== s && s;
                return (0, a.jsxs)("div", {
                    className: A.body,
                    children: [null != C && (0, a.jsx)(E.default, {
                        children: C.getAnyErrorMessage()
                    }), !p && !M && !U && (0, a.jsxs)("div", {
                        className: A.publishListing,
                        children: [(0, a.jsxs)("div", {
                            children: [(0, a.jsx)(o.Heading, {
                                variant: "heading-md/semibold",
                                className: A.publishListingInfoHeader,
                                children: f.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DRAFT_BANNER_TITLE
                            }), (0, a.jsx)(o.FormText, {
                                type: o.FormText.Types.DESCRIPTION,
                                children: f.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DRAFT_BANNER_DESCRIPTION
                            })]
                        }), (0, a.jsx)(o.Tooltip, {
                            shouldShow: x,
                            tooltipClassName: g.autoWidth,
                            text: f.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SAVE_BEFORE_PUBLISH_TOOLTIP,
                            children: e => (0, a.jsx)(o.Button, {
                                ...e,
                                disabled: x,
                                color: o.Button.Colors.CUSTOM,
                                wrapperClassName: g.autoWidth,
                                className: i(A.publishButton, g.autoWidth),
                                onClick: O,
                                submitting: m,
                                children: f.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_EDIT_PUBLISH_DRAFT_CTA
                            })
                        })]
                    }), (0, a.jsx)(T.default, {
                        priceTiers: G
                    }), (0, a.jsx)(I.default, {
                        allSubscriptionListings: l
                    }), (0, a.jsx)(S.default, {}), (0, a.jsx)(N.default, {}), (0, a.jsx)(_.default, {
                        onDeleteEditState: h
                    })]
                })
            }
        },
        700495: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return f
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("627445"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("837008"),
                u = s("648825"),
                c = s("757715"),
                E = s("406876"),
                _ = s("795228"),
                T = s("561205"),
                I = s("782340"),
                S = s("332227"),
                N = s("754433");

            function f(e) {
                var t;
                let {
                    onDeleteEditState: l
                } = e, {
                    editStateId: f,
                    guildId: g,
                    groupListingId: A
                } = (0, E.useEditStateContext)(), L = (0, r.useStateFromStores)([u.default], () => u.default.getSubscriptionListing(f)), m = null == L ? void 0 : L.id, C = (0, _.default)(g), O = n.useMemo(() => {
                    var e;
                    return null != C && null != L && (null !== (e = C[L.role_id]) && void 0 !== e ? e : 0)
                }, [C, L]), h = 0 === O, R = null == m, D = null !== (t = null == L ? void 0 : L.archived) && void 0 !== t && t, {
                    deleteSubscriptionListing: M,
                    submitting: G
                } = (0, d.useDeleteSubscriptionListing)(), {
                    archiveSubscriptionListing: x,
                    submitting: p
                } = (0, d.useArchiveSubscriptionListing)(), U = () => {
                    let e = async () => {
                        if (!R) {
                            i(null != A, "group listing doesnt exist"), i(null != m, "subscription listing doesnt exist");
                            let e = await M(g, A, m);
                            if (!e) return
                        }
                        null == l || l()
                    };
                    (0, o.openModalLazy)(async () => {
                        let {
                            ConfirmModal: t
                        } = await s.el("77078").then(s.bind(s, "77078"));
                        return s => (0, a.jsx)(t, {
                            header: I.default.Messages.DEFAULT_CONFIRMATION_MODAL_HEADER,
                            confirmText: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_BUTTON,
                            cancelText: I.default.Messages.CANCEL,
                            onConfirm: () => {
                                e()
                            },
                            confirmButtonColor: o.Button.Colors.RED,
                            ...s,
                            children: (0, a.jsx)(o.Text, {
                                variant: "text-md/normal",
                                children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_DESCRIPTION
                            })
                        })
                    })
                }, v = (0, c.useRoleSubscriptionSettingsDisabled)();
                return null == L ? null : (0, a.jsx)(T.default, {
                    title: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ADVANCE_SECTION_TITLE,
                    children: D ? (0, a.jsxs)(o.FormSection, {
                        title: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_LABEL,
                        disabled: v,
                        children: [(0, a.jsx)(o.FormText, {
                            type: o.FormText.Types.DESCRIPTION,
                            className: S.formDescription,
                            disabled: v,
                            children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_DESCRIPTION
                        }), (0, a.jsx)(o.Tooltip, {
                            shouldShow: !h,
                            text: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_TOOLTIP.format({
                                listingMemberCount: O
                            }),
                            children: e => (0, a.jsx)(o.Button, {
                                ...e,
                                wrapperClassName: N.deleteListingButton,
                                color: o.Button.Colors.RED,
                                onClick: U,
                                submitting: G,
                                disabled: v || !h,
                                children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_BUTTON
                            })
                        })]
                    }) : (0, a.jsxs)(o.FormSection, {
                        title: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_LABEL,
                        disabled: v,
                        children: [(0, a.jsx)(o.FormText, {
                            type: o.FormText.Types.DESCRIPTION,
                            className: S.formDescription,
                            disabled: v,
                            children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_DESCRIPTION
                        }), (0, a.jsx)(o.Button, {
                            wrapperClassName: N.deleteListingButton,
                            color: o.Button.Colors.RED,
                            onClick: () => {
                                i(null != A, "group listing doesnt exist"), i(null != m, "subscription listing doesnt exist"), (0, o.openModalLazy)(async () => {
                                    let {
                                        ConfirmModal: e
                                    } = await s.el("77078").then(s.bind(s, "77078"));
                                    return t => (0, a.jsx)(e, {
                                        header: I.default.Messages.DEFAULT_CONFIRMATION_MODAL_HEADER,
                                        confirmText: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_BUTTON,
                                        cancelText: I.default.Messages.CANCEL,
                                        onConfirm: () => {
                                            x(g, A, m)
                                        },
                                        confirmButtonColor: o.Button.Colors.RED,
                                        ...t,
                                        children: (0, a.jsx)(o.Text, {
                                            variant: "text-md/normal",
                                            children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_DESCRIPTION
                                        })
                                    })
                                })
                            },
                            submitting: p,
                            disabled: v,
                            children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_BUTTON
                        })]
                    })
                })
            }
        },
        903152: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return m
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("608684"),
                o = s("191814"),
                d = s("476765"),
                u = s("950603"),
                c = s("153160"),
                E = s("648825"),
                _ = s("757715"),
                T = s("406876"),
                I = s("167109"),
                S = s("620199"),
                N = s("561205"),
                f = s("49111"),
                g = s("782340"),
                A = s("332227"),
                L = s("78185");

            function m(e) {
                let {
                    priceTiers: t
                } = e, {
                    editStateId: s
                } = (0, T.useEditStateContext)(), m = (0, l.useStateFromStores)([E.default], () => {
                    var e;
                    return null === (e = E.default.getSubscriptionListing(s)) || void 0 === e ? void 0 : e.image_asset
                }), [C, O] = I.useName(s), [h, R] = I.usePriceTier(s), [D, M] = I.useDescription(s), [G, x] = I.useImage(s, 1024), {
                    imageCTA: p,
                    imageAriaLabel: U,
                    setFilename: v
                } = (0, S.default)(m), j = n.useMemo(() => {
                    var e;
                    return null !== (e = null == t ? void 0 : t.map(e => ({
                        value: e,
                        label: (0, c.formatPrice)(e, f.CurrencyCodes.USD)
                    }))) && void 0 !== e ? e : []
                }, [t]);

                function P(e, t) {
                    null != t && v(t.name), x(e)
                }
                let y = (0, _.useRoleSubscriptionSettingsDisabled)(),
                    b = (0, d.useUID)(),
                    B = (0, d.useUID)(),
                    F = (0, d.useUID)();
                return (0, a.jsxs)(N.default, {
                    title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BASIC_INFO_SECTION_TITLE,
                    intiallyExpanded: !0,
                    children: [(0, a.jsxs)("div", {
                        className: L.formSplit,
                        children: [(0, a.jsx)("div", {
                            className: L.formSplitHalf,
                            children: (0, a.jsx)(i.FormSection, {
                                title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_NAME_TITLE,
                                titleId: b,
                                disabled: y,
                                children: (0, a.jsx)(i.TextInput, {
                                    placeholder: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_NAME_PLACEHOLDER,
                                    value: C,
                                    inputClassName: A.formInput,
                                    onChange: O,
                                    "aria-labelledby": b,
                                    disabled: y
                                })
                            })
                        }), (0, a.jsx)("div", {
                            className: L.formSplitHalf,
                            children: (0, a.jsx)(i.FormSection, {
                                title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_PRICE_TITLE,
                                titleId: B,
                                disabled: y,
                                children: (0, a.jsx)(i.SingleSelect, {
                                    options: j,
                                    className: A.formInput,
                                    isDisabled: y || null == t,
                                    placeholder: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_PRICE_PLACEHOLDER,
                                    value: h,
                                    onChange: R,
                                    maxVisibleItems: 5,
                                    look: i.SelectLooks.CUSTOM,
                                    "aria-labelledby": B
                                })
                            })
                        })]
                    }), (0, a.jsx)(o.default, {
                        size: 24
                    }), (0, a.jsx)(i.FormSection, {
                        title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DESCRIPTION_TITLE,
                        titleId: F,
                        disabled: y,
                        children: (0, a.jsx)(i.TextArea, {
                            placeholder: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DESCRIPTION_PLACEHOLDER,
                            value: D,
                            rows: 2,
                            autosize: !0,
                            className: A.formInput,
                            onChange: M,
                            "aria-labelledby": F,
                            disabled: y
                        })
                    }), (0, a.jsx)(o.default, {
                        size: 24
                    }), (0, a.jsxs)("div", {
                        className: L.iconSection,
                        children: [(0, a.jsxs)(i.FormSection, {
                            title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SYMBOL_TITLE,
                            className: L.iconSectionDescription,
                            disabled: y,
                            children: [(0, a.jsx)(i.FormText, {
                                type: i.FormText.Types.DESCRIPTION,
                                className: A.formDescription,
                                disabled: y,
                                children: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SYMBOL_DESCRIPTION
                            }), (0, a.jsx)(u.default, {
                                onChange: P,
                                buttonCTA: p,
                                "aria-label": U,
                                disabled: y,
                                look: i.Button.Looks.OUTLINED,
                                color: i.Button.Colors.PRIMARY
                            })]
                        }), (0, a.jsx)(r.default, {
                            image: G,
                            hint: p,
                            showIcon: !0,
                            showRemoveButton: !1,
                            hideSize: !0,
                            className: L.iconUploader,
                            imageClassName: L.tierSymbolUploaderInner,
                            onChange: P,
                            "aria-label": U,
                            disabled: y
                        })]
                    })]
                })
            }
        },
        104967: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            }), s("222007");
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("406876"),
                i = s("971150"),
                r = s("167109"),
                o = s("894429"),
                d = s("981737"),
                u = s("782340"),
                c = s("332227");

            function E(e) {
                let {
                    "aria-labelledby": t,
                    disabled: s = !1
                } = e, {
                    editStateId: E,
                    guildId: _
                } = (0, l.useEditStateContext)(), [T, I] = r.useChannelAccessFormat(E, _);
                return (0, a.jsx)(n.RadioGroup, {
                    className: c.channelAccessSelect,
                    radioItemClassName: c.channelAccessSelectRadioButton,
                    withTransparentBackground: !0,
                    size: n.RadioGroup.Sizes.NOT_SET,
                    onChange: e => {
                        let {
                            value: t
                        } = e;
                        return I(t)
                    },
                    options: [{
                        name: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_SELECT_CHANNELS_MANUALLY_LABEL,
                        value: i.AllChannelAccessOptions.SOME_CHANNELS_ACCESS,
                        icon: d.default,
                        radioBarClassName: c.channelAccessSelectRadioBar
                    }, {
                        name: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_INCLUDE_ALL_CHANNELS_LABEL,
                        value: i.AllChannelAccessOptions.ALL_CHANNELS_ACCESS,
                        icon: o.default,
                        radioBarClassName: c.channelAccessSelectRadioBar
                    }],
                    value: T,
                    "aria-labelledby": t,
                    disabled: s
                })
            }
        },
        677847: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return T
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078");
            s("465869");
            var i = s("191814"),
                r = s("757715"),
                o = s("406876"),
                d = s("167109"),
                u = s("989210"),
                c = s("363966"),
                E = s("677795"),
                _ = s("782340");

            function T() {
                let {
                    editStateId: e,
                    guildId: t
                } = (0, o.useEditStateContext)(), [s, T] = d.useChannelBenefits(e), I = n.useMemo(() => new Set(s.map(e => e.ref_id)), [s]);

                function S(e, t) {
                    let {
                        channelId: a,
                        description: n,
                        emojiId: l,
                        emojiName: i
                    } = e, r = [...s], o = {
                        name: "",
                        description: n,
                        emoji_id: l,
                        emoji_name: i,
                        ref_type: E.GuildRoleSubscriptionBenefitTypes.CHANNEL,
                        ref_id: a
                    };
                    null != t ? r[t] = o : r.push(o), T(r)
                }
                let N = (0, r.useRoleSubscriptionSettingsDisabled)();
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(c.EditableBenefitsList, {
                        benefits: s,
                        onEdit: function(e) {
                            (0, l.openModal)(n => (0, a.jsx)(u.EditChannelBenefitModal, {
                                ...n,
                                guildId: t,
                                omitChannelIds: I,
                                initialData: s[e],
                                onSave: t => S(t, e),
                                onDelete: () => (function(e) {
                                    let t = [...s];
                                    t.splice(e, 1), T(t)
                                })(e)
                            }))
                        },
                        onMove: function(e, t) {
                            let a = [...s],
                                [n] = a.splice(e, 1);
                            a.splice(t, 0, n), T(a)
                        },
                        guildId: t
                    }), s.length > 0 && (0, a.jsx)(i.default, {
                        size: 8
                    }), (0, a.jsx)(c.AddBenefitCard, {
                        onClick: function() {
                            (0, l.openModal)(e => (0, a.jsx)(u.EditChannelBenefitModal, {
                                ...e,
                                guildId: t,
                                omitChannelIds: I,
                                onSave: e => S(e)
                            }))
                        },
                        disabled: N,
                        children: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_ADD_BUTTON_TEXT
                    })]
                })
            }
        },
        851088: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return L
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("191814"),
                r = s("476765"),
                o = s("757715"),
                d = s("406876"),
                u = s("167109"),
                c = s("7370"),
                E = s("561205"),
                _ = s("958671"),
                T = s("104967"),
                I = s("677847"),
                S = s("88681"),
                N = s("798204"),
                f = s("677795"),
                g = s("782340"),
                A = s("332227");

            function L(e) {
                let {
                    allSubscriptionListings: t
                } = e, {
                    editStateId: s,
                    guildId: L
                } = (0, d.useEditStateContext)(), [m, C] = u.useChannelBenefits(s), [O, h] = u.useIntangibleBenefits(s), R = n.useMemo(() => t.filter(e => e.id !== s), [t, s]), {
                    isFullServerGating: D
                } = (0, c.default)(L), M = (0, r.useUID)(), G = (0, o.useRoleSubscriptionSettingsDisabled)();
                return (0, a.jsxs)(E.default, {
                    title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BENEFITS_HEADER_TITLE,
                    description: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BENEFITS_HEADER_SUBTITLE,
                    children: [(0, a.jsxs)(l.FormSection, {
                        title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_HEADER_TITLE,
                        disabled: G,
                        children: [(0, a.jsx)(l.FormText, {
                            type: l.FormText.Types.DESCRIPTION,
                            className: A.formDescription,
                            disabled: G,
                            children: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_HEADER_SUBTITLE
                        }), (0, a.jsx)(_.default, {
                            channelBenefits: m,
                            intangibleBenefits: O,
                            subscriptionListings: R,
                            onImport: function(e, t) {
                                C(t => t.concat(e)), h(e => e.concat(t))
                            }
                        }), (0, a.jsx)(i.default, {
                            size: 8
                        }), (0, a.jsx)(_.ImportRoleCard, {
                            guildId: L,
                            onImport: function(e) {
                                C(t => {
                                    let s = new Set(t.map(e => {
                                            let {
                                                ref_id: t
                                            } = e;
                                            return t
                                        })),
                                        a = e.filter(e => !s.has(e)).map(e => ({
                                            ref_id: e,
                                            ref_type: f.GuildRoleSubscriptionBenefitTypes.CHANNEL
                                        }));
                                    return [...t, ...a]
                                })
                            },
                            disabled: G
                        })]
                    }), (0, a.jsx)(i.default, {
                        size: 24
                    }), (0, a.jsxs)(l.FormSection, {
                        title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_CHANNELS_TITLE,
                        titleId: M,
                        disabled: G,
                        children: [(0, a.jsx)(l.FormText, {
                            type: l.FormText.Types.DESCRIPTION,
                            className: A.formDescription,
                            disabled: G,
                            children: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_CHANNELS_DESCRIPTION
                        }), D && (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(T.default, {
                                "aria-labelledby": M,
                                disabled: G
                            }), (0, a.jsx)(i.default, {
                                size: 8
                            })]
                        }), (0, a.jsx)(I.default, {})]
                    }), (0, a.jsx)(i.default, {
                        size: 24
                    }), (0, a.jsxs)(l.FormSection, {
                        title: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_TITLE,
                        disabled: G,
                        children: [(0, a.jsx)(l.FormText, {
                            type: l.FormText.Types.DESCRIPTION,
                            className: A.formDescription,
                            disabled: G,
                            children: g.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_DESCRIPTION
                        }), (0, a.jsx)(N.default, {})]
                    }), (0, a.jsx)(i.default, {
                        size: 24
                    }), (0, a.jsx)(S.default, {})]
                })
            }
        },
        88681: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return N
                }
            }), s("222007");
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("305961"),
                r = s("191814"),
                o = s("757715"),
                d = s("406876"),
                u = s("167109"),
                c = s("549590"),
                E = s("363966"),
                _ = s("851015"),
                T = s("988449"),
                I = s("782340"),
                S = s("332227");

            function N() {
                let {
                    editStateId: e,
                    guildId: t
                } = (0, d.useEditStateContext)(), [N, f] = u.useTierEmojiIds(e, t), g = (0, c.default)(t, e), {
                    setCurrentTab: A
                } = (0, T.useTabBarState)(), L = () => A(T.TabBarSection.EMOJIS), m = (0, n.useStateFromStores)([i.default], () => i.default.getGuild(t)), C = null == m ? void 0 : m.getMaxRoleSubscriptionEmojiSlots();

                function O(e) {
                    null == N ? f(new Set(e)) : f(new Set([...N, ...e]))
                }

                function h(e) {
                    let t = new Set(N);
                    t.delete(e), f(t)
                }
                let R = (0, o.useRoleSubscriptionSettingsDisabled)();
                return (0, a.jsxs)(l.FormSection, {
                    title: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_TITLE,
                    disabled: R,
                    children: [(0, a.jsxs)(l.FormText, {
                        type: l.FormText.Types.DESCRIPTION,
                        className: S.formDescription,
                        disabled: R,
                        children: [I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_DESCRIPTION.format({
                            premiumEmojiMaximum: C
                        }), (0, a.jsx)("br", {}), I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_MANAGE_LINK.format({
                            handleTransitionToManageEmoji: L
                        })]
                    }), (0, a.jsx)(_.EmojiList, {
                        tierEmojiIds: N,
                        guildId: t,
                        onRemoveEmoji: function(e) {
                            let t = e.roles.filter(e => e !== (null == g ? void 0 : g.id));
                            t.length > 0 ? h(e.id) : (0, l.openModalLazy)(async () => {
                                let {
                                    default: t
                                } = await s.el("140092").then(s.bind(s, "140092"));
                                return s => (0, a.jsx)(t, {
                                    ...s,
                                    onConfirmDelete: () => {
                                        h(e.id), s.onClose()
                                    }
                                })
                            })
                        }
                    }), null != N && N.size > 0 ? (0, a.jsx)(r.default, {
                        size: 8
                    }) : null, (0, a.jsx)(E.AddBenefitCard, {
                        onClick: function() {
                            (0, l.openModalLazy)(async () => {
                                let {
                                    EmojiAddModal: e
                                } = await s.el("500716").then(s.bind(s, "500716"));
                                return s => (0, a.jsx)(e, {
                                    ...s,
                                    guildId: t,
                                    initialTierEmojiIds: N,
                                    onSubmit: O,
                                    transitionToManageEmoji: () => {
                                        L(), s.onClose()
                                    }
                                })
                            })
                        },
                        disabled: R,
                        children: I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_ADD_BUTTON_TEXT
                    })]
                })
            }
        },
        798204: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            }), s("222007"), s("424973");
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("191814"),
                i = s("757715"),
                r = s("406876"),
                o = s("167109"),
                d = s("989210"),
                u = s("363966"),
                c = s("677795"),
                E = s("782340");

            function _() {
                let {
                    editStateId: e,
                    guildId: t
                } = (0, r.useEditStateContext)(), [s, _] = o.useIntangibleBenefits(e);

                function T(e, t) {
                    let {
                        name: a,
                        description: n,
                        emojiId: l,
                        emojiName: i
                    } = e, r = [...s], o = {
                        name: a,
                        description: n,
                        emoji_id: l,
                        emoji_name: i,
                        ref_type: c.GuildRoleSubscriptionBenefitTypes.INTANGIBLE,
                        ref_id: void 0
                    };
                    null != t ? r[t] = o : r.push(o), _(r)
                }
                let I = (0, i.useRoleSubscriptionSettingsDisabled)();
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(u.EditableBenefitsList, {
                        benefits: s,
                        onEdit: function(e) {
                            (0, n.openModal)(n => (0, a.jsx)(d.EditIntangibleBenefitModal, {
                                ...n,
                                guildId: t,
                                initialData: s[e],
                                onSave: t => T(t, e),
                                onDelete: () => (function(e) {
                                    let t = [...s];
                                    t.splice(e, 1), _(t)
                                })(e)
                            }))
                        },
                        onMove: function(e, t) {
                            let a = [...s],
                                [n] = a.splice(e, 1);
                            a.splice(t, 0, n), _(a)
                        },
                        guildId: t
                    }), s.length > 0 ? (0, a.jsx)(l.default, {
                        size: 8
                    }) : null, (0, a.jsx)(u.AddBenefitCard, {
                        onClick: function() {
                            (0, n.openModal)(e => (0, a.jsx)(d.EditIntangibleBenefitModal, {
                                ...e,
                                guildId: t,
                                onSave: e => T(e)
                            }))
                        },
                        disabled: I,
                        children: E.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_ADD_BUTTON_TEXT
                    })]
                })
            }
        },
        385881: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return g
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("627445"),
                i = s.n(l),
                r = s("77078"),
                o = s("191814"),
                d = s("476765"),
                u = s("837008"),
                c = s("757715"),
                E = s("406876"),
                _ = s("167109"),
                T = s("979778"),
                I = s("59767"),
                S = s("561205"),
                N = s("782340"),
                f = s("332227");

            function g() {
                var e;
                let {
                    editStateId: t
                } = (0, E.useEditStateContext)(), [s, l] = _.useTrialInterval(t), [g, A] = _.useTrialLimit(t), L = (0, u.useSubscriptionTrial)(t), {
                    options: m
                } = (0, I.default)(null !== (e = null == L ? void 0 : L.active_trial) && void 0 !== e ? e : null), C = (0, T.default)(), O = null != s, h = n.useCallback(e => {
                    let t = m.find(e => e.isDefault);
                    i(null != t, "Missing default trial duartion option"), l(e ? t.value : null)
                }, [l, m]), R = (0, c.useRoleSubscriptionSettingsDisabled)(), D = (0, d.useUID)(), M = (0, d.useUID)();
                return (0, a.jsxs)(S.default, {
                    title: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TITLE,
                    description: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_DESCRIPTION,
                    children: [(0, a.jsx)(r.FormSwitch, {
                        onChange: (e, t) => h(e),
                        value: O,
                        disabled: R,
                        hideBorder: !0,
                        children: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_ENABLE_FREE_TRIAL_CTA
                    }), (0, a.jsxs)(r.FormSection, {
                        title: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TIME_LIMIT_TITLE,
                        titleId: D,
                        disabled: !O || R,
                        children: [(0, a.jsx)(r.FormText, {
                            type: r.FormText.Types.DESCRIPTION,
                            className: f.formDescription,
                            disabled: !O || R,
                            children: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TIME_LIMIT_DESCRIPTION
                        }), (0, a.jsx)(o.default, {
                            size: 8
                        }), (0, a.jsx)(r.SingleSelect, {
                            "aria-labelledby": D,
                            options: m,
                            className: f.formInput,
                            placeholder: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_DISABLED,
                            value: s,
                            onChange: l,
                            maxVisibleItems: 5,
                            isDisabled: !O || R,
                            look: r.SelectLooks.CUSTOM
                        })]
                    }), (0, a.jsx)(o.default, {
                        size: 24
                    }), (0, a.jsxs)(r.FormSection, {
                        title: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_TITLE,
                        titleId: M,
                        disabled: !O || R,
                        children: [(0, a.jsx)(r.FormText, {
                            type: r.FormText.Types.DESCRIPTION,
                            className: f.formDescription,
                            disabled: !O || R,
                            children: N.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_DESCRIPTION
                        }), (0, a.jsx)(r.SingleSelect, {
                            "aria-labelledby": M,
                            options: C,
                            className: f.formInput,
                            value: g,
                            onChange: A,
                            maxVisibleItems: 5,
                            isDisabled: !O || R,
                            look: r.SelectLooks.CUSTOM
                        })]
                    })]
                })
            }
        },
        253414: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return S
                }
            }), s("222007");
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("191814"),
                i = s("757715"),
                r = s("406876"),
                o = s("167109"),
                d = s("561205"),
                u = s("246506"),
                c = s("301289"),
                E = s("341778"),
                _ = s("782340"),
                T = s("332227"),
                I = s("780425");

            function S() {
                let {
                    editStateId: e,
                    guildId: t
                } = (0, r.useEditStateContext)(), [, S] = o.useRoleIcon(e, t), [N, f] = o.useRoleColor(e, t), g = o.useRole(e, t);

                function A() {
                    (0, n.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("64567").then(s.bind(s, "64567"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guildId: t,
                            onUploadIcon: e => S({
                                icon: e,
                                unicodeEmoji: null
                            }),
                            onSelectUnicodeEmoji: e => S({
                                icon: null,
                                unicodeEmoji: e
                            })
                        })
                    })
                }
                let L = (0, i.useRoleSubscriptionSettingsDisabled)();
                return (0, a.jsxs)(d.default, {
                    title: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_FLAIR_HEADER_TITLE,
                    description: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_FLAIR_HEADER_SUBTITLE,
                    children: [(0, a.jsx)(n.FormSection, {
                        title: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_COLOR_TITLE,
                        disabled: L,
                        children: (0, a.jsx)(c.default, {
                            value: N,
                            onChange: f,
                            disabled: L
                        })
                    }), (0, a.jsx)(l.default, {
                        size: 24
                    }), (0, a.jsx)("div", {
                        className: T.iconSection,
                        children: (0, a.jsxs)(n.FormSection, {
                            title: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_BADGE_TITLE,
                            disabled: L,
                            children: [(0, a.jsx)(n.FormText, {
                                type: n.FormText.Types.DESCRIPTION,
                                className: T.formDescription,
                                disabled: L,
                                children: _.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_BADGE_DESCRIPTION
                            }), (0, a.jsxs)("div", {
                                className: I.iconUploaderContainer,
                                children: [(0, a.jsx)(E.default, {
                                    role: g,
                                    "aria-label": _.default.Messages.ROLE_ICON_CHOOSE_IMAGE,
                                    onClick: A,
                                    disabled: L
                                }), (0, a.jsx)(n.Button, {
                                    look: n.Button.Looks.OUTLINED,
                                    color: n.Button.Colors.PRIMARY,
                                    className: T.imageUploadButtonCTA,
                                    onClick: A,
                                    disabled: L,
                                    children: _.default.Messages.ROLE_ICON_CHOOSE_IMAGE
                                })]
                            })]
                        })
                    }), (0, a.jsx)(l.default, {
                        size: 24
                    }), (0, a.jsx)(n.FocusBlock, {
                        children: (0, a.jsxs)("div", {
                            className: I.previewContainer,
                            "aria-hidden": !0,
                            children: [(0, a.jsx)(u.default, {
                                guildId: t,
                                role: g,
                                className: I.messageContainer,
                                theme: "light"
                            }), (0, a.jsx)(u.default, {
                                guildId: t,
                                role: g,
                                className: I.messageContainer,
                                theme: "dark"
                            })]
                        })
                    })]
                })
            }
        },
        514377: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("816880"),
                r = s("527042"),
                o = s("191814"),
                d = s("950603"),
                u = s("757715"),
                c = s("608775"),
                E = s("782340");

            function _(e) {
                let {
                    guild: t
                } = e, _ = (0, n.useStateFromStores)([i.default], () => i.default.isUploadingEmoji()), T = (0, c.default)(t.id), I = t.getMaxRoleSubscriptionEmojiSlots() - T.length, S = (0, u.useRoleSubscriptionSettingsDisabled)();
                return (0, a.jsx)(a.Fragment, {
                    children: (0, a.jsxs)(l.FormSection, {
                        title: E.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_TITLE,
                        disabled: S,
                        children: [(0, a.jsx)(l.FormText, {
                            type: l.FormText.Types.DESCRIPTION,
                            disabled: S,
                            children: E.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_DESCRIPTION.format({
                                maxSlots: t.getMaxRoleSubscriptionEmojiSlots()
                            })
                        }), (0, a.jsx)(o.default, {
                            size: 16
                        }), (0, a.jsx)(d.default, {
                            onChange: (e, n) => {
                                null != e && null != n && (0, l.openModalLazy)(async () => {
                                    let {
                                        CreateEmojiWithRolesModal: l
                                    } = await s.el("777924").then(s.bind(s, "777924"));
                                    return s => (0, a.jsx)(l, {
                                        ...s,
                                        data: e,
                                        file: n,
                                        guildId: t.id
                                    })
                                })
                            },
                            buttonCTA: E.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_CTA,
                            submitting: _,
                            disabled: S || _ || 0 === I
                        }), (0, a.jsx)(o.default, {
                            size: 24
                        }), (0, a.jsx)(r.EmojiTableTitle, {
                            title: E.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_EMOJI_SECTION_TITLE,
                            maxSlots: t.getMaxRoleSubscriptionEmojiSlots(),
                            emojiCount: T.length
                        }), (0, a.jsx)(r.EmojiTable, {
                            guild: t,
                            emojis: T,
                            onEdit: (e, t) => {
                                (0, l.openModalLazy)(async () => {
                                    let {
                                        UpdateEmojiRolesModal: n
                                    } = await s.el("777924").then(s.bind(s, "777924"));
                                    return s => (0, a.jsx)(n, {
                                        ...s,
                                        emoji: e,
                                        guildId: t
                                    })
                                })
                            },
                            editingDisabled: S
                        })]
                    })
                })
            }
        },
        498030: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return n
                }
            }), s("222007");
            var a = s("476042");

            function n(e, t, s, n) {
                let [{
                    isDragging: l
                }, i, r] = (0, a.useDrag)({
                    type: t,
                    item: () => ({
                        index: s
                    }),
                    collect: e => ({
                        isDragging: e.isDragging()
                    })
                }), [, o] = (0, a.useDrop)({
                    accept: t,
                    hover(t, a) {
                        if (null == e.current) return;
                        let l = t.index;
                        if (l === s) return;
                        let i = e.current.getBoundingClientRect(),
                            r = (i.bottom - i.top) / 2,
                            o = a.getClientOffset(),
                            d = o.y - i.top;
                        if (!(l < s) || !(d < r))(!(l > s) || !(d > r)) && (n(l, s), t.index = s)
                    }
                });
                return {
                    drag: i,
                    dragPreview: r,
                    drop: o,
                    isDragging: l
                }
            }
        },
        179234: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return S
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("759843"),
                l = s("77078"),
                i = s("428958"),
                r = s("724334"),
                o = s("191814"),
                d = s("223984"),
                u = s("264742"),
                c = s("459662"),
                E = s("782340"),
                _ = s("666118"),
                T = s("419143");

            function I(e) {
                let {
                    config: t
                } = e, {
                    noticeText: s,
                    ctaLabel: n,
                    ctaClickable: i,
                    onCtaClicked: r
                } = t;
                return (0, a.jsxs)("div", {
                    className: _.ctaContainer,
                    children: [(0, a.jsx)("img", {
                        className: _.heroBanner,
                        src: T,
                        alt: E.default.Messages.GUILD_ROLE_SUBSCRIPTION_WELCOME_HERO_BANNER_ALT
                    }), (0, a.jsxs)("div", {
                        className: _.ctaContent,
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-xl/semibold",
                            color: "header-primary",
                            children: E.default.Messages.GUILD_ROLE_SUBSCRIPTION_WELCOME_DESKTOP_V2_TITLE
                        }), (0, a.jsx)(o.default, {
                            size: 12
                        }), (0, a.jsx)(l.Text, {
                            variant: "text-md/normal",
                            color: "header-secondary",
                            children: E.default.Messages.GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_SUBTITLE
                        }), (0, a.jsx)(o.default, {
                            size: 24
                        }), (0, a.jsx)(u.default, {
                            className: _.waitlist,
                            color: d.MessageBlockColors.BROWN,
                            buttonPosition: u.WarningBlockButtonPosition.RIGHT,
                            notice: s,
                            ctaLabel: n,
                            ctaDisabled: !i,
                            ctaClassName: _.waitlistCtaButton,
                            onClick: r
                        })]
                    })]
                })
            }

            function S(e) {
                let {
                    guild: t,
                    config: s
                } = e, {
                    isLoading: o,
                    error: d,
                    creatorMonetizationOnboardingMarketing: u
                } = (0, r.default)(t.id);
                return ((0, i.default)({
                    type: n.ImpressionTypes.PANE,
                    name: n.ImpressionNames.ENABLE_CREATOR_MONETIZATION_WAITLIST_LANDING,
                    properties: {
                        guild_id: t.id
                    }
                }), o) ? (0, a.jsx)(l.Spinner, {}) : (0, a.jsxs)("div", {
                    className: _.container,
                    children: [(0, a.jsx)(I, {
                        config: s
                    }), (0, a.jsx)(c.MarketingSections, {
                        onboardingMarketing: u,
                        onboardingMarketingError: d
                    })]
                })
            }
        },
        600471: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("395905"),
                l = s("264742"),
                i = s("782340");

            function r(e) {
                let t, {
                    resubmittingEnableRequest: s,
                    resubmissionError: r,
                    createEnableRequest: o,
                    requestRejectedNoticeText: d,
                    reapplyNoticeText: u,
                    isApplicationPending: c
                } = e;
                if (null != r) return (0, a.jsx)(n.default, {
                    children: r.getAnyErrorMessage()
                });
                let E = null;
                return c ? E = i.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_RECEIVED_AND_PENDING : null != d ? E = d : null != u && (E = u, t = i.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SUBMIT_APPEAL_CTA), null != E ? (0, a.jsx)(l.default, {
                    notice: E,
                    ctaLabel: t,
                    ctaLoading: s,
                    onClick: o
                }) : null
            }
        },
        219772: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ELIGIBILITY_MODAL_KEY: function() {
                    return T
                },
                default: function() {
                    return f
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("670618"),
                r = s("191814"),
                o = s("423487"),
                d = s("395905"),
                u = s("600471"),
                c = s("782340"),
                E = s("134357"),
                _ = s("419143");
            let T = "role_subscriptions_eligibility_modal";

            function I(e) {
                let {
                    guild: t,
                    eligibility: n,
                    eligibilityLoading: i,
                    eligibilityError: r,
                    refreshEligibility: d
                } = e;
                return (0, a.jsxs)(l.Button, {
                    color: l.ButtonColors.CUSTOM,
                    className: E.ineligibleButton,
                    innerClassName: E.ineligibleButtonContent,
                    grow: !0,
                    onClick: function() {
                        (0, l.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("702053").then(s.bind(s, "702053"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                eligibility: n,
                                eligibilityLoading: i,
                                eligibilityError: r,
                                refreshEligibility: d,
                                guildId: t.id
                            })
                        }, {
                            modalKey: T
                        })
                    },
                    size: l.Button.Sizes.LARGE,
                    children: [(0, a.jsx)(o.default, {
                        height: 16,
                        width: 16
                    }), c.default.Messages.GUILD_ROLE_SUBSCRIPTION_START_EARNING_CTA]
                })
            }

            function S(e) {
                let {
                    guild: t,
                    checkboxText: s
                } = e, {
                    canSubmitAcceptance: o,
                    error: u,
                    loading: _,
                    submitAcceptTermsRequest: T
                } = (0, i.default)(t.id), [I, S] = n.useState(!1);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(l.Checkbox, {
                        onChange: function() {
                            S(e => !e)
                        },
                        size: 20,
                        type: l.Checkbox.Types.INVERTED,
                        value: I,
                        children: (0, a.jsx)(l.Text, {
                            variant: "text-sm/normal",
                            color: "header-secondary",
                            children: s
                        })
                    }), (0, a.jsx)(r.default, {
                        size: 24
                    }), (0, a.jsx)(l.Button, {
                        className: E.ctaButton,
                        disabled: !I || !o,
                        grow: !0,
                        onClick: T,
                        size: l.Button.Sizes.LARGE,
                        submitting: _,
                        children: c.default.Messages.GUILD_ROLE_SUBSCRIPTION_START_EARNING_CTA
                    }), null != u && (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(r.default, {
                            size: 24
                        }), (0, a.jsx)(d.default, {
                            children: u.getAnyErrorMessage()
                        })]
                    })]
                })
            }

            function N(e) {
                let {
                    guild: t,
                    monetizationEligibility: s
                } = e, {
                    eligibilityLoading: n,
                    eligibilityError: l,
                    refreshEligibility: i,
                    eligibility: r,
                    eligibleForMonetization: o,
                    acceptTermsCheckboxText: d,
                    wasRejectedInV1: c
                } = s;
                return o ? c ? (0, a.jsx)(u.default, {
                    ...s
                }) : (0, a.jsx)(S, {
                    guild: t,
                    checkboxText: d
                }) : (0, a.jsx)(I, {
                    guild: t,
                    eligibility: r,
                    eligibilityLoading: n,
                    eligibilityError: l,
                    refreshEligibility: i
                })
            }

            function f(e) {
                let {
                    guild: t,
                    monetizationEligibility: s
                } = e;
                return (0, a.jsxs)("div", {
                    className: E.ctaContainer,
                    children: [(0, a.jsx)("img", {
                        className: E.heroBanner,
                        src: _,
                        alt: c.default.Messages.GUILD_ROLE_SUBSCRIPTION_WELCOME_HERO_BANNER_ALT
                    }), (0, a.jsxs)("div", {
                        className: E.ctaContent,
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-xl/semibold",
                            color: "header-primary",
                            children: c.default.Messages.GUILD_ROLE_SUBSCRIPTION_WELCOME_DESKTOP_V2_TITLE
                        }), (0, a.jsx)(r.default, {
                            size: 12
                        }), (0, a.jsx)(l.Text, {
                            variant: "text-md/normal",
                            color: "header-secondary",
                            children: c.default.Messages.GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_SUBTITLE
                        }), (0, a.jsx)(r.default, {
                            size: 24
                        }), (0, a.jsx)(N, {
                            guild: t,
                            monetizationEligibility: s
                        })]
                    })]
                })
            }
        },
        222934: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return D
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("819855"),
                l = s("77078"),
                i = s("841098"),
                r = s("805233"),
                o = s("191814"),
                d = s("677795"),
                u = s("782340"),
                c = s("737599"),
                E = s("201894"),
                _ = s("722838"),
                T = s("497002"),
                I = s("437250"),
                S = s("382531"),
                N = s("865332"),
                f = s("439044"),
                g = s("912839"),
                A = s("600719");

            function L(e) {
                return (0, n.isThemeDark)(e) ? c.revenueSharePercentageDark : c.revenueSharePercentageLight
            }

            function m() {
                let e = (0, i.default)(),
                    t = {
                        backgroundColor: (0, n.isThemeDark)(e) ? "#2e3638" : "var(--background-primary)"
                    },
                    {
                        isEligibleForGuildProducts: s
                    } = (0, r.useCreatorMonetizationExperimentContext)();
                return (0, a.jsxs)("div", {
                    className: c.earningsPreviewContainer,
                    style: t,
                    children: [(0, a.jsxs)("div", {
                        children: [(0, a.jsx)(l.Text, {
                            variant: "text-sm/normal",
                            color: "header-secondary",
                            children: s ? u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_NEW_SUBS_WITH_GUILD_PRODUCT_EXP : u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_NEW_SUBS
                        }), (0, a.jsx)(o.default, {
                            size: 8
                        }), (0, a.jsx)(l.Heading, {
                            variant: "heading-md/bold",
                            className: L(e),
                            children: s ? u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_REVENUE_INCREASE_WITH_GUILD_PRODUCT_EXP : u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_REVENUE_INCREASE
                        })]
                    }), (0, a.jsx)("img", {
                        className: c.roundAvatar,
                        src: N,
                        alt: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1_PREVIEW_IMG_ALT
                    })]
                })
            }

            function C() {
                let e = (0, i.default)();

                function t(e) {
                    let {
                        length: t,
                        horizontal: s
                    } = e;
                    return (0, a.jsx)("div", {
                        className: s ? c.horizontalConnector : c.verticalConnector,
                        style: {
                            ...s ? {
                                width: t
                            } : {
                                height: t
                            },
                            border: "1px solid #49494933"
                        }
                    })
                }
                return (0, a.jsxs)("div", {
                    className: c.avatarGridContainer,
                    "aria-label": u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1_GRID_ARIA_LABEL,
                    children: [(0, a.jsxs)("div", {
                        className: c.avatarCard,
                        children: [(0, a.jsx)(t, {
                            length: 24
                        }), (0, a.jsx)("img", {
                            className: c.roundAvatar,
                            src: (0, n.isThemeDark)(e) ? E : _,
                            alt: ""
                        }), (0, a.jsx)(t, {
                            horizontal: !0,
                            length: 12
                        })]
                    }), (0, a.jsxs)("div", {
                        className: c.avatarCard,
                        children: [(0, a.jsx)(t, {
                            length: 24
                        }), (0, a.jsx)("img", {
                            className: c.roundAvatar,
                            src: T,
                            alt: ""
                        })]
                    }), (0, a.jsxs)("div", {
                        className: c.avatarCard,
                        children: [(0, a.jsx)(t, {
                            length: 12
                        }), (0, a.jsx)("img", {
                            className: c.roundAvatar,
                            src: I,
                            alt: ""
                        }), (0, a.jsx)(t, {
                            horizontal: !0,
                            length: 12
                        })]
                    }), (0, a.jsxs)("div", {
                        className: c.avatarCard,
                        children: [(0, a.jsx)(t, {
                            length: 12
                        }), (0, a.jsx)("img", {
                            className: c.roundAvatar,
                            src: S,
                            alt: ""
                        })]
                    })]
                })
            }

            function O() {
                let {
                    isEligibleForGuildProducts: e
                } = (0, r.useCreatorMonetizationExperimentContext)();
                return (0, a.jsxs)("div", {
                    className: c.earningBenefitCard,
                    children: [(0, a.jsx)(l.Text, {
                        variant: "text-md/normal",
                        color: "header-secondary",
                        children: e ? u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1__WITH_GUILD_PRODUCT_EXP : u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1
                    }), (0, a.jsx)(o.default, {
                        size: 32
                    }), (0, a.jsx)(m, {}), (0, a.jsx)(o.default, {
                        size: 24
                    }), (0, a.jsx)(C, {})]
                })
            }

            function h() {
                return (0, a.jsxs)("div", {
                    className: c.followerBenefitCard,
                    children: [(0, a.jsx)(l.Text, {
                        className: c.followerBenefitText,
                        variant: "text-md/normal",
                        color: "header-secondary",
                        children: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2
                    }), (0, a.jsx)("img", {
                        className: c.roleSubscriptionSocial,
                        src: A,
                        alt: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2_IMG_1_ALT
                    }), (0, a.jsx)("img", {
                        className: c.roleSubscriptionLanyardIllo,
                        src: g,
                        alt: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2_IMG_2_ALT
                    })]
                })
            }

            function R() {
                let e = (0, i.default)();
                return (0, a.jsxs)("div", {
                    className: c.revenueShareBenefitCard,
                    children: [(0, a.jsxs)("div", {
                        children: [(0, a.jsxs)(l.Heading, {
                            className: L(e),
                            style: {
                                fontSize: "50px",
                                lineHeight: "52px"
                            },
                            variant: "heading-xxl/extrabold",
                            children: [d.CREATOR_REVENUE_SHARE_PERCENTAGE, "%"]
                        }), (0, a.jsx)(l.Text, {
                            variant: "text-md/normal",
                            color: "header-secondary",
                            children: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_3
                        })]
                    }), (0, a.jsx)("img", {
                        className: c.roleSubscriptionEarningIllo,
                        src: f,
                        alt: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_3_IMG_ALT
                    })]
                })
            }

            function D() {
                return (0, a.jsxs)("div", {
                    children: [(0, a.jsx)(l.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        children: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFITS_FOR_CREATORS_TITLE
                    }), (0, a.jsx)(o.default, {
                        size: 24
                    }), (0, a.jsxs)("div", {
                        className: c.creatorBenefitsContainer,
                        children: [(0, a.jsx)(O, {}), (0, a.jsx)(h, {}), (0, a.jsx)(R, {})]
                    })]
                })
            }
        },
        830388: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return C
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("430568"),
                o = s("545158"),
                d = s("20606"),
                u = s("813006"),
                c = s("476263"),
                E = s("191814"),
                _ = s("111462"),
                T = s("120856"),
                I = s("915675"),
                S = s("782340"),
                N = s("702864");

            function f(e) {
                let {
                    subscribers: t
                } = e;
                return (0, a.jsxs)("div", {
                    className: N.guildSubscriberCount,
                    children: [(0, a.jsx)("div", {
                        className: N.subscriberCountValue,
                        children: (0, a.jsx)(i.Text, {
                            variant: "text-md/normal",
                            color: "always-white",
                            children: t
                        })
                    }), (0, a.jsxs)("div", {
                        className: N.subscriberCountText,
                        children: [(0, a.jsx)(I.default, {
                            color: d.default.WHITE
                        }), (0, a.jsx)(i.Text, {
                            variant: "text-md/normal",
                            color: "always-white",
                            children: S.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_SUBSCRIBERS_LABEL
                        })]
                    })]
                })
            }

            function g(e) {
                let {
                    guildName: t,
                    guildIcon: s,
                    guildAvatarUrl: n,
                    subscriberCount: l
                } = e, r = new u.default({
                    name: t,
                    icon: s
                });
                return (0, a.jsxs)("div", {
                    className: N.guildCardHeader,
                    children: [(0, a.jsx)(c.default, {
                        className: N.guildCardHeaderAvatar,
                        iconSrc: n,
                        guild: r,
                        size: c.default.Sizes.LARGE
                    }), (0, a.jsxs)("div", {
                        className: N.guildCardHeaderTitle,
                        children: [(0, a.jsx)(i.Heading, {
                            variant: "heading-lg/semibold",
                            color: "header-primary",
                            children: t
                        }), null != l && (0, a.jsx)(f, {
                            subscribers: l
                        })]
                    })]
                })
            }

            function A(e) {
                let {
                    quote: t,
                    quoteAttribution: s,
                    quoteAttributionTitle: n
                } = e;
                return (0, a.jsxs)("div", {
                    className: N.guildCardQuote,
                    children: [(0, a.jsx)(i.Text, {
                        variant: "text-lg/normal",
                        color: "interactive-active",
                        children: t
                    }), (0, a.jsx)(i.Text, {
                        variant: "text-md/normal",
                        color: "interactive-active",
                        children: S.default.Messages.GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_QUOTE_ATTRIBUTION.format({
                            attributionName: s,
                            attributionTitle: null != n ? n : S.default.Messages.GUILD_OWNER
                        })
                    })]
                })
            }

            function L(e) {
                let {
                    emojisToShow: t,
                    notShownEmojiCount: s,
                    storePageUrl: n
                } = e, d = null != t && t.length > 0, u = () => {
                    null != n && (0, o.default)(n)
                };
                return (0, a.jsx)("div", {
                    className: N.guildPremiumEmojis,
                    children: d ? (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(i.Text, {
                            variant: "text-xs/semibold",
                            color: "header-primary",
                            className: N.premiumEmojisTitle,
                            children: S.default.Messages.GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_CARD_PREMIUM_EMOJI_TITLE
                        }), (0, a.jsxs)("div", {
                            className: N.premiumEmojisRow,
                            children: [(0, a.jsxs)("div", {
                                className: l(N.emojisContainer, null != s && N.fullEmojisContainer),
                                children: [t.map(e => (0, a.jsx)(r.default, {
                                    className: N.emoji,
                                    emojiId: e.id,
                                    emojiName: e.name,
                                    animated: e.animated
                                }, e.id)), null != s && (0, a.jsx)("div", {
                                    className: N.extraEmojiCount,
                                    children: (0, a.jsxs)(i.Text, {
                                        variant: "text-md/semibold",
                                        color: "text-normal",
                                        children: ["+", s]
                                    })
                                })]
                            }), (0, a.jsx)("div", {
                                children: (0, a.jsx)(i.Button, {
                                    className: N.viewServerButton,
                                    innerClassName: N.viewServerButtonText,
                                    color: i.Button.Colors.CUSTOM,
                                    disabled: null == n,
                                    onClick: u,
                                    children: S.default.Messages.GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_VIEW_SERVER_CTA
                                })
                            })]
                        })]
                    }) : (0, a.jsx)(i.Button, {
                        className: l(N.viewServerButton, N.roundedEdges),
                        innerClassName: N.viewServerButtonText,
                        color: i.Button.Colors.CUSTOM,
                        disabled: null == n,
                        onClick: u,
                        children: S.default.Messages.GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_VIEW_SERVER_CTA
                    })
                })
            }

            function m(e) {
                let {
                    highlightedCreatorGuild: t
                } = e, {
                    guild_id: s,
                    quote: n,
                    quote_attribution: l,
                    quote_attribution_title: r
                } = t, o = (0, _.default)(s, 4, 60), {
                    isLoading: d,
                    hasAllImperativeDetails: u
                } = o;
                if (d) return (0, a.jsx)("div", {
                    className: N.guildCard,
                    children: (0, a.jsx)(i.Spinner, {})
                });
                if (!u) return null;
                let {
                    guildIcon: c,
                    guildName: E,
                    guildAvatarUrl: T,
                    subscriberCount: I,
                    emojisToShow: S,
                    notShownEmojiCount: f,
                    storePageUrl: m
                } = o.details;
                return (0, a.jsxs)("div", {
                    className: N.guildCard,
                    children: [(0, a.jsx)(g, {
                        guildIcon: c,
                        guildName: E,
                        guildAvatarUrl: T,
                        subscriberCount: I
                    }), (0, a.jsx)(A, {
                        quote: n,
                        quoteAttribution: l,
                        quoteAttributionTitle: r
                    }), (0, a.jsx)(L, {
                        emojisToShow: S,
                        notShownEmojiCount: f,
                        storePageUrl: m
                    })]
                })
            }

            function C(e) {
                let {
                    highlightedCreators: t
                } = e;
                return (0, a.jsxs)("div", {
                    children: [(0, a.jsx)(i.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        children: S.default.Messages.GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_GUILD_SECTION_TITLE
                    }), (0, a.jsx)(E.default, {
                        size: 24
                    }), (0, a.jsx)(T.default, {
                        carouselClassName: N.creatorGuildCarousel,
                        items: t,
                        renderItem: e => (0, a.jsx)(m, {
                            highlightedCreatorGuild: e
                        }),
                        intervalBetweenAutomaticItemRotations: 7e3
                    })]
                })
            }
        },
        459662: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                MarketingSections: function() {
                    return f
                },
                default: function() {
                    return g
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("759843"),
                l = s("77078"),
                i = s("428958"),
                r = s("205881"),
                o = s("724334"),
                d = s("756717"),
                u = s("395905"),
                c = s("219772"),
                E = s("222934"),
                _ = s("830388"),
                T = s("561496"),
                I = s("100072"),
                S = s("396076"),
                N = s("97743");

            function f(e) {
                let {
                    onboardingMarketing: t,
                    onboardingMarketingError: s
                } = e, n = e => {
                    let {
                        children: t
                    } = e;
                    return (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(l.FormDivider, {
                            className: N.sectionDivider
                        }), t]
                    })
                }, i = (0, a.jsx)(n, {
                    children: (0, a.jsx)(T.default, {})
                }, S.CreatorMonetizationOnboardingMarketingSection.HOW_IT_WORKS), r = (0, a.jsx)(n, {
                    children: (0, a.jsx)(E.default, {})
                }, S.CreatorMonetizationOnboardingMarketingSection.BENEFITS);
                return null != s || (null == t ? void 0 : t.sections) == null ? (0, a.jsxs)(a.Fragment, {
                    children: [i, r]
                }) : (0, a.jsx)(a.Fragment, {
                    children: t.sections.map(e => {
                        switch (e.type) {
                            case S.CreatorMonetizationOnboardingMarketingSection.HOW_IT_WORKS:
                                return i;
                            case S.CreatorMonetizationOnboardingMarketingSection.BENEFITS:
                                return r;
                            case S.CreatorMonetizationOnboardingMarketingSection.OTHER_CREATORS:
                                return (0, a.jsx)(n, {
                                    children: (0, a.jsx)(_.default, {
                                        highlightedCreators: e.creators
                                    })
                                }, S.CreatorMonetizationOnboardingMarketingSection.OTHER_CREATORS)
                        }
                    })
                })
            }

            function g(e) {
                let {
                    guild: t
                } = e, s = (0, d.default)(t), {
                    eligibilityLoading: E,
                    eligibilityError: _,
                    eligibility: T
                } = s, S = (0, r.useCreatorMonetizationIneligibleReasons)(T), {
                    isLoading: g,
                    error: A,
                    creatorMonetizationOnboardingMarketing: L
                } = (0, o.default)(t.id);
                return ((0, i.default)({
                    type: n.ImpressionTypes.PANE,
                    name: n.ImpressionNames.ENABLE_CREATOR_MONETIZATION_ACCEPT_TERMS_LANDING,
                    properties: {
                        guild_id: t.id,
                        is_owner: s.isGuildOwner,
                        is_eligible: s.eligibleForMonetization,
                        ineligible_reasons: S
                    }
                }, {
                    disableTrack: null == t.id || null == T
                }), E || null == T || g) ? (0, a.jsx)(l.Spinner, {}) : T.actionRequired ? (0, a.jsx)(I.default, {
                    guild: t
                }) : null != _ ? (0, a.jsx)(u.default, {
                    children: _.message
                }) : (0, a.jsxs)("div", {
                    className: N.container,
                    children: [(0, a.jsx)(c.default, {
                        guild: t,
                        monetizationEligibility: s
                    }), (0, a.jsx)(f, {
                        onboardingMarketing: L,
                        onboardingMarketingError: A
                    })]
                })
            }
        },
        561496: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return T
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("805233"),
                i = s("191814"),
                r = s("677795"),
                o = s("782340"),
                d = s("988511"),
                u = s("627150"),
                c = s("370730"),
                E = s("350233");

            function _(e) {
                let {
                    imageSrc: t,
                    description: s
                } = e;
                return (0, a.jsxs)("div", {
                    className: d.howItWorksCard,
                    children: [(0, a.jsx)("div", {
                        className: d.howItWorksImageContainer,
                        children: (0, a.jsx)("img", {
                            className: d.howItWorksImage,
                            src: t,
                            alt: ""
                        })
                    }), (0, a.jsx)("div", {
                        className: d.howItWorksDescription,
                        children: (0, a.jsx)(n.Text, {
                            variant: "text-sm/normal",
                            color: "header-primary",
                            children: s
                        })
                    })]
                })
            }

            function T() {
                let {
                    isEligibleForGuildProducts: e
                } = (0, l.useCreatorMonetizationExperimentContext)(), t = [{
                    imageSrc: E,
                    description: !0 === e ? o.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_1__WITH_GUILD_PRODUCT_EXP : o.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_1
                }, {
                    imageSrc: u,
                    description: !0 === e ? o.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_2__WITH_GUILD_PRODUCT_EXP : o.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_2
                }, {
                    imageSrc: c,
                    description: !0 === e ? o.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_3__WITH_GUILD_PRODUCT_EXP : o.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_3
                }];
                return (0, a.jsxs)("div", {
                    children: [(0, a.jsx)(n.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        children: o.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_TITLE
                    }), (0, a.jsx)(i.default, {
                        size: 24
                    }), (0, a.jsx)("div", {
                        className: d.howItWorksContainer,
                        children: t.map(e => (0, a.jsx)(_, {
                            imageSrc: e.imageSrc,
                            description: e.description
                        }, e.imageSrc))
                    }), (0, a.jsx)(i.default, {
                        size: 24
                    }), (0, a.jsx)(n.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        children: o.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_FOOTER.format({
                            creatorPortalUrl: r.CREATOR_REVENUE_PORTAL_URL
                        })
                    })]
                })
            }
        },
        100072: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("147314"),
                r = s("697218"),
                o = s("191814"),
                d = s("973449");

            function u(e) {
                let {
                    guild: t
                } = e, s = (0, n.useStateFromStores)([r.default], () => {
                    let e = r.default.getCurrentUser();
                    return null != e && (null == t ? void 0 : t.isOwner(e)) === !0
                }), u = () => {
                    (0, i.showNewTerms)(t.id, {
                        demonetized: !0
                    })
                };
                return (0, a.jsxs)("div", {
                    className: d.container,
                    children: [(0, a.jsx)(l.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        children: "Monetization Temporarily Disabled"
                    }), (0, a.jsx)(o.default, {
                        size: 24
                    }), (0, a.jsx)(l.Text, {
                        variant: "text-md/normal",
                        color: "header-secondary",
                        children: "This server is overdue for accepting our new terms of service so we've had to temporarily suspend monetization. Don't worry, existing subscribers can still access their benefits and renew their subscription. However, new subscriptions cannot be made until the owner accepts our new terms of service."
                    }), (0, a.jsx)(o.default, {
                        size: 24
                    }), (0, a.jsx)(l.Tooltip, {
                        text: "Only the server owner can accept new terms",
                        shouldShow: !s,
                        children: e => (0, a.jsx)(l.Button, {
                            disabled: !s,
                            ...e,
                            onClick: u,
                            children: "Accept New Terms"
                        })
                    })]
                })
            }
        },
        894429: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(i),
                    width: t,
                    height: s,
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        d: "M22 9H10V7H22V9ZM22 12H2V14H22V12ZM22 17H2V19H22V17ZM9 5.41L7.59 4L4 7.59L2.41 6L1 7.41L4 10.41L9 5.41Z",
                        fill: l
                    })
                })
            }
        },
        110498: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(i),
                    width: t,
                    height: s,
                    viewBox: "0 0 18 18",
                    children: (0, a.jsx)("path", {
                        d: "M7.33366 17.3333C6.95866 17.3333 6.62533 17.0833 6.53366 16.7166L5.78366 13.975C5.55033 13.125 4.88366 12.45 4.02533 12.225L1.28366 11.475C0.916992 11.375 0.666992 11.0416 0.666992 10.6666C0.666992 10.2916 0.916992 9.95829 1.28366 9.86663L4.02533 9.11663C4.87533 8.88329 5.55033 8.21663 5.77533 7.35829L6.52533 4.61663C6.62533 4.24996 6.95866 3.99996 7.33366 3.99996C7.70866 3.99996 8.04199 4.24996 8.13366 4.61663L8.88366 7.35829C9.11699 8.20829 9.78366 8.88329 10.642 9.10829L13.3837 9.85829C13.7503 9.95829 14.0003 10.2916 14.0003 10.6666C14.0003 11.0416 13.7503 11.375 13.3837 11.4666L10.642 12.2166C9.79199 12.45 9.11699 13.1166 8.89199 13.975L8.14199 16.7166C8.04199 17.0833 7.70866 17.3333 7.33366 17.3333ZM14.0003 7.33329C13.8087 7.33329 13.6503 7.20829 13.6003 7.02496L13.2253 5.64996C13.1087 5.22496 12.7753 4.89163 12.3503 4.77496L10.9753 4.39996C10.792 4.34996 10.667 4.19163 10.667 3.99996C10.667 3.80829 10.792 3.64996 10.9753 3.59996L12.3503 3.22496C12.7753 3.10829 13.1087 2.77496 13.2253 2.34996L13.6003 0.974959C13.6503 0.791626 13.8087 0.666626 14.0003 0.666626C14.192 0.666626 14.3503 0.791626 14.4003 0.974959L14.7753 2.34996C14.892 2.77496 15.2253 3.10829 15.6503 3.22496L17.0253 3.59996C17.2087 3.64996 17.3337 3.80829 17.3337 3.99996C17.3337 4.19163 17.2087 4.34996 17.0253 4.39996L15.6503 4.77496C15.2253 4.89163 14.892 5.22496 14.7753 5.64996L14.4003 7.02496C14.3503 7.20829 14.192 7.33329 14.0003 7.33329Z",
                        fill: l
                    })
                })
            }
        },
        981737: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(i),
                    width: t,
                    height: s,
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        d: "M12 4.5C12 3.67 11.33 3 10.5 3C9.67 3 9 3.67 9 4.5V11V14L5.4 11.3C5.15 11.11 4.84 11 4.5 11C3.67 11 3 11.67 3 12.5C3 12.88 3.14 13.23 3.37 13.49L8.8 19.64C9.57 20.51 10.66 21 11.8 21H15.5C18.54 21 21 18.54 21 15.5C21 12.84 19.11 10.62 16.61 10.11L12 9V4.5Z",
                        fill: l
                    })
                })
            }
        },
        53264: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return S
                }
            });
            var a, n, l = s("37983");
            s("884691");
            var i = s("414456"),
                r = s.n(i),
                o = s("158352"),
                d = s("271560"),
                u = s("165169"),
                c = s("130437"),
                E = s("782340"),
                _ = s("660198"),
                T = s("301352");
            (a = n || (n = {})).TIER_NAME = "tier_name", a.SUBSCRIBERS = "subscribers", a.AMOUNT = "amount", a.PRICE = "price";
            let I = [{
                key: "tier_name",
                cellClassName: _.tierNameColumn,
                renderHeader: () => E.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_TIERS,
                render(e) {
                    let t, {
                        subscriptionListing: s
                    } = e;
                    if (null != s) {
                        let e = (null == s ? void 0 : s.image_asset) == null ? void 0 : (0, d.getAssetURL)(s.application_id, s.image_asset, 128);
                        t = (0, l.jsxs)(l.Fragment, {
                            children: [(0, l.jsx)("img", {
                                src: e,
                                alt: "",
                                className: _.tierImage
                            }), s.name]
                        })
                    }
                    return (0, l.jsx)(c.Cell, {
                        className: _.tierNameCell,
                        children: t
                    })
                }
            }, {
                key: "subscribers",
                cellClassName: r(_.subscribersColumn, T.cellAlignRight),
                renderHeader: () => E.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_MEMBERS,
                render: e => (0, l.jsx)(c.SubscribersCell, {
                    children: e.roleMemberCount
                })
            }, {
                key: "price",
                cellClassName: r(_.priceColumn, T.cellAlignRight),
                renderHeader: () => E.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_PRICE,
                render(e) {
                    let {
                        subscriptionListing: t
                    } = e, s = null == t ? void 0 : t.subscription_plans[0], a = null == s ? void 0 : s.price;
                    return (0, l.jsx)(c.CurrencyAmountCell, {
                        children: a
                    })
                }
            }];
            var S = e => {
                let {
                    totalPayoutsForPeriod: t,
                    guildId: s,
                    className: a
                } = e, n = (0, u.default)(s, t);
                return (0, l.jsx)("div", {
                    className: r(T.tableContainer, a),
                    children: (0, l.jsx)(o.default, {
                        columns: I,
                        data: n,
                        className: r(T.table, _.table),
                        rowClassName: _.row,
                        headerClassName: r(T.header, _.header)
                    })
                })
            }
        },
        966082: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return h
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("835706"),
                i = s("191814"),
                r = s("781896"),
                o = s("153160"),
                d = s("257869"),
                u = s("837008"),
                c = s("757715"),
                E = s("619389"),
                _ = s("44737"),
                T = s("53264"),
                I = s("130437"),
                S = s("940958"),
                N = s("657650"),
                f = s("441901"),
                g = s("49111"),
                A = s("782340"),
                L = s("794819");

            function m(e) {
                let {
                    payoutsByPeriod: t,
                    team: s
                } = e, l = (0, c.useRoleSubscriptionSettingsDisabled)(), r = l ? null : A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EDIT_PAYMENT_METHOD_LINK.format({
                    url: null != s ? g.MarketingURLs.DEVELOPER_PORTAL_PAYOUT_SETTINGS(s.id) : null
                });
                return 0 === t.length ? (0, a.jsxs)(n.FormText, {
                    type: n.FormText.Types.DESCRIPTION,
                    children: [A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_EMPTY, " ", r]
                }) : (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)(n.FormText, {
                        type: n.FormText.Types.DESCRIPTION,
                        children: [A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_DESCRIPTION, " ", r]
                    }), (0, a.jsx)(i.default, {
                        size: 16
                    }), (0, a.jsx)(I.default, {
                        payoutsByPeriod: t
                    })]
                })
            }

            function C(e) {
                let {
                    guildId: t,
                    totalPayoutsForPeriod: s
                } = e, n = (0, u.useSubscriptionListingsForGuild)(t, {
                    includeSoftDeleted: !0
                });
                return null == s && 0 === n.length ? null : (0, a.jsx)(T.default, {
                    totalPayoutsForPeriod: s,
                    guildId: t,
                    className: L.currentMonthEarningsTable
                })
            }
            let O = e => {
                var t, s;
                let {
                    guildId: d,
                    application: u
                } = e, {
                    loading: T,
                    team: I,
                    currentPeriod: O,
                    allPeriods: h,
                    metrics: R
                } = (0, E.default)(d, u), D = (0, _.useRoleSubscriptionInsightsAccess)(d), M = (0, c.useRoleSubscriptionSettingsDisabled)();
                return T ? (0, a.jsx)(n.Spinner, {}) : (0, a.jsxs)(a.Fragment, {
                    children: [D && (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(l.default, {
                            children: A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_INSIGHTS_NOTICE_TEXT.format({
                                insightsURL: g.MarketingURLs.DEVELOPER_PORTAL_GUILD_ANALYTICS_ROLE_SUBSCRIPTION(d)
                            })
                        }), (0, a.jsx)(i.default, {
                            size: 32
                        })]
                    }), (0, a.jsxs)(n.FormSection, {
                        title: A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_HEADER,
                        className: L.formSection,
                        children: [(0, a.jsx)(i.default, {
                            size: 8
                        }), (0, a.jsxs)("div", {
                            className: L.metricsContainer,
                            children: [(0, a.jsx)(S.default, {
                                label: A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_REVENUE,
                                value: (0, o.formatPrice)(null !== (t = R.revenue) && void 0 !== t ? t : 0, g.CurrencyCodes.USD),
                                additionalContent: (0, a.jsx)(S.MetricTrend, {
                                    value: R.revenuePctChange,
                                    isPercent: !0
                                })
                            }), (0, a.jsx)(S.default, {
                                label: A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_SUBSCRIBERS,
                                value: (0, a.jsxs)(a.Fragment, {
                                    children: [null !== (s = R.subscribers) && void 0 !== s ? s : "-", " ", (0, a.jsx)(r.default, {
                                        className: L.totalMembersIcon,
                                        "aria-hidden": !0
                                    })]
                                }),
                                additionalContent: (0, a.jsx)(S.MetricTrend, {
                                    value: R.subscriberChange
                                })
                            })]
                        }), (0, a.jsx)(C, {
                            guildId: d,
                            totalPayoutsForPeriod: O
                        })]
                    }), (0, a.jsx)(n.FormSection, {
                        title: A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_HEADER,
                        className: L.formSection,
                        children: (0, a.jsx)(m, {
                            payoutsByPeriod: h,
                            team: I
                        })
                    }), (0, a.jsx)(n.FormSection, {
                        title: A.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_TITLE,
                        disabled: M,
                        className: L.formSection,
                        children: (0, a.jsx)(N.default, {
                            guildId: d,
                            application: u
                        })
                    }), (0, a.jsx)(n.FormSection, {
                        title: A.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_DISABLE_MONETIZATION_SECTION_TITLE,
                        className: L.formSection,
                        children: (0, a.jsx)(f.default, {
                            guildId: d,
                            allPeriods: h
                        })
                    })]
                })
            };

            function h(e) {
                return (0, a.jsx)(d.GroupListingsFetchContextProvider, {
                    guildId: e.guildId,
                    children: (0, a.jsx)(O, {
                        ...e
                    })
                })
            }
        },
        657960: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return x
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("545158"),
                o = s("7331"),
                d = s("615303"),
                u = s("827159"),
                c = s("963393"),
                E = s("719887"),
                _ = s("697218"),
                T = s("471671"),
                I = s("37785"),
                S = s("599110"),
                N = s("837008"),
                f = s("757715"),
                g = s("352807"),
                A = s("417186"),
                L = s("441901"),
                m = s("341020"),
                C = s("49111"),
                O = s("988268"),
                h = s("810367"),
                R = s("782340"),
                D = s("847007");

            function M(e) {
                let {
                    onCreateTeamClick: t,
                    isGuildOwner: s
                } = e;
                return (0, a.jsx)("div", {
                    className: D.selectTeamContainer,
                    children: (0, a.jsx)(i.Button, {
                        disabled: !s,
                        onClick: t,
                        className: D.enableTicketingButton,
                        fullWidth: !0,
                        children: R.default.Messages.GUILD_MONETIZATION_ENABLE_CREATE_TEAM
                    })
                })
            }

            function G(e) {
                let {
                    guild: t,
                    eligibleTeams: s,
                    isGuildOwner: l
                } = e, [r, o] = n.useState(), {
                    enableGuildMonetizationForTeam: u,
                    submitting: c,
                    error: E
                } = (0, d.default)(), {
                    fetchSubscriptionsSettings: _
                } = (0, N.useFetchSubscriptionsSettings)(), T = (0, f.useRoleSubscriptionSettingsDisabled)(), I = n.useMemo(() => s.map(e => ({
                    label: e.name,
                    value: e.id
                })), [s]), S = async () => {
                    let e = await u(t, r, O.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS);
                    e && (_(t.id), (0, g.openActionCompleteSuccessModal)({
                        Icon: m.default,
                        title: R.default.Messages.GUILD_MONETIZATION_ENABLE_CONFIRMATION_TITLE,
                        body: R.default.Messages.GUILD_MONETIZATION_ENABLE_CONFIRMATION_SUBTITLE
                    }))
                };
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: D.selectTeamContainer,
                        children: [(0, a.jsx)(i.SingleSelect, {
                            className: D.teamSelect,
                            options: I,
                            placeholder: R.default.Messages.GUILD_MONETIZATION_ENABLE_SELECT_PLACEHOLDER,
                            value: r,
                            isDisabled: 0 === I.length || T || !l,
                            onChange: e => o(e),
                            "aria-label": R.default.Messages.GUILD_MONETIZATION_ENABLE_SELECT_PLACEHOLDER
                        }), (0, a.jsx)(i.Button, {
                            onClick: S,
                            className: D.enableTicketingButton,
                            submitting: c,
                            disabled: null == r || T || !l,
                            children: R.default.Messages.GUILD_MONETIZATION_ENABLE_CTA
                        })]
                    }), null != E && (0, a.jsx)(i.Text, {
                        className: D.error,
                        variant: "text-sm/normal",
                        children: E.getAnyErrorMessage()
                    })]
                })
            }
            var x = e => {
                let {
                    guild: t,
                    hideDisableSection: s = !1
                } = e, d = (0, l.useStateFromStores)([_.default], () => _.default.getCurrentUser()), N = t.isOwner(d), f = (0, o.useIsExpeditedOnboardingGuild)(t), g = (0, l.useStateFromStores)([T.default], () => T.default.isFocused()), {
                    teams: m,
                    loading: O
                } = (0, E.default)({
                    refreshOnDepChange: g
                }), x = n.useMemo(() => m.filter(e => {
                    var t;
                    return e.payout_account_status !== h.PayoutAccountStatuses.BLOCKED && (0, c.isUserTeamAdministrator)(null !== (t = null == d ? void 0 : d.id) && void 0 !== t ? t : "", e)
                }), [m, d]), p = x.length > 0, U = n.useCallback(async () => {
                    S.default.track(C.AnalyticEvents.GUILD_ROLE_SUBSCRIPTION_TEAM_SETUP_CLICKED, {
                        is_onboarding_v2: f,
                        has_eligible_team: p,
                        guild_id: t.id,
                        is_owner: N
                    });
                    let e = await (0, u.generateDeveloperPortalLink)(C.RelativeMarketingURLs.DEVELOPER_PORTAL_TEAMS);
                    (0, r.default)(e)
                }, [t, N, f, p]), v = n.useCallback(e => N ? (0, a.jsx)(I.default, {
                    onClick: U,
                    children: e
                }) : e, [U, N]);
                return O ? (0, a.jsx)(i.Spinner, {}) : (0, a.jsxs)(a.Fragment, {
                    children: [!N && (0, a.jsx)(A.default, {
                        className: D.nonOwnerNotice,
                        children: R.default.Messages.GUILD_MONETIZATION_ENABLE_NON_OWNER_WARNING
                    }), (0, a.jsxs)(i.FormSection, {
                        title: R.default.Messages.GUILD_MONETIZATION_ENABLE_HEADER,
                        disabled: !N,
                        children: [(0, a.jsx)(i.FormText, {
                            type: i.FormText.Types.DESCRIPTION,
                            className: D.description,
                            disabled: !N,
                            children: R.default.Messages.GUILD_MONETIZATION_ENABLE_DESCRIPTION.format({
                                onCreateTeamHook: v
                            })
                        }), p ? (0, a.jsx)(G, {
                            guild: t,
                            eligibleTeams: x,
                            isGuildOwner: N
                        }) : (0, a.jsx)(M, {
                            onCreateTeamClick: U,
                            isGuildOwner: N
                        })]
                    }), !s && (0, a.jsx)(i.FormSection, {
                        title: R.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_DISABLE_MONETIZATION_SECTION_TITLE,
                        className: D.selfDemonetization,
                        children: (0, a.jsx)(L.default, {
                            guildId: t.id,
                            allPeriods: []
                        })
                    })]
                })
            }
        },
        751886: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("228100"),
                i = s("966082"),
                r = s("657960"),
                o = s("988268"),
                d = e => {
                    let {
                        guild: t
                    } = e, {
                        application: s,
                        loading: d
                    } = (0, l.default)(t.id, o.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS);
                    return d ? (0, a.jsx)(n.Spinner, {}) : null != s ? (0, a.jsx)(i.default, {
                        guildId: t.id,
                        application: s
                    }) : (0, a.jsx)(r.default, {
                        guild: t
                    })
                }
        },
        130437: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                Cell: function() {
                    return p
                },
                CurrencyAmountCell: function() {
                    return U
                },
                SubscribersCell: function() {
                    return y
                },
                default: function() {
                    return H
                }
            }), s("424973"), s("222007");
            var a, n, l = s("37983"),
                i = s("884691"),
                r = s("414456"),
                o = s.n(r),
                d = s("866227"),
                u = s.n(d),
                c = s("446674"),
                E = s("77078"),
                _ = s("717559"),
                T = s("158352"),
                I = s("578706"),
                S = s("381546"),
                N = s("68238"),
                f = s("781896"),
                g = s("772280"),
                A = s("153160"),
                L = s("648825"),
                m = s("434014"),
                C = s("488499"),
                O = s("860598"),
                h = s("445940"),
                R = s("49111"),
                D = s("397056"),
                M = s("782340"),
                G = s("301352");
            (n = a || (a = {})).DROPDOWN = "dropdown", n.PERIOD = "period", n.SUBSCRIBERS = "subscribers", n.AMOUNT = "amount", n.STATUS = "status";
            let x = (e, t, s, a) => {
                    let n = null != a ? u(a).add(15, "days").toISOString() : void 0,
                        i = (0, m.formatNextPaymentDate)(n, "MMM D");
                    switch (e) {
                        case D.PaymentPayoutGroupStatuses.OPEN:
                            return (0, l.jsxs)(l.Fragment, {
                                children: [null != i ? M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE.format({
                                    payoutDate: i
                                }) : M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING, (0, l.jsx)(O.default, {
                                    className: G.statusScheduledIcon
                                })]
                            });
                        case D.PaymentPayoutGroupStatuses.CANCELED:
                            return (0, l.jsxs)(l.Fragment, {
                                children: [M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED, (0, l.jsx)(S.default, {
                                    className: G.statusErrorIcon
                                })]
                            });
                        case D.PaymentPayoutGroupStatuses.PAYOUT_DEFERRED:
                            if ((null == s ? void 0 : s.includes(D.PaymentPayoutGroupDeferralReasons.PAYOUT_SEIZED)) === !0) return (0, l.jsxs)(l.Fragment, {
                                children: [M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED, (0, l.jsx)(S.default, {
                                    className: G.statusErrorIcon
                                })]
                            });
                            return (0, l.jsxs)(l.Fragment, {
                                children: [M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_DEFERRED, (0, l.jsx)(h.default, {
                                    className: G.statusDeferredIcon
                                })]
                            })
                    }
                    switch (t) {
                        case D.PayoutStatuses.MANUAL:
                        case D.PayoutStatuses.OPEN:
                        case D.PayoutStatuses.PENDING:
                        case D.PayoutStatuses.PROCESSING:
                        case D.PayoutStatuses.SUBMITTED:
                        case D.PayoutStatuses.PENDING_FUNDS:
                        case D.PayoutStatuses.CANCELED:
                        case D.PayoutStatuses.ERROR:
                            return (0, l.jsxs)(l.Fragment, {
                                children: [null != i ? M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE.format({
                                    payoutDate: i
                                }) : M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_SCHEDULED, (0, l.jsx)(O.default, {
                                    className: G.statusScheduledIcon
                                })]
                            });
                        case D.PayoutStatuses.PAID:
                            return (0, l.jsxs)(l.Fragment, {
                                children: [M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PAID, (0, l.jsx)(I.default, {
                                    className: G.statusPaidIcon
                                })]
                            });
                        case D.PayoutStatuses.DEFERRED:
                        case D.PayoutStatuses.DEFERRED_INTERNAL:
                        case D.PayoutStatuses.REJECTED:
                        case D.PayoutStatuses.RISK_REVIEW:
                            return (0, l.jsxs)(l.Fragment, {
                                children: [C.default.getStatusErrorText(t), (0, l.jsx)(S.default, {
                                    className: G.statusErrorIcon
                                })]
                            })
                    }
                    return null
                },
                p = e => {
                    let {
                        children: t,
                        className: s
                    } = e;
                    return (0, l.jsx)("div", {
                        className: o(G.cell, s),
                        children: t
                    })
                },
                U = e => {
                    let {
                        children: t
                    } = e;
                    return (0, l.jsx)("div", {
                        className: G.cell,
                        children: (0, A.formatPrice)(null != t ? t : 0, R.CurrencyCodes.USD)
                    })
                },
                v = e => {
                    let {
                        children: t
                    } = e;
                    return (0, l.jsx)(p, {
                        className: G.statusCell,
                        children: null != t ? t : "-"
                    })
                },
                j = e => {
                    let {
                        children: t
                    } = e;
                    return (0, l.jsx)(p, {
                        className: G.periodCell,
                        children: u(t).utc().format("MMMM YYYY")
                    })
                },
                P = e => {
                    var t;
                    let {
                        listingId: s
                    } = e, a = (0, c.useStateFromStores)([L.default], () => L.default.getSubscriptionListing(s)), n = null !== (t = null == a ? void 0 : a.name) && void 0 !== t ? t : "[".concat(M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_TIER_DELETED, "]");
                    return (0, l.jsx)(p, {
                        children: n
                    })
                },
                y = e => {
                    let {
                        children: t
                    } = e;
                    return (0, l.jsxs)(p, {
                        className: G.subscribersCell,
                        children: [null != t ? t : "-", " ", (0, l.jsx)(f.default, {
                            className: G.subscribersIcon,
                            "aria-hidden": !0
                        })]
                    })
                },
                b = () => {
                    let e = (0, l.jsx)(E.Tooltip, {
                        text: M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_AMOUNT_DISCLAIMER,
                        children: e => (0, l.jsx)(N.default, {
                            className: G.amountDisclaimer,
                            ...e
                        })
                    });
                    return (0, l.jsxs)(l.Fragment, {
                        children: [M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_AMOUNT, " ", e]
                    })
                },
                B = () => {
                    let e = (0, l.jsx)(E.Tooltip, {
                        text: M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_NEXT_PAYMENT_DISCLAIMER,
                        children: e => (0, l.jsx)(N.default, {
                            className: G.statusDisclaimer,
                            ...e
                        })
                    });
                    return (0, l.jsxs)(l.Fragment, {
                        children: [M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS, " ", e]
                    })
                },
                F = [{
                    key: "dropdown",
                    cellClassName: G.toggleExpandColumn,
                    renderHeader: () => null,
                    render(e, t) {
                        let {
                            expandedRows: s,
                            onToggleExpandRow: a
                        } = t, n = s.has(e.key);
                        return (0, l.jsx)(E.Clickable, {
                            className: o(G.cell, G.toggleExpandCell),
                            onClick: () => a(e.key),
                            children: (0, l.jsx)(g.default, {
                                className: o(G.caretIcon, {
                                    [G.caretDownIcon]: n
                                })
                            })
                        })
                    }
                }, {
                    key: "period",
                    cellClassName: G.periodColumn,
                    renderHeader: () => M.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_PERIOD,
                    render(e, t) {
                        let {
                            expandedRows: s
                        } = t, a = [(0, l.jsx)(j, {
                            children: e.periodStartingAt
                        }, e.key)], n = s.has(e.key);
                        if (n)
                            for (let t in e.ppgs) a.push((0, l.jsx)(P, {
                                listingId: t
                            }, t));
                        return a
                    }
                }, {
                    key: "amount",
                    cellClassName: o(G.amountColumn, G.cellAlignRight),
                    renderHeader: () => (0, l.jsx)(b, {}),
                    render(e, t) {
                        let {
                            expandedRows: s
                        } = t, a = [(0, l.jsx)(U, {
                            children: e.amount
                        }, e.key)], n = s.has(e.key);
                        if (n)
                            for (let t in e.ppgs) {
                                let s = e.ppgs[t];
                                a.push((0, l.jsx)(U, {
                                    children: null == s ? void 0 : s.amount
                                }, t))
                            }
                        return a
                    }
                }, {
                    key: "status",
                    cellClassName: o(G.statusColumn, G.cellAlignRight),
                    renderHeader: () => (0, l.jsx)(B, {}),
                    render(e) {
                        let {
                            ppgStatus: t,
                            payoutStatus: s,
                            ppgDeferralReasons: a,
                            periodEndDate: n
                        } = (0, _.getStatusForPeriod)(e);
                        return (0, l.jsx)(v, {
                            children: x(t, s, a, n)
                        })
                    }
                }];
            var H = e => {
                let {
                    payoutsByPeriod: t
                } = e, [s, a] = i.useState(new Set);
                return (0, l.jsx)("div", {
                    className: G.tableContainer,
                    children: (0, l.jsx)(T.default, {
                        columns: F,
                        data: t,
                        className: G.table,
                        rowClassName: G.row,
                        headerClassName: G.header,
                        cellProps: {
                            onToggleExpandRow: e => {
                                a(t => {
                                    let s = new Set(t);
                                    return s.has(e) ? s.delete(e) : s.add(e), s
                                })
                            },
                            expandedRows: s
                        }
                    })
                })
            }
        },
        940958: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                MetricTrend: function() {
                    return E
                },
                default: function() {
                    return _
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("68238"),
                o = s("434014"),
                d = s("223968"),
                u = s("782340"),
                c = s("297904");
            let E = e => {
                let {
                    value: t,
                    isPercent: s
                } = e;
                if (null == t) return null;
                let {
                    formattedValue: n,
                    isPositive: r
                } = (0, o.formatMetricTrend)(t, s);
                return (0, a.jsxs)("div", {
                    className: c.trendContainer,
                    children: [(0, a.jsx)(d.default, {
                        className: l(c.chartLineIcon, {
                            [c.chartLineIconNegative]: !r
                        })
                    }), (0, a.jsx)(i.Text, {
                        variant: "text-md/normal",
                        className: c.trendDescription,
                        children: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_TREND_DESCRIPTION.format({
                            value: n
                        })
                    })]
                })
            };
            var _ = e => {
                let {
                    label: t,
                    sublabel: s,
                    value: n,
                    additionalContent: l,
                    tooltip: o
                } = e;
                return (0, a.jsxs)("div", {
                    className: c.container,
                    children: [(0, a.jsxs)("div", {
                        children: [(0, a.jsxs)("div", {
                            className: c.labelContainer,
                            children: [(0, a.jsx)(i.Text, {
                                variant: "text-xs/medium",
                                className: c.label,
                                children: t
                            }), null != o && (0, a.jsx)(i.Tooltip, {
                                text: o,
                                children: e => (0, a.jsx)(r.default, {
                                    className: c.labelTooltipIcon,
                                    ...e
                                })
                            }), null != s ? (0, a.jsx)(i.Text, {
                                variant: "text-xs/normal",
                                className: c.sublabel,
                                children: s
                            }) : null]
                        }), (0, a.jsx)(i.Text, {
                            className: c.value,
                            variant: "text-sm/normal",
                            children: n
                        })]
                    }), l]
                })
            }
        },
        657650: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("65597"),
                l = s("77078"),
                i = s("305961"),
                r = s("697218"),
                o = s("191814"),
                d = s("757715"),
                u = s("782340");

            function c(e) {
                let {
                    guildId: t,
                    application: c
                } = e, E = (0, n.default)([i.default], () => i.default.getGuild(t)), _ = (0, n.default)([r.default], () => r.default.getCurrentUser()), T = (0, d.useRoleSubscriptionSettingsDisabled)();
                if (null == E) return null;
                let I = E.isOwner(_);
                if (!I) return null;
                let S = c.team;
                return (0, a.jsxs)("div", {
                    children: [(0, a.jsx)(l.FormText, {
                        type: l.FormText.Types.DESCRIPTION,
                        disabled: T,
                        children: null != S ? u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_DESCRIPTION.format({
                            teamName: S.name
                        }) : u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_NO_TEAM_DESCRIPTION
                    }), (0, a.jsx)(o.default, {
                        size: 16
                    }), (0, a.jsx)(l.Button, {
                        look: l.Button.Looks.FILLED,
                        color: null != S ? l.Button.Colors.PRIMARY : l.Button.Colors.BRAND_NEW,
                        onClick: () => {
                            var e;
                            return e = c, void(0, l.openModalLazy)(async () => {
                                let {
                                    default: t
                                } = await s.el("996220").then(s.bind(s, "996220"));
                                return s => (0, a.jsx)(t, {
                                    ...s,
                                    application: e
                                })
                            })
                        },
                        disabled: T,
                        children: null != S ? u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_CHANGE_TEAM_CTA : u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_SELECT_TEAM_CTA
                    })]
                })
            }
        },
        441901: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("65597"),
                l = s("77078"),
                i = s("305961"),
                r = s("191814"),
                o = s("837008"),
                d = s("397056"),
                u = s("782340");

            function c(e) {
                let {
                    guildId: t,
                    allPeriods: c
                } = e, E = (0, n.default)([i.default], () => i.default.getGuild(t)), _ = (0, o.useSubscriptionListingsForGuild)(t, {
                    includeSoftDeleted: !0
                }), T = c.filter(e => {
                    var t;
                    let s = Object.values(null !== (t = e.ppgs) && void 0 !== t ? t : {})[0];
                    return (null == s ? void 0 : s.status) === d.PaymentPayoutGroupStatuses.OPEN || (null == s ? void 0 : s.status) === d.PaymentPayoutGroupStatuses.PAYOUT_DEFERRED
                }), I = _.length > 0, S = T.length > 0;
                return null == E ? null : (0, a.jsxs)("div", {
                    children: [(0, a.jsx)(l.FormText, {
                        type: l.FormText.Types.DESCRIPTION,
                        children: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_DISABLE_MONETIZATION_SECTION_DESCRIPTION.format({
                            guildName: E.toString()
                        })
                    }), (0, a.jsx)(r.default, {
                        size: 16
                    }), (0, a.jsx)(l.Button, {
                        disabled: I || S,
                        look: l.Button.Looks.FILLED,
                        color: l.Button.Colors.RED,
                        onClick: () => {
                            var e;
                            return e = E, void(0, l.openModalLazy)(async () => {
                                let {
                                    default: t
                                } = await s.el("264514").then(s.bind(s, "264514"));
                                return s => (0, a.jsx)(t, {
                                    ...s,
                                    guild: e
                                })
                            })
                        },
                        children: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_DISABLE_MONETIZATION_CTA
                    })]
                })
            }
        },
        223968: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(i),
                    width: t,
                    height: s,
                    viewBox: "0 0 20 20",
                    children: (0, a.jsx)("path", {
                        d: "M12.5 3.33334V5H17.1583L11.6667 10.4917L8.33333 7.15834L0 15.4917L1.175 16.6667L8.33333 9.50834L11.6667 12.8417L18.3333 6.175V10.8333H20V3.33334H12.5Z",
                        fill: l
                    })
                })
            }
        },
        860598: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(i),
                    width: t,
                    height: s,
                    viewBox: "0 0 20 20",
                    children: (0, a.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        fill: l,
                        d: "M10 20C15.5228 20 20 15.5228 20 10C20 4.47715 15.5228 0 10 0C4.47715 0 0 4.47715 0 10C0 15.5228 4.47715 20 10 20ZM7.5 5.5V6.17157C7.5 6.30418 7.55268 6.43136 7.64645 6.52513L10 8.87868L12.3536 6.52513C12.4473 6.43136 12.5 6.30418 12.5 6.17157V5.5H7.5ZM6.58579 7.58579L9 10L6.58579 12.4142C6.21071 12.7893 6 13.298 6 13.8284V15C6 15.5523 6.44772 16 7 16L13 16C13.5523 16 14 15.5523 14 15V13.8284C14 13.298 13.7893 12.7893 13.4142 12.4142L11 10L13.4142 7.58579C13.7893 7.21071 14 6.70201 14 6.17157V5C14 4.44772 13.5523 4 13 4H7C6.44772 4 6 4.44772 6 5V6.17157C6 6.70201 6.21071 7.21071 6.58579 7.58579Z"
                    })
                })
            }
        },
        445940: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: l = "currentColor",
                    foreground: i,
                    ...r
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(r),
                    width: t,
                    height: s,
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        className: i,
                        fill: l,
                        d: "M13.5605 11L11.2646 8.706L12.6842 7.294L17.4023 12.009L12.6822 16.708L11.2656 15.292L13.5685 13H2C2.50429 18.045 6.7842 22 11.9744 22C17.5025 22 22 17.513 22 12C22 6.487 17.5025 2 11.9744 2C6.7842 2 2.50429 5.954 2 11H13.5605Z"
                    })
                })
            }
        },
        341020: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(i),
                    width: t,
                    height: s,
                    viewBox: "0 0 24 24",
                    children: (0, a.jsx)("path", {
                        d: "M23 9V19C23 20.1 22.1 21 21 21H3C1.9 21 1 20.1 1 19V6C1 4.34 2.34 3 4 3H19C20.1 3 21 3.9 21 5H4C3.45 5 3 5.45 3 6C3 6.55 3.45 7 4 7H21C22.1 7 23 7.9 23 9ZM21 12H17C15.9 12 15 12.9 15 14C15 15.1 15.9 16 17 16H21V12Z",
                        fill: l
                    })
                })
            }
        },
        268997: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                CommunityAdminServerExperiment: function() {
                    return n
                }
            });
            var a = s("862205");
            let n = (0, a.createExperiment)({
                kind: "guild",
                id: "2022-06_community_admin_server",
                label: "Show the button to join the admin server in community overview server settings page",
                defaultConfig: {
                    enabled: !1
                },
                treatments: [{
                    id: 1,
                    label: "Show button if requirements met",
                    config: {
                        enabled: !0
                    }
                }, {
                    id: 2,
                    label: "Bypass requirements",
                    config: {
                        enabled: !0
                    }
                }]
            })
        },
        827159: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                generateDeveloperPortalLink: function() {
                    return l
                }
            });
            var a = s("672630"),
                n = s("49111");
            async function l(e) {
                let t = a.default.generateNonce();
                try {
                    let s = await a.default.createHandoffToken(t);
                    return n.MarketingURLs.DEVELOPER_PORTAL_LOGIN_HANDOFF(t, s, e)
                } catch {
                    return "//".concat(window.GLOBAL_ENV.DEVELOPERS_ENDPOINT, "/").concat(e)
                }
            }
        },
        199938: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                staffOnlyGuildSettingsAccess: function() {
                    return r
                },
                useGuildAccessRateInsightExperiment: function() {
                    return o
                }
            });
            var a = s("884691"),
                n = s("862205"),
                l = s("697218");
            let i = (0, n.createExperiment)({
                kind: "guild",
                id: "2022-03_guild_access_rate_insight_experiment",
                label: "Guild Access Rate Insight Experiment",
                defaultConfig: {
                    showAccessRate: !1
                },
                treatments: [{
                    id: 1,
                    label: "Show guild access rate in insights",
                    config: {
                        showAccessRate: !0
                    }
                }]
            });

            function r(e) {
                var t;
                let s = null === (t = l.default.getCurrentUser()) || void 0 === t ? void 0 : t.isStaff();
                return s && i.getCurrentConfig({
                    guildId: e,
                    location: "77b4b2_1"
                }).showAccessRate
            }

            function o(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                return a.useEffect(() => {
                    !t && null != e && i.trackExposure({
                        guildId: e,
                        location: "77b4b2_2"
                    })
                }, [e, t]), i.useExperiment({
                    guildId: null != e ? e : "",
                    location: "77b4b2_3"
                }, {
                    autoTrackExposure: !1,
                    disable: t || null == e
                })
            }
        },
        961394: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("862205");
            let n = (0, a.createExperiment)({
                kind: "user",
                id: "2020-12_guild_delete_feedback",
                label: "Guild Delete Feedback experiment",
                defaultConfig: {
                    showFeedback: !1
                },
                treatments: [{
                    id: 1,
                    label: "Show guild delete feedback",
                    config: {
                        showFeedback: !0
                    }
                }]
            });
            var l = n
        },
        738216: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                fetchEngagementOverview: function() {
                    return o
                },
                fetchGrowthActivationOverview: function() {
                    return d
                },
                fetchGrowthActivationRetention: function() {
                    return u
                },
                fetchMemberInsights: function() {
                    return c
                }
            });
            var a = s("872717"),
                n = s("913144"),
                l = s("49111");
            let i = 36288e5;

            function r(e, t) {
                let s = new Date,
                    n = new Date(s.getTime() - (s.getDay() + 1) * 864e5 - i);
                return a.default.get({
                    url: t(e),
                    query: {
                        start: n.toISOString(),
                        end: s.toISOString(),
                        interval: 2
                    },
                    oldFormErrors: !0
                })
            }

            function o(e) {
                return r(e, l.Endpoints.GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW).then(t => {
                    let {
                        body: s
                    } = t;
                    n.default.dispatch({
                        type: "GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW_FETCH_SUCCESS",
                        guildId: e,
                        stats: s.slice(0, 2)
                    })
                }, e => {
                    n.default.dispatch({
                        type: "GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW_FETCH_FAILURE",
                        error: e.body
                    })
                })
            }

            function d(e) {
                return r(e, l.Endpoints.GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW).then(t => {
                    let {
                        body: s
                    } = t;
                    n.default.dispatch({
                        type: "GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW_FETCH_SUCCESS",
                        guildId: e,
                        stats: s.slice(0, 2)
                    })
                }, e => {
                    n.default.dispatch({
                        type: "GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW_FETCH_FAILURE",
                        error: e.body
                    })
                })
            }

            function u(e) {
                return r(e, l.Endpoints.GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION).then(t => {
                    let {
                        body: s
                    } = t, a = s.filter(e => e.hasOwnProperty("pct_retained")).map(e => {
                        let {
                            interval_start_timestamp: t,
                            pct_retained: s,
                            ...a
                        } = e;
                        return {
                            interval_start_timestamp: t,
                            pct_retained: s
                        }
                    });
                    n.default.dispatch({
                        type: "GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION_FETCH_SUCCESS",
                        guildId: e,
                        stats: a.slice(0, 2)
                    })
                }, e => {
                    n.default.dispatch({
                        type: "GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION_FETCH_FAILURE",
                        error: e.body
                    })
                })
            }

            function c(e) {
                return a.default.get({
                    url: l.Endpoints.GUILD_ANALYTICS_MEMBER_INSIGHTS(e)
                }).then(t => {
                    n.default.dispatch({
                        type: "GUILD_ANALYTICS_MEMBER_INSIGHTS_FETCH_SUCCESS",
                        guildId: e,
                        hasAccessRate: t.body.has_access_rate,
                        accessRate: t.body.access_rate
                    })
                }, () => {})
            }
        },
        692541: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return T
                }
            });
            var a = s("208302"),
                n = s.n(a),
                l = s("446674"),
                i = s("913144");
            let r = ["pct_retained", "new_members", "visitors", "communicators"],
                o = {},
                d = {},
                u = null;

            function c(e) {
                let {
                    guildId: t,
                    stats: s
                } = e;
                u = null;
                let a = {},
                    l = {},
                    i = s[0],
                    d = s[1];
                null != i && r.forEach(e => {
                    if (null != i[e]) {
                        let t = n(e);
                        null != d && 0 !== d[e] && (a["".concat(t, "Change")] = (i[e] - d[e]) * 100 / d[e]), l[t] = i[e]
                    }
                }), o[t] = {
                    ...l,
                    ...a,
                    ...o[t]
                }
            }

            function E(e) {
                let {
                    error: t
                } = e;
                u = t.code
            }
            class _ extends l.default.Store {
                getOverviewAnalytics(e) {
                    return o[e]
                }
                getMemberInsights(e) {
                    var t;
                    return null !== (t = d[e]) && void 0 !== t ? t : {}
                }
                shouldFetchMemberInsights(e) {
                    var t;
                    let s = null === (t = d[e]) || void 0 === t ? void 0 : t.fetchedAt;
                    return null == s || Date.now() - s > 432e5
                }
                getError() {
                    return u
                }
            }
            _.displayName = "GuildSettingsAnalyticsStore";
            var T = new _(i.default, {
                GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW_FETCH_SUCCESS: c,
                GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW_FETCH_SUCCESS: c,
                GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION_FETCH_SUCCESS: c,
                GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW_FETCH_FAILURE: E,
                GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW_FETCH_FAILURE: E,
                GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION_FETCH_FAILURE: E,
                GUILD_ANALYTICS_MEMBER_INSIGHTS_FETCH_SUCCESS: function(e) {
                    let {
                        guildId: t,
                        ...s
                    } = e;
                    d[t] = {
                        ...s,
                        fetchedAt: Date.now()
                    }
                }
            })
        },
        287103: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return P
                }
            }), s("424973"), s("222007"), s("843762");
            var a = s("917351"),
                n = s.n(a),
                l = s("316693"),
                i = s("446674"),
                r = s("913144"),
                o = s("242020"),
                d = s("233069"),
                u = s("26989"),
                c = s("305961"),
                E = s("49111");
            let _ = [E.Permissions.KICK_MEMBERS, E.Permissions.BAN_MEMBERS, E.Permissions.ADMINISTRATOR, E.Permissions.MANAGE_CHANNELS, E.Permissions.MANAGE_GUILD, E.Permissions.MANAGE_MESSAGES, E.Permissions.MANAGE_NICKNAMES, E.Permissions.MANAGE_ROLES, E.Permissions.MANAGE_WEBHOOKS, E.Permissions.MANAGE_GUILD_EXPRESSIONS, E.Permissions.MOVE_MEMBERS, E.Permissions.MUTE_MEMBERS, E.Permissions.DEAFEN_MEMBERS],
                T = null,
                I = [],
                S = [],
                N = [],
                f = [],
                g = [],
                A = [],
                L = [],
                m = [],
                C = !0,
                O = !1,
                h = !1,
                R = !0,
                D = !1,
                M = null,
                G = E.AuditLogActions.ALL,
                x = {},
                p = 0;

            function U(e) {
                let t = [],
                    s = 0;
                return e.reverse().forEach(e => {
                    var a, l, i;
                    let r = [],
                        u = null,
                        c = null,
                        _ = null;
                    if (null != e.reason && r.push(new o.AuditLogChange(E.AuditLogChangeKeys.REASON, null, e.reason)), null != e.changes)
                        for (let t of e.changes) {
                            let e = new o.AuditLogChange(t.key, t.old_value, t.new_value);
                            r.push(e), e.key === E.AuditLogChangeKeys.NAME ? u = e : e.key === E.AuditLogChangeKeys.TYPE ? _ = e : e.key === E.AuditLogChangeKeys.TITLE && (c = e)
                        }
                    if (e.action_type === E.AuditLogActions.MEMBER_PRUNE) {
                        let t = null != e && null != e.options && null != e.options.delete_member_days ? e.options.delete_member_days : 1,
                            s = new o.AuditLogChange(E.AuditLogChangeKeys.PRUNE_DELETE_DAYS, null, t);
                        r.push(s)
                    }
                    e.action_type === E.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE && (null === (l = e.options) || void 0 === l ? void 0 : l.auto_moderation_rule_name) != null && r.push(new o.AuditLogChange(E.AuditLogChangeKeys.AUTO_MODERATION_TRIGGERED_RULE_NAME, null, e.options.auto_moderation_rule_name)), e.action_type === E.AuditLogActions.VOICE_CHANNEL_STATUS_CREATE && (null === (a = e.options) || void 0 === a ? void 0 : a.status) != null && r.push(new o.AuditLogChange(E.AuditLogChangeKeys.STATUS, null, e.options.status));
                    let T = new o.default({
                            id: e.id,
                            action: e.action_type,
                            targetId: e.target_id,
                            userId: e.user_id,
                            changes: r,
                            options: e.options
                        }),
                        I = t[0];
                    if (function(e, t, s) {
                            let a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 30,
                                l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 50;
                            return null != e && e.action === t.action && e.targetId === t.targetId && e.userId === t.userId && n.isEqual(e.options, t.options) && t.timestampStart.diff(e.timestampStart, "minutes") < a && s < l && t.targetType !== E.AuditLogTargetTypes.INVITE && t.action !== E.AuditLogActions.MESSAGE_DELETE && t.action !== E.AuditLogActions.MESSAGE_BULK_DELETE && t.action !== E.AuditLogActions.MESSAGE_PIN && t.action !== E.AuditLogActions.MESSAGE_UNPIN && t.action !== E.AuditLogActions.MEMBER_MOVE && t.action !== E.AuditLogActions.MEMBER_DISCONNECT && t.action !== E.AuditLogActions.BOT_ADD && t.action !== E.AuditLogActions.APPLICATION_COMMAND_PERMISSION_UPDATE && t.action !== E.AuditLogActions.MEMBER_PRUNE
                        }(I, T, s)) {
                        t[0] = I.merge({
                            changes: [...I.changes, ...T.changes],
                            timestampEnd: T.timestampStart
                        }), s++;
                        return
                    }
                    if (T.actionType === E.AuditLogActionTypes.DELETE && (null != u || null != c)) {
                        let e = null !== (i = null == u ? void 0 : u.oldValue) && void 0 !== i ? i : null == c ? void 0 : c.oldValue;
                        (T.targetType === E.AuditLogTargetTypes.CHANNEL || T.targetType === E.AuditLogTargetTypes.CHANNEL_OVERWRITE) && null !== _ && (0, d.isGuildSelectableChannelType)(_.oldValue) && (e = "#".concat(e)), null == x[T.targetType] ? x[T.targetType] = {
                            [T.targetId]: e
                        } : x[T.targetType][T.targetId] = e
                    }
                    s = 0, t.unshift(T)
                }), t
            }

            function v(e) {
                let {
                    section: t
                } = e;
                if (t !== E.GuildSettingsSections.AUDIT_LOG) return !1;
                let s = u.default.getMembers(T),
                    a = c.default.getGuild(T);
                N = n(s).filter(e => e.roles.some(t => {
                    if (null != a) {
                        if (e.userId === a.ownerId) return !0;
                        let s = a.roles[t];
                        return null != s && _.some(e => l.default.has(s.permissions, e))
                    }
                })).map(e => e.userId).value()
            }
            class j extends i.default.Store {
                get logs() {
                    return I
                }
                get integrations() {
                    return S
                }
                get webhooks() {
                    return f
                }
                get guildScheduledEvents() {
                    return g
                }
                get automodRules() {
                    return A
                }
                get threads() {
                    return L
                }
                get applicationCommands() {
                    return m
                }
                get isInitialLoading() {
                    return C
                }
                get isLoading() {
                    return O
                }
                get isLoadingNextPage() {
                    return h
                }
                get hasOlderLogs() {
                    return R
                }
                get hasError() {
                    return D
                }
                get userIds() {
                    return N
                }
                get userIdFilter() {
                    return M
                }
                get actionFilter() {
                    return G
                }
                get deletedTargets() {
                    return x
                }
                get groupedFetchCount() {
                    return p
                }
            }
            j.displayName = "GuildSettingsAuditLogStore";
            var P = new j(r.default, {
                AUDIT_LOG_FETCH_START: function() {
                    O = !0
                },
                AUDIT_LOG_FETCH_SUCCESS: function(e) {
                    var t;
                    p = 0, C = !1, O = !1, R = !0, D = !1, I = U(e.logs), S = e.integrations, f = e.webhooks, g = e.guildScheduledEvents, A = null !== (t = e.automodRules) && void 0 !== t ? t : [], L = e.threads, m = e.applicationCommands, e.logs.length < E.AUDIT_LOG_PAGE_LIMIT && (R = !1)
                },
                AUDIT_LOG_FETCH_FAIL: function() {
                    O = !1, D = !0, I = []
                },
                AUDIT_LOG_FETCH_NEXT_PAGE_START: function(e) {
                    let {
                        isGroupedFetch: t
                    } = e;
                    h = !0, t && p++
                },
                AUDIT_LOG_FETCH_NEXT_PAGE_SUCCESS: function(e) {
                    let {
                        logs: t,
                        integrations: s,
                        webhooks: a,
                        guildScheduledEvents: n,
                        automodRules: l,
                        threads: i,
                        applicationCommands: r
                    } = e;
                    if (h = !1, S = s, f = a, g = n, A = l, L = i, m = r, (0 === t.length || t.length < E.AUDIT_LOG_PAGE_LIMIT) && (R = !1), t.length > 0) {
                        let e = U(t);
                        I = [...I, ...e]
                    }
                },
                AUDIT_LOG_FETCH_NEXT_PAGE_FAIL: function() {
                    h = !1
                },
                AUDIT_LOG_FILTER_BY_ACTION: function(e) {
                    let {
                        action: t
                    } = e;
                    G = t
                },
                AUDIT_LOG_FILTER_BY_USER: function(e) {
                    let {
                        userId: t
                    } = e;
                    M = t
                },
                GUILD_SETTINGS_SET_SECTION: v,
                GUILD_SETTINGS_INIT: function(e) {
                    let {
                        guildId: t,
                        section: s
                    } = e;
                    return T = t, v({
                        section: s
                    })
                },
                GUILD_SETTINGS_CLOSE: function() {
                    I = [], N = [], G = E.AuditLogActions.ALL, M = null, x = {}, p = 0, C = !0, S = [], f = [], g = [], A = [], L = []
                }
            })
        },
        53948: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                MAX_SUBCATEGORIES: function() {
                    return i
                },
                MAX_KEYWORDS: function() {
                    return r
                },
                MAX_KEYWORD_LENGTH: function() {
                    return o
                },
                GuildSettingsRoleEditSections: function() {
                    return n
                },
                getSettingsErrorMessage: function() {
                    return u
                }
            });
            var a, n, l = s("782340");
            let i = 5,
                r = 10,
                o = 30;
            (a = n || (n = {}))[a.DISPLAY = 0] = "DISPLAY", a[a.PERMISSIONS = 1] = "PERMISSIONS", a[a.MEMBERS = 2] = "MEMBERS", a[a.VERIFICATIONS = 3] = "VERIFICATIONS";
            let d = {
                afk_channel_id: () => l.default.Messages.FORM_LABEL_AFK_CHANNEL,
                public_updates_channel_id: () => l.default.Messages.GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_TITLE,
                safety_alerts_channel_id: () => l.default.Messages.GUILD_ANTIRAID_SAFETY_CHANNEL_TITLE,
                system_channel_id: () => l.default.Messages.FORM_LABEL_SYSTEM_CHANNEL
            };

            function u(e) {
                var t;
                if (0 === Object.keys(e).length) return null;
                let s = Object.keys(e)[0],
                    a = null === (t = d[s]) || void 0 === t ? void 0 : t.call(d);
                return null != a ? "(".concat(a, ") ").concat(e[s]) : e[s]
            }
        },
        816880: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("446674"),
                n = s("913144"),
                l = s("159794"),
                i = s("162771");
            let r = {},
                o = {},
                d = 0;
            class u extends a.default.Store {
                initialize() {
                    this.waitFor(i.default)
                }
                isUploadingEmoji() {
                    return d > 0
                }
                getEmojiRevision(e) {
                    var t;
                    return null !== (t = r[e]) && void 0 !== t ? t : 0
                }
                getEmojis(e) {
                    return o[e]
                }
            }
            u.displayName = "GuildSettingsEmojiStore";
            var c = new u(n.default, {
                EMOJI_DELETE: function(e) {
                    let {
                        guildId: t,
                        emojiId: s
                    } = e;
                    o[t] = o[t].filter(e => e.id !== s)
                },
                EMOJI_FETCH_SUCCESS: function(e) {
                    let {
                        guildId: t,
                        emojis: s
                    } = e;
                    o[t] = s.map(e => new l.default(e))
                },
                EMOJI_FETCH_FAILURE: function(e) {
                    let {
                        guildId: t
                    } = e;
                    o[t] = []
                },
                EMOJI_UPLOAD_START: function() {
                    d++
                },
                EMOJI_UPLOAD_STOP: function() {
                    d--
                },
                GUILD_EMOJIS_UPDATE: function(e) {
                    var t;
                    let {
                        guildId: s
                    } = e;
                    r[s] = (null !== (t = r[s]) && void 0 !== t ? t : 0) + 1
                }
            })
        },
        766419: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                updateRoleSort: function() {
                    return i
                },
                init: function() {
                    return r
                },
                updateRolePermissions: function() {
                    return o
                },
                clearRolePermissions: function() {
                    return d
                },
                updateRoleName: function() {
                    return u
                },
                updateRoleColor: function() {
                    return c
                },
                toggleRoleSettings: function() {
                    return E
                },
                updateRoleIcon: function() {
                    return _
                },
                updateRoleConnectionConfigurations: function() {
                    return T
                },
                saveRoleSettings: function() {
                    return I
                }
            }), s("222007");
            var a = s("913144"),
                n = s("851387"),
                l = s("70919");

            function i(e) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_SORT_UPDATE",
                    roles: e
                })
            }

            function r() {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_INIT"
                })
            }

            function o(e, t, s) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_UPDATE_PERMISSIONS",
                    id: e,
                    flag: t,
                    allow: s
                })
            }

            function d(e) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_CLEAR_PERMISSIONS",
                    id: e
                })
            }

            function u(e, t) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_UPDATE_NAME",
                    id: e,
                    name: t
                })
            }

            function c(e, t) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_UPDATE_COLOR",
                    id: e,
                    color: t
                })
            }

            function E(e, t, s) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_UPDATE_SETTINGS",
                    id: e,
                    hoist: t,
                    mentionable: s
                })
            }

            function _(e, t, s) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_UPDATE_ROLE_ICON",
                    id: e,
                    icon: t,
                    unicodeEmoji: s
                })
            }

            function T(e, t) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_UPDATE_ROLE_CONNECTION_CONFIGURATIONS",
                    roleId: e,
                    roleConnectionConfigurations: t
                })
            }
            async function I(e, t, s, i, r) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_SUBMITTING"
                });
                try {
                    let a = async () => {
                        if (null == t || 0 === t.length) return;
                        let s = t.pop();
                        if (null == s || "" === s.name) return a();
                        await n.default.updateRole(e, s.id, {
                            name: s.name,
                            description: s.description,
                            permissions: s.permissions,
                            color: s.color,
                            hoist: s.hoist,
                            mentionable: s.mentionable,
                            icon: s.icon,
                            unicodeEmoji: s.unicodeEmoji
                        }).then(a, a)
                    };
                    if (null != s && s.length > 0 ? await n.default.batchRoleUpdate(e, s).then(a, a) : await a(), null != r && null != i)
                        for await (let t of i) {
                            let s = r.get(t);
                            await (0, l.putRoleConnectionsConfigurations)(e, t, null != s ? s : [])
                        }
                } catch (e) {
                    var o, d;
                    a.default.dispatch({
                        type: "GUILD_SETTINGS_ROLES_SAVE_FAIL",
                        message: null !== (d = null === (o = e.body) || void 0 === o ? void 0 : o.message) && void 0 !== d ? d : Object.values(e.body)[0]
                    });
                    return
                }
                a.default.dispatch({
                    type: "GUILD_SETTINGS_ROLES_SAVE_SUCCESS"
                })
            }
        },
        531493: function(e, t, s) {
            "use strict";
            let a, n, l;
            s.r(t), s.d(t, {
                default: function() {
                    return F
                }
            }), s("222007");
            var i = s("917351"),
                r = s.n(i),
                o = s("316693"),
                d = s("509043"),
                u = s("446674"),
                c = s("913144"),
                E = s("382981"),
                _ = s("746574"),
                T = s("449008"),
                I = s("991170"),
                S = s("900938"),
                N = s("53948"),
                f = s("49111");
            let g = new Set,
                A = f.FormStates.CLOSED,
                L = !1,
                m = !1,
                C = [],
                O = [],
                h = N.GuildSettingsRoleEditSections.DISPLAY,
                R = !1,
                D = new Set,
                M = new Map,
                G = new Map;

            function x() {
                return null == a || null == C ? [] : _.default.calculatePositionDeltas({
                    oldOrdering: r.values(a.roles),
                    newOrdering: C,
                    idGetter: e => {
                        let {
                            id: t
                        } = e;
                        return t
                    },
                    existingPositionGetter: e => {
                        let {
                            originalPosition: t
                        } = e;
                        return null != t ? t : 1 / 0
                    },
                    ascending: !1
                })
            }

            function p(e) {
                let {
                    section: t
                } = e;
                if (null != a || t !== f.GuildSettingsSections.ROLES) return !1;
                U()
            }

            function U() {
                let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
                a = S.default.getProps().guild, L = !1, m = !1, l = void 0, g.clear(), A = f.FormStates.OPEN, O = [...C = null != a ? r(a.roles).values().value() : []], R = !1, e && (G.clear(), M.forEach((e, t) => {
                    G.set(t, [...e])
                }))
            }
            let v = r.debounce(() => {
                let e = !1;
                m && !(m = x().length > 0) && (e = !0), [...g].forEach(t => {
                    r.isEqual(P(t), function(e) {
                        return O.find(t => {
                            let {
                                id: s
                            } = t;
                            return s === e
                        })
                    }(t)) && (g.delete(t), e = !0)
                }), 0 === g.size && (L = !1), R && r.isEqual(M, G) && (e = !0, R = !1), e && B.emitChange()
            }, 500);

            function j(e, t) {
                let s = C.indexOf(e);
                if (s < 0) return !1;
                let a = {
                    ...e,
                    ...t
                };
                C[s] = a, C = [...C], L = !0, g.add(a.id), v()
            }

            function P(e) {
                return C.find(t => {
                    let {
                        id: s
                    } = t;
                    return s === e
                })
            }

            function y(e) {
                let {
                    guildId: t
                } = e;
                if (null == a || t !== a.id || A === f.FormStates.SUBMITTING) return !1;
                a = S.default.getProps().guild;
                let s = [];
                null != a && (s = r(a.roles).values().value()), g.forEach(e => {
                    let t = P(e),
                        a = -1,
                        n = s.find((t, s) => {
                            let {
                                id: n
                            } = t;
                            if (n === e) return a = s, !0
                        });
                    null == n || null == t ? g.delete(e) : s[a] = t
                }), 0 === g.size && (L = !1), m = !1, C = [...s]
            }
            class b extends u.default.Store {
                initialize() {
                    this.waitFor(S.default, E.default)
                }
                hasChanges() {
                    return L || m || R
                }
                get errorMessage() {
                    return l
                }
                get hasSortChanges() {
                    return m
                }
                get hasRoleConfigurationChanges() {
                    return R
                }
                get guild() {
                    return a
                }
                get editedRoleIds() {
                    return Array.from(g)
                }
                get editedRoleIdsForConfigurations() {
                    return D
                }
                get roles() {
                    return C
                }
                get formState() {
                    return A
                }
                get lastRoleEditSection() {
                    return h
                }
                getSortDeltas() {
                    return x()
                }
                showNotice() {
                    return this.hasChanges()
                }
                getRole(e) {
                    return P(e)
                }
                getPermissionSearchQuery() {
                    return n
                }
                getEditedRoleConnectionConfigurationsMap() {
                    return G
                }
            }
            b.displayName = "GuildSettingsRolesStore";
            let B = new b(c.default, __OVERLAY__ ? {} : {
                GUILD_SETTINGS_ROLES_INIT: () => U(),
                GUILD_SETTINGS_INIT: p,
                GUILD_SETTINGS_SET_SECTION: p,
                GUILD_SETTINGS_ROLES_SORT_UPDATE: function(e) {
                    let {
                        roles: t
                    } = e;
                    if (null != C && t.length !== C.length) return !1;
                    C = t.map(e => P(e)).filter(T.isNotNullish), m = !0, v()
                },
                GUILD_SETTINGS_ROLES_UPDATE_PERMISSIONS: function(e) {
                    let {
                        id: t,
                        flag: s,
                        allow: a
                    } = e, n = P(t);
                    if (null == n) return !1;
                    let {
                        permissions: l
                    } = n;
                    return j(n, {
                        permissions: l = a ? o.default.add(l, s) : o.default.remove(l, s)
                    })
                },
                GUILD_SETTINGS_ROLES_UPDATE_PERMISSION_SET: function(e) {
                    let {
                        id: t,
                        permissions: s
                    } = e, a = P(t);
                    return null != a && j(a, {
                        permissions: s
                    })
                },
                GUILD_SETTINGS_ROLES_CLEAR_PERMISSIONS: function(e) {
                    let {
                        id: t
                    } = e, s = P(t);
                    return null != s && j(s, {
                        permissions: I.default.NONE
                    })
                },
                GUILD_SETTINGS_ROLES_UPDATE_NAME: function(e) {
                    let {
                        id: t,
                        name: s
                    } = e, a = P(t);
                    return null != a && j(a, {
                        name: s
                    })
                },
                GUILD_SETTINGS_ROLES_UPDATE_DESCRIPTION: function(e) {
                    let {
                        id: t,
                        description: s
                    } = e, a = P(t);
                    return null != a && j(a, {
                        description: s
                    })
                },
                GUILD_SETTINGS_ROLES_UPDATE_COLOR: function(e) {
                    let {
                        id: t,
                        color: s
                    } = e, a = 0 === s ? null : (0, d.int2hex)(s), n = P(t);
                    return null != n && j(n, {
                        color: s,
                        colorString: a
                    })
                },
                GUILD_SETTINGS_ROLES_UPDATE_SETTINGS: function(e) {
                    let {
                        id: t,
                        hoist: s,
                        mentionable: a
                    } = e, n = P(t);
                    return null != n && j(n, {
                        hoist: s,
                        mentionable: a
                    })
                },
                GUILD_SETTINGS_ROLES_UPDATE_ROLE_ICON: function(e) {
                    let {
                        id: t,
                        icon: s,
                        unicodeEmoji: a
                    } = e, n = P(t);
                    return null != n && j(n, {
                        icon: s,
                        unicodeEmoji: a
                    })
                },
                GUILD_SETTINGS_ROLE_SELECT: function(e) {
                    let {
                        role: t,
                        searchQuery: s
                    } = e;
                    if (n = s, null != t) {
                        if (null != P(t.id)) {
                            j(t, t);
                            return
                        }
                        C = [...C, t], v()
                    }
                },
                GUILD_ROLE_CONNECTIONS_CONFIGURATIONS_FETCH_SUCCESS: function(e) {
                    let {
                        roleId: t,
                        roleConnectionConfigurations: s
                    } = e, a = P(t);
                    if (null == a) return !1;
                    let n = M.get(a.id);
                    if (r.isEqual(n, s)) return !1;
                    G.set(a.id, s), M.set(a.id, s), v()
                },
                GUILD_SETTINGS_ROLES_UPDATE_ROLE_CONNECTION_CONFIGURATIONS: function(e) {
                    let {
                        roleId: t,
                        roleConnectionConfigurations: s
                    } = e, a = P(t);
                    if (null == a) return !1;
                    R = !0, D.add(a.id), G.set(a.id, s), v()
                },
                GUILD_SETTINGS_CLOSE: function() {
                    a = null, O = C = [], M.clear(), g.clear(), G.clear(), D = new Set, L = !1, m = !1, R = !1, A = f.FormStates.CLOSED
                },
                GUILD_ROLE_CREATE: y,
                GUILD_ROLE_UPDATE: y,
                GUILD_ROLE_DELETE: function(e) {
                    return D.has(e.roleId) && (D.delete(e.roleId), M.delete(e.roleId), G.delete(e.roleId), R = !1), y(e)
                },
                GUILD_SETTINGS_ROLES_SUBMITTING: function() {
                    A = f.FormStates.SUBMITTING
                },
                GUILD_SETTINGS_ROLES_SAVE_FAIL: function(e) {
                    let {
                        message: t
                    } = e;
                    A = f.FormStates.OPEN, l = t
                },
                GUILD_SETTINGS_ROLES_SAVE_SUCCESS: function() {
                    U(!1)
                },
                GUILD_SETTINGS_ROLES_EDIT_SECTION_UPDATE: function(e) {
                    let {
                        section: t
                    } = e;
                    h = t
                }
            });
            var F = B
        },
        385334: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                isRolePowerful: function() {
                    return i
                },
                getPowerfulPermissionTitles: function() {
                    return r
                }
            }), s("424973"), s("222007");
            var a = s("316693"),
                n = s("465305"),
                l = s("49111");

            function i(e) {
                return a.default.hasAny(e.permissions, l.ElevatedPermissions)
            }

            function r(e, t) {
                let s = [],
                    i = n.default.getGuildPermissionSpecMap(e);
                for (let e of l.ElevatedPermissionsList) a.default.has(t.permissions, e) && s.push(i[e.toString()].title);
                return s
            }
        },
        610494: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                close: function() {
                    return i
                },
                resetCode: function() {
                    return r
                },
                setCode: function() {
                    return o
                },
                saveCode: function() {
                    return d
                }
            });
            var a = s("872717"),
                n = s("913144"),
                l = s("49111");

            function i() {
                n.default.dispatch({
                    type: "GUILD_SETTINGS_VANITY_URL_CLOSE"
                })
            }

            function r() {
                n.default.dispatch({
                    type: "GUILD_SETTINGS_VANITY_URL_RESET"
                })
            }

            function o(e) {
                n.default.dispatch({
                    type: "GUILD_SETTINGS_VANITY_URL_SET",
                    code: e
                })
            }

            function d(e, t) {
                return a.default.patch({
                    url: l.Endpoints.GUILD_VANITY_URL(e),
                    body: {
                        code: t
                    },
                    oldFormErrors: !0
                }).then(e => {
                    let {
                        body: {
                            code: t,
                            uses: s
                        }
                    } = e;
                    n.default.dispatch({
                        type: "GUILD_SETTINGS_SET_VANITY_URL",
                        code: t,
                        uses: s
                    })
                }, e => (n.default.dispatch({
                    type: "GUILD_SETTINGS_VANITY_URL_ERROR",
                    error: e.body
                }), e))
            }
        },
        355665: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("446674"),
                n = s("913144");
            let l = null,
                i = 0,
                r = null,
                o = null;
            class d extends a.default.Store {
                showNotice() {
                    return l !== r
                }
                get vanityURLCode() {
                    return l
                }
                get originalVanityURLCode() {
                    return r
                }
                get vanityURLUses() {
                    return i
                }
                hasError() {
                    return null != o
                }
                get errorDetails() {
                    return o
                }
            }
            d.displayName = "GuildSettingsVanityURLStore";
            var u = new d(n.default, {
                GUILD_SETTINGS_SET_VANITY_URL: function(e) {
                    var t, s;
                    r = l = null !== (t = e.code) && void 0 !== t ? t : "", i = e.uses, o = null !== (s = e.error) && void 0 !== s ? s : null
                },
                GUILD_SETTINGS_VANITY_URL_CLOSE: function() {
                    r = l = null, i = 0, o = null
                },
                GUILD_SETTINGS_VANITY_URL_RESET: function() {
                    l = r, i = 0
                },
                GUILD_SETTINGS_VANITY_URL_SET: function(e) {
                    l = e.code, i = 0
                },
                GUILD_SETTINGS_VANITY_URL_ERROR: function(e) {
                    o = e.error
                }
            })
        },
        11893: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getErrorMessageFromErrorCode: function() {
                    return l
                },
                canSeeVanityUrlSettings: function() {
                    return i
                }
            });
            var a = s("49111"),
                n = s("782340");

            function l(e) {
                switch (e) {
                    case a.AbortCodes.UNKNOWN_CHANNEL:
                        return n.default.Messages.SET_VANITY_URL_ERROR_MESSAGE_UNKNOWN_CHANNEL;
                    case a.AbortCodes.INVALID_PERMISSIONS:
                        return n.default.Messages.SET_VANITY_URL_ERROR_MESSAGE_INVALID_PERMISSIONS;
                    case a.AbortCodes.INVALID_ACCESS:
                        return n.default.Messages.SET_VANITY_URL_ERROR_MESSAGE_INVALID_ACCESS;
                    case a.AbortCodes.VANITY_URL_REQUIRED_FOR_PUBLISHED_GUILDS:
                        return n.default.Messages.SET_VANITY_URL_ERROR_MESSAGE_REQUIRED_FOR_PUBLISHED_GUILDS;
                    case a.AbortCodes.VANITY_URL_EMPLOYEE_ONLY_GUILD_DISABLED:
                        return n.default.Messages.VANITY_URL_EMPLOYEE_ONLY_GUILD_DISABLED;
                    case a.AbortCodes.VANITY_URL_REQUIREMENTS_NOT_MET:
                        return n.default.Messages.SET_VANITY_URL_ERROR_MESSAGE_REQUIREMENTS_NOT_MET;
                    default:
                        return n.default.Messages.CHANGE_VANITY_URL_ERROR
                }
            }

            function i(e) {
                return e.hasFeature(a.GuildFeatures.VANITY_URL) || e.hasFeature(a.GuildFeatures.GUILD_WEB_PAGE_VANITY_URL) && null != e.vanityURLCode
            }
        },
        137933: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return V
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("817736"),
                o = s.n(r),
                d = s("974667"),
                u = s("118810"),
                c = s("446674"),
                E = s("77078"),
                _ = s("252073"),
                T = s("272030"),
                I = s("642950"),
                S = s("465395"),
                N = s("510889"),
                f = s("161778"),
                g = s("242020"),
                A = s("766274"),
                L = s("42203"),
                m = s("305961"),
                C = s("102985"),
                O = s("697218"),
                h = s("941886"),
                R = s("155207"),
                D = s("987663"),
                M = s("449008"),
                G = s("158998"),
                x = s("287103"),
                p = s("900938"),
                U = s("347584"),
                v = s("49111"),
                j = s("782340"),
                P = s("800755"),
                y = s("241372"),
                b = s("212029");
            class B extends n.PureComponent {
                render() {
                    let {
                        onHeaderClick: e,
                        guildId: t,
                        guild: s,
                        ...n
                    } = this.props;
                    return null == t ? null : (0, a.jsx)(U.default, {
                        ...n,
                        guildId: t,
                        guild: s,
                        onHeaderClick: this.handleHeaderClick,
                        onUserContextMenu: this.handleUserContextMenu,
                        onChannelContextMenu: this.handleChannelContextMenu,
                        onTargetContextMenu: this.handleTargetContextMenu
                    })
                }
                constructor(...e) {
                    super(...e), this.handleHeaderClick = () => {
                        let {
                            onHeaderClick: e,
                            log: t
                        } = this.props;
                        null == e || e(t)
                    }, this.handleUserContextMenu = e => {
                        let {
                            log: t,
                            guildId: n
                        } = this.props, {
                            user: l
                        } = t;
                        null != l && null != n && (0, T.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("471085").then(s.bind(s, "471085"));
                            return t => (0, a.jsx)(e, {
                                ...t,
                                guildId: n,
                                user: l
                            })
                        })
                    }, this.handleChannelContextMenu = e => {
                        let {
                            log: t,
                            guildId: n
                        } = this.props, l = m.default.getGuild(n);
                        null != t.options.channel && null != l && (0, T.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("887127").then(s.bind(s, "887127"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                channel: t.options.channel
                            })
                        })
                    }, this.handleTargetContextMenu = e => {
                        let {
                            log: t,
                            guildId: n
                        } = this.props;
                        switch (t.targetType) {
                            case v.AuditLogTargetTypes.CHANNEL:
                            case v.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                                let l = L.default.getChannel(t.targetId),
                                    i = m.default.getGuild(n);
                                if (null != l && null != i) return (0, T.openContextMenuLazy)(e, async () => {
                                    let {
                                        default: e
                                    } = await s.el("887127").then(s.bind(s, "887127"));
                                    return t => (0, a.jsx)(e, {
                                        ...t,
                                        channel: l
                                    })
                                });
                                return (0, T.openContextMenuLazy)(e, async () => {
                                    let {
                                        default: e
                                    } = await s.el("443070").then(s.bind(s, "443070"));
                                    return s => (0, a.jsx)(e, {
                                        ...s,
                                        id: t.targetId,
                                        label: j.default.Messages.COPY_ID_UNKNOWN
                                    })
                                });
                            case v.AuditLogTargetTypes.USER:
                                let r = O.default.getUser(t.targetId);
                                if (null != r && null != n) return (0, T.openContextMenuLazy)(e, async () => {
                                    let {
                                        default: e
                                    } = await s.el("471085").then(s.bind(s, "471085"));
                                    return t => (0, a.jsx)(e, {
                                        ...t,
                                        guildId: n,
                                        user: r
                                    })
                                })
                        }
                        return null
                    }
                }
            }

            function F(e) {
                let {
                    logs: t,
                    guildId: s,
                    guild: l,
                    expandedId: i,
                    lastExpandedId: r,
                    scroller: o,
                    setExpandedRef: u,
                    setLastExpandedRef: c,
                    onHeaderClick: E,
                    onContentClick: _
                } = e, T = n.useRef(o);
                n.useEffect(() => {
                    T.current = o
                }, [o]);
                let I = (0, N.default)("audit-log", T);
                return (0, a.jsx)(d.ListNavigatorProvider, {
                    navigator: I,
                    children: (0, a.jsx)(d.ListNavigatorContainer, {
                        children: e => {
                            let {
                                ref: n,
                                ...o
                            } = e;
                            return (0, a.jsx)("div", {
                                ref: n,
                                ...o,
                                children: t.map(e => {
                                    let t = i === e.id,
                                        n = r === e.id;
                                    return (0, a.jsx)(B, {
                                        guildId: s,
                                        guild: l,
                                        ref: t ? u : n ? c : null,
                                        className: P.row,
                                        onHeaderClick: E,
                                        onContentClick: _,
                                        log: e,
                                        expanded: t
                                    }, e.id)
                                })
                            })
                        }
                    })
                })
            }
            class H extends n.PureComponent {
                componentDidMount() {
                    (0, _.fetchLogs)(this.props.guildId), document.addEventListener("click", this.handleOutsideClick)
                }
                componentWillUnmount() {
                    document.removeEventListener("click", this.handleOutsideClick)
                }
                componentDidUpdate(e, t) {
                    this.state.expandedId !== t.expandedId && this.fixScroll(), !this.props.showLoadMore && this.props.logs.length !== e.logs.length && null != this._scrollerRef && this.isScrollerAtBottom() && (0, _.fetchNextLogPage)(this.props.guildId, !0)
                }
                isScrollerAtBottom() {
                    var e;
                    return (null === (e = this._scrollerRef) || void 0 === e ? void 0 : e.isScrolledToBottom()) || !1
                }
                fixScroll() {
                    let e = this._scrollerRef;
                    if (null == e) return;
                    let t = this.getRects(),
                        s = this._prevRects;
                    if (null == t.expanded || null == t.lastExpanded || null == s.expanded || t.expanded.top < t.lastExpanded.top) return;
                    let a = s.expanded.height - t.lastExpanded.height,
                        n = e.getScrollerState(),
                        l = n.scrollTop - a;
                    e.scrollTo({
                        to: l
                    })
                }
                getRects() {
                    let e = {
                        lastExpanded: null,
                        expanded: null
                    };
                    if (null != this._lastExpandedRef) {
                        let t = o.findDOMNode(this._lastExpandedRef);
                        (0, u.isElement)(t) && (e.lastExpanded = t.getBoundingClientRect())
                    }
                    if (null != this._expandedRef) {
                        let t = o.findDOMNode(this._expandedRef);
                        (0, u.isElement)(t) && (e.expanded = t.getBoundingClientRect())
                    }
                    return e
                }
                renderUserQuickSelectValue(e) {
                    var t;
                    return null !== (t = e.valueLabel) && void 0 !== t ? t : e.label
                }
                renderActionQuickSelectValue(e) {
                    var t;
                    return null !== (t = e.valueLabel) && void 0 !== t ? t : e.label
                }
                renderHeader() {
                    return (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsxs)("div", {
                            className: P.customHeader,
                            children: [(0, a.jsx)(E.FormTitle, {
                                tag: E.FormTitleTags.H1,
                                className: P.formTitle,
                                children: j.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG
                            }), this.renderHeaderDropdowns()]
                        }), (0, a.jsx)(E.FormDivider, {
                            className: P.divider
                        })]
                    })
                }
                renderSpinner() {
                    return (0, a.jsx)(E.Spinner, {
                        type: E.Spinner.Type.SPINNING_CIRCLE
                    })
                }
                renderContent() {
                    let {
                        expandedId: e,
                        lastExpandedId: t
                    } = this.state, {
                        logs: n,
                        theme: l,
                        hide: i,
                        isInitialLoading: r,
                        isLoading: o,
                        hasError: d,
                        guildId: u,
                        guild: c
                    } = this.props;
                    if (i) return (0, a.jsx)(I.default, {});
                    if (o || r) return this.renderSpinner();
                    if (0 === n.length) {
                        let e = d ? j.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_BODY : j.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_BODY,
                            t = d ? j.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_TITLE : j.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_TITLE;
                        return (0, a.jsxs)(h.default, {
                            theme: l,
                            className: P.empty,
                            children: [(0, a.jsx)(h.EmptyStateImage, {
                                darkSrc: s("935855"),
                                lightSrc: s("847598"),
                                width: 272,
                                height: 130
                            }), (0, a.jsx)(h.EmptyStateText, {
                                note: e,
                                style: {
                                    maxWidth: 300
                                },
                                children: t
                            })]
                        })
                    }
                    return (0, a.jsx)(F, {
                        logs: n,
                        guildId: u,
                        guild: c,
                        expandedId: e,
                        lastExpandedId: t,
                        setExpandedRef: this.handleSetExpandedRef,
                        setLastExpandedRef: this.handleSetLastExpandedRef,
                        onHeaderClick: this.handleHeaderClick,
                        onContentClick: this.handleContentClick,
                        scroller: this._scrollerRef
                    })
                }
                render() {
                    let {
                        isLoadingNextPage: e,
                        hide: t,
                        isLoading: s
                    } = this.props;
                    return (0, a.jsx)("div", {
                        className: y.customColumn,
                        children: (0, a.jsx)("div", {
                            className: y.customContainer,
                            children: (0, a.jsx)(E.AdvancedScrollerAuto, {
                                className: i(y.customScroller, P.scroller),
                                onScroll: this.handleOnScroll,
                                ref: this.handleSetScrollerRef,
                                children: (0, a.jsx)("div", {
                                    className: P.content,
                                    ref: this._contentRef,
                                    children: (0, a.jsxs)(E.FocusRingScope, {
                                        containerRef: this._contentRef,
                                        children: [this.renderHeader(), this.renderContent(), this.renderLoadMore(), !e || t || s ? null : this.renderSpinner()]
                                    })
                                })
                            })
                        })
                    })
                }
                constructor(...e) {
                    super(...e), this._clickedInside = !1, this._scrollerRef = null, this._prevRects = this.getRects(), this._contentRef = n.createRef(), this.state = {
                        expandedId: null,
                        lastExpandedId: null,
                        actionFilterQuery: ""
                    }, this.renderActionQuickSelectItem = (e, t) => {
                        var s;
                        let {
                            actionFilter: n
                        } = this.props, l = (0, g.getActionType)(e.value), i = (0, g.getTargetType)(e.value), r = e.value === n;
                        return (0, a.jsxs)(E.ComboboxItem, {
                            value: e.value,
                            selectedColor: E.ComboboxItem.Colors.BRAND,
                            children: [(0, a.jsx)(E.ComboboxItem.Icon, {
                                children: (0, a.jsx)(U.AuditLogIcon, {
                                    themeOverride: r ? v.ThemeTypes.DARK : null,
                                    actionType: l,
                                    targetType: i,
                                    action: e.value
                                })
                            }), (0, a.jsx)(E.ComboboxItem.Label, {
                                children: e.label
                            }), (0, a.jsx)(E.ComboboxItem.Checkmark, {})]
                        }, null !== (s = e.key) && void 0 !== s ? s : t)
                    }, this.renderUserQuickSelectItem = (e, t) => {
                        var s;
                        if (e.user instanceof A.default) {
                            let t = e.user;
                            return (0, a.jsxs)(E.ComboboxItem, {
                                value: t.id,
                                selectedColor: E.ComboboxItem.Colors.BRAND,
                                children: [(0, a.jsx)(E.ComboboxItem.Icon, {
                                    children: (0, a.jsx)(E.Avatar, {
                                        size: E.AvatarSizes.SIZE_32,
                                        src: t.getAvatarURL(this.props.guildId, 32),
                                        "aria-label": t.username,
                                        className: P.avatar
                                    })
                                }), (0, a.jsxs)(E.ComboboxItem.Label, {
                                    children: [(0, a.jsx)(E.Text, {
                                        variant: "text-sm/normal",
                                        children: G.default.getUserTag(t, {
                                            mode: "username"
                                        })
                                    }), !t.isPomelo() && (0, a.jsxs)(E.Text, {
                                        variant: "text-xs/normal",
                                        className: P.discriminator,
                                        children: ["#", t.discriminator]
                                    })]
                                }), (0, a.jsx)(E.ComboboxItem.Checkmark, {})]
                            }, t.id)
                        }
                        return (0, a.jsxs)(E.ComboboxItem, {
                            value: e.value,
                            selectedColor: E.ComboboxItem.Colors.BRAND,
                            children: [(0, a.jsx)(E.ComboboxItem.Icon, {
                                children: (0, a.jsx)(R.default, {
                                    width: 30,
                                    height: 30
                                })
                            }), (0, a.jsx)(E.ComboboxItem.Label, {
                                children: e.label
                            }), (0, a.jsx)(E.ComboboxItem.Checkmark, {})]
                        }, null !== (s = e.key) && void 0 !== s ? s : t)
                    }, this.renderHeaderDropdowns = () => {
                        var e, t;
                        let {
                            actionFilter: s,
                            hide: n,
                            userIdFilter: l,
                            moderators: r
                        } = this.props;
                        if (n) return null;
                        let o = D.ACTION_FILTER_ITEMS(),
                            d = null !== (e = o.find(e => {
                                let {
                                    value: t
                                } = e;
                                return s === t
                            })) && void 0 !== e ? e : o[0],
                            u = {
                                label: j.default.Messages.GUILD_SETTINGS_FILTER_ALL_USERS,
                                valueLabel: j.default.Messages.GUILD_SETTINGS_FILTER_ALL,
                                value: null
                            },
                            c = [u, ...r].map(e => {
                                var t;
                                if (!(e instanceof A.default)) return e;
                                return {
                                    label: (t = e).username,
                                    value: t.id,
                                    user: t
                                }
                            }),
                            E = null !== (t = c.find(e => {
                                let {
                                    value: t
                                } = e;
                                return t === l
                            })) && void 0 !== t ? t : u;
                        return (0, a.jsxs)("div", {
                            className: P.quickSelect,
                            children: [(0, a.jsx)(S.default, {
                                popoutClassName: i(P.selectFilterPopout, b.elevationBorderHigh),
                                items: c,
                                renderItem: this.renderUserQuickSelectItem,
                                renderValue: this.renderUserQuickSelectValue,
                                value: E,
                                onChange: this.handleFilterUserChange,
                                label: j.default.Messages.GUILD_SETTINGS_FILTER_USER,
                                placeholder: j.default.Messages.SEARCH_MEMBERS,
                                popoutProps: {
                                    autoInvert: !1,
                                    position: "bottom"
                                }
                            }), (0, a.jsx)(S.default, {
                                placeholder: j.default.Messages.SEARCH_ACTIONS,
                                label: j.default.Messages.GUILD_SETTINGS_FILTER_ACTION,
                                popoutClassName: i(P.selectFilterPopout, b.elevationBorderLow),
                                items: o,
                                renderItem: this.renderActionQuickSelectItem,
                                renderValue: this.renderActionQuickSelectValue,
                                value: d,
                                onChange: this.handleFilterActionChange,
                                popoutProps: {
                                    autoInvert: !1,
                                    position: "bottom"
                                }
                            })]
                        })
                    }, this.renderLoadMore = () => {
                        let {
                            showLoadMore: e,
                            hasOlderLogs: t,
                            hide: s
                        } = this.props;
                        if (e && t && !s) return (0, a.jsx)(E.Button, {
                            color: E.Button.Colors.PRIMARY,
                            className: P.loadMore,
                            onClick: this.handleFetchNextPage,
                            children: j.default.Messages.GUILD_SETTINGS_AUDIT_LOG_LOAD_MORE
                        })
                    }, this.handleFilterActionChange = e => {
                        (0, _.filterByAction)(e, this.props.guildId)
                    }, this.handleFilterUserChange = e => {
                        (0, _.filterByUserId)(e, this.props.guildId)
                    }, this.handleHeaderClick = e => {
                        let {
                            expandedId: t
                        } = this.state;
                        t !== e.id ? (this._clickedInside = !0, this.setState({
                            expandedId: e.id,
                            lastExpandedId: t
                        }), this._prevRects = this.getRects()) : (this._expandedRef = null, this._lastExpandedRef = null, null != t && (this._prevRects = this.getRects()), this.setState({
                            expandedId: null,
                            lastExpandedId: null
                        }))
                    }, this.handleOutsideClick = () => {
                        null == this.state.expandedId || this._clickedInside ? null != this.state.expandedId && (this._clickedInside = !1) : (this._expandedRef = null, this._lastExpandedRef = null, this.setState({
                            expandedId: null,
                            lastExpandedId: null
                        }), this._prevRects = this.getRects())
                    }, this.handleContentClick = e => {
                        this._clickedInside = !0, e.stopPropagation()
                    }, this.handleSetScrollerRef = e => {
                        this._scrollerRef = e
                    }, this.handleOnScroll = () => {
                        this.isScrollerAtBottom() && this.handleFetchNextPage()
                    }, this.handleFetchNextPage = () => {
                        (0, _.fetchNextLogPage)(this.props.guildId)
                    }, this.handleActionFilterQueryChange = e => {
                        this.setState({
                            actionFilterQuery: e
                        })
                    }, this.handleActionFilterQueryClear = () => {
                        this.setState({
                            actionFilterQuery: ""
                        })
                    }, this.handleSetExpandedRef = e => {
                        this._expandedRef = e
                    }, this.handleSetLastExpandedRef = e => {
                        this._lastExpandedRef = e
                    }
                }
            }
            var V = c.default.connectStores([x.default, p.default, m.default, f.default, C.default, O.default], () => {
                let e = p.default.getGuildId(),
                    t = m.default.getGuild(e),
                    s = x.default.logs,
                    a = x.default.userIds.map(e => O.default.getUser(e)).filter(M.isNotNullish);
                return {
                    guildId: e,
                    guild: t,
                    moderators: a,
                    isInitialLoading: x.default.isInitialLoading,
                    isLoading: x.default.isLoading,
                    isLoadingNextPage: x.default.isLoadingNextPage,
                    showLoadMore: x.default.groupedFetchCount > 2,
                    hasError: x.default.hasError,
                    hasOlderLogs: x.default.hasOlderLogs,
                    logs: null != s && null != t ? D.transformLogs(s, t) : [],
                    actionFilter: x.default.actionFilter,
                    userIdFilter: x.default.userIdFilter,
                    theme: f.default.theme,
                    hide: C.default.enabled
                }
            })(H)
        },
        347584: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                AuditLogIcon: function() {
                    return b
                },
                default: function() {
                    return H
                }
            }), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s.n(r),
                d = s("866227"),
                u = s.n(d),
                c = s("974667"),
                E = s("35092"),
                _ = s("819855"),
                T = s("77078"),
                I = s("430568"),
                S = s("376556"),
                N = s("679653"),
                f = s("90625"),
                g = s("506885"),
                A = s("981601"),
                L = s("161778"),
                m = s("42203"),
                C = s("27618"),
                O = s("697218"),
                h = s("461380"),
                R = s("987663"),
                D = s("404008"),
                M = s("449008"),
                G = s("159885"),
                x = s("158998"),
                p = s("523096"),
                U = s("49111"),
                v = s("782340"),
                j = s("254984");

            function P(e, t) {
                let s = R.NotRenderedChanges[e.targetType];
                return null != s && !0 === s[t.key]
            }
            let y = {
                [U.AuditLogActionTypes.CREATE]: j.typeCreate,
                [U.AuditLogActionTypes.UPDATE]: j.typeUpdate,
                [U.AuditLogActionTypes.DELETE]: j.typeDelete
            };
            class b extends n.PureComponent {
                render() {
                    var e, t;
                    let {
                        actionType: s,
                        targetType: n,
                        action: l,
                        themeOverride: r
                    } = this.props, o = null != r ? j["themeOverride".concat((0, G.upperCaseFirstChar)(r))] : null;
                    let d = i(j.icon, y[s], (e = n, (t = l) === U.AuditLogActions.MESSAGE_DELETE ? j.targetMessage : t === U.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE || t === U.AuditLogActions.AUTO_MODERATION_FLAG_TO_CHANNEL || t === U.AuditLogActions.AUTO_MODERATION_USER_COMMUNICATION_DISABLED || t === U.AuditLogActions.AUTO_MODERATION_QUARANTINE_USER ? j.autoModerationBlockMessage : ({
                        [U.AuditLogTargetTypes.ALL]: j.targetAll,
                        [U.AuditLogTargetTypes.GUILD]: j.targetGuild,
                        [U.AuditLogTargetTypes.CHANNEL]: j.targetChannel,
                        [U.AuditLogTargetTypes.CHANNEL_OVERWRITE]: j.targetChannel,
                        [U.AuditLogTargetTypes.USER]: j.targetMember,
                        [U.AuditLogTargetTypes.ROLE]: j.targetRole,
                        [U.AuditLogTargetTypes.ONBOARDING_PROMPT]: j.targetOnboarding,
                        [U.AuditLogTargetTypes.GUILD_ONBOARDING]: j.targetOnboarding,
                        [U.AuditLogTargetTypes.HOME_SETTINGS]: j.targetOnboarding,
                        [U.AuditLogTargetTypes.INTEGRATION]: j.targetIntegration,
                        [U.AuditLogTargetTypes.INVITE]: j.targetInvite,
                        [U.AuditLogTargetTypes.WEBHOOK]: j.targetWebhook,
                        [U.AuditLogTargetTypes.EMOJI]: j.targetEmoji,
                        [U.AuditLogTargetTypes.STICKER]: j.targetSticker,
                        [U.AuditLogTargetTypes.STAGE_INSTANCE]: j.targetStageInstance,
                        [U.AuditLogTargetTypes.GUILD_SCHEDULED_EVENT]: j.targetGuildScheduledEvent,
                        [U.AuditLogTargetTypes.THREAD]: j.thread,
                        [U.AuditLogTargetTypes.APPLICATION_COMMAND]: j.applicationCommand,
                        [U.AuditLogTargetTypes.AUTO_MODERATION_RULE]: j.autoModerationRule,
                        [U.AuditLogTargetTypes.GUILD_HOME]: j.targetGuildHome,
                        [U.AuditLogTargetTypes.GUILD_SOUNDBOARD]: j.targetGuildSoundboard,
                        [U.AuditLogTargetTypes.VOICE_CHANNEL_STATUS]: j.targetChannel,
                        [U.AuditLogTargetTypes.CLYDE_AI]: j.targetMember
                    })[e]), o);
                    return (0, a.jsx)("div", {
                        className: d
                    })
                }
            }
            class B extends n.PureComponent {
                render() {
                    let {
                        user: e,
                        onContextMenu: t
                    } = this.props;
                    return (0, a.jsxs)("span", {
                        onContextMenu: t,
                        className: j.userHook,
                        children: [(0, a.jsx)(T.Text, {
                            variant: "text-md/normal",
                            children: x.default.getUserTag(e, {
                                mode: "username"
                            })
                        }), "0" !== e.discriminator && (0, a.jsxs)(T.Text, {
                            variant: "text-xs/normal",
                            className: j.discrim,
                            children: ["#", e.discriminator]
                        })]
                    })
                }
            }
            class F extends n.PureComponent {
                hasChangesToRender() {
                    let {
                        log: e
                    } = this.props, {
                        changes: t
                    } = e;
                    return (e.actionType !== U.AuditLogActionTypes.DELETE || e.action === U.AuditLogActions.MEMBER_BAN_ADD || e.action === U.AuditLogActions.MEMBER_KICK || e.action === U.AuditLogActions.MEMBER_PRUNE) && null != t && t.some(t => !P(e, t))
                }
                getActionTypeColor(e) {
                    switch (e) {
                        case U.AuditLogActionTypes.CREATE:
                            return "text-positive";
                        case U.AuditLogActionTypes.DELETE:
                            return "status-danger";
                        default:
                            return "text-warning"
                    }
                }
                renderTitle() {
                    let {
                        log: e,
                        onUserContextMenu: t,
                        onTargetContextMenu: s,
                        onChannelContextMenu: n
                    } = this.props, {
                        user: l,
                        target: i,
                        options: r
                    } = e, o = R.getChangeTitle(e);
                    return null != o ? (0, a.jsx)("div", {
                        className: j.overflowEllipsis,
                        children: o.format({
                            user: l,
                            target: i,
                            userHook: (s, n) => {
                                if (null != e.user) return (0, a.jsx)(B, {
                                    user: e.user,
                                    onContextMenu: t
                                }, n);
                                if (null != e.options.integration_type) {
                                    var l;
                                    let t = S.default.get(e.options.integration_type);
                                    return null !== (l = null == t ? void 0 : t.name) && void 0 !== l ? l : v.default.Messages.UNKNOWN_INTEGRATION
                                }
                                return v.default.Messages.UNKNOWN_USER
                            },
                            targetHook: (t, n) => e.targetType === U.AuditLogTargetTypes.USER ? (0, a.jsx)(B, {
                                user: e.target,
                                onContextMenu: s
                            }, n) : (0, a.jsx)("span", {
                                onContextMenu: s,
                                children: t
                            }, n),
                            count: r.count,
                            channel: r.channel ? "string" == typeof r.channel ? r.channel : (0, N.computeChannelName)(r.channel, O.default, C.default, !0) : null,
                            channelHook: (e, t) => (0, a.jsx)("span", {
                                onContextMenu: n,
                                children: e
                            }, t)
                        })
                    }) : null
                }
                renderRoleUpdate(e) {
                    let {
                        newValue: t
                    } = e;
                    return Array.isArray(t) ? t.map(e => (0, a.jsx)("div", {
                        className: j.subListItem,
                        children: e.name
                    }, e.id)) : null
                }
                renderPermissionUpdate(e) {
                    let {
                        newValue: t
                    } = e;
                    return Array.isArray(t) ? t.map(e => (0, a.jsx)("div", {
                        className: j.subListItem,
                        children: R.getStringForPermission(e, this.props.log)
                    }, e)) : null
                }
                renderChannelFlagsUpdate(e) {
                    let {
                        newValue: t,
                        oldValue: s
                    } = e, n = [];
                    return (Array.isArray(s) && (n = n.concat(s.map(e => (0, a.jsx)("div", {
                        className: j.subListItem,
                        children: R.getStringForRemovedChannelFlag(e)
                    }, e)))), Array.isArray(t) && (n = n.concat(t.map(e => (0, a.jsx)("div", {
                        className: j.subListItem,
                        children: R.getStringForAddedChannelFlag(e)
                    }, e)))), n.length > 0) ? n : null
                }
                renderChangeLineItem(e) {
                    let {
                        changeItem: t,
                        subChanges: s,
                        changeNumber: n,
                        log: l,
                        oldValue: i,
                        newValue: r,
                        change: o
                    } = e, d = null;
                    if ("string" == typeof t && (d = t), null != t && "object" == typeof t) {
                        if (null == t.format) {
                            let e = t[o.newValue];
                            null == e && null != t[R.DEFAULT_FOR_STRINGS_KEY] ? t = t[R.DEFAULT_FOR_STRINGS_KEY] : null != e && (t = e)
                        }
                        if (null != t && null != t.format) {
                            var u, c;
                            d = t.format({
                                user: l.user,
                                target: l.target,
                                oldValue: i,
                                newValue: r,
                                count: Array.isArray(r) ? r.length : null,
                                subtarget: null !== (c = null !== (u = l.options.subtarget) && void 0 !== u ? u : o.subtarget) && void 0 !== c ? c : null,
                                newColorHook: (e, t) => (0, a.jsx)("div", {
                                    className: j.colorHook,
                                    style: {
                                        backgroundColor: o.newValue
                                    }
                                }, t),
                                oldColorHook: (e, t) => (0, a.jsx)("div", {
                                    className: j.colorHook,
                                    style: {
                                        backgroundColor: o.oldValue
                                    }
                                }, t),
                                oldTagHook: (e, t) => (0, a.jsx)(f.default, {
                                    tag: i,
                                    size: f.default.Sizes.SMALL
                                }, t),
                                newTagHook: (e, t) => (0, a.jsx)(f.default, {
                                    tag: r,
                                    size: f.default.Sizes.SMALL
                                }, t),
                                oldEmojiHook: (e, t) => (0, a.jsx)(I.default, {
                                    emojiId: i
                                }, t),
                                newEmojiHook: (e, t) => (0, a.jsx)(I.default, {
                                    emojiId: r
                                }, t)
                            })
                        } else d = t
                    }
                    return d ? (0, a.jsxs)("div", {
                        className: j.detail,
                        style: {
                            position: "relative",
                            top: 1
                        },
                        children: [(0, a.jsxs)(T.Text, {
                            className: j.prefix,
                            variant: "code",
                            color: this.getActionTypeColor(l.actionType),
                            children: [n < 10 ? "0".concat(n) : n, (0, a.jsx)("span", {
                                className: j.dash,
                                children: "—"
                            })]
                        }), (0, a.jsxs)("div", {
                            className: j.change,
                            children: [(0, a.jsx)("div", {
                                className: j.changeStr,
                                children: d
                            }), null != s ? (0, a.jsx)("div", {
                                children: s
                            }) : null]
                        })]
                    }, n) : (console.warn("No change string for", o), null)
                }
                renderChangeDetails(e) {
                    let {
                        log: t,
                        onContentClick: s
                    } = this.props;
                    if (null == t.changes) return null;
                    let n = 0,
                        l = o.flatten(t.changes.map(s => {
                            let {
                                oldValue: a,
                                newValue: l
                            } = s, i = null;
                            if (t.action === U.AuditLogActions.MEMBER_ROLE_UPDATE ? i = this.renderRoleUpdate(s) : t.targetType === U.AuditLogTargetTypes.ROLE || t.action === U.AuditLogActions.CHANNEL_OVERWRITE_CREATE || t.action === U.AuditLogActions.CHANNEL_OVERWRITE_UPDATE ? i = this.renderPermissionUpdate(s) : (t.action === U.AuditLogActions.CHANNEL_UPDATE || t.action === U.AuditLogActions.THREAD_UPDATE) && s.key === U.AuditLogChangeKeys.FLAGS && (i = this.renderChannelFlagsUpdate(s)), (t.action === U.AuditLogActions.CHANNEL_UPDATE || t.action === U.AuditLogActions.CHANNEL_CREATE) && s.key === U.AuditLogChangeKeys.TYPE && (null != a && (a = (0, D.channelTypeString)({
                                    type: a
                                })), null != l && (l = (0, D.channelTypeString)({
                                    type: l
                                }))), t.action === U.AuditLogActions.MEMBER_UPDATE && s.key === U.AuditLogChangeKeys.COMMUNICATION_DISABLED_UNTIL) {
                                if (null == (l = u(l)) || !l.isValid()) return null;
                                l = l.calendar()
                            }(t.action === U.AuditLogActions.ONBOARDING_PROMPT_UPDATE || t.action === U.AuditLogActions.ONBOARDING_PROMPT_CREATE) && s.key === U.AuditLogChangeKeys.OPTIONS && (i = this.renderOnboardingPromptOptionsChange(s)), (t.action === U.AuditLogActions.HOME_SETTINGS_CREATE || t.action === U.AuditLogActions.HOME_SETTINGS_UPDATE) && (i = this.renderHomeSettingsOptionsChange(s));
                            let r = e[s.key];
                            return P(t, s) ? null : ("function" == typeof r && (r = r(s)), Array.isArray(r)) ? r.map(e => (n++, this.renderChangeLineItem({
                                changeItem: e,
                                subChanges: i,
                                changeNumber: n,
                                log: t,
                                oldValue: a,
                                newValue: l,
                                change: s
                            }))) : (n++, this.renderChangeLineItem({
                                changeItem: r,
                                subChanges: i,
                                changeNumber: n,
                                log: t,
                                oldValue: a,
                                newValue: l,
                                change: s
                            }))
                        })).filter(M.isNotNullish);
                    return (0, a.jsx)(T.Clickable, {
                        onClick: s,
                        className: j.changeDetails,
                        children: l
                    })
                }
                renderOnboardingPromptOptionsChange(e) {
                    let {
                        oldValue: t,
                        newValue: s
                    } = e, {
                        log: n,
                        guild: l
                    } = this.props, i = e => {
                        var t;
                        let s = null == l ? void 0 : null === (t = l.getRole(e)) || void 0 === t ? void 0 : t.name;
                        return null == s ? null : "@".concat(s)
                    }, r = e => {
                        var t;
                        let s = null === (t = m.default.getChannel(e)) || void 0 === t ? void 0 : t.name;
                        return null == s ? null : "#".concat(s)
                    }, d = (e, t) => {
                        let {
                            title: s,
                            id: l
                        } = t, d = e.role_ids.map(i).filter(M.isNotNullish), u = e.channel_ids.map(r).filter(M.isNotNullish), c = t.role_ids.map(i).filter(M.isNotNullish), E = t.channel_ids.map(r).filter(M.isNotNullish), _ = o.difference(c, d), I = o.difference(d, c), S = o.difference(E, u), N = o.difference(u, E), f = [];
                        return (!o.isEqual(e.title, t.title) && f.push("title"), !o.isEqual(e.description, t.description) && f.push("description"), 0 === _.length && 0 === I.length && 0 === S.length && 0 === N.length && 0 === f.length) ? null : (0, a.jsxs)("li", {
                            children: [(0, a.jsxs)("div", {
                                className: j.onboardingChangeLogItemTitle,
                                children: [(0, a.jsx)(b, {
                                    actionType: U.AuditLogActionTypes.UPDATE,
                                    targetType: n.targetType,
                                    action: n.action
                                }), (0, a.jsx)(T.Text, {
                                    variant: "text-md/normal",
                                    children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_UPDATED_OPTION.format({
                                        title: s
                                    })
                                })]
                            }), (0, a.jsxs)("div", {
                                className: j.onboardingChangeLogItemChanges,
                                children: [_.length > 0 && (0, a.jsx)(T.Text, {
                                    variant: "text-md/normal",
                                    children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_ADD_ROLES.format({
                                        roles: _.join(", ")
                                    })
                                }), I.length > 0 && (0, a.jsx)(T.Text, {
                                    variant: "text-md/normal",
                                    children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_REMOVE_ROLES.format({
                                        roles: I.join(", ")
                                    })
                                }), S.length > 0 && (0, a.jsx)(T.Text, {
                                    variant: "text-md/normal",
                                    children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_ADD_CHANNELS.format({
                                        channels: S.join(", ")
                                    })
                                }), N.length > 0 && (0, a.jsx)(T.Text, {
                                    variant: "text-md/normal",
                                    children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_REMOVE_CHANNELS.format({
                                        channels: N.join(", ")
                                    })
                                }), f.map((s, n) => (0, a.jsx)(T.Text, {
                                    variant: "text-md/normal",
                                    children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_VALUE_CHANGE.format({
                                        key: s,
                                        oldValue: e[s],
                                        newValue: t[s]
                                    })
                                }, n))]
                            })]
                        }, l)
                    }, u = o.keyBy(null != t ? t : [], "id"), c = o.keyBy(null != s ? s : [], "id"), E = o.difference(Object.keys(c), Object.keys(u)).map(e => c[e]), _ = o.difference(Object.keys(u), Object.keys(c)).map(e => u[e]), I = o.intersection(Object.keys(c), Object.keys(u));
                    return (0, a.jsxs)("ul", {
                        className: j.onboardingChangeLogContainer,
                        children: [E.map(e => {
                            let {
                                role_ids: t,
                                channel_ids: s,
                                title: l,
                                id: o
                            } = e, d = (null != t ? t : []).map(i).filter(M.isNotNullish), u = (null != s ? s : []).map(r).filter(M.isNotNullish);
                            return (0, a.jsxs)("li", {
                                children: [(0, a.jsxs)("div", {
                                    className: j.onboardingChangeLogItemTitle,
                                    children: [(0, a.jsx)(b, {
                                        actionType: U.AuditLogActionTypes.CREATE,
                                        targetType: n.targetType,
                                        action: n.action
                                    }), (0, a.jsx)(T.Text, {
                                        variant: "text-md/normal",
                                        children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_CREATED_OPTION.format({
                                            title: l
                                        })
                                    })]
                                }), (0, a.jsxs)("div", {
                                    className: j.onboardingChangeLogItemChanges,
                                    children: [d.length > 0 && (0, a.jsx)(T.Text, {
                                        variant: "text-md/normal",
                                        children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_WITH_ROLES.format({
                                            roles: d.join(", ")
                                        })
                                    }), u.length > 0 && (0, a.jsx)(T.Text, {
                                        variant: "text-md/normal",
                                        children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_WITH_CHANNELS.format({
                                            channels: u.join(", ")
                                        })
                                    })]
                                })]
                            }, o)
                        }), _.map(e => (0, a.jsx)("li", {
                            children: (0, a.jsxs)("div", {
                                className: j.onboardingChangeLogItemTitle,
                                children: [(0, a.jsx)(b, {
                                    actionType: U.AuditLogActionTypes.DELETE,
                                    targetType: n.targetType,
                                    action: n.action
                                }), (0, a.jsx)(T.Text, {
                                    variant: "text-md/normal",
                                    children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_DELETED_OPTION.format({
                                        title: e.title
                                    })
                                })]
                            })
                        }, e.id)), I.map(e => d(u[e], c[e]))]
                    }, "options")
                }
                renderHomeSettingsOptionsChange(e) {
                    let {
                        oldValue: t,
                        newValue: s,
                        key: n
                    } = e, {
                        targetType: l,
                        action: i
                    } = this.props.log;
                    switch (n) {
                        case U.AuditLogChangeKeys.WELCOME_MESSAGE:
                            return ((e, t) => {
                                var s, n, l, i, r;
                                let o = O.default.getUser(null == t ? void 0 : null === (s = t.author_ids) || void 0 === s ? void 0 : s[0]),
                                    d = O.default.getUser(null === (n = e.author_ids) || void 0 === n ? void 0 : n[0]),
                                    u = (null == o ? void 0 : o.id) !== (null == d ? void 0 : d.id) ? (0, a.jsx)("li", {
                                        children: (0, a.jsx)("div", {
                                            className: j.onboardingChangeLogItemTitle,
                                            children: (0, a.jsx)(T.Text, {
                                                variant: "text-md/normal",
                                                children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_AUTHOR_CHANGE.format({
                                                    oldUser: null !== (l = null == o ? void 0 : o.username) && void 0 !== l ? l : v.default.Messages.NONE,
                                                    newUser: null !== (i = null == d ? void 0 : d.username) && void 0 !== i ? i : v.default.Messages.NONE
                                                })
                                            })
                                        })
                                    }) : null,
                                    c = (null == t ? void 0 : t.message) !== e.message ? (0, a.jsx)("li", {
                                        children: (0, a.jsx)("div", {
                                            className: j.onboardingChangeLogItemTitle,
                                            children: (0, a.jsx)(T.Text, {
                                                variant: "text-md/normal",
                                                children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_MESSAGE_CHANGE.format({
                                                    oldMessage: null !== (r = null == t ? void 0 : t.message) && void 0 !== r ? r : v.default.Messages.NONE,
                                                    newMessage: e.message
                                                })
                                            })
                                        })
                                    }) : null;
                                return (0, a.jsxs)("ul", {
                                    children: [u, c]
                                })
                            })(s, t);
                        case U.AuditLogChangeKeys.NEW_MEMBER_ACTIONS:
                            return ((e, t) => {
                                let s = e.map(e => e.channel_id),
                                    n = t.map(e => e.channel_id),
                                    r = o.difference(n, s),
                                    d = o.difference(s, n),
                                    u = t.filter(e => r.includes(e.channel_id)),
                                    c = e.filter(e => d.includes(e.channel_id));
                                return (0, a.jsxs)("ul", {
                                    children: [u.map(e => (0, a.jsx)("li", {
                                        children: (0, a.jsxs)("div", {
                                            className: j.onboardingChangeLogItemTitle,
                                            children: [(0, a.jsx)(b, {
                                                actionType: U.AuditLogActionTypes.CREATE,
                                                targetType: l,
                                                action: i
                                            }), (0, a.jsx)(T.Text, {
                                                variant: "text-md/normal",
                                                children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_NEW_MEMBER_ACTION_ADDED.format({
                                                    name: e.title
                                                })
                                            })]
                                        })
                                    }, e.channel_id)), c.map(e => (0, a.jsx)("li", {
                                        children: (0, a.jsxs)("div", {
                                            className: j.onboardingChangeLogItemTitle,
                                            children: [(0, a.jsx)(b, {
                                                actionType: U.AuditLogActionTypes.DELETE,
                                                targetType: l,
                                                action: i
                                            }), (0, a.jsx)(T.Text, {
                                                variant: "text-md/normal",
                                                children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_NEW_MEMBER_ACTION_REMOVED.format({
                                                    name: e.title
                                                })
                                            })]
                                        })
                                    }, e.channel_id))]
                                })
                            })(null != t ? t : [], s);
                        case U.AuditLogChangeKeys.RESOURCE_CHANNELS:
                            return ((e, t) => {
                                let s = e.map(e => e.channel_id),
                                    n = t.map(e => e.channel_id),
                                    r = o.difference(n, s),
                                    d = o.difference(s, n),
                                    u = t.filter(e => r.includes(e.channel_id)),
                                    c = e.filter(e => d.includes(e.channel_id));
                                return (0, a.jsxs)("ul", {
                                    children: [u.map(e => (0, a.jsx)("li", {
                                        children: (0, a.jsxs)("div", {
                                            className: j.onboardingChangeLogItemTitle,
                                            children: [(0, a.jsx)(b, {
                                                actionType: U.AuditLogActionTypes.CREATE,
                                                targetType: l,
                                                action: i
                                            }), (0, a.jsx)(T.Text, {
                                                variant: "text-md/normal",
                                                children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_RESOURCE_CHANNEL_ADDED.format({
                                                    name: e.title
                                                })
                                            })]
                                        })
                                    }, e.channel_id)), c.map(e => (0, a.jsx)("li", {
                                        children: (0, a.jsxs)("div", {
                                            className: j.onboardingChangeLogItemTitle,
                                            children: [(0, a.jsx)(b, {
                                                actionType: U.AuditLogActionTypes.DELETE,
                                                targetType: l,
                                                action: i
                                            }), (0, a.jsx)(T.Text, {
                                                variant: "text-md/normal",
                                                children: v.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_RESOURCE_CHANNEL_REMOVED.format({
                                                    name: e.title
                                                })
                                            })]
                                        })
                                    }, e.channel_id))]
                                })
                            })(null != t ? t : [], s);
                        default:
                            return null
                    }
                }
                renderChangeSummary() {
                    let {
                        expanded: e,
                        log: t
                    } = this.props;
                    if (e) switch (t.targetType) {
                        case U.AuditLogTargetTypes.GUILD:
                            return this.renderChangeDetails(R.GuildChangeStrings());
                        case U.AuditLogTargetTypes.CHANNEL:
                        case U.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                            return this.renderChangeDetails(R.ChannelChangeStrings());
                        case U.AuditLogTargetTypes.USER:
                            return this.renderChangeDetails(R.UserChangeStrings());
                        case U.AuditLogTargetTypes.ROLE:
                            return this.renderChangeDetails(R.RoleChangeStrings());
                        case U.AuditLogTargetTypes.ONBOARDING_PROMPT:
                            return this.renderChangeDetails(R.OnboardingPromptChangeStrings());
                        case U.AuditLogTargetTypes.GUILD_ONBOARDING:
                            return this.renderChangeDetails(R.OnboardingChangeStrings());
                        case U.AuditLogTargetTypes.HOME_SETTINGS:
                            return this.renderChangeDetails(R.HomeSettingsChangeStrings());
                        case U.AuditLogTargetTypes.INVITE:
                            return this.renderChangeDetails(R.InviteChangeStrings());
                        case U.AuditLogTargetTypes.WEBHOOK:
                            return this.renderChangeDetails(R.WebhookChangeStrings());
                        case U.AuditLogTargetTypes.EMOJI:
                            return this.renderChangeDetails(R.EmojiChangeStrings());
                        case U.AuditLogTargetTypes.STICKER:
                            return this.renderChangeDetails(R.StickerChangeStrings());
                        case U.AuditLogTargetTypes.INTEGRATION:
                            return this.renderChangeDetails(R.IntegrationChangeStrings());
                        case U.AuditLogTargetTypes.STAGE_INSTANCE:
                            return this.renderChangeDetails(R.StageInstanceChangeStrings());
                        case U.AuditLogTargetTypes.GUILD_SCHEDULED_EVENT:
                            return this.renderChangeDetails(R.GuildScheduledEventChangeStrings());
                        case U.AuditLogTargetTypes.THREAD:
                            return this.renderChangeDetails(R.ThreadChangeStrings());
                        case U.AuditLogTargetTypes.APPLICATION_COMMAND:
                            return this.renderChangeDetails(R.CommandPermissionChangeStrings(t.changes));
                        case U.AuditLogTargetTypes.AUTO_MODERATION_RULE:
                            return this.renderChangeDetails(R.AutoModerationRuleChangeStrings());
                        case U.AuditLogTargetTypes.GUILD_SOUNDBOARD:
                            return this.renderChangeDetails(R.GuildSoundboardChangeStrings());
                        case U.AuditLogTargetTypes.VOICE_CHANNEL_STATUS:
                            return this.renderChangeDetails(R.VoiceChannelStatusStrings());
                        case U.AuditLogTargetTypes.CLYDE_AI:
                            return this.renderChangeDetails(R.ClydeAiChangeStrings())
                    }
                    return null
                }
                renderEntryAvatar() {
                    let {
                        props: {
                            log: e,
                            guildId: t,
                            theme: s
                        }
                    } = this, {
                        user: n,
                        userId: l,
                        options: {
                            integration_type: i
                        }
                    } = e;
                    if (null != n && null != l) return (0, a.jsx)(T.Popout, {
                        preload: () => (0, g.default)(l, n.getAvatarURL(t, 80), {
                            guildId: t
                        }),
                        renderPopout: e => (0, a.jsx)(A.default, {
                            ...e,
                            userId: l,
                            guildId: t
                        }),
                        children: s => {
                            var n, l, i;
                            return (0, a.jsx)(T.Avatar, {
                                ...s,
                                onClick: e => {
                                    e.stopPropagation(), s.onClick(e)
                                },
                                className: j.avatar,
                                src: (n = e, l = t, n.action === U.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE || n.action === U.AuditLogActions.AUTO_MODERATION_FLAG_TO_CHANNEL || n.action === U.AuditLogActions.AUTO_MODERATION_USER_COMMUNICATION_DISABLED || n.action === U.AuditLogActions.AUTO_MODERATION_QUARANTINE_USER ? (0, p.getAutomodAvatarURL)() : null === (i = n.user) || void 0 === i ? void 0 : i.getAvatarURL(l, 40)),
                                "aria-hidden": !0,
                                size: T.AvatarSizes.SIZE_40
                            })
                        }
                    });
                    if (null != i) {
                        let e = S.default.get(i);
                        if (null != e) {
                            let t = (0, _.isThemeDark)(s) ? e.icon.darkSVG : e.icon.lightSVG;
                            return (0, a.jsx)(T.Avatar, {
                                className: j.avatar,
                                src: t,
                                "aria-hidden": !0,
                                size: T.AvatarSizes.SIZE_40
                            })
                        }
                    }
                    return null
                }
                render() {
                    let e;
                    let {
                        log: t,
                        className: s,
                        expanded: n,
                        onHeaderClick: l
                    } = this.props, r = this.hasChangesToRender(), o = j.headerDefault;
                    n ? o = j.headerExpanded : r && (o = j.headerClickable);
                    let d = t.timestampStart.calendar(),
                        u = t.timestampEnd.calendar();
                    e = d === u ? (0, a.jsx)(T.Text, {
                        className: j.timestamp,
                        variant: "text-sm/normal",
                        children: d
                    }) : (0, a.jsxs)(T.Text, {
                        className: j.timestamp,
                        variant: "text-sm/normal",
                        children: [d, "—", u]
                    });
                    let E = r ? l : U.NOOP;
                    return (0, a.jsx)(c.ListNavigatorItem, {
                        id: t.id,
                        children: l => (0, a.jsxs)("div", {
                            className: i(j.auditLog, s),
                            children: [(0, a.jsxs)(T.Clickable, {
                                className: o,
                                "aria-expanded": n,
                                onClick: E,
                                ...l,
                                children: [(0, a.jsx)(b, {
                                    action: t.action,
                                    actionType: t.actionType,
                                    targetType: t.targetType
                                }), this.renderEntryAvatar(), (0, a.jsxs)("div", {
                                    className: j.timeWrap,
                                    children: [(0, a.jsx)("div", {
                                        className: j.title,
                                        children: this.renderTitle()
                                    }), e]
                                }), r ? (0, a.jsx)(h.default, {
                                    className: j.expand,
                                    foreground: j.expandForeground,
                                    expanded: n,
                                    "aria-hidden": !0
                                }) : null]
                            }), n ? (0, a.jsx)("div", {
                                className: j.divider
                            }) : null, this.renderChangeSummary()]
                        })
                    })
                }
            }
            var H = E.default.connectStores([L.default], () => ({
                theme: L.default.theme
            }))(F)
        },
        851490: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                resetDefaultChannels: function() {
                    return I
                },
                toggleDefaultChannel: function() {
                    return S
                },
                saveDefaultChannels: function() {
                    return N
                }
            }), s("222007");
            var a = s("913144"),
                n = s("404118"),
                l = s("448993"),
                i = s("863636"),
                r = s("380710"),
                o = s("42203"),
                d = s("449008"),
                u = s("653274"),
                c = s("330724"),
                E = s("136278"),
                _ = s("653138"),
                T = s("782340");

            function I() {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_DEFAULT_CHANNELS_RESET"
                })
            }

            function S(e) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_DEFAULT_CHANNELS_TOGGLE",
                    channelId: e
                })
            }
            async function N(e) {
                let t = Array.from(u.default.editedDefaultChannelIds).filter(e => null != o.default.getChannel(e)),
                    s = E.default.advancedMode,
                    [I, S] = (0, r.getChattableDefaultChannels)(e.id, [...t]),
                    N = (0, r.getMinimumSetOfDefaultChannelIds)(e.id, t, E.default.editedOnboardingPrompts),
                    f = (0, r.getMinimumSetOfDefaultChannelIds)(e.id, t, E.default.editedOnboardingPrompts, r.isChattableChannelId);
                if (i.default.getEnabled(e.id) && (!s && (S.length < _.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING || I.length < _.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN) || s && (N.length < _.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING || f.length < _.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN))) {
                    n.default.show({
                        title: T.default.Messages.ONBOARDING_PROMPT_SAVE_FAILED,
                        body: T.default.Messages.DEFAULT_CHANNELS_SAVE_INVALID_DEFAULT_CHANNELS
                    });
                    return
                }
                if (u.default.hasChanges()) {
                    a.default.dispatch({
                        type: "GUILD_SETTINGS_DEFAULT_CHANNELS_SUBMIT"
                    });
                    try {
                        await (0, c.editOnboarding)(e.id, {
                            default_channel_ids: t
                        }), a.default.dispatch({
                            type: "GUILD_SETTINGS_DEFAULT_CHANNELS_SAVE_SUCCESS",
                            guildId: e.id,
                            channelIds: t
                        })
                    } catch (s) {
                        var g;
                        let {
                            fieldName: e,
                            error: t
                        } = null !== (g = new(0, l.APIError)(s).getAnyErrorMessageAndField()) && void 0 !== g ? g : {};
                        n.default.show({
                            title: T.default.Messages.ONBOARDING_PROMPT_SAVE_FAILED,
                            body: [e, t].filter(d.isNotNullish).join(": ")
                        }), a.default.dispatch({
                            type: "GUILD_SETTINGS_DEFAULT_CHANNELS_SAVE_FAILED"
                        })
                    }
                }
            }
        },
        904383: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useIsChecked: function() {
                    return u
                },
                useIsDisabled: function() {
                    return c
                },
                useDisabledTooltip: function() {
                    return E
                },
                useTooltip: function() {
                    return _
                }
            });
            var a = s("446674"),
                n = s("42203"),
                l = s("305961"),
                i = s("991170"),
                r = s("653274"),
                o = s("49111"),
                d = s("782340");

            function u(e, t) {
                return (0, a.useStateFromStores)([r.default], () => r.default.editedDefaultChannelIds.has(e) || null != t && r.default.editedDefaultChannelIds.has(t))
            }

            function c(e, t) {
                return (0, a.useStateFromStores)([r.default], () => e === t || null != t && r.default.editedDefaultChannelIds.has(t))
            }

            function E(e, t) {
                return (0, a.useStateFromStores)([r.default, n.default], () => null != t && r.default.editedDefaultChannelIds.has(t) ? d.default.Messages.CHANNEL_BROWSER_DISABLED_BY_CATEGORY : i.default.canEveryoneRole(o.Permissions.VIEW_CHANNEL, n.default.getChannel(e)) ? void 0 : d.default.Messages.DEFAULT_CHANNELS_DISABLED_PRIVATE)
            }

            function _(e, t) {
                let s = (0, a.useStateFromStores)([l.default], () => {
                        var s;
                        return (null === (s = l.default.getGuild(e)) || void 0 === s ? void 0 : s.rulesChannelId) === t
                    }),
                    i = (0, a.useStateFromStores)([n.default], () => {
                        var e;
                        return null === (e = n.default.getChannel(t)) || void 0 === e ? void 0 : e.isGuildVocal()
                    });
                return s ? d.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_RULES_DISCOURAGED : i ? d.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_VOICE_TOOLTIP : void 0
            }
        },
        435076: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                updateWelcomeMessage: function() {
                    return I
                },
                addNewMemberAction: function() {
                    return S
                },
                updateNewMemberAction: function() {
                    return N
                },
                deleteNewMemberAction: function() {
                    return f
                },
                reorderNewMemberActions: function() {
                    return g
                },
                updateNewMemberActionIconData: function() {
                    return A
                },
                updateNewMemberActionIcon: function() {
                    return L
                },
                addResourceChannel: function() {
                    return m
                },
                updateResourceChannel: function() {
                    return C
                },
                deleteResourceChannel: function() {
                    return O
                },
                reorderResourceChannels: function() {
                    return h
                },
                updateResourceChannelIcon: function() {
                    return R
                },
                saveHomeSettings: function() {
                    return D
                },
                enableHomeSettings: function() {
                    return M
                },
                dismissSuggestedChannels: function() {
                    return x
                },
                resetHomeSettings: function() {
                    return p
                }
            }), s("881410");
            var a = s("917351"),
                n = s.n(a),
                l = s("872717"),
                i = s("913144"),
                r = s("404118"),
                o = s("698882"),
                d = s("129092"),
                u = s("233706"),
                c = s("599110"),
                E = s("642807"),
                _ = s("49111"),
                T = s("782340");

            function I(e) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_UPDATE_WELCOME_MESSAGE",
                    welcomeMessage: e
                })
            }

            function S(e) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_ADD_NEW_MEMBER_ACTION",
                    action: e
                })
            }

            function N(e, t) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_UPDATE_NEW_MEMBER_ACTION",
                    channelId: e,
                    action: t
                })
            }

            function f(e) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_DELETE_NEW_MEMBER_ACTION",
                    channelId: e
                })
            }

            function g(e) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_REORDER_NEW_MEMBER_ACTION",
                    actions: e
                })
            }

            function A(e, t) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_UPDATE_NEW_MEMBER_ACTION_ICON_DATA",
                    channelId: e,
                    iconData: t
                })
            }
            async function L(e, t, s, a) {
                if (!a) return Promise.resolve();
                try {
                    let a = await l.default.patch({
                            url: _.Endpoints.NEW_MEMBER_ACTION(e, t),
                            body: {
                                icon: s
                            },
                            oldFormErrors: !0
                        }),
                        n = (0, d.newMemberActionFromServer)(a.body);
                    return i.default.dispatch({
                        type: "GUILD_NEW_MEMBER_ACTION_UPDATE_SUCCESS",
                        guildId: e,
                        action: n
                    }), Promise.resolve(a.body)
                } catch (t) {
                    var o;
                    let e = n.flatMap(null !== (o = t.body) && void 0 !== o ? o : {}, e => e);
                    return r.default.show({
                        title: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
                        body: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_INVALID_WITH_DETAILS.format({
                            errorMessage: e.join(", ")
                        })
                    }), Promise.reject()
                }
            }

            function m(e) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_ADD_RESOURCE_CHANNEL",
                    resourceChannel: e
                })
            }

            function C(e, t) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_UPDATE_RESOURCE_CHANNEL",
                    channelId: e,
                    resourceChannel: t
                })
            }

            function O(e) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_DELETE_RESOURCE_CHANNEL",
                    resourceChannelId: e
                })
            }

            function h(e) {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_REORDER_RESOURCE_CHANNEL",
                    resourceChannels: e
                })
            }
            async function R(e, t, s) {
                try {
                    let a = await l.default.put({
                            url: _.Endpoints.RESOURCE_CHANNEL(e, t),
                            body: {
                                icon: s
                            },
                            oldFormErrors: !0
                        }),
                        n = (0, d.resourceChannelFromServer)(a.body);
                    return i.default.dispatch({
                        type: "GUILD_RESOURCE_CHANNEL_UPDATE_SUCCESS",
                        guildId: e,
                        resourceChannel: n
                    }), a.body
                } catch (t) {
                    var a;
                    let e = n.flatMap(null !== (a = t.body) && void 0 !== a ? a : {}, e => e);
                    r.default.show({
                        title: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
                        body: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_INVALID_WITH_DETAILS.format({
                            errorMessage: e.join(", ")
                        })
                    })
                }
            }

            function D(e, t) {
                let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                if (!s && !E.default.hasChanges()) return Promise.resolve();
                let {
                    serverGuideOptional: a
                } = (0, u.getOptionalOnboardingHomeAdminExperiment)(e), n = !a || o.default.getEnabled(e);
                return n && !(0, d.isSettingsValid)(t) ? (r.default.show({
                    title: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
                    body: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_REASON
                }), Promise.reject()) : (!a && null != t && (t.enabled = !0), G(e, t))
            }

            function M(e, t) {
                let s = o.default.getSettings(e);
                if (t && !(0, d.isSettingsValid)(s)) {
                    r.default.show({
                        title: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
                        body: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_REASON
                    });
                    return
                }
                return i.default.dispatch({
                    type: "GUILD_HOME_SETTINGS_TOGGLE_ENABLED",
                    guildId: e,
                    enabled: t
                }), G(e, {
                    ...s,
                    enabled: t
                })
            }
            async function G(e, t) {
                var s, a, o, u, E, I, S, N, f;
                i.default.dispatch({
                    type: "GUILD_HOME_SETTINGS_UPDATE_START"
                });
                try {
                    let n = await l.default.put({
                            url: _.Endpoints.GUILD_HOME_SETTINGS(e),
                            body: (0, d.settingsToServer)(e, t),
                            oldFormErrors: !0
                        }),
                        r = (0, d.settingsFromServer)(n.body);
                    return i.default.dispatch({
                        type: "GUILD_HOME_SETTINGS_UPDATE_SUCCESS",
                        guildId: e,
                        homeSettings: r
                    }), c.default.track(_.AnalyticEvents.GUILD_SETTINGS_GUIDE_UPDATED, {
                        guild_id: e,
                        welcome_message_author_id: (null !== (u = null == r ? void 0 : null === (s = r.welcomeMessage) || void 0 === s ? void 0 : s.authorIds) && void 0 !== u ? u : [])[0],
                        welcome_message_length: null !== (E = null == r ? void 0 : null === (o = r.welcomeMessage) || void 0 === o ? void 0 : null === (a = o.message) || void 0 === a ? void 0 : a.length) && void 0 !== E ? E : 0,
                        member_action_channel_ids: (null !== (I = null == r ? void 0 : r.newMemberActions) && void 0 !== I ? I : []).map(e => e.channelId),
                        member_action_channel_actions: (null !== (S = null == r ? void 0 : r.newMemberActions) && void 0 !== S ? S : []).map(e => e.actionType),
                        resource_channel_ids: (null !== (N = null == r ? void 0 : r.resourceChannels) && void 0 !== N ? N : []).map(e => e.channelId),
                        enabled: null == r ? void 0 : r.enabled
                    }), n.body
                } catch (t) {
                    let e = n.flatMap(null !== (f = t.body) && void 0 !== f ? f : {}, e => e);
                    i.default.dispatch({
                        type: "GUILD_HOME_SETTINGS_UPDATE_FAIL"
                    }), r.default.show({
                        title: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
                        body: T.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_INVALID_WITH_DETAILS.format({
                            errorMessage: e.join(", ")
                        })
                    })
                }
            }

            function x(e, t) {
                null != e && i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_DISMISS_RESOURCE_CHANNEL_SUGGESTION",
                    guildId: e,
                    channelIds: t
                })
            }

            function p() {
                i.default.dispatch({
                    type: "GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESET"
                })
            }
        },
        642807: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return A
                }
            }), s("222007");
            var a = s("917351"),
                n = s.n(a),
                l = s("446674"),
                i = s("913144"),
                r = s("698882"),
                o = s("900938");
            let d = {
                    enabled: !1
                },
                u = null,
                c = Object.assign({}, d),
                E = !1,
                _ = {},
                T = {};

            function I() {
                (function() {
                    u = null, c = Object.assign({}, d), E = !1, T = {}
                })(), u = o.default.getGuildId(), c = n.cloneDeep(Object.assign({}, r.default.getSettings(u))), T = {}
            }

            function S(e, t) {
                if (null == c.newMemberActions) return !1;
                let s = c.newMemberActions.findIndex(t => t.channelId === e);
                if (s < 0) return !1;
                c.newMemberActions[s] = {
                    ...t
                }, c.newMemberActions = [...c.newMemberActions], delete T[e]
            }

            function N(e, t) {
                if (null == c.resourceChannels) return !1;
                let s = c.resourceChannels.findIndex(t => t.channelId === e);
                if (s < 0) return !1;
                c.resourceChannels[s] = {
                    ...t
                }, c.resourceChannels = [...c.resourceChannels]
            }

            function f() {
                E = !1, c = n.cloneDeep(Object.assign({}, r.default.getSettings(u)))
            }
            class g extends l.default.PersistedStore {
                initialize(e) {
                    null != e && (_ = e.dismissedSuggestedChannelIdsByGuildId), this.waitFor(o.default, r.default)
                }
                getState() {
                    return {
                        dismissedSuggestedChannelIdsByGuildId: _
                    }
                }
                getSettings() {
                    return null != c ? c : d
                }
                hasChanges() {
                    return null != u && !n.isEqual(n.omit(c, "newMemberActions"), n.omit(r.default.getSettings(u), "newMemberActions"))
                }
                getSubmitting() {
                    return E
                }
                getDismissedSuggestedChannelIds(e) {
                    var t;
                    return null == e ? [] : null !== (t = _[e]) && void 0 !== t ? t : []
                }
                getResourceChannel(e) {
                    var t;
                    if (null == e) return null;
                    let s = null === (t = c.resourceChannels) || void 0 === t ? void 0 : t.find(t => t.channelId === e);
                    return null == s ? null : s
                }
                getNewMemberAction(e) {
                    var t;
                    if (null == e) return null;
                    let s = null === (t = c.newMemberActions) || void 0 === t ? void 0 : t.find(t => t.channelId === e);
                    return null == s ? null : s
                }
                getNewMemberActionIconData(e) {
                    var t;
                    return null == e ? null : null !== (t = T[e]) && void 0 !== t ? t : null
                }
                hasActionIconChanged(e) {
                    if (null == e) return !1;
                    let t = r.default.getNewMemberAction(u, e);
                    if (null == t) return !1;
                    let s = T[e];
                    return void 0 !== s && (null != s || null != t.icon && null == s)
                }
            }
            g.displayName = "GuildSettingsOnboardingHomeSettingsStore", g.persistKey = "GuildSettingsOnboardingHomeSettingsStore";
            var A = new g(i.default, {
                GUILD_SETTINGS_INIT: I,
                GUILD_SETTINGS_SET_SECTION: I,
                GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESET: I,
                GUILD_HOME_SETTINGS_FETCH_SUCCESS: function() {
                    c = n.cloneDeep(Object.assign({}, r.default.getSettings(u))), T = {}
                },
                GUILD_HOME_SETTINGS_UPDATE_START: function() {
                    E = !0
                },
                GUILD_HOME_SETTINGS_UPDATE_SUCCESS: f,
                GUILD_HOME_SETTINGS_UPDATE_FAIL: f,
                GUILD_NEW_MEMBER_ACTION_UPDATE_SUCCESS: function(e) {
                    let {
                        action: t
                    } = e;
                    return S(t.channelId, t)
                },
                GUILD_RESOURCE_CHANNEL_UPDATE_SUCCESS: function(e) {
                    let {
                        resourceChannel: t
                    } = e;
                    N(t.channelId, t)
                },
                GUILD_SETTINGS_ONBOARDING_UPDATE_WELCOME_MESSAGE: function(e) {
                    let {
                        welcomeMessage: t
                    } = e;
                    if (null == t) c.welcomeMessage = void 0;
                    else {
                        var s, a, n, l, i, r;
                        c.welcomeMessage = {
                            authorIds: null !== (l = null !== (n = t.authorIds) && void 0 !== n ? n : null === (s = c.welcomeMessage) || void 0 === s ? void 0 : s.authorIds) && void 0 !== l ? l : [],
                            message: null !== (r = null !== (i = t.message) && void 0 !== i ? i : null === (a = c.welcomeMessage) || void 0 === a ? void 0 : a.message) && void 0 !== r ? r : ""
                        }
                    }
                },
                GUILD_SETTINGS_ONBOARDING_UPDATE_NEW_MEMBER_ACTION: function(e) {
                    let {
                        channelId: t,
                        action: s
                    } = e;
                    return S(t, s)
                },
                GUILD_SETTINGS_ONBOARDING_ADD_NEW_MEMBER_ACTION: function(e) {
                    var t;
                    let {
                        action: s
                    } = e;
                    c.newMemberActions = null !== (t = c.newMemberActions) && void 0 !== t ? t : [], c.newMemberActions = [...c.newMemberActions, s]
                },
                GUILD_SETTINGS_ONBOARDING_DELETE_NEW_MEMBER_ACTION: function(e) {
                    let {
                        channelId: t
                    } = e;
                    if (null == c.newMemberActions) return !1;
                    c.newMemberActions = [...c.newMemberActions.filter(e => e.channelId !== t)]
                },
                GUILD_SETTINGS_ONBOARDING_REORDER_NEW_MEMBER_ACTION: function(e) {
                    let {
                        actions: t
                    } = e;
                    c.newMemberActions = t
                },
                GUILD_SETTINGS_ONBOARDING_UPDATE_RESOURCE_CHANNEL: function(e) {
                    let {
                        channelId: t,
                        resourceChannel: s
                    } = e;
                    N(t, s)
                },
                GUILD_SETTINGS_ONBOARDING_ADD_RESOURCE_CHANNEL: function(e) {
                    var t;
                    let {
                        resourceChannel: s
                    } = e;
                    c.resourceChannels = (null !== (t = c.resourceChannels) && void 0 !== t ? t : []).filter(e => e.channelId !== s.channelId), c.resourceChannels = [...c.resourceChannels, s]
                },
                GUILD_SETTINGS_ONBOARDING_DELETE_RESOURCE_CHANNEL: function(e) {
                    let {
                        resourceChannelId: t
                    } = e;
                    if (null == c.resourceChannels) return !1;
                    c.resourceChannels = [...c.resourceChannels.filter(e => e.channelId !== t)]
                },
                GUILD_SETTINGS_ONBOARDING_REORDER_RESOURCE_CHANNEL: function(e) {
                    let {
                        resourceChannels: t
                    } = e;
                    c.resourceChannels = t
                },
                GUILD_SETTINGS_ONBOARDING_DISMISS_RESOURCE_CHANNEL_SUGGESTION: function(e) {
                    var t;
                    let {
                        guildId: s,
                        channelIds: a
                    } = e;
                    _[s] = [...null !== (t = _[s]) && void 0 !== t ? t : [], ...a]
                },
                GUILD_SETTINGS_ONBOARDING_UPDATE_NEW_MEMBER_ACTION_ICON_DATA: function(e) {
                    var t;
                    let {
                        channelId: s,
                        iconData: a
                    } = e, n = null === (t = c.newMemberActions) || void 0 === t ? void 0 : t.find(e => e.channelId === s);
                    if (null == n) return !1;
                    T[s] = a, n.icon = null
                }
            })
        },
        397947: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return L
                }
            }), s("222007");
            var a = s("446674"),
                n = s("913144"),
                l = s("863636"),
                i = s("129092"),
                r = s("900938"),
                o = s("353830"),
                d = s("772871"),
                u = s("653274"),
                c = s("642807"),
                E = s("136278"),
                _ = s("259483"),
                T = s("867928"),
                I = s("49111");
            let S = new Set,
                N = _.GuildSettingsOnboardingPage.LANDING,
                f = null;

            function g(e) {
                let {
                    subsection: t
                } = e;
                if (r.default.getGuildId() === f) return !1;
                N = t === I.GuildSettingsSubsections.SERVER_GUIDE ? _.GuildSettingsOnboardingPage.HOME_SETTINGS : _.GuildSettingsOnboardingPage.LANDING, f = r.default.getGuildId()
            }
            class A extends a.default.Store {
                initialize() {
                    this.waitFor(l.default, u.default, E.default, c.default, o.default), this.syncWith([l.default, u.default, E.default, c.default, o.default], () => !0)
                }
                isEducationUpsellDismissed(e) {
                    return S.has(e)
                }
                getCurrentPage() {
                    return N
                }
                hasChanges() {
                    if (null == f) return !1;
                    let e = l.default.isAdvancedMode(f);
                    if (N === _.GuildSettingsOnboardingPage.DEFAULT_CHANNELS) return e ? u.default.hasChanges() || E.default.hasChanges() : u.default.hasChanges();
                    if (N === _.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS) return E.default.hasChanges();
                    if (N === _.GuildSettingsOnboardingPage.HOME_SETTINGS) return c.default.hasChanges();
                    return !1
                }
                hasConfiguredAnythingForCurrentStep() {
                    if (null == f) return !1;
                    if (N === _.GuildSettingsOnboardingPage.SAFETY_CHECK) return !0;
                    if (N === _.GuildSettingsOnboardingPage.DEFAULT_CHANNELS) return u.default.editedDefaultChannelIds.size > 0;
                    if (N === _.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS) return E.default.editedOnboardingPrompts.length > 0;
                    else if (N === _.GuildSettingsOnboardingPage.HOME_SETTINGS) return !(0, i.isSettingsEmpty)(c.default.getSettings());
                    return !1
                }
                hasErrors() {
                    return N === _.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS && null != E.default.errors.find(e => null != e)
                }
                showNotice() {
                    if (null == f) return !1;
                    if ((0, T.isOnboardingWizardCompleted)(f)) return this.hasChanges();
                    let e = o.default.getCurrentPage();
                    return (N !== _.GuildSettingsOnboardingPage.SAFETY_CHECK || e === d.GuildSettingsSafetyPage.OVERVIEW) && null != N && N !== _.GuildSettingsOnboardingPage.LANDING
                }
                canCloseEarly() {
                    return null == f || !this.hasErrors() && (!(0, T.isOnboardingWizardCompleted)(f) || !this.hasChanges())
                }
            }
            A.displayName = "GuildSettingsOnboardingStore";
            var L = new A(n.default, {
                GUILD_SETTINGS_INIT: g,
                GUILD_SETTINGS_SET_SECTION: g,
                GUILD_SETTINGS_ONBOARDING_STEP: function(e) {
                    let {
                        step: t
                    } = e;
                    N = t
                },
                GUILD_SETTINGS_ONBOARDING_EDUCATION_UPSELL_DISMISSED: function(e) {
                    let {
                        upsellType: t
                    } = e;
                    S.add(t)
                }
            })
        },
        223729: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            }), s("424973");
            var a = s("446674"),
                n = s("648747"),
                l = s("161188"),
                i = s("42203"),
                r = s("49111");

            function o(e) {
                return (0, a.useStateFromStoresArray)([l.default, i.default], () => {
                    var t;
                    let s = (null !== (t = l.default.getTopChannelIds(e.id)) && void 0 !== t ? t : []).map(e => i.default.getChannel(e)).filter(t => null == t || t.id !== e.rulesChannelId),
                        a = [],
                        o = 0;
                    return s.forEach(e => {
                        if (e.type === r.ChannelTypes.GUILD_ANNOUNCEMENT) {
                            if (o >= 2) return;
                            o++
                        }
                        a.length < 5 && !a.includes(e) && a.push(e)
                    }), a.sort((t, s) => ((0, n.canChannelBeDefault)(e.id, s.id) ? 1 : 0) - ((0, n.canChannelBeDefault)(e.id, t.id) ? 1 : 0)), a
                })
            }
        },
        867928: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                },
                isOnboardingWizardCompleted: function() {
                    return r
                }
            });
            var a = s("446674"),
                n = s("305961"),
                l = s("49111");

            function i(e) {
                return (0, a.useStateFromStores)([n.default], () => {
                    let t = n.default.getGuild(e);
                    return null != t && t.hasFeature(l.GuildFeatures.GUILD_ONBOARDING_EVER_ENABLED)
                })
            }

            function r(e) {
                let t = n.default.getGuild(e);
                return null != t && t.hasFeature(l.GuildFeatures.GUILD_ONBOARDING_EVER_ENABLED)
            }
        },
        682327: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useEditedChattableDefaultChannelsWithQuestions: function() {
                    return T
                },
                useAdvancedModeReady: function() {
                    return I
                },
                AdvancedModeToggle: function() {
                    return S
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("65597"),
                i = s("77078"),
                r = s("124152"),
                o = s("863636"),
                d = s("380710"),
                u = s("131835"),
                c = s("136278"),
                E = s("653138"),
                _ = s("782340");

            function T(e, t) {
                let s = (0, l.useStateFromStoresArray)([c.default], () => (0, d.getMinimumSetOfDefaultChannelIds)(e, t, c.default.editedOnboardingPrompts)),
                    a = (0, l.useStateFromStoresArray)([c.default], () => (0, d.getMinimumSetOfDefaultChannelIds)(e, t, c.default.editedOnboardingPrompts, d.isChattableChannelId));
                return [a, s]
            }

            function I(e) {
                let t = (0, l.default)([o.default], () => o.default.isAdvancedMode(e)),
                    [s, a] = function(e) {
                        let t = (0, l.useStateFromStoresArray)([o.default], () => (0, d.getMinimumSetOfDefaultChannelIds)(e, o.default.getDefaultChannelIds(e), o.default.getOnboardingPrompts(e))),
                            s = (0, l.useStateFromStoresArray)([o.default], () => (0, d.getMinimumSetOfDefaultChannelIds)(e, o.default.getDefaultChannelIds(e), o.default.getOnboardingPrompts(e), d.isChattableChannelId));
                        return [s, t]
                    }(e);
                return !!t && a.length >= E.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING && s.length >= E.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN
            }

            function S(e) {
                let {
                    guildId: t,
                    className: s
                } = e, d = (0, r.useAdvancedModeExperiment)(t).advancedModeAllowed, c = (0, l.default)([o.default], () => o.default.isAdvancedMode(t)), T = n.useCallback(() => {
                    let e = c ? E.GuildOnboardingMode.ONBOARDING_DEFAULT : E.GuildOnboardingMode.ONBOARDING_ADVANCED;
                    c ? (0, i.openModal)(s => (0, a.jsx)(i.ConfirmModal, {
                        header: _.default.Messages.ONBOARDING_DEFAULT_MODE_HEADER,
                        confirmText: _.default.Messages.DISABLE,
                        cancelText: _.default.Messages.CANCEL,
                        confirmButtonColor: i.Button.Colors.BRAND,
                        onConfirm: () => (0, u.toggleAdvancedSettings)(t, e),
                        ...s,
                        children: (0, a.jsx)(i.Text, {
                            variant: "text-md/normal",
                            children: _.default.Messages.ONBOARDING_DEFAULT_MODE_DESCRIPTION
                        })
                    })) : (0, i.openModal)(s => (0, a.jsx)(i.ConfirmModal, {
                        header: _.default.Messages.ONBOARDING_ADVANCED_MODE_HEADER,
                        confirmText: _.default.Messages.ONBOARDING_ADVANCED_MODE_ENABLE,
                        cancelText: _.default.Messages.CANCEL,
                        confirmButtonColor: i.Button.Colors.BRAND,
                        onConfirm: () => (0, u.toggleAdvancedSettings)(t, e),
                        ...s,
                        children: (0, a.jsx)(i.Text, {
                            variant: "text-md/normal",
                            children: _.default.Messages.ONBOARDING_ADVANCED_MODE_DESCRIPTION
                        })
                    }))
                }, [t, c]);
                return d ? (0, a.jsx)("div", {
                    className: s,
                    children: (0, a.jsx)(i.Anchor, {
                        onClick: T,
                        children: (0, a.jsx)(i.Text, {
                            variant: "text-sm/medium",
                            color: "text-link",
                            children: c ? _.default.Messages.ONBOARDING_DEFAULT_MODE_TOGGLE : _.default.Messages.ONBOARDING_ADVANCED_MODE_TOGGLE
                        })
                    })
                }) : null
            }
        },
        925649: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return R
                }
            }), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("669491"),
                o = s("77078"),
                d = s("272030"),
                u = s("648747"),
                c = s("380710"),
                E = s("41594"),
                _ = s("676143"),
                T = s("98292"),
                I = s("45029"),
                S = s("851490"),
                N = s("904383"),
                f = s("223729"),
                g = s("49111"),
                A = s("782340"),
                L = s("622802");

            function m(e) {
                let {
                    guild: t,
                    channel: n
                } = e, l = (0, N.useIsChecked)(n.id);
                return "null" === n.id ? (0, a.jsx)("div", {
                    className: i(L.categoryRow, L.uncategorized),
                    children: (0, a.jsx)(o.Text, {
                        className: L.categoryText,
                        color: "text-muted",
                        variant: "text-xs/semibold",
                        lineClamp: 1,
                        children: n.name
                    })
                }) : (0, a.jsxs)(o.Clickable, {
                    className: i(L.categoryRow, {
                        [L.uncategorized]: "null" === n.id
                    }),
                    onContextMenu: e => {
                        (0, d.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("142047").then(s.bind(s, "142047"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                channel: n,
                                guild: t
                            })
                        })
                    },
                    onClick: e => {
                        e.stopPropagation();
                        let l = (0, u.canChannelBeDefault)(t.id, n.id);
                        return l ? (0, S.toggleDefaultChannel)(n.id) : (0, o.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("10035").then(s.bind(s, "10035"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                guildId: t.id,
                                startingChannelId: n.id
                            })
                        }), !0
                    },
                    children: [(0, a.jsx)(o.Text, {
                        className: L.categoryText,
                        color: "text-muted",
                        variant: "text-xs/semibold",
                        lineClamp: 1,
                        children: n.name
                    }), (0, a.jsx)(o.Checkbox, {
                        "aria-checked": l,
                        value: l,
                        type: o.Checkbox.Types.INVERTED,
                        className: L.checkbox,
                        displayOnly: !0
                    })]
                })
            }
            let C = n.memo(function() {
                    return (0, a.jsx)("div", {
                        className: L.separator
                    })
                }),
                O = n.memo(function(e) {
                    let {
                        index: t
                    } = e;
                    return (0, a.jsx)(o.Text, {
                        variant: "text-xs/normal",
                        className: L.subtitleSeparator,
                        children: "\xb7"
                    }, "separator-".concat(t))
                }),
                h = n.memo(function(e) {
                    let {
                        channel: t,
                        category: n,
                        guild: l,
                        isFirstChannel: _,
                        isLastChannel: m,
                        tooltipDirection: h = "right"
                    } = e, R = (0, N.useIsChecked)(t.id, n.id), D = (0, N.useIsDisabled)(t.id, n.id), M = (0, N.useDisabledTooltip)(t.id, n.id), G = (0, N.useTooltip)(l.id, n.id), x = (0, f.default)(l), p = null != x.find(e => e.id === t.id), U = (0, c.useIsChattableChannel)(t.id), v = e => {
                        if (D) return;
                        e.stopPropagation();
                        let n = (0, u.canChannelBeDefault)(l.id, t.id);
                        return n ? (0, S.toggleDefaultChannel)(t.id) : (0, o.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("10035").then(s.bind(s, "10035"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                guildId: l.id,
                                startingChannelId: t.id
                            })
                        }), !0
                    }, j = e => {
                        t.isGuildVocal() ? (0, d.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("168003").then(s.bind(s, "168003"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                channel: t,
                                guild: l
                            })
                        }) : (0, d.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("327241").then(s.bind(s, "327241"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                channel: t,
                                guild: l
                            })
                        })
                    };
                    return (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(o.Tooltip, {
                            text: null != M ? M : G,
                            delay: 500,
                            position: h,
                            children: e => (0, a.jsxs)(o.Clickable, {
                                className: i(L.channelRow, {
                                    [L.firstChannel]: _,
                                    [L.lastChannel]: m,
                                    [L.disabled]: D
                                }),
                                ...e,
                                onClick: v,
                                onContextMenu: j,
                                children: [(0, a.jsx)("div", {
                                    className: L.channelInfo,
                                    children: (0, a.jsxs)("div", {
                                        className: L.channelName,
                                        children: [(0, a.jsx)(E.ChannelItemIcon, {
                                            channel: t,
                                            guild: l
                                        }), (0, a.jsx)(T.default, {
                                            className: L.name,
                                            children: (0, a.jsx)(o.Text, {
                                                className: L.channelText,
                                                variant: "text-md/medium",
                                                lineClamp: 1,
                                                color: D ? "text-muted" : "text-normal",
                                                children: t.name
                                            })
                                        }), p ? (0, a.jsxs)(a.Fragment, {
                                            children: [(0, a.jsx)(O, {
                                                index: 0
                                            }), (0, a.jsx)(o.Text, {
                                                variant: "text-xs/medium",
                                                className: L.channelSubtitle,
                                                color: "text-brand",
                                                children: A.default.Messages.CHANNEL_POPULAR
                                            })]
                                        }) : null]
                                    })
                                }), (0, a.jsx)("div", {
                                    className: L.channelActions,
                                    children: (0, u.canChannelBeDefault)(t.guild_id, t.id) ? (0, a.jsx)(o.Checkbox, {
                                        "aria-checked": R,
                                        value: R,
                                        type: o.Checkbox.Types.INVERTED,
                                        disabled: D,
                                        color: U ? r.default.colors.TEXT_BRAND.css : r.default.colors.BUTTON_SECONDARY_BACKGROUND.css,
                                        innerClassName: L.checkboxInner,
                                        displayOnly: !0
                                    }) : (0, a.jsxs)(o.Button, {
                                        look: o.Button.Looks.OUTLINED,
                                        color: o.Button.Colors.PRIMARY,
                                        className: L.lockedPill,
                                        innerClassName: L.lockedPillInner,
                                        onClick: g.NOOP,
                                        children: [(0, a.jsx)(I.default, {
                                            width: 16,
                                            height: 16
                                        }), (0, a.jsx)(o.Text, {
                                            variant: "text-sm/medium",
                                            color: "none",
                                            children: A.default.Messages.UNLOCK
                                        })]
                                    })
                                })]
                            })
                        }), !m && (0, a.jsx)(C, {})]
                    })
                });

            function R(e) {
                let {
                    categories: t,
                    guild: s,
                    className: l,
                    hasSidebar: i
                } = e, r = n.useCallback(e => {
                    let n = t._categories[e];
                    return (0, a.jsx)(m, {
                        channel: n.channel,
                        guild: s
                    }, n.channel.id)
                }, [t, s]), o = n.useCallback((e, n) => {
                    let l = t._categories[e],
                        r = t[l.channel.id][n];
                    return null == r ? null : (0, a.jsx)(h, {
                        category: l.channel,
                        channel: r.channel,
                        guild: s,
                        isFirstChannel: 0 === n,
                        isLastChannel: t[l.channel.id].length - 1 === n,
                        tooltipDirection: i ? "right" : "top"
                    }, r.channel.id)
                }, [t, s, i]), d = (0, _.useChannelBrowserSections)(s.id, t, 64);
                return (0, a.jsx)("div", {
                    className: l,
                    children: d.map((e, t) => {
                        let s = r(t),
                            n = [],
                            l = e.rowCount;
                        if (0 === l) return null;
                        for (let e = 0; e < l; e++) n.push(o(t, e));
                        return (0, a.jsxs)(a.Fragment, {
                            children: [s, n]
                        })
                    })
                })
            }
        },
        795126: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return f
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("446674"),
                r = s("77078"),
                o = s("419830"),
                d = s("648747"),
                u = s("380710"),
                c = s("843323"),
                E = s("461380"),
                _ = s("593195"),
                T = s("653274"),
                I = s("34654"),
                S = s("782340"),
                N = s("873536");

            function f(e) {
                let {
                    guild: t,
                    scrollToQuestions: s
                } = e, n = (0, i.useStateFromStores)([T.default], () => T.default.editedDefaultChannelIds), l = (0, c.useFlattenedChannels)(t.id, n), r = l.filter(e => e.isCategory() || (0, d.canChannelBeDefault)(e.guild_id, e.id));
                return (0, a.jsxs)("div", {
                    className: N.container,
                    children: [(0, a.jsx)("div", {
                        className: N.header,
                        children: (0, a.jsx)(I.default, {
                            guildId: t.id,
                            scrollToQuestions: s
                        })
                    }), (0, a.jsxs)("div", {
                        className: N.channelList,
                        children: [(0, a.jsx)(L, {}), 0 === r.length && (0, a.jsx)(g, {}), (0, a.jsx)(A, {
                            channels: r
                        })]
                    })]
                })
            }

            function g() {
                return (0, a.jsxs)("div", {
                    className: N.emptyState,
                    children: [(0, a.jsx)("div", {
                        className: N.emptyStateIcon,
                        children: (0, a.jsx)(_.default, {
                            width: 24,
                            height: 24
                        })
                    }), (0, a.jsx)(r.Text, {
                        className: N.channelName,
                        variant: "text-md/normal",
                        color: "text-muted",
                        children: S.default.Messages.DEFAULT_CHANNELS_PREVIEW_EMPTY_STATE
                    })]
                })
            }

            function A(e) {
                let {
                    channels: t
                } = e;
                return (0, a.jsx)(a.Fragment, {
                    children: t.map(e => e.isCategory() ? (0, a.jsx)(m, {
                        label: e.name
                    }, e.id) : (0, a.jsx)(C, {
                        channel: e
                    }, e.id))
                })
            }

            function L() {
                return (0, a.jsx)("div", {
                    className: N.divider
                })
            }

            function m(e) {
                let {
                    label: t
                } = e;
                return (0, a.jsxs)("div", {
                    className: N.category,
                    children: [(0, a.jsx)(E.default, {
                        className: N.caret,
                        width: 12,
                        height: 12,
                        direction: E.default.Directions.DOWN
                    }), (0, a.jsx)(r.Text, {
                        variant: "text-xs/semibold",
                        color: "text-muted",
                        lineClamp: 1,
                        children: t
                    })]
                })
            }

            function C(e) {
                var t;
                let {
                    channel: s
                } = e, n = (0, u.isChattableChannel)(s), i = null !== (t = (0, o.getChannelIconComponent)(s)) && void 0 !== t ? t : _.default;
                return (0, a.jsxs)("div", {
                    className: N.channel,
                    children: [(0, a.jsx)(i, {
                        className: N.channelIcon,
                        width: 16,
                        height: 16
                    }), (0, a.jsx)(r.Text, {
                        className: N.channelName,
                        variant: "text-md/normal",
                        color: "text-muted",
                        lineClamp: 1,
                        children: s.name
                    }), (0, a.jsx)("div", {
                        className: l({
                            [N.chattableIndicator]: n
                        })
                    })]
                })
            }
        },
        34654: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return N
                }
            }), s("222007");
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("669491"),
                i = s("77078"),
                r = s("863636"),
                o = s("380710"),
                d = s("578706"),
                u = s("381546"),
                c = s("266926"),
                E = s("653274"),
                _ = s("682327"),
                T = s("653138"),
                I = s("782340"),
                S = s("22394");

            function N(e) {
                let {
                    guildId: t,
                    scrollToQuestions: s
                } = e, N = (0, n.useStateFromStores)([r.default], () => r.default.isAdvancedMode(t)), f = (0, n.useStateFromStores)([E.default], () => E.default.editedDefaultChannelIds), [g, A] = (0, o.useChattableDefaultChannels)(t, [...f]), [L, m] = (0, _.useEditedChattableDefaultChannelsWithQuestions)(t, [...f]), C = N ? m.length : A.length, O = N ? L.length : g.length, h = C < T.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING, R = O >= T.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN, D = m.length - A.length, M = (0, a.jsx)(d.default, {
                    color: l.default.unsafe_rawColors.BRAND_500.css,
                    backgroundColor: l.default.unsafe_rawColors.WHITE_100.css,
                    className: S.icon,
                    width: 18,
                    height: 18
                }), G = (0, a.jsx)(u.default, {
                    className: S.icon,
                    color: "var(--background-accent)",
                    backgroundColor: l.default.colors.WHITE.css,
                    width: 18,
                    height: 18
                }), x = [Math.min(T.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN, O) / T.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING * 100, Math.min(T.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING, C) / T.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING * 100], p = !h && R ? [l.default.colors.TEXT_POSITIVE.css, l.default.colors.TEXT_POSITIVE.css] : [l.default.colors.TEXT_BRAND.css, l.default.colors.TEXT_MUTED.css];
                return (0, a.jsxs)("div", {
                    className: S.container,
                    children: [(0, a.jsxs)("div", {
                        className: S.header,
                        children: [(0, a.jsx)(i.Text, {
                            variant: "text-xs/bold",
                            color: "text-brand",
                            children: I.default.Messages.DEFAULT_CHANNELS_CHATTABLE_COUNT.format({
                                count: O
                            })
                        }), (0, a.jsx)(i.Text, {
                            variant: "text-xs/bold",
                            color: "text-muted",
                            children: I.default.Messages.DEFAULT_CHANNELS_TOTAL_COUNT.format({
                                count: C
                            })
                        })]
                    }), (0, a.jsx)(i.StackedProgress, {
                        foregroundColors: p,
                        percents: x,
                        size: i.StackedProgress.Sizes.XSMALL
                    }), (0, a.jsxs)("div", {
                        className: S.requiredItem,
                        children: [h ? G : M, (0, a.jsx)(i.Text, {
                            variant: "text-xs/normal",
                            color: "text-muted",
                            children: I.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_MIN_CHANNELS.format({
                                count: T.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING
                            })
                        })]
                    }), (0, a.jsxs)("div", {
                        className: S.requiredItem,
                        children: [R ? M : G, (0, a.jsx)(i.Text, {
                            variant: "text-xs/normal",
                            color: "text-muted",
                            children: I.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_MIN_CHATTABLE_CHANNELS.format({
                                count: T.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN
                            })
                        })]
                    }), N && (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsxs)("div", {
                            className: S.requiredItem,
                            children: [(0, a.jsx)(c.default, {
                                color: "var(--background-accent)",
                                backgroundColor: l.default.colors.WHITE.css,
                                className: S.icon,
                                width: 18,
                                height: 18
                            }), (0, a.jsx)(i.Text, {
                                variant: "text-xs/normal",
                                color: "text-muted",
                                children: I.default.Messages.DEFAULT_CHANNELS_ADVANCED_EXPLAINER
                            })]
                        }), (0, a.jsxs)("div", {
                            className: S.requiredItem,
                            children: [(0, a.jsx)(c.default, {
                                color: "var(--background-accent)",
                                backgroundColor: l.default.colors.WHITE.css,
                                className: S.icon,
                                width: 18,
                                height: 18
                            }), (0, a.jsx)(i.Text, {
                                variant: "text-xs/normal",
                                color: "text-muted",
                                children: I.default.Messages.DEFAULT_CHANNELS_PREVIEW_ADDITIONAL.format({
                                    count: D,
                                    prejoinHook: e => (0, a.jsx)(i.Anchor, {
                                        onClick: s,
                                        children: (0, a.jsx)(i.Text, {
                                            tag: "span",
                                            variant: "text-xs/normal",
                                            color: "text-link",
                                            children: e
                                        })
                                    })
                                })
                            })]
                        })]
                    })]
                })
            }
        },
        545901: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                SafetyCheckUpsell: function() {
                    return o
                },
                DefaultChannelsUpsell: function() {
                    return d
                },
                CustomizationQuestionsUpsell: function() {
                    return u
                },
                HomeSettingsUpsell: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078");
            s("593195"), s("564875");
            var l = s("131835"),
                i = s("782340"),
                r = s("965979");

            function o() {
                return (0, a.jsxs)("div", {
                    className: r.container,
                    children: [(0, a.jsx)(n.Text, {
                        variant: "text-xs/semibold",
                        color: "header-secondary",
                        className: r.stepHeader,
                        children: i.default.Messages.STEP_NUMBER.format({
                            number: 1
                        })
                    }), (0, a.jsx)(n.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        className: r.header,
                        children: i.default.Messages.GUILD_ONBOARDING_UPSELL_SAFETY_TITLE
                    }), (0, a.jsx)(n.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        children: i.default.Messages.GUILD_ONBOARDING_UPSELL_SAFETY_TITLE_TOOLTIP
                    }), (0, a.jsx)(n.Button, {
                        className: r.button,
                        onClick: () => (0, l.dismissEducationUpsell)("Safety Check"),
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA
                    })]
                })
            }

            function d() {
                return (0, a.jsxs)("div", {
                    className: r.container,
                    children: [(0, a.jsx)(n.Text, {
                        variant: "text-xs/semibold",
                        color: "header-secondary",
                        className: r.stepHeader,
                        children: i.default.Messages.STEP_NUMBER.format({
                            number: 2
                        })
                    }), (0, a.jsx)(n.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        className: r.header,
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_DEFAULT_CHANNELS_TITLE
                    }), (0, a.jsx)(n.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_DEFAULT_CHANNELS_SUBTITLE
                    }), (0, a.jsx)(n.Button, {
                        className: r.button,
                        onClick: () => (0, l.dismissEducationUpsell)("Default Channels"),
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA
                    })]
                })
            }

            function u() {
                return (0, a.jsxs)("div", {
                    className: r.container,
                    children: [(0, a.jsx)(n.Text, {
                        variant: "text-xs/semibold",
                        color: "header-secondary",
                        className: r.stepHeader,
                        children: i.default.Messages.STEP_NUMBER.format({
                            number: 3
                        })
                    }), (0, a.jsx)(n.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        className: r.header,
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_CUSTOMIZATION_QUESTIONS_TITLE
                    }), (0, a.jsx)(n.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_CUSTOMIZATION_QUESTIONS_SUBTITLE
                    }), (0, a.jsx)(n.Button, {
                        className: r.button,
                        onClick: () => (0, l.dismissEducationUpsell)("Customization Questions"),
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA
                    })]
                })
            }

            function c() {
                return (0, a.jsxs)("div", {
                    className: r.container,
                    children: [(0, a.jsx)(n.Text, {
                        variant: "text-xs/semibold",
                        color: "header-secondary",
                        className: r.stepHeader,
                        children: i.default.Messages.STEP_NUMBER.format({
                            number: 4
                        })
                    }), (0, a.jsx)(n.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        className: r.header,
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_HOME_TITLE
                    }), (0, a.jsx)(n.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_HOME_SUBTITLE
                    }), (0, a.jsx)(n.Button, {
                        className: r.button,
                        onClick: () => (0, l.dismissEducationUpsell)("Home Settings"),
                        children: i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA
                    })]
                })
            }
        },
        706866: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return P
                },
                GuildSettingsDefaultChannelsNotice: function() {
                    return y
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("45299"),
                u = s("648747"),
                c = s("863636"),
                E = s("41594"),
                _ = s("367376"),
                T = s("988724"),
                I = s("161188"),
                S = s("245997"),
                N = s("923959"),
                f = s("98292"),
                g = s("461380"),
                A = s("36694"),
                L = s("45029"),
                m = s("900938"),
                C = s("851490"),
                O = s("653274"),
                h = s("330724"),
                R = s("136278"),
                D = s("223729"),
                M = s("682327"),
                G = s("925649"),
                x = s("795126"),
                p = s("457461"),
                U = s("782340"),
                v = s("284246");

            function j(e) {
                let {
                    guild: t
                } = e, l = (0, r.useStateFromStores)([c.default], () => c.default.getEnabled(t.id)), i = (0, r.useStateFromStores)([I.default], () => I.default.hasFetched(t.id)), d = (0, D.default)(t), S = (0, r.useStateFromStores)([O.default], () => O.default.editedDefaultChannelIds), N = d.filter(e => !S.has(e.id)), [g, m] = n.useState(!1);
                n.useEffect(() => {
                    !i && !l && (0, T.fetchTopReadChannels)(t.id)
                }, [t.id, i, l]);
                let h = e => {
                    (0, o.openModalLazy)(async () => {
                        let {
                            default: n
                        } = await s.el("10035").then(s.bind(s, "10035"));
                        return s => (0, a.jsx)(n, {
                            ...s,
                            guildId: t.id,
                            startingChannelId: e
                        })
                    })
                };
                return g || 0 === N.length ? null : (0, a.jsxs)("div", {
                    className: v.recommendations,
                    children: [(0, a.jsx)(o.Text, {
                        variant: "text-md/medium",
                        color: "header-primary",
                        children: U.default.Messages.CHANNEL_RECOMMENDED
                    }), (0, a.jsxs)("div", {
                        className: v.recsSubheader,
                        children: [(0, a.jsx)(o.Text, {
                            variant: "text-xs/normal",
                            color: "text-muted",
                            children: U.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_RECOMMENDED_DESCRIPTION
                        }), (0, a.jsxs)(o.Clickable, {
                            className: v.dismissAll,
                            onClick: () => m(!0),
                            children: [(0, a.jsx)(A.default, {
                                width: 12,
                                height: 12,
                                className: v.checkmark
                            }), (0, a.jsx)(o.Text, {
                                className: v.dismissAllText,
                                variant: "text-xs/medium",
                                color: "text-brand",
                                children: U.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_RECOMMENDED_DISMISS_ALL
                            })]
                        })]
                    }), (0, a.jsx)("div", {
                        className: v.recommendedChannels,
                        children: N.map((e, s) => (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsxs)("div", {
                                className: v.channelRow,
                                children: [(0, a.jsxs)("div", {
                                    className: v.channelInfo,
                                    children: [(0, a.jsxs)("div", {
                                        className: v.channelName,
                                        children: [(0, a.jsx)(E.ChannelItemIcon, {
                                            channel: e,
                                            guild: t
                                        }), (0, a.jsx)(f.default, {
                                            className: v.name,
                                            children: (0, a.jsx)(o.Text, {
                                                className: v.channelText,
                                                variant: "text-md/medium",
                                                lineClamp: 1,
                                                color: "text-normal",
                                                children: e.name
                                            })
                                        })]
                                    }), null != e.topic && e.topic.length > 0 ? (0, a.jsx)(f.default, {
                                        children: (0, a.jsx)(o.Text, {
                                            className: v.topic,
                                            variant: "text-xs/normal",
                                            children: _.default.parseTopic(e.topic, !0, {
                                                channelId: e.id
                                            })
                                        })
                                    }, "topic") : null]
                                }), (0, u.canChannelBeDefault)(t.id, e.id) ? (0, a.jsx)(o.Button, {
                                    color: o.Button.Colors.BRAND,
                                    size: o.Button.Sizes.SMALL,
                                    className: v.addChannelCTA,
                                    onClick: () => (0, C.toggleDefaultChannel)(e.id),
                                    children: U.default.Messages.ADD
                                }) : (0, a.jsxs)(o.Button, {
                                    look: o.Button.Looks.OUTLINED,
                                    color: o.Button.Colors.PRIMARY,
                                    className: v.lockedPill,
                                    innerClassName: v.lockedPillInner,
                                    onClick: () => h(e.id),
                                    children: [(0, a.jsx)(L.default, {
                                        width: 16,
                                        height: 16
                                    }), (0, a.jsx)(o.Text, {
                                        variant: "text-sm/medium",
                                        children: U.default.Messages.UNLOCK
                                    })]
                                })]
                            }), s < N.length - 1 ? (0, a.jsx)("div", {
                                className: v.separator
                            }) : null]
                        }))
                    }), (0, a.jsx)("div", {
                        className: v.largeSeparator
                    })]
                })
            }

            function P(e) {
                let {
                    saveOnClose: t = !1
                } = e, s = (0, r.useStateFromStores)([m.default], () => m.default.getGuild()), l = (0, r.useStateFromStores)([c.default], () => c.default.isLoading()), d = (0, r.useStateFromStores)([N.default], () => N.default.getChannels(null == s ? void 0 : s.id)), u = (0, r.useStateFromStores)([S.default], () => S.default.getCategories(null == s ? void 0 : s.id)), E = (0, r.useStateFromStores)([R.default], () => R.default.advancedMode), _ = n.useRef(null), [T, I] = n.useState(!1);
                return (n.useEffect(() => {
                    if (t) return () => {
                        null != s && (0, C.saveDefaultChannels)(s).then(() => {
                            E && (0, h.saveGuildOnboardingPrompts)(s, {
                                ignoreDefaultPrompt: !0
                            }).catch(() => {})
                        }).catch(() => {})
                    }
                }, [t, E]), null == s) ? null : l ? (0, a.jsx)(o.Spinner, {}) : (0, a.jsxs)("div", {
                    className: v.columns,
                    children: [(0, a.jsxs)("div", {
                        className: v.channelBrowser,
                        children: [(0, a.jsx)(o.Clickable, {
                            className: v.collapseButton,
                            onClick: () => I(e => !e),
                            children: (0, a.jsx)(g.default, {
                                direction: T ? g.default.Directions.DOWN : g.default.Directions.UP,
                                height: 16,
                                width: 16
                            })
                        }), (0, a.jsx)(o.Heading, {
                            className: v.header,
                            variant: "heading-lg/extrabold",
                            children: U.default.Messages.GUILD_SETTINGS_DEFAULT_CHANNELS
                        }), (0, a.jsx)(o.Text, {
                            variant: "text-sm/normal",
                            color: "header-secondary",
                            children: U.default.Messages.GUILD_SETTINGS_DEFAULT_CHANNELS_SUBHEADER
                        }), (0, a.jsx)(M.AdvancedModeToggle, {
                            className: v.advancedModeToggle,
                            guildId: s.id
                        }), T ? null : (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(j, {
                                guild: s
                            }), (0, a.jsx)(G.default, {
                                className: i(v.channelBrowserOuter),
                                guild: s,
                                categories: u,
                                channels: d,
                                hasSidebar: !1
                            })]
                        }), E && (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)("div", {
                                className: v.largeSeparator
                            }), (0, a.jsx)(o.Heading, {
                                className: v.prejoinHeader,
                                variant: "heading-lg/extrabold",
                                children: U.default.Messages.GUILD_SETTINGS_PRE_JOIN_QUESTIONS_HEADER
                            }), (0, a.jsx)(o.Text, {
                                className: v.prejoinSubHeader,
                                variant: "text-sm/normal",
                                color: "header-secondary",
                                children: U.default.Messages.GUILD_SETTINGS_PRE_JOIN_QUESTIONS_SUBHEADER
                            }), (0, a.jsx)("div", {
                                ref: _,
                                className: v.advancedModeQuestions,
                                children: (0, a.jsx)(p.default, {
                                    guildId: s.id,
                                    prejoinOnly: !0,
                                    includeCount: !0,
                                    singleColumn: !0
                                })
                            })]
                        })]
                    }), (0, a.jsx)(x.default, {
                        guild: s,
                        scrollToQuestions: () => {
                            null != _.current && _.current.scrollIntoView({
                                behavior: "smooth"
                            })
                        }
                    })]
                })
            }

            function y() {
                let e = (0, r.useStateFromStores)([m.default], () => m.default.getProps().guild),
                    t = (0, r.useStateFromStores)([O.default], () => O.default.submitting),
                    s = (0, r.useStateFromStores)([R.default], () => R.default.advancedMode);
                return null == e ? null : (0, a.jsx)(d.default, {
                    onSave: () => {
                        (0, C.saveDefaultChannels)(e).then(() => {
                            s && (0, h.saveGuildOnboardingPrompts)(e, {
                                ignoreDefaultPrompt: !0
                            }).catch(() => {})
                        }).catch(() => {})
                    },
                    onReset: C.resetDefaultChannels,
                    submitting: t,
                    onSaveText: U.default.Messages.SAVE
                })
            }
        },
        764151: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return eu
                },
                GuildSettingsHomeSettingsNotice: function() {
                    return eE
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("65597"),
                o = s("819855"),
                d = s("77078"),
                u = s("45299"),
                c = s("716241"),
                E = s("419830"),
                _ = s("69678"),
                T = s("372283"),
                I = s("634544"),
                S = s("379532"),
                N = s("569912"),
                f = s("129092"),
                g = s("205454"),
                A = s("768596"),
                L = s("656913"),
                m = s("694187"),
                C = s("161778"),
                O = s("271938"),
                h = s("42203"),
                R = s("923959"),
                D = s("305961"),
                M = s("181114"),
                G = s("593195"),
                x = s("36694"),
                p = s("945330"),
                U = s("673220"),
                v = s("832132"),
                j = s("118503"),
                P = s("351825"),
                y = s("641892"),
                b = s("315102"),
                B = s("991170"),
                F = s("592407"),
                H = s("900938"),
                V = s("435076"),
                k = s("642807"),
                w = s("49111"),
                Y = s("944305"),
                K = s("75015"),
                W = s("453252"),
                z = s("782340"),
                X = s("184664"),
                Z = s("817616"),
                J = s("731106"),
                Q = s("271696"),
                q = s("694947");

            function $(e) {
                let {
                    guildId: t,
                    welcomeMessage: l
                } = e, o = n.useCallback(() => {
                    if (null != t) return (0, d.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("153774").then(s.bind(s, "153774"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guildId: t,
                            welcomeMessage: l,
                            onSave: e => (0, V.updateWelcomeMessage)(e)
                        })
                    })
                }, [t, l]), u = (0, r.default)([O.default], () => O.default.getId());
                return (0, f.isWelcomeMessageEmpty)(l) ? (0, a.jsx)(d.Button, {
                    size: d.Button.Sizes.SMALL,
                    onClick: o,
                    children: (0, a.jsx)(d.Text, {
                        variant: "text-sm/medium",
                        children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_SETUP_WELCOME
                    })
                }) : (0, a.jsxs)(d.Clickable, {
                    className: X.editWelcomeSection,
                    onClick: o,
                    children: [(0, a.jsx)(A.default, {
                        guildId: t,
                        welcomeMessage: {
                            authorIds: l.authorIds.length > 0 ? l.authorIds : [u],
                            message: l.message
                        }
                    }), (0, a.jsx)(d.Tooltip, {
                        text: z.default.Messages.EDIT,
                        children: e => (0, a.jsxs)("div", {
                            ...e,
                            className: i(X.actionItemEditButton, X.editWelcomeButton),
                            children: [(0, a.jsx)(v.default, {
                                className: X.editIcon
                            }), (0, a.jsx)(d.HiddenVisually, {
                                children: z.default.Messages.EDIT
                            })]
                        })
                    })]
                })
            }

            function ee(e) {
                var t, l, o, u, c;
                let {
                    guildId: T,
                    action: I,
                    actionIndex: S,
                    onChange: A,
                    onDelete: L,
                    onDragStart: m,
                    onDragComplete: C,
                    onDragReset: O
                } = e, R = (0, r.default)([h.default], () => h.default.getChannel(I.channelId)), M = (0, r.default)([D.default], () => D.default.getGuild(T)), {
                    customEmoji: x,
                    unicodeEmoji: p
                } = (0, N.default)(null === (t = I.emoji) || void 0 === t ? void 0 : t.id, null === (l = I.emoji) || void 0 === l ? void 0 : l.name), j = null == I.emoji || null != x || null != p, P = b.default.getNewMemberActionIconURL({
                    channelId: I.channelId,
                    icon: I.icon
                }), y = null;
                null != R && (0, f.isChannelValidForNewMemberAction)(R) ? !j && (y = z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_ACTION_CHANNEL_EMOJI) : y = z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_ACTION_CHANNEL;
                let {
                    drag: B,
                    dragSourcePosition: F,
                    drop: H,
                    setIsDraggable: k
                } = (0, _.default)({
                    type: "NEW_MEMBER_ACTION",
                    index: S,
                    optionId: I.channelId,
                    onDragStart: m,
                    onDragComplete: C,
                    onDragReset: O
                }), w = n.useCallback((e, t) => {
                    (0, V.updateNewMemberActionIconData)(e.channelId, t)
                }, []), Y = n.useCallback(() => {
                    if (null != T) return (0, d.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("466564").then(s.bind(s, "466564"));
                        return t => (0, a.jsx)(e, {
                            ...t,
                            guildId: T,
                            action: I,
                            onSave: (e, t) => A(S, e, t),
                            onDelete: () => L(S),
                            onIconUpload: w
                        })
                    })
                }, [T, I, S, A, L, w]);
                if (null == R || null == M) return null;
                let K = null !== (c = (0, E.getChannelIconComponent)(R)) && void 0 !== c ? c : G.default;
                return (0, a.jsxs)("div", {
                    className: i(X.actionItemContainer),
                    children: [(0, a.jsxs)("div", {
                        className: i(X.actionItem, {
                            [X.dropIndicatorBefore]: null != F && S < F,
                            [X.dropIndicatorAfter]: null != F && S > F,
                            [X.actionItemError]: null != y
                        }),
                        ref: e => B(H(e)),
                        children: [(0, a.jsx)("div", {
                            className: X.dragContainer,
                            onMouseEnter: () => k(!0),
                            onMouseLeave: () => k(!1),
                            children: (0, a.jsx)(U.default, {
                                className: X.dragIcon
                            })
                        }), null != P ? (0, a.jsx)("div", {
                            className: X.iconWrapper,
                            children: (0, a.jsx)("img", {
                                src: P,
                                className: X.icon,
                                width: 48,
                                height: 48,
                                alt: "",
                                "aria-hidden": !0
                            })
                        }) : (0, a.jsx)("div", {
                            className: X.actionItemEmojiWrapper,
                            children: (0, a.jsx)(g.default, {
                                emojiId: null === (o = I.emoji) || void 0 === o ? void 0 : o.id,
                                emojiName: null === (u = I.emoji) || void 0 === u ? void 0 : u.name,
                                size: g.CTAEmojiSize.MEDIUM,
                                defaultComponent: (0, a.jsx)(K, {})
                            })
                        }), (0, a.jsxs)("div", {
                            className: X.actionItemText,
                            children: [(0, a.jsx)(d.Text, {
                                variant: "text-md/semibold",
                                color: "header-primary",
                                children: I.title
                            }), (0, a.jsx)(d.Text, {
                                variant: "text-xs/medium",
                                color: "header-secondary",
                                children: z.default.Messages.NEW_MEMBER_ACTION_CHANNEL.format({
                                    channelName: R.name
                                })
                            })]
                        }), (0, a.jsx)(d.Tooltip, {
                            text: z.default.Messages.EDIT,
                            children: e => (0, a.jsxs)(d.Button, {
                                ...e,
                                className: X.actionItemEditButton,
                                innerClassName: X.actionItemEditButtonInner,
                                size: d.Button.Sizes.MIN,
                                onClick: Y,
                                children: [(0, a.jsx)(v.default, {
                                    className: X.editIcon
                                }), (0, a.jsx)(d.HiddenVisually, {
                                    children: z.default.Messages.EDIT
                                })]
                            })
                        })]
                    }), null != y && (0, a.jsx)(d.Text, {
                        variant: "text-xs/medium",
                        color: "text-danger",
                        children: y
                    })]
                })
            }

            function et(e) {
                let {
                    guildId: t
                } = e, s = (0, r.useStateFromStoresArray)([k.default], () => {
                    var e;
                    let t = k.default.getSettings();
                    return null !== (e = t.newMemberActions) && void 0 !== e ? e : []
                }), l = n.useCallback((e, s) => {
                    if (null == t) return;
                    (0, V.addNewMemberAction)(e);
                    let a = k.default.getSettings();
                    if (null == a) return;
                    let {
                        channelId: n
                    } = e;
                    (0, V.saveHomeSettings)(t, a, !0).then(() => {
                        null != s && (0, V.updateNewMemberActionIcon)(t, n, s, !0)
                    })
                }, [t]), i = n.useCallback((e, a, n) => {
                    var l;
                    if (null == t) return;
                    let i = null === (l = s[e]) || void 0 === l ? void 0 : l.channelId;
                    if (null == i) return;
                    let r = k.default.getSettings();
                    if (null == r) return;
                    let o = k.default.hasActionIconChanged(i);
                    (0, V.updateNewMemberAction)(i, a), (0, V.saveHomeSettings)(t, r, !0).then(() => {
                        (0, V.updateNewMemberActionIcon)(t, i, n, o)
                    })
                }, [s, t]), o = n.useCallback(e => {
                    var t;
                    let a = null === (t = s[e]) || void 0 === t ? void 0 : t.channelId;
                    null != a && (0, V.deleteNewMemberAction)(a)
                }, [s]), d = s.map(e => ({
                    ...e,
                    id: e.channelId
                })), {
                    handleDragStart: u,
                    handleDragReset: c,
                    handleDragComplete: E
                } = (0, T.default)(d, V.reorderNewMemberActions);
                return null == t ? null : (0, a.jsxs)("div", {
                    className: X.section,
                    children: [s.map((e, s) => (0, a.jsx)(ee, {
                        guildId: t,
                        action: e,
                        actionIndex: s,
                        onChange: i,
                        onDelete: o,
                        onDragStart: u,
                        onDragReset: c,
                        onDragComplete: E
                    }, e.channelId)), (0, a.jsx)(es, {}), s.length < f.NEW_MEMBER_ACTION_MAX && (0, a.jsx)(ea, {
                        guildId: t,
                        onAddAction: l
                    })]
                })
            }

            function es() {
                return (0, a.jsx)("div", {
                    className: X.actionItemContainer,
                    children: (0, a.jsxs)("div", {
                        className: X.actionItem,
                        children: [(0, a.jsx)("div", {
                            className: X.actionItemEmojiWrapper,
                            children: (0, a.jsx)(y.default, {
                                height: 20,
                                width: 22
                            })
                        }), (0, a.jsx)("div", {
                            className: X.actionItemText,
                            children: (0, a.jsx)(d.Text, {
                                variant: "text-md/semibold",
                                color: "header-primary",
                                children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_RULES_ACTION
                            })
                        })]
                    })
                })
            }

            function ea(e) {
                let {
                    guildId: t,
                    onAddAction: l
                } = e, i = n.useCallback(() => {
                    if (null != t) return (0, d.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("466564").then(s.bind(s, "466564"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guildId: t,
                            onSave: l
                        })
                    })
                }, [t, l]);
                return (0, a.jsxs)(d.Clickable, {
                    className: X.addActionItem,
                    onClick: i,
                    children: [(0, a.jsx)(P.default, {}), (0, a.jsx)(d.Text, {
                        variant: "text-md/normal",
                        color: "none",
                        children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_ADD_A_TASK
                    })]
                })
            }

            function en() {
                return (0, a.jsxs)("div", {
                    className: X.badExample,
                    children: [(0, a.jsx)(d.Text, {
                        variant: "eyebrow",
                        color: "header-secondary",
                        children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_REASON
                    }), (0, a.jsxs)("div", {
                        className: X.example,
                        children: [(0, a.jsx)("div", {
                            className: X.badExampleIcon,
                            children: (0, a.jsx)(p.default, {})
                        }), (0, a.jsxs)("div", {
                            className: X.exampleText,
                            children: [(0, a.jsx)(d.Text, {
                                variant: "text-md/semibold",
                                color: "header-primary",
                                children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_TITLE
                            }), (0, a.jsx)(d.Text, {
                                variant: "text-xs/medium",
                                color: "text-muted",
                                children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_CHANNEL
                            })]
                        })]
                    })]
                })
            }

            function el(e) {
                var t;
                let {
                    guildId: l
                } = e, i = (0, r.default)([D.default], () => D.default.getGuild(l)), o = null !== (t = null == i ? void 0 : i.hasFeature(w.GuildFeatures.BANNER)) && void 0 !== t && t, u = n.useCallback((e, t) => {
                    if (null != l) {
                        if (null == e || void 0 === t) {
                            F.default.updateGuild({
                                homeHeader: null
                            });
                            return
                        }(0, d.openModalLazy)(async () => {
                            let {
                                default: n
                            } = await s.el("57015").then(s.bind(s, "57015"));
                            return s => (0, a.jsx)(n, {
                                imgURI: e,
                                file: t,
                                onCrop: e => F.default.saveGuild(l, {
                                    homeHeader: e
                                }),
                                uploadType: K.UploadTypes.HOME_HEADER,
                                ...s
                            })
                        })
                    }
                }, [l]), E = n.useCallback(e => {
                    e.preventDefault(), e.stopPropagation(), null != i && ((0, c.trackWithMetadata)(w.AnalyticEvents.PREMIUM_GUILD_PROMOTION_OPENED, {
                        location: {
                            section: w.AnalyticsSections.GUILD_SETTINGS_ONBOARDING,
                            object: w.AnalyticsObjects.LEARN_MORE
                        },
                        guild_id: null == i ? void 0 : i.id,
                        location_stack: []
                    }), (0, S.default)({
                        analyticsLocations: [],
                        analyticsSourceLocation: {
                            section: w.AnalyticsSections.GUILD_SETTINGS_ONBOARDING,
                            object: w.AnalyticsObjects.ONBOARDING_EDIT,
                            page: w.AnalyticsPages.GUILD_SETTINGS
                        },
                        guild: i,
                        perks: (0, Y.guildBannerUpsellPerks)()
                    }))
                }, [i]);
                if (null == i) return null;
                let _ = (0, a.jsx)(L.default, {
                    image: i.homeHeader,
                    makeURL: e => null != e ? b.default.getGuildHomeHeaderURL({
                        id: i.id,
                        homeHeader: e
                    }) : null,
                    disabled: !o,
                    onChange: u,
                    hint: z.default.Messages.CHANGE_HOME_HEADER,
                    enabled: o,
                    maxFileSizeBytes: W.MAX_IMAGE_UPLOAD_FILESIZE_BYTES
                });
                return o ? (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: X.sectionHeader,
                        children: [(0, a.jsx)(d.Heading, {
                            className: X.header,
                            variant: "heading-lg/extrabold",
                            children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_BANNER
                        }), (0, a.jsx)(I.default, {
                            className: X.boostIndicator,
                            guild: i,
                            guildFeature: w.GuildFeatures.BANNER,
                            onClick: E
                        })]
                    }), (0, a.jsxs)("div", {
                        className: X.section,
                        children: [(0, a.jsxs)("div", {
                            className: X.homeBannerExplainer,
                            children: [(0, a.jsx)(d.Text, {
                                variant: "text-sm/normal",
                                color: "header-secondary",
                                children: z.default.Messages.GUILD_SETTINGS_HOME_HEADER_RECOMMEND
                            }), (0, a.jsxs)(d.Button, {
                                color: d.ButtonColors.BRAND_NEW,
                                className: X.uploadButton,
                                children: [z.default.Messages.UPLOAD_BACKGROUND, (0, a.jsx)(m.default, {
                                    onChange: u,
                                    maxFileSizeBytes: W.MAX_IMAGE_UPLOAD_FILESIZE_BYTES
                                })]
                            })]
                        }), (0, a.jsx)("div", {
                            className: X.homeBannerImage,
                            children: _
                        })]
                    })]
                }) : (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: X.sectionHeader,
                        children: [(0, a.jsx)(d.Heading, {
                            className: X.header,
                            variant: "heading-lg/extrabold",
                            children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_BANNER
                        }), (0, a.jsx)(I.default, {
                            className: X.boostIndicator,
                            guild: i,
                            guildFeature: w.GuildFeatures.BANNER,
                            onClick: E
                        })]
                    }), (0, a.jsxs)("div", {
                        className: X.section,
                        children: [(0, a.jsxs)("div", {
                            className: X.homeBannerExplainer,
                            children: [(0, a.jsx)(d.Text, {
                                variant: "text-sm/normal",
                                color: "header-secondary",
                                children: z.default.Messages.GUILD_SETTINGS_HOME_HEADER_RECOMMEND
                            }), (0, a.jsxs)(M.default, {
                                className: X.upsellButton,
                                innerClassName: X.upsellButtonInner,
                                color: d.Button.Colors.GREEN,
                                onClick: E,
                                children: [(0, a.jsx)(j.default, {
                                    height: 16,
                                    width: 16,
                                    className: X.premiumUpsellBadge
                                }), (0, a.jsx)(d.Text, {
                                    variant: "text-sm/medium",
                                    color: "text-normal",
                                    children: z.default.Messages.PREMIUM_GUILD_UNLOCK_WTH_BOOSTING_CTA
                                })]
                            })]
                        }), (0, a.jsx)("div", {
                            className: X.homeBannerImage,
                            children: (0, a.jsx)(d.Clickable, {
                                "aria-hidden": !0,
                                tabIndex: -1,
                                className: X.upsell,
                                onClick: E,
                                children: _
                            })
                        })]
                    })]
                })
            }

            function ei(e) {
                let {
                    guildId: t,
                    resourceChannel: l,
                    index: o,
                    onDragComplete: u,
                    onDragStart: c,
                    onDragReset: E
                } = e, T = (0, r.default)([D.default], () => D.default.getGuild(t)), {
                    title: I,
                    channelId: S,
                    description: N
                } = l, g = h.default.getChannel(S), A = null;
                (null == g || !(0, f.isChannelValidForResourceChannel)(g)) && (A = z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_RESOURCE_CHANNEL);
                let L = null == N || 0 === N.length,
                    m = b.default.getResourceChannelIconURL({
                        channelId: l.channelId,
                        icon: l.icon
                    }),
                    {
                        drag: C,
                        dragSourcePosition: O,
                        drop: R,
                        setIsDraggable: M
                    } = (0, _.default)({
                        type: "RESOURCE_CHANNEL",
                        optionId: l.channelId,
                        index: o,
                        onDragStart: c,
                        onDragComplete: u,
                        onDragReset: E
                    }),
                    G = n.useCallback(e => {
                        (0, V.updateResourceChannel)(l.channelId, e)
                    }, [l.channelId]),
                    x = n.useCallback((e, s) => {
                        if (null == t) return;
                        let a = k.default.getSettings();
                        null != a && ((0, V.updateResourceChannel)(l.channelId, e), (0, V.saveHomeSettings)(t, a).then(() => {
                            (0, V.updateResourceChannelIcon)(t, e.channelId, s)
                        }))
                    }, [t, l]),
                    p = n.useCallback(() => {
                        if (null != t) return (0, d.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("398296").then(s.bind(s, "398296"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                guildId: t,
                                resourceChannel: l,
                                onSave: G,
                                onDelete: () => (0, V.deleteResourceChannel)(l.channelId),
                                onIconUpload: x
                            })
                        })
                    }, [t, l, G, x]);
                return null == T || null == g ? null : (0, a.jsxs)("div", {
                    className: i(X.resourceChannelContainer),
                    children: [(0, a.jsxs)("div", {
                        className: i(X.resourceChannel, {
                            [X.dropIndicatorBefore]: null != O && o < O,
                            [X.dropIndicatorAfter]: null != O && o > O,
                            [X.resourceChannelError]: null != A
                        }),
                        ref: e => C(R(e)),
                        children: [(0, a.jsx)("div", {
                            className: X.dragContainer,
                            onMouseEnter: () => M(!0),
                            onMouseLeave: () => M(!1),
                            children: (0, a.jsx)(U.default, {
                                className: X.dragIcon
                            })
                        }), null != m && (0, a.jsx)("div", {
                            className: X.iconWrapper,
                            children: (0, a.jsx)("img", {
                                src: m,
                                className: X.icon,
                                width: 32,
                                height: 32,
                                alt: "",
                                "aria-hidden": !0
                            })
                        }), (0, a.jsxs)("div", {
                            className: X.resourceChannelContent,
                            children: [(0, a.jsx)(d.Text, {
                                className: X.resourceChannelTitle,
                                variant: "text-md/semibold",
                                color: "header-primary",
                                children: I
                            }), !L && (0, a.jsx)(d.Text, {
                                className: X.resourceChannelDescription,
                                variant: "text-xs/medium",
                                color: "text-muted",
                                lineClamp: 1,
                                children: N
                            })]
                        }), (0, a.jsx)(d.Tooltip, {
                            text: z.default.Messages.EDIT,
                            children: e => (0, a.jsxs)(d.Button, {
                                ...e,
                                className: X.resourceChannelEditButton,
                                innerClassName: X.resourceChannelEditButtonInner,
                                size: d.Button.Sizes.MIN,
                                onClick: p,
                                children: [(0, a.jsx)(v.default, {}), (0, a.jsx)(d.HiddenVisually, {
                                    children: z.default.Messages.EDIT
                                })]
                            })
                        })]
                    }), null != A && (0, a.jsx)(d.Text, {
                        variant: "text-xs/medium",
                        color: "text-danger",
                        children: A
                    })]
                })
            }

            function er(e) {
                var t;
                let {
                    channel: s,
                    isLast: l
                } = e, i = n.useCallback(() => {
                    (0, V.addResourceChannel)({
                        channelId: s.id,
                        title: s.name,
                        description: "",
                        emoji: null,
                        icon: null
                    })
                }, [s]), r = null !== (t = (0, E.getChannelIconComponent)(s)) && void 0 !== t ? t : G.default;
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: X.suggestedChannel,
                        children: [(0, a.jsx)(r, {
                            className: X.suggestedChannelIcon
                        }), (0, a.jsx)(d.Text, {
                            className: X.suggestedChannelText,
                            variant: "text-sm/normal",
                            children: s.name
                        }), (0, a.jsx)(d.Button, {
                            className: X.suggestedChannelButton,
                            size: d.Button.Sizes.MIN,
                            onClick: i,
                            children: (0, a.jsx)(d.Text, {
                                variant: "text-sm/semibold",
                                color: "always-white",
                                children: z.default.Messages.ADD
                            })
                        })]
                    }), l && (0, a.jsx)("div", {
                        className: X.suggestedSeparator
                    })]
                })
            }

            function eo(e) {
                let {
                    guildId: t
                } = e, s = (0, r.default)([D.default], () => D.default.getGuild(t)), l = (0, r.useStateFromStoresArray)([k.default], () => {
                    var e, t;
                    let s = k.default.getSettings();
                    return null !== (t = null === (e = s.resourceChannels) || void 0 === e ? void 0 : e.map(e => e.channelId)) && void 0 !== t ? t : []
                }), i = (0, r.useStateFromStoresArray)([k.default], () => k.default.getDismissedSuggestedChannelIds(t)), o = (0, r.default)([R.default], () => null == t ? [] : R.default.getSelectableChannels(t)), u = o.filter(e => !i.includes(e.channel.id) && !l.includes(e.channel.id) && e.channel.type === w.ChannelTypes.GUILD_TEXT && B.default.canEveryoneRole(w.Permissions.VIEW_CHANNEL, e.channel) && !B.default.canEveryoneRole(w.Permissions.SEND_MESSAGES, e.channel) && e.channel.id !== (null == s ? void 0 : s.rulesChannelId)).slice(0, 5), c = n.useCallback(() => {
                    let e = u.map(e => e.channel.id);
                    (0, V.dismissSuggestedChannels)(t, e)
                }, [t, u]);
                return u.length <= 0 || l.length >= f.RESOURCE_CHANNEL_MAX ? null : (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: X.suggestedChannelsSection,
                        children: [(0, a.jsx)(d.Text, {
                            variant: "text-md/semibold",
                            children: z.default.Messages.RECOMMENDED
                        }), (0, a.jsxs)("div", {
                            className: X.suggestedChannelsHeader,
                            children: [(0, a.jsx)(d.Text, {
                                variant: "text-xs/medium",
                                color: "text-muted",
                                children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_SUGGESTED_RESOURCES_EXPLAINER
                            }), (0, a.jsxs)(d.Clickable, {
                                className: X.suggestedChannelsDismiss,
                                onClick: c,
                                children: [(0, a.jsx)(x.default, {
                                    className: X.suggestedChannelsDismissCheck
                                }), (0, a.jsx)(d.Text, {
                                    variant: "text-xs/semibold",
                                    color: "text-brand",
                                    children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_SUGGESTED_RESOURCES_DISMISS
                                })]
                            })]
                        }), (0, a.jsx)("div", {
                            className: X.suggestedChannels,
                            children: u.map((e, t) => (0, a.jsx)(er, {
                                channel: e.channel,
                                isLast: t < u.length - 1
                            }, e.channel.id))
                        })]
                    }), (0, a.jsx)("div", {
                        className: X.sectionSeparator
                    })]
                })
            }

            function ed(e) {
                let {
                    guildId: t
                } = e, l = (0, r.useStateFromStoresArray)([k.default], () => {
                    var e;
                    let t = k.default.getSettings();
                    return null !== (e = t.resourceChannels) && void 0 !== e ? e : []
                }), i = l.map(e => ({
                    ...e,
                    id: e.channelId
                })), {
                    handleDragStart: o,
                    handleDragReset: u,
                    handleDragComplete: c
                } = (0, T.default)(i, V.reorderResourceChannels), E = n.useCallback((e, s) => {
                    if (null == t) return;
                    let a = k.default.getSettings();
                    null != a && ((0, V.addResourceChannel)(e), (0, V.saveHomeSettings)(t, a).then(() => {
                        (0, V.updateResourceChannelIcon)(t, e.channelId, s)
                    }))
                }, [t]), _ = n.useCallback(() => {
                    if (null != t) return (0, d.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("398296").then(s.bind(s, "398296"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guildId: t,
                            onSave: V.addResourceChannel,
                            onIconUpload: E
                        })
                    })
                }, [t, E]);
                return (0, a.jsxs)("div", {
                    className: X.editResources,
                    children: [l.map((e, s) => (0, a.jsx)(ei, {
                        guildId: t,
                        resourceChannel: e,
                        index: s,
                        onDragStart: o,
                        onDragReset: u,
                        onDragComplete: c
                    }, e.channelId)), l.length < f.RESOURCE_CHANNEL_MAX && (0, a.jsxs)(d.Clickable, {
                        className: X.addActionItem,
                        onClick: _,
                        children: [(0, a.jsx)(P.default, {}), (0, a.jsx)(d.Text, {
                            variant: "text-md/normal",
                            color: "none",
                            children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_ADD_A_RESOURCE
                        })]
                    })]
                })
            }

            function eu(e) {
                let {
                    saveOnClose: t
                } = e, s = (0, r.default)([H.default], () => H.default.getGuildId());
                return null == s ? null : (0, a.jsx)(ec, {
                    guildId: s,
                    saveOnClose: t
                })
            }

            function ec(e) {
                let {
                    saveOnClose: t,
                    guildId: s
                } = e, l = (0, r.useStateFromStoresObject)([k.default], () => {
                    var e;
                    let t = k.default.getSettings();
                    return null !== (e = t.welcomeMessage) && void 0 !== e ? e : {
                        authorIds: [],
                        message: ""
                    }
                }), [i, u] = n.useState("new"), c = [{
                    value: "new",
                    name: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_NEW_MEMBER_EXAMPLE
                }, {
                    value: "existing",
                    name: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_EXISTING_MEMBER_EXAMPLE
                }], E = (0, r.default)([C.default], () => C.default.theme);
                return n.useEffect(() => () => {
                    if (null == s) return;
                    let e = k.default.getSettings();
                    (0, V.saveHomeSettings)(s, e)
                }, [t, s]), (0, a.jsxs)("div", {
                    className: X.page,
                    children: [(0, a.jsxs)("div", {
                        className: X.leftColumn,
                        children: [(0, a.jsx)(d.Heading, {
                            className: X.header,
                            variant: "heading-lg/extrabold",
                            children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_TITLE
                        }), (0, a.jsx)("div", {
                            className: X.descriptionSection,
                            children: (0, a.jsx)(d.Text, {
                                variant: "text-sm/medium",
                                color: "header-secondary",
                                children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_DESCRIPTION
                            })
                        }), (0, a.jsx)("div", {
                            className: X.section,
                            children: (0, a.jsx)($, {
                                guildId: s,
                                welcomeMessage: l
                            })
                        }), (0, a.jsx)("div", {
                            className: X.sectionSeparator
                        }), (0, a.jsx)(d.Heading, {
                            className: X.header,
                            variant: "heading-lg/extrabold",
                            children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_TITLE
                        }), (0, a.jsx)("div", {
                            className: X.descriptionSection,
                            children: (0, a.jsx)(d.Text, {
                                variant: "text-sm/medium",
                                color: "header-secondary",
                                children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_DESCRIPTION.format()
                            })
                        }), (0, a.jsx)("div", {
                            className: X.section,
                            children: (0, a.jsx)(en, {})
                        }), (0, a.jsx)(et, {
                            guildId: s
                        }), (0, a.jsx)("div", {
                            className: X.sectionSeparator
                        }), (0, a.jsx)(d.Heading, {
                            className: X.header,
                            variant: "heading-lg/extrabold",
                            children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCES_TITLE
                        }), (0, a.jsxs)("div", {
                            className: X.descriptionSection,
                            children: [(0, a.jsx)(d.Text, {
                                variant: "text-sm/medium",
                                color: "header-secondary",
                                children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCES_DESCRIPTION
                            }), (0, a.jsxs)("ul", {
                                className: X.bulletList,
                                children: [(0, a.jsx)("li", {
                                    children: (0, a.jsx)(d.Text, {
                                        tag: "span",
                                        variant: "text-sm/medium",
                                        color: "header-secondary",
                                        children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_1
                                    })
                                }), (0, a.jsx)("li", {
                                    children: (0, a.jsx)(d.Text, {
                                        tag: "span",
                                        variant: "text-sm/medium",
                                        color: "header-secondary",
                                        children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_2
                                    })
                                }), (0, a.jsx)("li", {
                                    children: (0, a.jsx)(d.Text, {
                                        tag: "span",
                                        variant: "text-sm/medium",
                                        color: "header-secondary",
                                        children: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_3
                                    })
                                })]
                            })]
                        }), (0, a.jsxs)("div", {
                            className: X.section,
                            children: [(0, a.jsx)(eo, {
                                guildId: s
                            }), (0, a.jsx)(ed, {
                                guildId: s
                            })]
                        }), (0, a.jsx)("div", {
                            className: X.sectionSeparator
                        }), (0, a.jsx)(el, {
                            guildId: s
                        })]
                    }), (0, a.jsxs)("div", {
                        className: X.rightColumn,
                        children: [(0, a.jsx)("div", {
                            className: X.centeredSection,
                            children: (0, a.jsx)(d.Text, {
                                variant: "text-sm/medium",
                                color: "header-secondary",
                                children: z.default.Messages.EXAMPLE
                            })
                        }), (0, a.jsx)("img", {
                            className: X.previewImage,
                            src: (0, o.isThemeLight)(E) ? "existing" === i ? J : q : "existing" === i ? Z : Q,
                            alt: z.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_GUIDE_EXAMPLE_ALT
                        }), (0, a.jsx)(d.SegmentedControl, {
                            options: c,
                            value: i,
                            onChange: e => {
                                let {
                                    value: t
                                } = e;
                                return u(String(t))
                            },
                            look: "pill"
                        })]
                    })]
                })
            }

            function eE() {
                let e = (0, r.default)([H.default], () => H.default.getGuild()),
                    t = (0, r.default)([k.default], () => k.default.getSettings()),
                    s = (0, r.default)([k.default], () => k.default.getSubmitting());
                return null == e ? null : (0, a.jsx)(u.default, {
                    onSave: () => {
                        try {
                            (0, V.saveHomeSettings)(e.id, t)
                        } catch {}
                    },
                    onReset: V.resetHomeSettings,
                    submitting: s,
                    onSaveText: z.default.Messages.SAVE
                })
            }
        },
        887313: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return h
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("997289"),
                r = s("716241"),
                o = s("863636"),
                d = s("129092"),
                u = s("233706"),
                c = s("305961"),
                E = s("423487"),
                _ = s("898260"),
                T = s("599110"),
                I = s("131835"),
                S = s("435076"),
                N = s("642807"),
                f = s("330724"),
                g = s("259483"),
                A = s("682327"),
                L = s("671932"),
                m = s("49111"),
                C = s("782340"),
                O = s("48887");

            function h(e) {
                let {
                    guildId: t,
                    completed: s
                } = e, {
                    homeSettingsEnabled: l
                } = (0, u.useOnboardingHomeAdminExperiment)(t), d = (0, n.useStateFromStores)([o.default], () => o.default.getEnabled(t)), {
                    location: c
                } = (0, i.useAnalyticsContext)();
                c.object = s ? m.AnalyticsObjects.ONBOARDING_EDIT : m.AnalyticsObjects.ONBOARDING_REVIEW;
                let E = async function() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    d ? (await (0, f.enableGuildOnboarding)(t, !1), T.default.track(m.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED, {
                        ...(0, r.collectGuildAnalyticsMetadata)(t),
                        action_taken: g.GuildSettingsCTAs[g.GuildSettingsCTAs.TOGGLE_DISABLED],
                        location: c
                    })) : (await (0, f.enableGuildOnboarding)(t, !0), e && (0, S.enableHomeSettings)(t, !0), s ? T.default.track(m.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED, {
                        ...(0, r.collectGuildAnalyticsMetadata)(t),
                        action_taken: g.GuildSettingsCTAs[g.GuildSettingsCTAs.TOGGLE_ENABLED],
                        location: c
                    }) : T.default.track(m.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_WIZARD_PROGRESS_CTA_CLICKED, {
                        ...(0, r.collectGuildAnalyticsMetadata)(t),
                        step: g.GuildSettingsOnboardingPage[g.GuildSettingsOnboardingPage.REVIEW],
                        back: !1,
                        skip: !1,
                        completed: !0
                    }))
                }, N = () => {
                    T.default.track(m.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED, {
                        ...(0, r.collectGuildAnalyticsMetadata)(t),
                        action_taken: g.GuildSettingsCTAs[g.GuildSettingsCTAs.PREVIEW],
                        location: c
                    }), (0, I.startPreview)(t)
                }, A = (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(L.DefaultChannelsOverviewItem, {
                        guildId: t,
                        onEdit: () => {
                            T.default.track(m.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED, {
                                ...(0, r.collectGuildAnalyticsMetadata)(t),
                                action_taken: g.GuildSettingsCTAs[g.GuildSettingsCTAs.EDIT_DEFAULT_CHANNELS],
                                location: c
                            }), (0, I.setOnboardingStep)(g.GuildSettingsOnboardingPage.DEFAULT_CHANNELS)
                        },
                        disableGoodStatus: s
                    }), (0, a.jsx)(_.default, {
                        className: O.divider
                    }), (0, a.jsx)(L.CustomizationQuestionsOverviewItem, {
                        guildId: t,
                        onEdit: () => {
                            T.default.track(m.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED, {
                                ...(0, r.collectGuildAnalyticsMetadata)(t),
                                action_taken: g.GuildSettingsCTAs[g.GuildSettingsCTAs.EDIT_CUSTOMIZATION_QUESTIONS],
                                location: c
                            }), (0, I.setOnboardingStep)(g.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS)
                        },
                        disableGoodStatus: s
                    }), l && (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(_.default, {
                            className: O.divider
                        }), (0, a.jsx)(L.HomeSettingsOverviewItem, {
                            guildId: t,
                            onEdit: () => {
                                T.default.track(m.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED, {
                                    ...(0, r.collectGuildAnalyticsMetadata)(t),
                                    action_taken: g.GuildSettingsCTAs[g.GuildSettingsCTAs.EDIT_HOME_SETTINGS],
                                    location: c
                                }), (0, I.setOnboardingStep)(g.GuildSettingsOnboardingPage.HOME_SETTINGS)
                            },
                            disableGoodStatus: s
                        })]
                    })]
                });
                return s ? (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(R, {
                        guildId: t,
                        handlePreview: N
                    }), (0, a.jsx)(D, {}), (0, a.jsxs)("div", {
                        className: O.content,
                        children: [(0, a.jsx)(M, {
                            guildId: t,
                            handleOnboardingToggle: E
                        }), A]
                    })]
                }) : (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: O.content,
                        children: [(0, a.jsx)(G, {
                            guildId: t,
                            handleOnboardingToggle: E,
                            handlePreview: N
                        }), A]
                    }), (0, a.jsx)(x, {
                        guildId: t
                    })]
                })
            }

            function R(e) {
                let {
                    guildId: t,
                    handlePreview: s
                } = e;
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(l.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        className: O.header,
                        children: C.default.Messages.GUILD_SETTINGS_ONBOARDING
                    }), (0, a.jsx)(l.Text, {
                        variant: "text-md/normal",
                        color: "header-secondary",
                        className: O.subheader,
                        children: C.default.Messages.GUILD_ONBOARDING_OVERVIEW_SUBTITLE
                    }), (0, a.jsxs)("div", {
                        className: O.help,
                        children: [(0, a.jsx)(l.Anchor, {
                            target: "_blank",
                            href: m.MarketingURLs.GUILD_ONBOARDING_EXAMPLES,
                            children: (0, a.jsx)(l.Text, {
                                variant: "text-sm/medium",
                                color: "text-link",
                                children: C.default.Messages.GUILD_ONBOARDING_OVERVIEW_SEE_EXAMPLES
                            })
                        }), (0, a.jsx)("div", {
                            className: O.helpSeparator
                        }), (0, a.jsx)(l.Anchor, {
                            onClick: s,
                            children: (0, a.jsx)(l.Text, {
                                variant: "text-sm/medium",
                                color: "text-link",
                                children: C.default.Messages.GUILD_ONBOARDING_SETUP_PREVIEW
                            })
                        }), (0, a.jsx)("div", {
                            className: O.helpSeparator
                        }), (0, a.jsx)(A.AdvancedModeToggle, {
                            guildId: t
                        })]
                    })]
                })
            }

            function D() {
                let e = "• ";
                return (0, a.jsxs)("div", {
                    className: O.notice,
                    children: [(0, a.jsx)("img", {
                        className: O.wumpus,
                        src: s("353773"),
                        alt: "wumpus"
                    }), (0, a.jsxs)("div", {
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-md/semibold",
                            color: "header-primary",
                            className: O.header,
                            children: C.default.Messages.GUILD_ONBOARDING_OVERVIEW_UPDATES_HEADER
                        }), (0, a.jsxs)(l.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: [e, C.default.Messages.GUILD_ONBOARDING_OVERVIEW_UPDATES_2]
                        }), (0, a.jsxs)(l.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: [e, C.default.Messages.GUILD_ONBOARDING_OVERVIEW_UPDATES_3]
                        })]
                    })]
                })
            }

            function M(e) {
                let {
                    guildId: t,
                    handleOnboardingToggle: s
                } = e, i = (0, L.useOnboardingCanBeEnabled)(t), r = (0, n.useStateFromStores)([o.default], () => o.default.getEnabled(t));
                return (0, a.jsxs)("div", {
                    className: O.review,
                    children: [(0, a.jsxs)("div", {
                        className: O.reviewHeaderText,
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-md/semibold",
                            children: r ? C.default.Messages.GUILD_ONBOARDING_OVERVIEW_TITLE_ENABLED : C.default.Messages.GUILD_ONBOARDING_OVERVIEW_TITLE_DISABLED
                        }), (0, a.jsx)(l.Text, {
                            variant: "text-xs/normal",
                            color: "text-muted",
                            children: r ? C.default.Messages.GUILD_ONBOARDING_OVERVIEW_SUBTITLE_ENABLED : C.default.Messages.GUILD_ONBOARDING_OVERVIEW_SUBTITLE_DISABLED
                        })]
                    }), (0, a.jsx)(l.Switch, {
                        checked: r,
                        onChange: () => s(!1),
                        disabled: !r && !i
                    })]
                })
            }

            function G(e) {
                let {
                    guildId: t,
                    handleOnboardingToggle: s,
                    handlePreview: i
                } = e, r = (0, L.useOnboardingCanBeEnabled)(t), o = (0, n.useStateFromStores)([N.default], () => N.default.getSettings()), u = (0, d.isSettingsValid)(o);
                return (0, a.jsxs)("div", {
                    className: O.reviewHeader,
                    children: [(0, a.jsxs)("div", {
                        className: O.reviewHeaderText,
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-md/semibold",
                            children: r ? C.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_TITLE : C.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_TITLE_INCOMPLETE
                        }), (0, a.jsx)(l.Text, {
                            variant: "text-xs/normal",
                            children: r ? C.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_DESCRIPTION : C.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_DESCRIPTION_INCOMPLETE
                        })]
                    }), (0, a.jsxs)("div", {
                        className: O.reviewActions,
                        children: [(0, a.jsx)(l.Button, {
                            size: l.Button.Sizes.SMALL,
                            color: l.Button.Colors.PRIMARY,
                            look: l.Button.Looks.OUTLINED,
                            onClick: i,
                            children: C.default.Messages.GUILD_ONBOARDING_SETUP_PREVIEW
                        }), (0, a.jsx)(l.Button, {
                            size: l.Button.Sizes.SMALL,
                            color: l.Button.Colors.BRAND,
                            onClick: () => s(u),
                            disabled: !r,
                            children: C.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_ENABLE_ONBOARDING
                        })]
                    })]
                })
            }

            function x(e) {
                let {
                    guildId: t
                } = e, s = (0, n.useStateFromStores)([c.default], () => c.default.getGuild(t));
                return null == s || s.verificationLevel < m.VerificationLevels.VERY_HIGH ? null : (0, a.jsxs)("div", {
                    className: O.rolesWarning,
                    children: [(0, a.jsx)(E.default, {
                        width: 16,
                        height: 16,
                        className: O.warningIcon
                    }), (0, a.jsx)(l.Text, {
                        variant: "text-sm/medium",
                        color: "text-muted",
                        children: C.default.Messages.GUILD_ONBOARDING_SETUP_PREVIEW_ROLES_WARNING
                    })]
                })
            }
        },
        648704: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return b
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("301165"),
                o = s("446674"),
                d = s("669491"),
                u = s("266491"),
                c = s("819855"),
                E = s("77078"),
                _ = s("841098"),
                T = s("206230"),
                I = s("716241"),
                S = s("137215"),
                N = s("965397"),
                f = s("599110"),
                g = s("659500"),
                A = s("900938"),
                L = s("851490"),
                m = s("131835"),
                C = s("435076"),
                O = s("642807"),
                h = s("330724"),
                R = s("136278"),
                D = s("397947"),
                M = s("259483"),
                G = s("867928"),
                x = s("545901"),
                p = s("706866"),
                U = s("764151"),
                v = s("832931"),
                j = s("49111"),
                P = s("782340"),
                y = s("505324");

            function b() {
                let e = (0, o.useStateFromStores)([A.default], () => A.default.getGuild());
                return null == e ? null : (0, a.jsx)(B, {
                    guild: e
                })
            }

            function B(e) {
                let {
                    guild: t
                } = e, l = t.id, A = (0, o.useStateFromStores)([D.default], () => D.default.getCurrentPage()), b = (0, G.default)(l), {
                    hasChanges: B,
                    hasConfiguredAnythingForCurrentStep: F,
                    hasErrors: H
                } = (0, o.useStateFromStoresObject)([D.default], () => ({
                    hasChanges: D.default.hasChanges(),
                    hasConfiguredAnythingForCurrentStep: D.default.hasConfiguredAnythingForCurrentStep(),
                    hasErrors: D.default.hasErrors()
                })), V = (0, o.useStateFromStores)([D.default], () => {
                    let e = (0, M.pageToEducationUpsellType)(A);
                    return null != e && !D.default.isEducationUpsellDismissed(e)
                }), k = (0, o.useStateFromStores)([T.default], () => T.default.useReducedMotion), w = (0, _.default)(), Y = n.useRef(null), [{
                    spring: K
                }, W] = (0, r.useSpring)(() => ({
                    spring: 0
                }));
                n.useEffect(() => {
                    function e() {
                        W({
                            spring: 1,
                            config: r.config.gentle
                        }), W({
                            spring: 0,
                            config: r.config.gentle,
                            delay: 1e3
                        })
                    }
                    return g.ComponentDispatch.subscribe(j.ComponentActions.EMPHASIZE_NOTICE, e), () => {
                        g.ComponentDispatch.unsubscribe(j.ComponentActions.EMPHASIZE_NOTICE, e)
                    }
                }, [W]);
                let z = (0, E.useToken)(d.default.colors.BACKGROUND_FLOATING).hex(),
                    X = (0, E.useToken)(d.default.unsafe_rawColors.PRIMARY_160).hex(),
                    Z = (0, c.isThemeDark)(w) ? z : X,
                    J = K.to({
                        range: [0, 1],
                        output: [(0, E.useToken)(d.default.unsafe_rawColors.WHITE_500).hex(), (0, E.useToken)(d.default.colors.TEXT_NORMAL).hex()]
                    }),
                    Q = K.to({
                        range: [0, 1],
                        output: [Z, (0, E.useToken)(d.default.colors.STATUS_DANGER).hex()]
                    });
                if (b) {
                    if (A === M.GuildSettingsOnboardingPage.DEFAULT_CHANNELS) return (0, a.jsx)(p.GuildSettingsDefaultChannelsNotice, {});
                    if (A === M.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS) return (0, a.jsx)(v.GuildSettingsOnboardingPromptsNotice, {});
                    else if (A === M.GuildSettingsOnboardingPage.HOME_SETTINGS) return (0, a.jsx)(U.GuildSettingsHomeSettingsNotice, {})
                }
                let q = A === M.ONBOARDING_STEPS[M.ONBOARDING_STEPS.length - 1],
                    $ = async () => {
                        let e = R.default.advancedMode;
                        if (B) try {
                            if (A === M.GuildSettingsOnboardingPage.DEFAULT_CHANNELS) await (0, L.saveDefaultChannels)(t).then(() => e ? (0, h.saveGuildOnboardingPrompts)(t, {
                                ignoreDefaultPrompt: !0
                            }) : Promise.resolve());
                            else if (A === M.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS) await (0, h.saveGuildOnboardingPrompts)(t, {
                                ignoreDefaultPrompt: !0
                            });
                            else if (A === M.GuildSettingsOnboardingPage.HOME_SETTINGS) {
                                let e = O.default.getSettings();
                                await (0, C.saveHomeSettings)(t.id, e)
                            }
                        } catch {
                            return !1
                        }
                        return !0
                    }, ee = async () => {
                        f.default.track(j.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_WIZARD_PROGRESS_CTA_CLICKED, {
                            ...(0, I.collectGuildAnalyticsMetadata)(l),
                            step: M.GuildSettingsOnboardingPage[A],
                            back: !1,
                            skip: !B
                        }), (0, m.dismissEducationUpsell)((0, M.pageToEducationUpsellType)(A)), await $() && (0, m.goToNextOnboardingStep)(l, A)
                    }, et = async () => {
                        f.default.track(j.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_WIZARD_PROGRESS_CTA_CLICKED, {
                            ...(0, I.collectGuildAnalyticsMetadata)(l),
                            step: M.GuildSettingsOnboardingPage[A],
                            back: !0,
                            skip: !1
                        }), await $() && (0, m.goToPrevOnboardingStep)(l, A)
                    }, es = null;
                V && (A === M.GuildSettingsOnboardingPage.SAFETY_CHECK ? es = (0, a.jsx)(x.SafetyCheckUpsell, {}) : A === M.GuildSettingsOnboardingPage.DEFAULT_CHANNELS ? es = (0, a.jsx)(x.DefaultChannelsUpsell, {}) : A === M.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS ? es = (0, a.jsx)(x.CustomizationQuestionsUpsell, {}) : A === M.GuildSettingsOnboardingPage.HOME_SETTINGS && (es = (0, a.jsx)(x.HomeSettingsUpsell, {})));
                let ea = (0, a.jsx)(E.Button, {
                        className: i(y.button, {
                            [y.hidden]: V
                        }),
                        color: E.Button.Colors.PRIMARY,
                        look: E.Button.Looks.OUTLINED,
                        size: E.Button.Sizes.SMALL,
                        onClick: et,
                        disabled: V || H,
                        children: (0, a.jsxs)("span", {
                            className: y.button,
                            children: [(0, a.jsx)(S.default, {
                                className: y.arrow,
                                direction: S.default.Directions.LEFT
                            }), P.default.Messages.BACK]
                        })
                    }),
                    en = (0, a.jsx)(E.Button, {
                        className: y.button,
                        color: F ? E.Button.Colors.BRAND : E.Button.Colors.PRIMARY,
                        look: E.Button.Looks.FILLED,
                        size: E.Button.Sizes.SMALL,
                        onClick: ee,
                        disabled: V || H,
                        children: (0, a.jsxs)(r.animated.span, {
                            className: y.button,
                            style: {
                                color: J
                            },
                            children: [F ? P.default.Messages.NEXT : P.default.Messages.SKIP, (0, a.jsx)(S.default, {
                                className: y.arrow,
                                direction: S.default.Directions.RIGHT
                            })]
                        })
                    });
                return (0, a.jsx)(u.default, {
                    component: "div",
                    children: (0, a.jsx)(N.default, {
                        className: i(y.noticeRegion),
                        children: (0, a.jsx)(r.animated.div, {
                            className: y.container,
                            style: {
                                backgroundColor: Q
                            },
                            children: (0, a.jsxs)("div", {
                                className: y.flexContainer,
                                ref: Y,
                                children: [V ? (0, a.jsxs)("div", {
                                    className: y.educationUpsellRoot,
                                    children: [(0, a.jsx)("img", {
                                        className: i(y.wumpus, {
                                            [y.animated]: !k
                                        }),
                                        src: s("353773"),
                                        alt: "wumpus"
                                    }), (0, a.jsxs)("div", {
                                        className: y.educationUpsell,
                                        children: [es, (0, a.jsx)("div", {
                                            className: y.educationUpsellArrow
                                        })]
                                    })]
                                }) : null, (0, a.jsx)(E.FocusRingScope, {
                                    containerRef: Y,
                                    children: (0, a.jsxs)("div", {
                                        className: y.actions,
                                        children: [ea, (0, a.jsxs)("div", {
                                            className: y.next,
                                            children: [H ? (0, a.jsx)(E.Text, {
                                                variant: "text-sm/normal",
                                                color: "status-warning",
                                                children: P.default.Messages.ONBOARDING_PROMPTS_INCOMPLETE
                                            }) : null, q ? null : en]
                                        })]
                                    })
                                })]
                            })
                        })
                    })
                })
            }
        },
        832931: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return R
                },
                GuildSettingsOnboardingPromptsNotice: function() {
                    return M
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("45299"),
                o = s("419830"),
                d = s("863636"),
                u = s("380710"),
                c = s("593195"),
                E = s("256170"),
                _ = s("423487"),
                T = s("900938"),
                I = s("653274"),
                S = s("131835"),
                N = s("330724"),
                f = s("136278"),
                g = s("682327"),
                A = s("457461"),
                L = s("49111"),
                m = s("653138"),
                C = s("782340"),
                O = s("108852");

            function h(e) {
                let {
                    guildId: t,
                    prompts: s
                } = e, r = (0, l.useStateFromStores)([I.default], () => I.default.editedDefaultChannelIds), [d, T] = (0, u.useChannelCoverageForOnboarding)(t, s, [...r]), S = d.length, N = d.length + T.length, f = S / N * 100, g = Math.max(Math.ceil(85 * N / 100) - S, 0), [A, L] = n.useState(!1);
                return (0, a.jsxs)("div", {
                    className: O.channelCoverage,
                    children: [(0, a.jsxs)(i.Clickable, {
                        className: O.coverageHeader,
                        onClick: () => L(!A),
                        children: [(0, a.jsxs)("div", {
                            className: O.warningTextContainer,
                            children: [f <= 85 && (0, a.jsx)(_.default, {
                                width: 16,
                                height: 16,
                                className: O.warning
                            }), (0, a.jsx)(i.Text, {
                                className: O.coverageTitle,
                                variant: "text-xs/medium",
                                color: "text-muted",
                                children: C.default.Messages.ONBOARDING_PROMPT_CHANNEL_COVERAGE_MISSING_CHANNELS.format({
                                    numChannelsMissing: N - S
                                })
                            })]
                        }), (0, a.jsxs)("div", {
                            className: O.progressContainer,
                            children: [(0, a.jsx)(i.Progress, {
                                className: O.coverageProgress,
                                foregroundColor: f > 85 ? "var(--status-positive)" : "var(--status-warning)",
                                percent: f
                            }), (0, a.jsx)(E.default, {
                                className: O.caret,
                                open: A
                            })]
                        })]
                    }), A ? (0, a.jsxs)("div", {
                        className: O.channelCoverageDetails,
                        children: [(0, a.jsx)(i.Text, {
                            variant: "text-xs/semibold",
                            color: "text-muted",
                            children: C.default.Messages.ONBOARDING_PROMPT_CHANNEL_COVERAGE_CHANNELS
                        }), (0, a.jsx)("div", {
                            className: O.channels,
                            children: T.map(e => {
                                var t;
                                let s = null !== (t = (0, o.getChannelIconComponent)(e)) && void 0 !== t ? t : c.default;
                                return (0, a.jsx)("div", {
                                    className: O.channelPill,
                                    children: (0, a.jsxs)(i.Text, {
                                        className: O.channel,
                                        variant: "text-xs/normal",
                                        color: "interactive-active",
                                        children: [(0, a.jsx)(s, {
                                            width: 12,
                                            height: 12
                                        }), e.name]
                                    })
                                }, e.id)
                            })
                        }), (0, a.jsx)("div", {
                            className: O.channelCoverageHint,
                            children: g > 0 ? (0, a.jsxs)(a.Fragment, {
                                children: [(0, a.jsx)(_.default, {
                                    width: 16,
                                    height: 16
                                }), (0, a.jsx)(i.Text, {
                                    variant: "text-xs/normal",
                                    color: "text-muted",
                                    children: C.default.Messages.ONBOARDING_PROMPT_CHANNEL_COVERAGE_ADD_HELP.format({
                                        numChannels: g
                                    })
                                })]
                            }) : (0, a.jsx)(i.Text, {
                                variant: "text-xs/normal",
                                color: "text-muted",
                                children: C.default.Messages.GUILD_NO_CHANNELS_HEADER
                            })
                        })]
                    }) : null]
                })
            }

            function R(e) {
                let {
                    saveOnClose: t
                } = e, s = (0, l.useStateFromStores)([T.default], () => T.default.getGuild());
                return null == s ? null : (0, a.jsx)(D, {
                    guild: s,
                    saveOnClose: t
                })
            }

            function D(e) {
                let {
                    guild: t,
                    saveOnClose: s
                } = e, r = (0, l.useStateFromStores)([d.default], () => d.default.isLoading()), o = (0, l.useStateFromStores)([f.default], () => f.default.editedOnboardingPrompts), u = (0, l.useStateFromStores)([f.default], () => f.default.advancedMode), c = n.useRef(!1);
                if (n.useEffect(() => {
                        !r && !c.current && 0 === o.length && (c.current = !0, !u && (0, N.editGuildOnboardingPrompts)(t, [(0, m.getDefaultPrompt)()], !1))
                    }), n.useEffect(() => {
                        if (s) return () => {
                            (0, N.saveGuildOnboardingPrompts)(t, {
                                ignoreDefaultPrompt: !0
                            }).catch(() => {})
                        }
                    }, [s]), null == t) return null;
                let E = async () => {
                    try {
                        await (0, N.saveGuildOnboardingPrompts)(t), await (0, S.startPreview)(t.id)
                    } catch {}
                };
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(i.Heading, {
                        className: O.header,
                        variant: "heading-lg/extrabold",
                        children: u ? C.default.Messages.ONBOARDING_PROMPT_SETTINGS_HEADER_ADVANCED : C.default.Messages.ONBOARDING_PROMPT_SETTINGS_HEADER
                    }), (0, a.jsx)(i.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        children: C.default.Messages.ONBOARDING_PROMPT_SETTINGS_SUBHEADER
                    }), (0, a.jsxs)("div", {
                        className: O.links,
                        children: [(0, a.jsx)(i.Anchor, {
                            target: "_blank",
                            href: L.MarketingURLs.GUILD_ONBOARDING_EXAMPLES,
                            children: (0, a.jsx)(i.Text, {
                                variant: "text-sm/medium",
                                color: "text-link",
                                children: C.default.Messages.GUILD_ONBOARDING_OVERVIEW_SEE_EXAMPLES
                            })
                        }), (0, a.jsx)("div", {
                            className: O.dot
                        }), (0, a.jsx)(i.Anchor, {
                            onClick: E,
                            children: (0, a.jsx)(i.Text, {
                                variant: "text-sm/medium",
                                color: "text-link",
                                children: C.default.Messages.GUILD_ONBOARDING_SETUP_PREVIEW
                            })
                        }), (0, a.jsx)("div", {
                            className: O.dot
                        }), (0, a.jsx)(g.AdvancedModeToggle, {
                            guildId: t.id
                        })]
                    }), (0, a.jsx)(h, {
                        guildId: t.id,
                        prompts: o
                    }), (0, a.jsx)("div", {
                        className: O.prompts,
                        children: r ? (0, a.jsx)(i.Spinner, {}) : (0, a.jsx)(A.default, {
                            postjoinOnly: u,
                            guildId: t.id
                        })
                    })]
                })
            }

            function M() {
                let e = (0, l.useStateFromStores)([T.default], () => T.default.getGuild()),
                    t = (0, l.useStateFromStores)([f.default], () => f.default.submitting);
                return null == e ? null : (0, a.jsx)(r.default, {
                    onSave: () => {
                        try {
                            (0, N.saveGuildOnboardingPrompts)(e)
                        } catch {}
                    },
                    onReset: N.resetGuildOnboardingPrompts,
                    submitting: t,
                    onSaveText: C.default.Messages.SAVE
                })
            }
        },
        253308: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return h
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("69678"),
                u = s("372283"),
                c = s("380710"),
                E = s("837648"),
                _ = s("461380"),
                T = s("673220"),
                I = s("228220"),
                S = s("449008"),
                N = s("653274"),
                f = s("330724"),
                g = s("136278"),
                A = s("594523"),
                L = s("653138"),
                m = s("782340"),
                C = s("963245");
            let O = {
                optionErrors: []
            };

            function h(e) {
                var t;
                let {
                    guild: s,
                    prompt: l,
                    disableAutofocus: u,
                    promptIndex: A,
                    dragIndex: h,
                    includeCount: M,
                    singleColumn: G,
                    onPromptDragComplete: x,
                    onPromptDragStart: p,
                    onPromptDragReset: U
                } = e, {
                    dropdownsAllowed: v
                } = (0, E.useOnboardingDropdownExperiment)(s.id), j = (0, r.useStateFromStores)([N.default], () => N.default.editedDefaultChannelIds), P = v ? L.DROPDOWN_MAX_NUM_OPTIONS : L.MULTIPLE_CHOICE_MAX_NUM_OPTIONS, {
                    drag: y,
                    dragSourcePosition: b,
                    drop: B,
                    setIsDraggable: F
                } = (0, d.default)({
                    type: "ONBOARDING_PROMPT_CARD",
                    index: h,
                    optionId: l.id,
                    onDragStart: p,
                    onDragComplete: x,
                    onDragReset: U
                }), H = (0, r.useStateFromStoresObject)([g.default], () => {
                    var e;
                    return null !== (e = g.default.errors[A]) && void 0 !== e ? e : O
                }), [V, k] = n.useState(!1), [w, Y] = n.useState(!1), K = null !== (t = H.options) && void 0 !== t ? t : H.optionErrors.filter(S.isNotNullish)[0], W = H.config, z = v && l.options.length >= L.ONBOARDING_PROMPT_TYPE_SWITCH_THRESHOLD, X = (0, c.getMinimumSetOfDefaultChannelIds)(s.id, Array.from(j), [l]).length - j.size, Z = n.useRef(null);
                return (n.useLayoutEffect(() => {
                    setTimeout(() => {
                        if (0 === A && !u) {
                            var e;
                            null === (e = Z.current) || void 0 === e || e.focus()
                        }
                    }, 0)
                }, [u]), V) ? (0, a.jsx)(o.FocusRing, {
                    children: (0, a.jsxs)("div", {
                        tabIndex: 0,
                        onFocus: () => Y(!0),
                        onBlur: () => Y(!1),
                        onMouseLeave: () => Y(!1),
                        className: i(C.container, {
                            [C.dropIndicatorBefore]: null != b && A < b,
                            [C.dropIndicatorAfter]: null != b && A > b,
                            [C.containerFocused]: w
                        }),
                        ref: e => y(B(e)),
                        children: [(0, a.jsx)("div", {
                            className: C.dragContainer,
                            onMouseEnter: () => F(!0),
                            onMouseLeave: () => F(!1),
                            children: (0, a.jsx)(T.default, {
                                className: C.dragIcon
                            })
                        }), (0, a.jsx)(o.Text, {
                            className: C.questionNumber,
                            variant: "text-xs/semibold",
                            color: "text-muted",
                            children: m.default.Messages.ONBOARDING_PROMPT_OPTION_QUESTION_NUMBER.format({
                                index: A + 1
                            })
                        }), (0, a.jsx)(o.Text, {
                            variant: "text-lg/semibold",
                            color: "text-normal",
                            children: l.title
                        }), (0, a.jsx)(o.Clickable, {
                            className: C.collapseButton,
                            onClick: () => k(!1),
                            children: (0, a.jsx)(_.default, {
                                direction: _.default.Directions.DOWN,
                                height: 16,
                                width: 16
                            })
                        }), (0, a.jsx)(o.TooltipContainer, {
                            text: m.default.Messages.ONBOARDING_PROMPT_DELETE,
                            className: C.removeButton,
                            children: (0, a.jsx)(o.Clickable, {
                                className: C.closeIcon,
                                onClick: () => (0, f.deleteGuildOnboardingPrompt)(s, l.id),
                                children: (0, a.jsx)(I.default, {
                                    height: 16,
                                    width: 16
                                })
                            })
                        })]
                    })
                }) : (0, a.jsx)(o.FocusRing, {
                    children: (0, a.jsxs)("div", {
                        tabIndex: 0,
                        onFocus: () => Y(!0),
                        onBlur: () => Y(!1),
                        className: i(C.container, {
                            [C.dropIndicatorBefore]: null != b && A < b,
                            [C.dropIndicatorAfter]: null != b && A > b,
                            [C.containerFocused]: w
                        }),
                        ref: e => y(B(e)),
                        children: [(0, a.jsx)("div", {
                            className: C.dragContainer,
                            onMouseEnter: () => F(!0),
                            onMouseLeave: () => F(!1),
                            children: (0, a.jsx)(T.default, {
                                className: C.dragIcon
                            })
                        }), (0, a.jsx)(o.Text, {
                            className: C.questionNumber,
                            variant: "text-xs/semibold",
                            color: "text-muted",
                            children: m.default.Messages.ONBOARDING_PROMPT_OPTION_QUESTION_NUMBER.format({
                                index: A + 1
                            })
                        }), (0, a.jsx)(o.TextInput, {
                            className: C.title,
                            inputClassName: C.titleInput,
                            inputRef: Z,
                            value: l.title,
                            onChange: e => (0, f.editGuildOnboardingPrompt)(s, l.id, {
                                title: e
                            }),
                            placeholder: m.default.Messages.ONBOARDING_PROMPT_TITLE_PLACEHOLDER,
                            maxLength: L.MAX_PROMPT_TITLE_LENGTH,
                            error: H.title
                        }), (0, a.jsx)(R, {
                            prompt: l,
                            guild: s
                        }), (0, a.jsx)(o.Text, {
                            className: C.optionsHeader,
                            variant: "text-xs/semibold",
                            color: "text-muted",
                            children: z ? m.default.Messages.ONBOARDING_PROMPT_DROPDOWN_OPTIONS_HEADER.format({
                                count: l.options.length,
                                total: P
                            }) : m.default.Messages.ONBOARDING_PROMPT_OPTIONS_HEADER.format({
                                count: l.options.length,
                                total: P
                            })
                        }), (0, a.jsx)(D, {
                            guild: s,
                            prompt: l,
                            promptIndex: A,
                            errors: H,
                            singleColumn: G
                        }), null != K ? (0, a.jsx)(o.InputError, {
                            error: K
                        }) : null, (0, a.jsxs)("div", {
                            className: C.buttons,
                            children: [(0, a.jsxs)("div", {
                                className: C.checkboxes,
                                children: [(0, a.jsx)(o.Checkbox, {
                                    size: 20,
                                    type: o.Checkbox.Types.INVERTED,
                                    value: !l.singleSelect,
                                    onChange: (e, t) => (0, f.editGuildOnboardingPrompt)(s, l.id, {
                                        singleSelect: !t
                                    }),
                                    children: (0, a.jsx)(o.Text, {
                                        variant: "text-sm/normal",
                                        color: "interactive-normal",
                                        children: m.default.Messages.ONBOARDING_PROMPT_ALLOW_MULTIPLE_LABEL
                                    })
                                }), l.inOnboarding ? (0, a.jsx)(o.Checkbox, {
                                    size: 20,
                                    type: o.Checkbox.Types.INVERTED,
                                    value: l.inOnboarding && l.required,
                                    onChange: (e, t) => (0, f.editGuildOnboardingPrompt)(s, l.id, {
                                        required: t
                                    }),
                                    disabled: !l.inOnboarding,
                                    children: (0, a.jsx)(o.Text, {
                                        variant: "text-sm/normal",
                                        color: "interactive-normal",
                                        children: M ? m.default.Messages.ONBOARDING_PROMPT_REQUIRED_LABEL_WITH_COUNT.format({
                                            count: X
                                        }) : m.default.Messages.ONBOARDING_PROMPT_REQUIRED_LABEL
                                    })
                                }) : null]
                            }), (0, a.jsx)(o.Clickable, {
                                className: C.collapseButton,
                                onClick: () => k(!0),
                                children: (0, a.jsx)(_.default, {
                                    direction: _.default.Directions.UP,
                                    height: 16,
                                    width: 16
                                })
                            }), (0, a.jsx)(o.TooltipContainer, {
                                text: m.default.Messages.ONBOARDING_PROMPT_DELETE,
                                className: C.removeButton,
                                children: (0, a.jsx)(o.Clickable, {
                                    className: C.closeIcon,
                                    onClick: () => (0, f.deleteGuildOnboardingPrompt)(s, l.id),
                                    children: (0, a.jsx)(I.default, {
                                        height: 16,
                                        width: 16
                                    })
                                })
                            })]
                        }), null != W ? (0, a.jsx)(o.InputError, {
                            error: W
                        }) : null]
                    })
                })
            }

            function R(e) {
                let {
                    prompt: t,
                    guild: s
                } = e, [l, i] = n.useState(!1);
                if (n.useEffect(() => {
                        !l && t.title.length > 0 && i(!0)
                    }, [l, t]), l) return null;

                function r(e) {
                    return (0, a.jsx)(o.Clickable, {
                        className: C.example,
                        onClick: () => (0, f.editGuildOnboardingPrompt)(s, t.id, {
                            title: e
                        }),
                        children: (0, a.jsx)(o.Text, {
                            variant: "text-xs/normal",
                            children: e
                        })
                    })
                }
                return (0, a.jsxs)("div", {
                    className: C.examplesSection,
                    children: [(0, a.jsx)(o.Text, {
                        variant: "text-xs/normal",
                        color: "text-muted",
                        children: m.default.Messages.ONBOARDING_PROMPT_EXAMPLES_HEADER
                    }), (0, a.jsxs)("div", {
                        className: C.examples,
                        children: [r(m.default.Messages.ONBOARDING_PROMPT_EXAMPLES_1), r(m.default.Messages.ONBOARDING_PROMPT_EXAMPLES_2), r(m.default.Messages.ONBOARDING_PROMPT_EXAMPLES_3), r(m.default.Messages.ONBOARDING_PROMPT_EXAMPLES_4)]
                    })]
                })
            }

            function D(e) {
                let {
                    guild: t,
                    prompt: s,
                    promptIndex: n,
                    singleColumn: l,
                    errors: i
                } = e, {
                    dropdownsAllowed: r
                } = (0, E.useOnboardingDropdownExperiment)(t.id), o = r ? L.DROPDOWN_MAX_NUM_OPTIONS : L.MULTIPLE_CHOICE_MAX_NUM_OPTIONS, {
                    handleDragStart: d,
                    handleDragReset: c,
                    handleDragComplete: _
                } = (0, u.default)(s.options, e => (0, f.editGuildOnboardingPrompt)(t, s.id, {
                    options: e
                }));
                return (0, a.jsxs)("div", {
                    className: C.options,
                    children: [s.options.map((e, r) => (0, a.jsx)(A.default, {
                        guild: t,
                        prompt: s,
                        promptIndex: n,
                        singleColumn: l,
                        option: e,
                        onDragStart: d,
                        onDragComplete: _,
                        onDragReset: c,
                        hasError: null != i.optionErrors[r]
                    }, e.id)), s.options.length < o ? (0, a.jsx)(A.AddOptionCard, {
                        guild: t,
                        prompt: s,
                        promptIndex: n,
                        singleColumn: l
                    }) : null]
                })
            }
        },
        594523: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return A
                },
                AddOptionCard: function() {
                    return L
                }
            }), s("222007");
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("917351"),
                r = s.n(i),
                o = s("77078"),
                d = s("404118"),
                u = s("69678"),
                c = s("837648"),
                E = s("569912"),
                _ = s("205454"),
                T = s("673220"),
                I = s("351825"),
                S = s("330724"),
                N = s("653138"),
                f = s("782340"),
                g = s("504540");

            function A(e) {
                var t, n, i, d;
                let {
                    guild: c,
                    prompt: I,
                    singleColumn: A,
                    promptIndex: L,
                    option: m,
                    hasError: C,
                    onDragStart: O,
                    onDragComplete: h,
                    onDragReset: R
                } = e, D = null, M = r.findIndex(I.options, e => e.id === m.id), {
                    drag: G,
                    dragSourcePosition: x,
                    drop: p,
                    setIsDraggable: U
                } = (0, u.default)({
                    type: "ONBOARDING_PROMPT_OPTION_CARD-".concat(I.id),
                    index: M,
                    optionId: m.id,
                    onDragStart: O,
                    onDragComplete: h,
                    onDragReset: R
                }), {
                    customEmoji: v,
                    unicodeEmoji: j
                } = (0, E.default)(null === (t = m.emoji) || void 0 === t ? void 0 : t.id, null === (n = m.emoji) || void 0 === n ? void 0 : n.name), P = (0, N.isEmojiEmpty)(m.emoji) || null != v || null != j;
                return !P && (D = f.default.Messages.GUILD_SETTINGS_ONBOARDING_PROMPT_INVALID_EMOJI), (0, a.jsxs)(o.Clickable, {
                    className: l(g.optionCard, {
                        [g.hasError]: C || null != D,
                        [g.dropIndicatorBefore]: null != x && M < x,
                        [g.dropIndicatorAfter]: null != x && M > x,
                        [g.singleColumn]: A
                    }),
                    onClick: () => (0, o.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("679844").then(s.bind(s, "679844"));
                        return t => (0, a.jsx)(e, {
                            ...t,
                            guild: c,
                            prompt: I,
                            option: m,
                            index: L,
                            onSave: e => {
                                (0, S.editGuildOnboardingPrompt)(c, I.id, {
                                    options: I.options.map(t => t.id === m.id ? e : t)
                                })
                            },
                            onDelete: () => {
                                (0, S.editGuildOnboardingPrompt)(c, I.id, {
                                    options: I.options.filter(e => e.id !== m.id)
                                })
                            }
                        })
                    }),
                    onMouseEnter: () => U(!0),
                    onMouseLeave: () => U(!1),
                    innerRef: e => G(p(e)),
                    children: [(0, a.jsx)("div", {
                        className: g.dragContainer,
                        children: (0, a.jsx)(T.default, {
                            className: g.dragIcon
                        })
                    }), (0, a.jsxs)("div", {
                        className: g.optionCardRow,
                        children: [(0, a.jsx)("div", {
                            className: g.emoji,
                            children: (0, a.jsx)(_.default, {
                                emojiId: null === (i = m.emoji) || void 0 === i ? void 0 : i.id,
                                emojiName: null === (d = m.emoji) || void 0 === d ? void 0 : d.name,
                                defaultComponent: null
                            })
                        }), (0, a.jsxs)("div", {
                            className: g.text,
                            children: [(0, a.jsx)(o.Text, {
                                variant: "text-md/medium",
                                color: "header-primary",
                                lineClamp: 1,
                                children: m.title
                            }), "" !== m.description && (0, a.jsx)(o.Text, {
                                className: g.description,
                                variant: "text-xs/normal",
                                color: "header-secondary",
                                children: m.description
                            })]
                        })]
                    }), null != D && (0, a.jsx)(o.Text, {
                        variant: "text-xs/medium",
                        color: "text-danger",
                        children: D
                    })]
                })
            }

            function L(e) {
                let {
                    guild: t,
                    prompt: n,
                    promptIndex: i,
                    singleColumn: r
                } = e, {
                    dropdownsAllowed: u
                } = (0, c.useOnboardingDropdownExperiment)(t.id), E = () => {
                    (0, o.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("679844").then(s.bind(s, "679844"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guild: t,
                            prompt: n,
                            onSave: e => (0, S.editGuildOnboardingPrompt)(t, n.id, {
                                options: [...n.options, e]
                            }),
                            onDelete: () => {},
                            index: i
                        })
                    })
                };
                return (0, a.jsx)(o.Clickable, {
                    className: l(g.optionCard, g.addOptionCard, {
                        [g.addFirstOptionCard]: 0 === n.options.length,
                        [g.singleColumn]: r
                    }),
                    onClick: () => {
                        u && n.options.length + 1 === N.ONBOARDING_PROMPT_TYPE_SWITCH_THRESHOLD ? d.default.show({
                            title: f.default.Messages.ONBOARDING_PROMPT_THRESHOLD_ALERT_TITLE,
                            body: f.default.Messages.ONBOARDING_PROMPT_THRESHOLD_ALERT_DESCRIPTION.format({
                                thresholdCount: N.ONBOARDING_PROMPT_TYPE_SWITCH_THRESHOLD
                            }),
                            confirmText: f.default.Messages.OKAY,
                            cancelText: f.default.Messages.CANCEL,
                            onConfirm: E
                        }) : E()
                    },
                    children: (0, a.jsxs)("div", {
                        className: g.optionCardRow,
                        children: [(0, a.jsx)(I.default, {
                            className: g.plusIcon,
                            width: 24,
                            height: 24
                        }), (0, a.jsx)(o.Text, {
                            variant: "text-md/medium",
                            color: "header-primary",
                            children: f.default.Messages.ONBOARDING_PROMPT_ADD_OPTION
                        })]
                    })
                })
            }
        },
        457461: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return L
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("65597"),
                o = s("77078"),
                d = s("404118"),
                u = s("69678"),
                c = s("372283"),
                E = s("305961"),
                _ = s("351825"),
                T = s("330724"),
                I = s("136278"),
                S = s("253308"),
                N = s("653138"),
                f = s("782340"),
                g = s("108852");

            function A(e) {
                let {
                    guild: t,
                    prejoinOnly: s,
                    postjoinOnly: l
                } = e, d = (0, r.default)([I.default], () => I.default.editedOnboardingPrompts), c = d.filter(e => e.inOnboarding), E = c.length, {
                    drag: S,
                    drop: A,
                    dragSourcePosition: L,
                    setIsDraggable: m
                } = (0, u.default)({
                    type: "ONBOARDING_PROMPT_CARD",
                    index: E,
                    optionId: "separator",
                    onDragStart: () => {},
                    onDragComplete: () => {},
                    onDragReset: () => {}
                }), C = n.useRef(null);
                return n.useEffect(() => {
                    m(!1)
                }, [m]), n.useEffect(() => {
                    S(A(C))
                }, [S, A, C]), (0, a.jsxs)("div", {
                    ref: C,
                    className: i(g.separatorSection, {
                        [g.dropIndicatorBefore]: null != L && E < L,
                        [g.dropIndicatorAfter]: null != L && E > L
                    }),
                    children: [!l && c.length < N.MAX_NUMBER_OF_ONBOARDING_PROMPTS_IN_ONBOARDING ? (0, a.jsxs)(o.Clickable, {
                        className: g.addPrompt,
                        onClick: () => (0, T.editGuildOnboardingPrompts)(t, [...d, (0, N.getEmptyPrompt)(!0)], !1),
                        children: [(0, a.jsx)(_.default, {
                            className: g.plusIcon,
                            width: 20,
                            height: 20
                        }), (0, a.jsx)(o.Text, {
                            variant: "text-md/medium",
                            color: "text-brand",
                            children: f.default.Messages.ONBOARDING_PROMPT_ADD_PROMPT
                        })]
                    }) : null, s ? null : (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)("div", {
                            className: g.divider
                        }), (0, a.jsx)(o.Heading, {
                            variant: "heading-md/bold",
                            children: f.default.Messages.ONBOARDING_QUESTIONS_POST_JOIN_HEADER
                        }), (0, a.jsx)(o.Text, {
                            variant: "text-sm/normal",
                            color: "header-secondary",
                            className: g.subtitle,
                            children: f.default.Messages.ONBOARDING_QUESTIONS_POST_JOIN_SUBHEADER
                        })]
                    })]
                })
            }

            function L(e) {
                let {
                    guildId: t,
                    prejoinOnly: s,
                    postjoinOnly: n,
                    includeCount: l,
                    singleColumn: i
                } = e, u = (0, r.default)([E.default], () => E.default.getGuild(t)), L = (0, r.default)([I.default], () => I.default.editedOnboardingPrompts), m = L.filter(e => e.inOnboarding), C = L.filter(e => !0 !== e.inOnboarding), O = [...m.map(e => ({
                    id: e.id,
                    data: e
                })), {
                    id: "separator",
                    data: (0, N.getDefaultPrompt)()
                }, ...C.map(e => ({
                    id: e.id,
                    data: e
                }))], {
                    handleDragStart: h,
                    handleDragReset: R,
                    handleDragComplete: D
                } = (0, c.default)(O, e => {
                    let t = e.findIndex(e => "separator" === e.id),
                        s = e.slice(0, t).map(e => ({
                            ...e.data,
                            inOnboarding: !0
                        })),
                        a = e.slice(t + 1).map(e => ({
                            ...e.data,
                            inOnboarding: !1,
                            required: !1
                        }));
                    if (s.length > N.MAX_NUMBER_OF_ONBOARDING_PROMPTS_IN_ONBOARDING) {
                        d.default.show({
                            title: f.default.Messages.ONBOARDING_QUESTIONS_CANNOT_MOVE,
                            body: f.default.Messages.ONBOARDING_QUESTIONS_SAVE_TOO_MANY_PROMPTS_IN_ONBOARDING.format({
                                numQuestions: N.MAX_NUMBER_OF_ONBOARDING_PROMPTS_IN_ONBOARDING
                            })
                        });
                        return
                    }(0, T.editGuildOnboardingPrompts)(u, [...s, ...a])
                });
                return null == u ? null : (0, a.jsxs)(a.Fragment, {
                    children: [n ? null : (0, a.jsxs)(a.Fragment, {
                        children: [s ? null : (0, a.jsxs)("div", {
                            children: [(0, a.jsx)(o.Heading, {
                                variant: "heading-md/bold",
                                children: f.default.Messages.ONBOARDING_QUESTIONS_PRE_JOIN_HEADER
                            }), (0, a.jsx)(o.Text, {
                                variant: "text-sm/normal",
                                color: "header-secondary",
                                className: g.subtitle,
                                children: f.default.Messages.ONBOARDING_QUESTIONS_PRE_JOIN_SUBHEADER
                            })]
                        }), m.map((e, t) => (0, a.jsx)(S.default, {
                            guild: u,
                            prompt: e,
                            disableAutofocus: s,
                            includeCount: l,
                            singleColumn: i,
                            promptIndex: t,
                            dragIndex: t,
                            onPromptDragStart: h,
                            onPromptDragReset: R,
                            onPromptDragComplete: D
                        }, e.id))]
                    }), (0, a.jsx)(A, {
                        guild: u,
                        prejoinOnly: s,
                        postjoinOnly: n
                    }), s ? null : (0, a.jsxs)(a.Fragment, {
                        children: [C.map((e, t) => (0, a.jsx)(S.default, {
                            guild: u,
                            prompt: e,
                            promptIndex: t + m.length,
                            dragIndex: t + m.length + 1,
                            onPromptDragStart: h,
                            onPromptDragReset: R,
                            onPromptDragComplete: D
                        }, e.id)), L.length < N.MAX_NUM_PROMPTS ? (0, a.jsxs)(o.Clickable, {
                            className: g.addPrompt,
                            onClick: () => (0, T.editGuildOnboardingPrompts)(u, [...L, (0, N.getEmptyPrompt)(!1)], !1),
                            children: [(0, a.jsx)(_.default, {
                                className: g.plusIcon,
                                width: 20,
                                height: 20
                            }), (0, a.jsx)(o.Text, {
                                variant: "text-md/medium",
                                color: "text-brand",
                                children: f.default.Messages.ONBOARDING_PROMPT_ADD_PROMPT
                            })]
                        }) : null]
                    })]
                })
            }
        },
        671932: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useOnboardingCanBeEnabled: function() {
                    return h
                },
                DefaultChannelsOverviewItem: function() {
                    return R
                },
                CustomizationQuestionsOverviewItem: function() {
                    return D
                },
                HomeSettingsOverviewItem: function() {
                    return M
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("863636"),
                o = s("380710"),
                d = s("129092"),
                u = s("233706"),
                c = s("538137"),
                E = s("593195"),
                _ = s("36694"),
                T = s("564875"),
                I = s("620193"),
                S = s("423487"),
                N = s("435076"),
                f = s("642807"),
                g = s("682327"),
                A = s("653138"),
                L = s("782340"),
                m = s("967476");

            function C(e) {
                let t, {
                    title: s,
                    description: n,
                    icon: l,
                    hasStarted: r,
                    status: o,
                    onEdit: d,
                    extra: u
                } = e;
                switch (o) {
                    case "good":
                        t = (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(_.default, {
                                width: 16,
                                height: 16,
                                className: m.checkmark
                            }), (0, a.jsx)(i.Text, {
                                variant: "text-xs/semibold",
                                color: "status-positive",
                                className: m.statusText,
                                children: L.default.Messages.DEFAULT_CHANNELS_GOOD
                            })]
                        });
                        break;
                    case "warning":
                        t = (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(S.default, {
                                width: 16,
                                height: 16,
                                className: m.warning
                            }), (0, a.jsx)(i.Text, {
                                variant: "text-xs/semibold",
                                color: "status-warning",
                                className: m.statusText,
                                children: L.default.Messages.ONBOARDING_PROMPTS_WARNING
                            })]
                        });
                        break;
                    case "required":
                        t = (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(S.default, {
                                width: 16,
                                height: 16,
                                className: m.danger
                            }), (0, a.jsx)(i.Text, {
                                variant: "text-xs/semibold",
                                color: "status-danger",
                                className: m.statusText,
                                children: L.default.Messages.REQUIRED
                            })]
                        })
                }
                return (0, a.jsxs)("div", {
                    className: m.onboardingStepContainer,
                    children: [(0, a.jsxs)("div", {
                        className: m.leftContainer,
                        children: [(0, a.jsx)("div", {
                            className: m.iconContainer,
                            children: l
                        }), (0, a.jsxs)("div", {
                            className: m.onboardingStepText,
                            children: [(0, a.jsx)(i.Heading, {
                                variant: "heading-md/semibold",
                                children: s
                            }), (0, a.jsx)(i.Text, {
                                variant: "text-xs/normal",
                                color: r && "required" === o ? "status-danger" : "text-normal",
                                children: n
                            })]
                        })]
                    }), (0, a.jsxs)("div", {
                        className: m.rightContainer,
                        children: [t, u, r ? (0, a.jsx)(i.Button, {
                            className: m.cta,
                            size: i.Button.Sizes.SMALL,
                            color: i.Button.Colors.PRIMARY,
                            look: i.Button.Looks.OUTLINED,
                            borderColor: i.Button.BorderColors.PRIMARY,
                            onClick: d,
                            children: L.default.Messages.EDIT
                        }) : (0, a.jsxs)(i.Button, {
                            className: m.cta,
                            innerClassName: m.ctaInner,
                            size: i.Button.Sizes.SMALL,
                            color: i.Button.Colors.PRIMARY,
                            onClick: d,
                            children: [L.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_SET_UP, (0, a.jsx)(c.default, {
                                width: 12,
                                height: 12
                            })]
                        })]
                    })]
                })
            }

            function O(e) {
                let t = (0, l.useStateFromStoresArray)([r.default], () => r.default.getDefaultChannelIds(e)),
                    [s, a] = (0, o.useChattableDefaultChannels)(e, t);
                return a.length >= A.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING && s.length >= A.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN
            }

            function h(e) {
                let t = O(e),
                    s = (0, g.useAdvancedModeReady)(e);
                return t || s
            }

            function R(e) {
                var t, s, n, i;
                let {
                    guildId: d,
                    onEdit: u,
                    disableGoodStatus: c
                } = e, _ = (0, l.useStateFromStoresArray)([r.default], () => r.default.getDefaultChannelIds(d)), T = (0, l.useStateFromStores)([r.default], () => (0, o.getMinimumSetOfDefaultChannelIds)(d, r.default.getDefaultChannelIds(d), r.default.getOnboardingPrompts(d)).length), [, I] = (0, o.useChattableDefaultChannels)(d, _), S = I.length, N = O(d), f = (0, g.useAdvancedModeReady)(d), h = (0, l.useStateFromStores)([r.default], () => r.default.isAdvancedMode(d));
                let R = (t = N, s = h, n = S, i = T, s ? L.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_NUM_DEFAULT_CHANNELS_ADVANCED.format({
                    numDefaultChannels: n,
                    numFromQuestions: i - n
                }) : t ? L.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_NUM_DEFAULT_CHANNELS.format({
                    numDefaultChannels: n
                }) : L.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_NOT_ENOUGH_DEFAULT_CHANNELS.format({
                    numDefaultChannels: A.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING,
                    numChattableChannels: A.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN
                }));
                return (0, a.jsx)(C, {
                    title: h ? L.default.Messages.GUILD_SETTINGS_DEFAULT_CHANNELS_ADVANCED : L.default.Messages.GUILD_SETTINGS_DEFAULT_CHANNELS,
                    description: R,
                    icon: (0, a.jsx)(E.default, {
                        width: 24,
                        height: 24,
                        className: m.channelIcon
                    }),
                    hasStarted: S > 0 || h,
                    status: N || f ? c ? "none" : "good" : "required",
                    onEdit: u
                })
            }

            function D(e) {
                let {
                    guildId: t,
                    onEdit: s,
                    disableGoodStatus: n
                } = e, i = (0, l.useStateFromStoresArray)([r.default], () => r.default.getDefaultChannelIds(t)), d = (0, l.useStateFromStoresArray)([r.default], () => r.default.getOnboardingPrompts(t)), u = d.length, [c, E] = (0, o.useChannelCoverageForOnboarding)(t, d, i), _ = c.length, I = c.length + E.length, S = _ / I * 100, N = (0, l.useStateFromStores)([r.default], () => r.default.isAdvancedMode(t)), f = u > 0, g = "none";
                return f && (S >= 85 && !n ? g = "good" : S < 85 && (g = "warning")), (0, a.jsx)(C, {
                    title: N ? L.default.Messages.ONBOARDING_PROMPT_SETTINGS_HEADER_ADVANCED : L.default.Messages.ONBOARDING_PROMPT_SETTINGS_HEADER,
                    description: L.default.Messages.ONBOARDING_PROMPT_CHANNEL_COVERAGE.format({
                        numChannels: _,
                        numTotalChannels: I,
                        channelsHook: (e, t) => (0, a.jsx)("span", {
                            style: {
                                color: S > 85 ? "var(--header-primary)" : "var(--status-warning)"
                            },
                            children: e
                        }, t)
                    }),
                    icon: (0, a.jsx)(T.default, {
                        width: 24,
                        height: 24,
                        className: m.channelIcon
                    }),
                    hasStarted: f,
                    status: g,
                    onEdit: s
                })
            }

            function M(e) {
                let {
                    guildId: t,
                    onEdit: s,
                    disableGoodStatus: o
                } = e, c = (0, l.useStateFromStores)([f.default], () => f.default.getSettings()), E = (0, l.useStateFromStores)([r.default], () => r.default.getEnabled(t)), {
                    serverGuideOptional: _
                } = (0, u.useOptionalOnboardingHomeAdminExperiment)(t), T = (0, d.isSettingsValid)(c), S = c.enabled, g = n.useCallback(() => {
                    (0, N.enableHomeSettings)(t, !S)
                }, [t, S]), A = !(0, d.isSettingsEmpty)(c), O = "none";
                A && (T && !o ? O = "good" : !T && (O = "required"));
                let h = L.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_DESCRIPTION;
                T ? !A && (h = L.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_NOT_STARTED_DESCRIPTION) : h = L.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_INVALID_DESCRIPTION;
                let R = null;
                return A && _ && E && (R = (0, a.jsx)(i.Switch, {
                    className: m.inlineSwitch,
                    checked: S,
                    onChange: g,
                    disabled: !T
                })), (0, a.jsx)(C, {
                    title: L.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_TITLE,
                    description: h,
                    icon: (0, a.jsx)(I.default, {
                        width: 24,
                        height: 24,
                        className: m.channelIcon
                    }),
                    hasStarted: A,
                    status: O,
                    onEdit: s,
                    extra: R
                })
            }
        },
        316497: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                DEFAULT_HEADER_HEIGHT_PX: function() {
                    return u
                }
            });
            var a, n, l = s("316693"),
                i = s("669491"),
                r = s("991170"),
                o = s("49111"),
                d = s("782340");
            let u = 371;
            (a = n || (n = {}))[a.COSMETIC = 0] = "COSMETIC", a[a.MEMBER = 1] = "MEMBER", a[a.MODERATOR = 2] = "MODERATOR", a[a.MANAGER = 3] = "MANAGER";
            let c = r.default.DEFAULT;
            l.default.remove(c, o.Permissions.MENTION_EVERYONE);
            let E = l.default.combine(c, o.Permissions.VIEW_AUDIT_LOG, o.Permissions.MANAGE_NICKNAMES, o.Permissions.KICK_MEMBERS, o.Permissions.BAN_MEMBERS, o.Permissions.MANAGE_MESSAGES, o.Permissions.MUTE_MEMBERS, o.Permissions.DEAFEN_MEMBERS, o.Permissions.MOVE_MEMBERS, o.Permissions.PRIORITY_SPEAKER, o.Permissions.MODERATE_MEMBERS),
                _ = l.default.combine(E, o.Permissions.MANAGE_CHANNELS, o.Permissions.MANAGE_THREADS, o.Permissions.MANAGE_ROLES, o.Permissions.MANAGE_GUILD_EXPRESSIONS, o.Permissions.MANAGE_GUILD, o.Permissions.MANAGE_WEBHOOKS, o.Permissions.SEND_TTS_MESSAGES);
            l.default.add(_, o.Permissions.VIEW_GUILD_ANALYTICS), i.default.unsafe_rawColors.BRAND_500.css, r.default.NONE, i.default.unsafe_rawColors.GREEN_360.css, i.default.unsafe_rawColors.YELLOW_300.css, i.default.unsafe_rawColors.RED_400.css, () => d.default.Messages.ROLE_PERMISSION_TEMPLATE_MANAGER_CONTENT_PREFACE
        },
        986654: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ADD_MEMBER_QUERY_LIMIT: function() {
                    return S
                },
                MAX_PREFETCH_MEMBER_COUNT: function() {
                    return N
                },
                useGuildMembers: function() {
                    return f
                },
                useGuildRoleMembers: function() {
                    return g
                },
                useQueryGuildMembers: function() {
                    return A
                },
                filterFullMembersByQuery: function() {
                    return L
                },
                getSectionAnalyticsName: function() {
                    return m
                },
                filterRole: function() {
                    return C
                }
            }), s("808653"), s("424973"), s("222007");
            var a = s("884691"),
                n = s("448105"),
                l = s.n(n),
                i = s("446674"),
                r = s("26989"),
                o = s("697218"),
                d = s("599110"),
                u = s("449008"),
                c = s("651879"),
                E = s("158998"),
                _ = s("895026"),
                T = s("53948"),
                I = s("49111");
            let S = 50,
                N = 1e3;

            function f(e, t) {
                let s = (0, i.useStateFromStoresArray)([r.default], () => {
                        let s = r.default.getMembers(e);
                        return null == t ? s : s.filter(t)
                    }, [e, t]),
                    n = (0, i.useStateFromStoresObject)([o.default], () => s.reduce((e, t) => {
                        let s = o.default.getUser(t.userId);
                        return null == s ? e : (e[t.userId] = s, e)
                    }, {}), [s]);
                return a.useMemo(() => {
                    let t = [];
                    for (let l of s) {
                        var a;
                        let s = n[l.userId];
                        null != s && t.push({
                            name: null !== (a = l.nick) && void 0 !== a ? a : E.default.getName(s),
                            userTag: E.default.getUserTag(s),
                            id: l.userId,
                            avatarSource: s.getAvatarSource(e),
                            avatarURL: s.getAvatarURL(e, 80),
                            bot: s.bot,
                            verifiedBot: s.isVerifiedBot(),
                            roles: l.roles,
                            key: l.userId,
                            user: s
                        })
                    }
                    return t
                }, [s, n, e])
            }

            function g(e, t, s) {
                a.useEffect(() => {
                    (0, _.requestMembersForRole)(e, t).catch(s)
                }, [e, t]);
                let n = a.useCallback(e => e.roles.includes(t), [t]);
                return f(e, n)
            }

            function A(e, t) {
                let s = a.useRef(!1);
                a.useEffect(() => {
                    c.default.requestMembers(e, t, 200), "" !== t && !s.current && (d.default.track(I.AnalyticEvents.SEARCH_STARTED, {
                        search_type: "Role Members"
                    }), s.current = !0)
                }, [e, t])
            }

            function L(e, t) {
                let s = e.trim().toLowerCase();
                return t.id === s || l(s, t.name.toLowerCase()) || l(s, t.userTag.toLowerCase())
            }

            function m(e) {
                switch (e) {
                    case T.GuildSettingsRoleEditSections.MEMBERS:
                        return "Members";
                    case T.GuildSettingsRoleEditSections.PERMISSIONS:
                        return "Permissions";
                    case T.GuildSettingsRoleEditSections.DISPLAY:
                        return "Role Settings";
                    case T.GuildSettingsRoleEditSections.VERIFICATIONS:
                        return "Connections";
                    default:
                        (0, u.assertNever)(e)
                }
            }

            function C(e, t) {
                return "" === t || e.name.toLowerCase().includes(t.toLowerCase())
            }
        },
        482763: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return R
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("627445"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("716241"),
                u = s("70919"),
                c = s("957255"),
                E = s("599110"),
                _ = s("449008"),
                T = s("36402"),
                I = s("531493"),
                S = s("900938"),
                N = s("986654"),
                f = s("462752"),
                g = s("505002"),
                A = s("893448"),
                L = s("376252"),
                m = s("728955"),
                C = s("53948"),
                O = s("49111"),
                h = s("121255");

            function R(e) {
                let t, {
                        editRoleId: s,
                        setEditRoleId: l,
                        selectedSection: R,
                        setSelectedSection: D
                    } = e,
                    M = (0, r.useStateFromStores)([I.default], () => I.default.guild, []);
                i(null != M, "guildId cannot be null here");
                let {
                    role: G,
                    permissionSearchQuery: x
                } = (0, r.useStateFromStoresObject)([I.default], () => ({
                    role: I.default.getRole(s),
                    permissionSearchQuery: I.default.getPermissionSearchQuery()
                }), [s]);
                n.useEffect(() => {
                    null == G && l(null)
                }, [G, l]);
                let p = (0, r.useStateFromStores)([c.default], () => c.default.getHighestRole(M), [M]),
                    U = (0, r.useStateFromStores)([c.default], () => !c.default.isRoleHigher(M, p, G)),
                    v = n.useRef(null),
                    j = (0, r.useStateFromStores)([S.default], () => S.default.getProps().integrations);
                if (n.useEffect(() => {
                        var e, t;
                        let a = (0, N.getSectionAnalyticsName)(R),
                            n = null !== (t = null === (e = T.default.getRoleMemberCount(M.id)) || void 0 === e ? void 0 : e[s]) && void 0 !== t ? t : 0;
                        E.default.track(O.AnalyticEvents.ROLE_PAGE_VIEWED, {
                            tab_opened: a,
                            is_everyone: M.id === s,
                            role_id: s,
                            role_mentionable: null == G ? void 0 : G.mentionable,
                            role_hoist: null == G ? void 0 : G.hoist,
                            role_permissions: null == G ? void 0 : G.permissions.toString(),
                            role_num_members: n,
                            ...(0, d.collectGuildAnalyticsMetadata)(M.id)
                        })
                    }, [R, M.id, null == G ? void 0 : G.id]), n.useEffect(() => {
                        (null == G ? void 0 : G.id) != null && (0, u.fetchRoleConnectionsConfiguration)(M.id, G.id)
                    }, [M.id, null == G ? void 0 : G.id]), null == G) return null;
                switch (R) {
                    case C.GuildSettingsRoleEditSections.DISPLAY:
                        t = (0, a.jsx)(g.default, {
                            guild: M,
                            role: G,
                            locked: U,
                            highestRole: p,
                            setSelectedSection: D
                        });
                        break;
                    case C.GuildSettingsRoleEditSections.PERMISSIONS:
                        t = (0, a.jsx)(L.default, {
                            guild: M,
                            role: G,
                            locked: U,
                            setSelectedSection: D,
                            initialSearchQuery: x
                        });
                        break;
                    case C.GuildSettingsRoleEditSections.VERIFICATIONS:
                        t = (0, a.jsx)(f.default, {
                            guild: M,
                            role: G,
                            locked: U,
                            setSelectedSection: D,
                            integrations: null != j ? j : void 0
                        });
                        break;
                    case C.GuildSettingsRoleEditSections.MEMBERS:
                        t = (0, a.jsx)(A.default, {
                            guild: M,
                            role: G,
                            locked: U,
                            setSelectedSection: D
                        });
                        break;
                    default:
                        (0, _.assertNever)(R)
                }
                return (0, a.jsxs)(o.FormSection, {
                    className: h.page,
                    children: [(0, a.jsx)(m.default, {
                        guild: M,
                        currentRoleId: s,
                        setCurrentRoleId: l,
                        setSelectedSection: D
                    }), (0, a.jsx)("div", {
                        className: h.contentContainer,
                        ref: v,
                        children: (0, a.jsx)(o.FocusRingScope, {
                            containerRef: v,
                            children: t
                        })
                    })]
                })
            }
        },
        126383: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("461380"),
                i = s("155207"),
                r = s("782340"),
                o = s("125559");

            function d(e) {
                let {
                    role: t,
                    onClick: s
                } = e;
                return (0, a.jsxs)(n.Clickable, {
                    className: o.container,
                    onClick: s,
                    children: [(0, a.jsx)("div", {
                        className: o.icon,
                        children: (0, a.jsx)(i.default, {
                            width: 20,
                            height: 20
                        })
                    }), (0, a.jsxs)("div", {
                        className: o.description,
                        children: [(0, a.jsx)(n.Text, {
                            className: o.label,
                            color: "none",
                            variant: "text-md/bold",
                            children: r.default.Messages.ROLE_EVERYONE_LABEL
                        }), (0, a.jsxs)(n.Text, {
                            color: "none",
                            variant: "text-xs/normal",
                            children: [t.name, " • ", r.default.Messages.ROLE_EVERYONE_DESCRIPTION]
                        })]
                    }), (0, a.jsx)(l.default, {
                        className: o.arrow,
                        direction: l.default.Directions.RIGHT
                    })]
                })
            }
        },
        620296: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return g
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("851387"),
                u = s("534291"),
                c = s("206230"),
                E = s("126383"),
                _ = s("49111"),
                T = s("782340"),
                I = s("680451");

            function S(e) {
                let {
                    color: t,
                    children: s
                } = e;
                return (0, a.jsxs)("div", {
                    className: I.roleTag,
                    children: [(0, a.jsx)(o.RoleCircle, {
                        className: I.roleDot,
                        color: t
                    }), (0, a.jsx)("span", {
                        className: I.roleText,
                        children: s
                    })]
                })
            }

            function N(e) {
                let {
                    guild: t,
                    display: s
                } = e;
                return (0, a.jsxs)("div", {
                    className: i(I.banner, t.backgroundClass, {
                        [I.bannerOut]: !s
                    }),
                    children: [(0, a.jsx)("div", {
                        className: I.roles,
                        children: t.roles.map((e, t) => (0, a.jsx)("div", {
                            className: I.rolesRow,
                            children: e.map(e => (0, a.jsx)(S, {
                                color: e.color,
                                children: e.name
                            }, e.name))
                        }, t))
                    }), (0, a.jsx)("div", {
                        className: I.profileCard,
                        children: (0, a.jsxs)("div", {
                            className: I.avatarContainer,
                            children: [(0, a.jsx)(o.Avatar, {
                                size: o.AvatarSizes.SIZE_56,
                                "aria-hidden": !0,
                                status: _.StatusTypes.ONLINE,
                                src: t.avatar
                            }), (0, a.jsx)(o.Text, {
                                color: "header-primary",
                                variant: "text-md/bold",
                                className: I.avatarName,
                                children: t.username
                            })]
                        })
                    })]
                })
            }

            function f() {
                let e = (0, r.useStateFromStores)([c.default], () => c.default.useReducedMotion),
                    t = n.useMemo(() => [{
                        backgroundClass: I.bannerClubs,
                        username: "Wumpus#0000",
                        avatar: s("896122"),
                        roles: [
                            [{
                                name: T.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_1,
                                color: "#7e00fc"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_2,
                                color: "#faa61a"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_3,
                                color: "#f06ea8"
                            }],
                            [{
                                name: T.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_4,
                                color: "#45ddc0"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_5,
                                color: "#00b0f4"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_6,
                                color: "#ba1616"
                            }]
                        ]
                    }, {
                        backgroundClass: I.bannerGaming,
                        username: "Graggle#0000",
                        avatar: s("352683"),
                        roles: [
                            [{
                                name: T.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_1,
                                color: "#4a76e6"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_2,
                                color: "#ad87ff"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_3,
                                color: "#6defcf"
                            }],
                            [{
                                name: T.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_4,
                                color: "#ff73fa"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_5,
                                color: "#3ba55c"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_6,
                                color: "#ff1b66"
                            }]
                        ]
                    }, {
                        backgroundClass: I.bannerHobbies,
                        username: "Mallow#0000",
                        avatar: s("62816"),
                        roles: [
                            [{
                                name: T.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_1,
                                color: "#20d6b8"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_2,
                                color: "#236136"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_3,
                                color: "#ff9a15"
                            }],
                            [{
                                name: T.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_4,
                                color: "#ff78b9"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_5,
                                color: "#00b0f4"
                            }, {
                                name: T.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_6,
                                color: "#6f52e4"
                            }]
                        ]
                    }], []),
                    [l, i] = n.useState(0);
                return n.useEffect(() => {
                    if (e) return;
                    let s = setTimeout(() => i((l + 1) % t.length), 6332);
                    return () => clearTimeout(s)
                }, [l]), (0, a.jsx)("div", {
                    className: I.bannerContainer,
                    "aria-hidden": !0,
                    children: t.map((e, t) => (0, a.jsx)(N, {
                        guild: e,
                        display: t === l
                    }, t))
                })
            }

            function g(e) {
                let {
                    guild: t,
                    everyoneRole: s,
                    setEditRoleId: l
                } = e, [i, r] = n.useState(!1), c = async () => {
                    r(!0), await d.default.createRole(t.id), r(!1)
                }, _ = n.useCallback(() => {
                    l(s.id)
                }, [l, s.id]);
                return (0, a.jsx)(u.DefaultCustomContentScroller, {
                    children: (0, a.jsxs)(o.FormSection, {
                        className: I.section,
                        title: T.default.Messages.ROLES,
                        tag: o.FormTitleTags.H2,
                        children: [(0, a.jsxs)("div", {
                            className: I.container,
                            children: [(0, a.jsx)(f, {}), (0, a.jsx)(o.Heading, {
                                variant: "heading-xl/semibold",
                                children: T.default.Messages.ROLE_OVERVIEW_EMPTY_SUBHEADER
                            }), (0, a.jsx)(o.Text, {
                                color: "header-secondary",
                                variant: "text-md/normal",
                                className: I.introBody,
                                children: T.default.Messages.ROLE_OVERVIEW_DESCRIPTION
                            }), (0, a.jsx)(o.Button, {
                                className: I.button,
                                size: o.Button.Sizes.MEDIUM,
                                onClick: c,
                                submitting: i,
                                children: T.default.Messages.ROLE_CREATE_CTA
                            })]
                        }), (0, a.jsx)(o.FormDivider, {
                            className: I.divider
                        }), (0, a.jsx)(E.default, {
                            role: s,
                            onClick: _
                        })]
                    })
                })
            }
        },
        542578: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return H
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("476042"),
                o = s("509043"),
                d = s("446674"),
                u = s("77078"),
                c = s("272030"),
                E = s("534291"),
                _ = s("339023"),
                T = s("180243"),
                I = s("726527"),
                S = s("405645"),
                N = s("915675"),
                f = s("957255"),
                g = s("211248"),
                A = s("673220"),
                L = s("462579"),
                m = s("433487"),
                C = s("987772"),
                O = s("155207"),
                h = s("781896"),
                R = s("682344"),
                D = s("483093"),
                M = s("599110"),
                G = s("895026"),
                x = s("36402"),
                p = s("986654"),
                U = s("476324"),
                v = s("983521"),
                j = s("53948"),
                P = s("49111"),
                y = s("782340"),
                b = s("898952"),
                B = s("273899");
            let F = "DRAGGABLE_ROLE";

            function H(e) {
                let {
                    setEditRoleId: t,
                    guild: s,
                    everyoneRole: l,
                    otherRoles: i,
                    setSelectedSection: r,
                    renderHeader: o,
                    headerHeight: u,
                    query: c
                } = e, _ = (0, d.useStateFromStores)([x.default], () => x.default.getRoleMemberCount(s.id), [s.id]), T = (0, d.useStateFromStores)([f.default], () => f.default.getHighestRole(s), [s]), I = c.trim();
                n.useEffect(() => {
                    (0, G.fetchMemberCounts)(s.id)
                }, [s.id]);
                let S = n.useRef(!1);
                n.useEffect(() => {
                    !S.current && "" !== c.trimStart() && (M.default.track(P.AnalyticEvents.SEARCH_STARTED, {
                        search_type: "Roles"
                    }), S.current = !0)
                }, [c]);
                let N = n.useMemo(() => i.filter(e => (0, p.filterRole)(e, I)), [i, I]),
                    g = n.useMemo(() => [...i, l], [i, l]),
                    {
                        draggingId: A,
                        handleDragStart: L,
                        handleDragReset: m,
                        handleDragComplete: C
                    } = (0, v.default)(g),
                    O = n.useCallback(e => {
                        var n;
                        let {
                            row: l
                        } = e;
                        if (0 === N.length) return (0, a.jsx)(V, {}, "empty-role");
                        let o = N[l];
                        return (0, a.jsx)(k, {
                            role: o,
                            guild: s,
                            highestRole: T,
                            currentPosition: l,
                            memberCount: null !== (n = null == _ ? void 0 : _[o.id]) && void 0 !== n ? n : 0,
                            onDragStart: L,
                            onDragReset: m,
                            onDragComplete: C,
                            disableHover: null != A,
                            disableDrag: i.length !== N.length,
                            setEditRoleId: t,
                            setSelectedSection: r
                        }, o.id)
                    }, [N, s, T, _, L, m, C, A, i, t, r]);
                return (0, a.jsx)(E.ListContentScroller, {
                    sections: [Math.max(N.length, 1)],
                    sectionHeight: u,
                    renderSection: o,
                    rowHeight: 61,
                    renderRow: O
                })
            }

            function V() {
                return (0, a.jsxs)("div", {
                    className: b.emptyRoles,
                    children: [(0, a.jsx)("div", {
                        className: B.dragSpacing
                    }), (0, a.jsx)(O.default, {}), (0, a.jsx)(u.Text, {
                        className: b.emptyRolesText,
                        variant: "text-md/semibold",
                        color: "text-muted",
                        children: y.default.Messages.ROLE_LIST_EMPTY
                    })]
                })
            }

            function k(e) {
                var t, l, o;
                let {
                    role: d,
                    guild: E,
                    highestRole: S,
                    currentPosition: f,
                    memberCount: O,
                    onDragStart: R,
                    onDragReset: D,
                    onDragComplete: M,
                    disableHover: G,
                    disableDrag: x,
                    setEditRoleId: p,
                    setSelectedSection: v
                } = e, P = (0, U.useLockTooltip)(E, S, d), H = null != P, [V, k] = n.useState(!1), Y = n.useMemo(() => ({
                    type: F,
                    item: () => (R(d.id), {
                        id: d.id,
                        position: f
                    }),
                    canDrag: () => V && !H,
                    collect: e => ({
                        isDragging: e.isDragging()
                    }),
                    end: (e, t) => {
                        let s = t.getDropResult();
                        if (null == s) {
                            D();
                            return
                        }
                        M(s.roleId)
                    }
                }), [d, R, D, M, H, V]), [{
                    isDragging: K
                }, W] = (0, r.useDrag)(Y), z = n.useMemo(() => ({
                    accept: F,
                    canDrop: () => !H,
                    collect: e => {
                        let t = e.getItem();
                        return null != t && e.isOver() && e.canDrop() ? {
                            dragSourcePosition: t.position
                        } : {
                            dragSourcePosition: null
                        }
                    },
                    drop: () => ({
                        roleId: d.id
                    })
                }), [H, d]), [{
                    dragSourcePosition: X
                }, Z] = (0, r.useDrop)(z), J = n.useCallback(e => {
                    (0, c.openContextMenuLazy)(e, async () => {
                        let {
                            default: e
                        } = await s.el("726527").then(s.bind(s, "726527"));
                        return t => (0, a.jsx)(e, {
                            ...t,
                            role: d,
                            guild: E
                        })
                    })
                }, [E, d]), Q = (0, I.useHasGuildRoleItems)(E, d);
                if (K) return (0, a.jsx)("div", {
                    ref: W,
                    className: i(b.roleRow, b.roleRowDragging)
                });

                function q() {
                    p(d.id)
                }

                function $() {
                    q(), v(j.GuildSettingsRoleEditSections.MEMBERS)
                }
                return (0, a.jsxs)(u.Clickable, {
                    className: i(b.roleRow, {
                        [b.roleRowDisableHover]: G,
                        [b.containerDragBefore]: null != X && f < X,
                        [b.containerDragAfter]: null != X && f > X
                    }),
                    onClick: q,
                    onContextMenu: J,
                    innerRef: e => W(Z(e)),
                    "data-dnd-name": d.name,
                    "aria-label": y.default.Messages.ROLE_ROW_DESCRIPTION.format({
                        name: d.name,
                        count: "".concat(O)
                    }),
                    children: [(0, a.jsx)("div", {
                        className: i(b.dragIcon, B.dragSpacing, {
                            [b.dragIconHidden]: H || x
                        }),
                        onMouseEnter: () => k(!0),
                        onMouseLeave: () => k(!1),
                        children: (0, a.jsx)(A.default, {})
                    }), (0, a.jsxs)("div", {
                        className: i(b.roleNameContainer, B.roleNameSpacing),
                        children: [(null === (t = d.tags) || void 0 === t ? void 0 : t.guild_connections) === null ? (0, a.jsx)(_.default, {
                            className: b.roleFlowerStar,
                            color: d.colorString,
                            size: 24
                        }) : (0, a.jsx)(w, {
                            guildId: E.id,
                            role: d,
                            size: 24,
                            className: b.roleIcon,
                            defaultIconClassName: b.shield
                        }), null != P ? (0, a.jsx)(U.default, {
                            className: b.lock,
                            tooltipText: P
                        }) : null, (0, a.jsx)(u.Text, {
                            className: b.roleName,
                            color: "header-primary",
                            variant: "text-md/medium",
                            children: d.name
                        }), (null === (l = d.tags) || void 0 === l ? void 0 : l.subscription_listing_id) != null && (0, a.jsx)(N.default, {
                            className: b.subscriptionRoleIcon,
                            "aria-label": y.default.Messages.GUILD_ROLE_SUBSCRIPTION_PREMIUM_ROLE_ICON_LABEL
                        }), (null === (o = d.tags) || void 0 === o ? void 0 : o.is_guild_product_role) === !0 && (0, a.jsx)(T.default, {})]
                    }), (0, a.jsx)(u.Tooltip, {
                        text: y.default.Messages.ROLE_OVERVIEW_VIEW_MEMBERS,
                        "aria-label": y.default.Messages.ROLE_ROW_VIEW_MEMBERS.format({
                            count: "".concat(O)
                        }),
                        position: "right",
                        children: e => (0, a.jsxs)(u.Clickable, {
                            ...e,
                            className: i(b.memberCountContainer, B.memberSpacing),
                            onClick: $,
                            children: [(0, a.jsx)(u.Text, {
                                variant: "text-md/normal",
                                color: "none",
                                children: O
                            }), (0, a.jsx)(h.default, {
                                className: b.person,
                                width: 20,
                                height: 20
                            })]
                        })
                    }), (0, a.jsxs)("div", {
                        className: i(b.buttonsContainer, B.buttonsSpacing),
                        children: [(0, a.jsx)(g.default, {
                            className: i(b.circleButton, b.editButton),
                            tooltip: H ? y.default.Messages.VIEW : y.default.Messages.EDIT,
                            color: g.CircleIconButtonColors.SECONDARY,
                            size: g.CircleIconButtonSizes.SIZE_36,
                            icon: H ? (0, a.jsx)(L.default, {
                                width: 20,
                                height: 20
                            }) : (0, a.jsx)(C.default, {
                                width: 20,
                                height: 20
                            }),
                            onClick: q
                        }), (0, a.jsx)(g.default, {
                            className: b.circleButton,
                            tooltip: y.default.Messages.MORE,
                            color: g.CircleIconButtonColors.SECONDARY,
                            size: g.CircleIconButtonSizes.SIZE_36,
                            icon: (0, a.jsx)(m.default, {
                                width: 20,
                                height: 20
                            }),
                            onClick: J,
                            disabled: !Q
                        })]
                    })]
                })
            }

            function w(e) {
                var t;
                let {
                    guildId: s,
                    role: n,
                    size: l,
                    enableTooltip: r,
                    className: d,
                    defaultIconClassName: u
                } = e, c = (0, S.useRoleIcon)({
                    guildId: s,
                    roleId: n.id,
                    size: l
                });
                return null != c ? (0, a.jsx)(D.default, {
                    ...c,
                    className: d,
                    enableTooltip: r
                }) : (0, a.jsx)(R.default, {
                    className: i(d, u),
                    color: null !== (t = n.colorString) && void 0 !== t ? t : (0, o.int2hex)(P.DEFAULT_ROLE_COLOR),
                    width: l,
                    height: l
                })
            }
        },
        887754: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsRolesNotice: function() {
                    return C
                },
                default: function() {
                    return O
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("627445"),
                i = s.n(l),
                r = s("446674"),
                o = s("851387"),
                d = s("45299"),
                u = s("525065"),
                c = s("449008"),
                E = s("592407"),
                _ = s("766419"),
                T = s("531493"),
                I = s("900938"),
                S = s("986654"),
                N = s("482763"),
                f = s("620296"),
                g = s("500053"),
                A = s("53948"),
                L = s("49111");

            function m(e) {
                E.default.selectRole(e)
            }
            let C = () => {
                let {
                    guild: e
                } = (0, r.useStateFromStoresObject)([I.default], () => I.default.getProps()), t = (0, r.useStateFromStores)([T.default], () => T.default.formState), s = (0, r.useStateFromStores)([T.default], () => T.default.errorMessage);
                return (0, a.jsx)(d.default, {
                    errorMessage: s,
                    onSave: () => {
                        if (null == e) return;
                        let {
                            id: t
                        } = e, s = T.default.editedRoleIds.map(e => T.default.getRole(e)).filter(c.isNotNullish), a = T.default.getSortDeltas(), n = null, l = null;
                        T.default.hasRoleConfigurationChanges && (l = T.default.editedRoleIdsForConfigurations, n = T.default.getEditedRoleConnectionConfigurationsMap()), (0, _.saveRoleSettings)(t, s, a, l, n)
                    },
                    submitting: t === L.FormStates.SUBMITTING,
                    onReset: _.init
                })
            };

            function O(e) {
                let {
                    refToScroller: t
                } = e, {
                    guild: s,
                    roles: l
                } = (0, r.useStateFromStoresObject)([T.default], () => ({
                    guild: T.default.guild,
                    roles: T.default.roles
                }), []);
                i(null != s, "Guild cannot be null here");
                let d = n.useMemo(() => l.find(e => e.id === s.id), [l, s]);
                i(null != d, "Guild must have an everyone role");
                let c = n.useMemo(() => l.filter(e => e.id !== s.id), [l, s]),
                    E = (0, r.useStateFromStores)([I.default], () => I.default.getSelectedRoleId()),
                    [_, L] = n.useState(c.length > 0);
                n.useEffect(() => {
                    L(_ || c.length > 0)
                }, [_, c.length]), n.useEffect(() => {
                    let e = u.default.getMemberCount(s.id);
                    null != e && e <= S.MAX_PREFETCH_MEMBER_COUNT && o.default.requestMembers(s.id, "", 0, !1)
                }, []);
                let [C, O] = n.useState(A.GuildSettingsRoleEditSections.DISPLAY);
                return (n.useEffect(() => {
                    null == E && O(A.GuildSettingsRoleEditSections.DISPLAY)
                }, [E]), null != E) ? (0, a.jsx)(N.default, {
                    editRoleId: E,
                    setEditRoleId: m,
                    selectedSection: C,
                    setSelectedSection: O
                }) : _ ? (0, a.jsx)(g.default, {
                    setEditRoleId: m,
                    guild: s,
                    everyoneRole: d,
                    otherRoles: c,
                    setSelectedSection: O,
                    refToScroller: t
                }) : (0, a.jsx)(f.default, {
                    guild: s,
                    everyoneRole: d,
                    setEditRoleId: m
                })
            }
        },
        500053: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("986654"),
                i = s("542578"),
                r = s("918947"),
                o = s("316497");

            function d(e) {
                let {
                    setEditRoleId: t,
                    guild: s,
                    everyoneRole: d,
                    otherRoles: u,
                    setSelectedSection: c
                } = e, [E, _] = n.useState(""), [T, I] = n.useState(o.DEFAULT_HEADER_HEIGHT_PX), S = E.trim(), N = n.useMemo(() => u.filter(e => (0, l.filterRole)(e, S)), [u, S]), f = n.useCallback(() => (0, a.jsx)(r.default, {
                    guild: s,
                    everyoneRole: d,
                    filteredRoles: N,
                    setEditRoleId: t,
                    query: E,
                    setQuery: _,
                    setHeaderHeight: I
                }, "header"), [s, d, N, t, E]);
                return (0, a.jsx)(i.default, {
                    setEditRoleId: t,
                    guild: s,
                    everyoneRole: d,
                    otherRoles: u,
                    setSelectedSection: c,
                    renderHeader: f,
                    headerHeight: T,
                    query: E
                })
            }
        },
        918947: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return S
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("851387"),
                d = s("810567"),
                u = s("701909"),
                c = s("126383"),
                E = s("316497"),
                _ = s("49111"),
                T = s("782340"),
                I = s("273899");

            function S(e) {
                let {
                    guild: t,
                    everyoneRole: s,
                    filteredRoles: l,
                    setEditRoleId: i,
                    query: o,
                    setQuery: d,
                    setHeaderHeight: u
                } = e, c = n.useRef(null);
                n.useEffect(() => {
                    var e, t;
                    u(null !== (t = null === (e = c.current) || void 0 === e ? void 0 : e.offsetHeight) && void 0 !== t ? t : E.DEFAULT_HEADER_HEIGHT_PX)
                }, [u]);
                let _ = n.useCallback(() => {
                    i(s.id)
                }, [i, s.id]);
                return (0, a.jsxs)("div", {
                    ref: c,
                    children: [(0, a.jsx)(r.FormTitle, {
                        tag: r.FormTitleTags.H1,
                        children: T.default.Messages.ROLES
                    }), (0, a.jsx)(r.Text, {
                        className: I.description,
                        color: "header-secondary",
                        variant: "text-sm/normal",
                        children: T.default.Messages.ROLE_OVERVIEW_DESCRIPTION
                    }), (0, a.jsx)(N, {
                        guild: t,
                        everyoneRole: s,
                        filteredRoles: l,
                        query: o,
                        setQuery: d,
                        onEveryoneRoleClick: _
                    })]
                })
            }

            function N(e) {
                let {
                    guild: t,
                    everyoneRole: s,
                    filteredRoles: n,
                    query: l,
                    setQuery: o,
                    onEveryoneRoleClick: d
                } = e;
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(c.default, {
                        role: s,
                        onClick: d
                    }), (0, a.jsx)(f, {
                        guild: t,
                        query: l,
                        setQuery: o
                    }), (0, a.jsx)(r.Text, {
                        className: I.helpText,
                        color: "header-secondary",
                        variant: "text-sm/normal",
                        children: T.default.Messages.ROLE_LIST_BODY_WITH_HELP.format({
                            articleURL: u.default.getArticleURL(_.HelpdeskArticles.PERMISSIONS_TUTORIAL)
                        })
                    }), (0, a.jsx)("div", {
                        className: I.rolesTable,
                        children: (0, a.jsxs)("div", {
                            className: I.tableHeader,
                            children: [(0, a.jsx)("div", {
                                className: I.dragSpacing
                            }), (0, a.jsx)(r.Text, {
                                className: i(I.tableTitle, I.roleNameSpacing),
                                variant: "text-sm/normal",
                                children: T.default.Messages.ROLE_LIST_HEADER.format({
                                    numRoles: String(n.length)
                                })
                            }), (0, a.jsx)(r.Text, {
                                className: i(I.tableTitle, I.memberSpacing),
                                variant: "text-sm/normal",
                                children: T.default.Messages.MEMBERS
                            }), (0, a.jsx)("div", {
                                className: I.buttonsSpacing
                            })]
                        })
                    })]
                })
            }

            function f(e) {
                let {
                    guild: t,
                    query: s,
                    setQuery: l
                } = e, [i, u] = n.useState(!1), c = n.useCallback(e => {
                    l(e)
                }, [l]), E = n.useCallback(() => {
                    l("")
                }, [l]), _ = async () => {
                    u(!0), await o.default.createRole(t.id), u(!1)
                };
                return (0, a.jsx)("div", {
                    className: I.rolesList,
                    children: (0, a.jsxs)("div", {
                        className: I.searchContainer,
                        children: [(0, a.jsx)(d.default, {
                            size: d.default.Sizes.MEDIUM,
                            query: s,
                            onChange: c,
                            onClear: E,
                            placeholder: T.default.Messages.SEARCH_ROLES,
                            "aria-label": T.default.Messages.SEARCH_ROLES
                        }), (0, a.jsx)(r.Button, {
                            className: I.createButton,
                            size: r.Button.Sizes.SMALL,
                            onClick: _,
                            submitting: i,
                            children: T.default.Messages.ROLE_CREATE_CTA
                        })]
                    })
                })
            }
        },
        476324: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useLockTooltip: function() {
                    return u
                },
                default: function() {
                    return c
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("957255"),
                o = s("45029"),
                d = s("782340");

            function u(e, t, s) {
                let a = (0, l.useStateFromStores)([r.default], () => !r.default.isRoleHigher(e, t, s), [e, t, s]),
                    i = n.useMemo(() => a && s.id === (null == t ? void 0 : t.id), [a, s, t]);
                return i ? d.default.Messages.HELP_ROLE_LOCKED_MINE : a ? d.default.Messages.HELP_ROLE_LOCKED : null
            }

            function c(e) {
                let {
                    className: t,
                    tooltipText: s,
                    width: n = 16,
                    height: l = 16
                } = e;
                return (0, a.jsx)(i.Tooltip, {
                    text: s,
                    children: e => (0, a.jsx)("div", {
                        className: t,
                        ...e,
                        children: (0, a.jsx)(o.default, {
                            width: n,
                            height: l
                        })
                    })
                })
            }
        },
        243863: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return g
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("819855"),
                l = s("77078"),
                i = s("841098"),
                r = s("716241"),
                o = s("685665"),
                d = s("634544"),
                u = s("405645"),
                c = s("379532"),
                E = s("818643"),
                _ = s("483093"),
                T = s("766419"),
                I = s("49111"),
                S = s("944305"),
                N = s("782340"),
                f = s("195072"),
                g = function(e) {
                    let {
                        guild: t,
                        disabled: g,
                        role: A
                    } = e, L = (0, i.default)(), m = (0, u.useRoleIconForPreview)(t.id, A), {
                        analyticsLocations: C
                    } = (0, o.default)(), O = () => {
                        (0, l.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("64567").then(s.bind(s, "64567"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                guildId: t.id,
                                onUploadIcon: e => (0, T.updateRoleIcon)(A.id, e, null),
                                onSelectUnicodeEmoji: e => (0, T.updateRoleIcon)(A.id, null, e)
                            })
                        })
                    }, h = t.features.has(I.GuildFeatures.ROLE_ICONS), R = e => {
                        !h && ((0, r.trackWithMetadata)(I.AnalyticEvents.PREMIUM_GUILD_PROMOTION_OPENED, {
                            location: {
                                ...e,
                                section: I.AnalyticsSections.CUSTOM_ROLE_ICONS_TOOLTIP
                            },
                            guild_id: null == t ? void 0 : t.id,
                            location_stack: C
                        }), (0, c.default)({
                            analyticsLocations: C,
                            analyticsSourceLocation: {
                                page: I.AnalyticsPages.GUILD_SETTINGS,
                                section: I.AnalyticsSections.GUILD_ROLE_EDIT_UPSELL_MODAL,
                                object: I.AnalyticsObjects.BADGE
                            },
                            guild: t,
                            perks: (0, S.customRoleIconUpsellPerks)()
                        }))
                    }, D = (0, a.jsx)(d.default, {
                        className: f.availabilityIndicator,
                        guild: t,
                        guildFeature: I.GuildFeatures.ROLE_ICONS,
                        tooltipPosition: "top",
                        hideTooltip: h,
                        onClick: () => R({
                            object: I.AnalyticsObjects.LEARN_MORE,
                            objectType: I.AnalyticsObjectTypes.TIER_2
                        })
                    });
                    return (0, a.jsxs)(l.FormItem, {
                        className: f.container,
                        children: [(0, a.jsxs)(l.FormTitle, {
                            className: f.formTitle,
                            children: [(0, a.jsx)("div", {
                                children: N.default.Messages.FORM_LABEL_ROLE_ICON
                            }), D]
                        }), (0, a.jsx)(l.FormText, {
                            className: f.description,
                            children: N.default.Messages.ROLE_ICON_HELP
                        }), (0, a.jsxs)("div", {
                            className: f.rolePreviewArea,
                            children: [(0, a.jsx)("div", {
                                className: f.previewContainer,
                                children: null != m ? (0, a.jsx)(_.default, {
                                    ...m,
                                    className: f.roleIconPreview,
                                    enableTooltip: !1
                                }) : (0, a.jsx)(E.default, {
                                    width: 24,
                                    height: 24,
                                    className: f.preview
                                })
                            }), (0, a.jsx)(l.Button, {
                                className: f.button,
                                color: (0, n.isThemeLight)(L) ? l.Button.Colors.PRIMARY : l.Button.Colors.WHITE,
                                look: l.Button.Looks.OUTLINED,
                                onClick: () => t.hasFeature(I.GuildFeatures.ROLE_ICONS) ? O() : R({
                                    object: I.AnalyticsObjects.UPLOAD_IMAGE
                                }),
                                disabled: g,
                                children: N.default.Messages.ROLE_ICON_CHOOSE_IMAGE
                            }), null != m ? (0, a.jsx)(l.Button, {
                                className: f.button,
                                color: (0, n.isThemeLight)(L) ? l.Button.Colors.BLACK : l.Button.Colors.TRANSPARENT,
                                look: l.Button.Looks.BLANK,
                                onClick: () => {
                                    (0, T.updateRoleIcon)(A.id, null, null)
                                },
                                disabled: g,
                                children: N.default.Messages.REMOVE_ICON
                            }) : null]
                        })]
                    })
                }
        },
        609542: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return x
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("627445"),
                o = s.n(r),
                d = s("819855"),
                u = s("77078"),
                c = s("308289"),
                E = s("841098"),
                _ = s("376556"),
                T = s("945330"),
                I = s("49111"),
                S = s("214509"),
                N = s("782340"),
                f = s("817760");

            function g(e) {
                var t, s;
                let n, {
                    theme: l,
                    platform: r,
                    integration: E,
                    onRemove: _,
                    locked: I
                } = e;
                if ((null == E ? void 0 : E.application) != null) o(null != E.application.bot, "bot is null"), n = (0, a.jsx)(c.default, {
                    size: u.AvatarSizes.SIZE_24,
                    user: E.application.bot,
                    className: f.verifiedIcon
                });
                else if (null != r) {
                    let e = (0, d.isThemeLight)(l) ? r.icon.lightSVG : r.icon.darkSVG;
                    n = (0, a.jsx)("img", {
                        className: f.verifiedIcon,
                        src: e,
                        alt: N.default.Messages.IMG_ALT_LOGO.format({
                            name: r.name
                        })
                    })
                }
                return (0, a.jsxs)("div", {
                    className: i(f.verifiedRow, (null == r ? void 0 : r.hasMetadata) === !0 || (null == E ? void 0 : E.role_connections_metadata) != null && (null == E ? void 0 : E.role_connections_metadata.length) > 0 ? f.verifiedRowWithMetadata : null),
                    children: [n, (0, a.jsx)(u.Text, {
                        variant: "text-md/medium",
                        className: f.verifiedText,
                        children: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_ACCOUNT.format({
                            platformName: null !== (s = null == r ? void 0 : r.name) && void 0 !== s ? s : null == E ? void 0 : null === (t = E.application) || void 0 === t ? void 0 : t.name
                        })
                    }), (0, a.jsx)(u.Button, {
                        "aria-label": N.default.Messages.REMOVE,
                        size: u.Button.Sizes.TINY,
                        look: u.Button.Looks.BLANK,
                        onClick: _,
                        disabled: I,
                        className: f.closeButton,
                        children: (0, a.jsx)(u.Tooltip, {
                            text: N.default.Messages.REMOVE,
                            children: e => (0, a.jsx)(T.default, {
                                className: f.closeIcon,
                                ...e
                            })
                        })
                    })]
                })
            }

            function A(e) {
                var t, s, l;
                let {
                    inputRef: i,
                    existingPendingConfiguration: r,
                    locked: o,
                    onConfigurationChange: d,
                    platform: c,
                    applicationId: E,
                    metadataField: _,
                    operator: T
                } = e, I = null !== (s = null == r ? void 0 : r.index) && void 0 !== s ? s : -1, N = null != T ? T : S.OperatorTypes.GREATER_THAN, g = Math.round(Number(null !== (l = null == r ? void 0 : null === (t = r.configuration) || void 0 === t ? void 0 : t.value) && void 0 !== l ? l : 0));
                N === S.OperatorTypes.GREATER_THAN ? g = Math.max(1, g + 1) : N === S.OperatorTypes.LESS_THAN && (g = Math.max(0, g - 1));
                let [A, L] = n.useState(g.toString());
                return n.useEffect(() => {
                    L(A)
                }, [A]), (0, a.jsx)(u.TextInput, {
                    inputRef: i,
                    type: "number",
                    className: f.numericalRuleInput,
                    size: u.TextInput.Sizes.MINI,
                    value: A,
                    onChange: e => {
                        if (null != r) {
                            if ("" !== e) {
                                var t;
                                let s = Math.round(Number(e));
                                N === S.OperatorTypes.GREATER_THAN ? s = Math.max(0, s - 1) : N === S.OperatorTypes.LESS_THAN && (s = Math.max(1, s + 1)), d({
                                    connectionType: null !== (t = null == c ? void 0 : c.type) && void 0 !== t ? t : S.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE,
                                    applicationId: E,
                                    connectionMetadataField: _,
                                    operator: N,
                                    value: s.toString()
                                }, I)
                            }
                            L(e)
                        }
                    },
                    disabled: o
                }, _)
            }

            function L(e) {
                let {
                    titleText: t,
                    fieldText: s,
                    metadataField: n,
                    existingPendingConfiguration: l,
                    platform: i,
                    applicationId: r,
                    onConfigurationChange: o,
                    locked: d
                } = e;
                return (0, a.jsxs)("div", {
                    className: f.ruleContainer,
                    children: [(0, a.jsxs)("div", {
                        children: [(0, a.jsx)(u.Text, {
                            variant: "text-md/bold",
                            className: f.ruleItemHeader,
                            children: t
                        }), (0, a.jsx)("div", {
                            className: f.numericalRuleSubItemContainer,
                            children: (0, a.jsx)(u.Text, {
                                variant: "text-md/normal",
                                className: f.numericalRuleSubText,
                                children: s
                            })
                        })]
                    }), (0, a.jsx)(u.Switch, {
                        className: f.ruleItemSwitch,
                        checked: (null == l ? void 0 : l.configuration.value) === "1",
                        onChange: e => {
                            var t, s;
                            let a = null;
                            e && (a = {
                                connectionType: null !== (t = null == i ? void 0 : i.type) && void 0 !== t ? t : S.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE,
                                applicationId: r,
                                connectionMetadataField: n,
                                operator: S.OperatorTypes.EQUAL,
                                value: "1"
                            }), o(a, null !== (s = null == l ? void 0 : l.index) && void 0 !== s ? s : -1)
                        },
                        disabled: d
                    })]
                }, n)
            }

            function m(e) {
                let {
                    titleText: t,
                    fieldText: s,
                    fieldTextHook: l,
                    metadataField: i,
                    existingPendingConfiguration: r,
                    platform: o,
                    applicationId: d,
                    onConfigurationChange: c,
                    locked: E,
                    operator: _
                } = e, T = n.createRef(), I = (null == r ? void 0 : r.configuration) != null, N = (0, a.jsx)(A, {
                    inputRef: T,
                    metadataField: i,
                    existingPendingConfiguration: r,
                    locked: E || !I,
                    onConfigurationChange: c,
                    platform: o,
                    operator: _,
                    applicationId: d
                }, i), g = null != l ? l.format({
                    metadataHook: () => N
                }) : (0, a.jsxs)(a.Fragment, {
                    children: [N, (0, a.jsx)("span", {
                        className: f.fieldText,
                        children: s
                    })]
                });
                return (0, a.jsxs)("div", {
                    className: f.ruleContainer,
                    children: [(0, a.jsxs)("div", {
                        className: f.ruleContainerLabel,
                        children: [(0, a.jsx)(u.Text, {
                            variant: "text-md/bold",
                            className: f.ruleItemHeader,
                            children: t
                        }), (0, a.jsx)("div", {
                            className: f.numericalRuleSubItemContainer,
                            children: (0, a.jsx)(u.Text, {
                                variant: "text-md/normal",
                                className: f.numericalRuleSubText,
                                children: g
                            })
                        })]
                    }), (0, a.jsx)(u.Switch, {
                        className: f.ruleItemSwitch,
                        checked: I,
                        onChange: e => {
                            var t, s, a;
                            let n = null;
                            if (e) {
                                let e = null != _ ? _ : S.OperatorTypes.GREATER_THAN,
                                    a = Math.round(Number(null === (t = T.current) || void 0 === t ? void 0 : t.value));
                                e === S.OperatorTypes.GREATER_THAN ? a = Math.max(0, a - 1) : e === S.OperatorTypes.LESS_THAN && (a = Math.max(1, a + 1)), n = {
                                    connectionType: null !== (s = null == o ? void 0 : o.type) && void 0 !== s ? s : S.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE,
                                    applicationId: d,
                                    connectionMetadataField: i,
                                    operator: e,
                                    value: a.toString()
                                }
                            }
                            c(n, null !== (a = null == r ? void 0 : r.index) && void 0 !== a ? a : -1)
                        },
                        disabled: E
                    })]
                }, i)
            }

            function C(e) {
                let {
                    configMetadataMap: t,
                    onConfigurationChange: s,
                    locked: n
                } = e, l = _.default.get(I.PlatformTypes.STEAM);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(m, {
                        titleText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
                        metadataField: S.MetadataFields.CREATED_AT,
                        existingPendingConfiguration: t.get(S.MetadataFields.CREATED_AT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_STEAM_GAMES,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_GAMES,
                        metadataField: S.MetadataFields.STEAM_GAME_COUNT,
                        existingPendingConfiguration: t.get(S.MetadataFields.STEAM_GAME_COUNT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ITEMS.format({
                            gameName: N.default.Messages.CONNECTIONS_STEAM_DOTA2
                        }),
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_DOTA2,
                        metadataField: S.MetadataFields.STEAM_ITEM_COUNT_DOTA2,
                        existingPendingConfiguration: t.get(S.MetadataFields.STEAM_ITEM_COUNT_DOTA2),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ITEMS.format({
                            gameName: N.default.Messages.CONNECTIONS_STEAM_TF2
                        }),
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_TF2,
                        metadataField: S.MetadataFields.STEAM_ITEM_COUNT_TF2,
                        existingPendingConfiguration: t.get(S.MetadataFields.STEAM_ITEM_COUNT_TF2),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    })]
                })
            }

            function O(e) {
                let {
                    configMetadataMap: t,
                    onConfigurationChange: s,
                    locked: n
                } = e, l = _.default.get(I.PlatformTypes.TWITTER);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(m, {
                        titleText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
                        metadataField: S.MetadataFields.CREATED_AT,
                        existingPendingConfiguration: t.get(S.MetadataFields.CREATED_AT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_TWITTER_FOLLOWERS,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_FOLLOWERS,
                        metadataField: S.MetadataFields.TWITTER_FOLLOWERS_COUNT,
                        existingPendingConfiguration: t.get(S.MetadataFields.TWITTER_FOLLOWERS_COUNT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_TWITTER_STATUSES,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_TWEETS,
                        metadataField: S.MetadataFields.TWITTER_STATUSES_COUNT,
                        existingPendingConfiguration: t.get(S.MetadataFields.TWITTER_STATUSES_COUNT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(L, {
                        titleText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_VERIFIED,
                        fieldText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_VERIFIED,
                        metadataField: S.MetadataFields.TWITTER_VERIFIED,
                        existingPendingConfiguration: t.get(S.MetadataFields.TWITTER_VERIFIED),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    })]
                })
            }

            function h(e) {
                let {
                    configMetadataMap: t,
                    onConfigurationChange: s,
                    locked: n
                } = e, l = _.default.get(I.PlatformTypes.REDDIT);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(m, {
                        titleText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
                        metadataField: S.MetadataFields.CREATED_AT,
                        existingPendingConfiguration: t.get(S.MetadataFields.CREATED_AT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_REDDIT_KARMA,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_KARMA,
                        metadataField: S.MetadataFields.REDDIT_TOTAL_KARMA,
                        existingPendingConfiguration: t.get(S.MetadataFields.REDDIT_TOTAL_KARMA),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(L, {
                        titleText: N.default.Messages.CONNECTIONS_REDDIT_MOD,
                        fieldText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_MOD,
                        metadataField: S.MetadataFields.REDDIT_MOD,
                        existingPendingConfiguration: t.get(S.MetadataFields.REDDIT_MOD),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(L, {
                        titleText: N.default.Messages.CONNECTIONS_REDDIT_GOLD,
                        fieldText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_GOLD,
                        metadataField: S.MetadataFields.REDDIT_GOLD,
                        existingPendingConfiguration: t.get(S.MetadataFields.REDDIT_GOLD),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    })]
                })
            }

            function R(e) {
                let {
                    configMetadataMap: t,
                    onConfigurationChange: s,
                    locked: n
                } = e, l = _.default.get(I.PlatformTypes.PAYPAL);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(m, {
                        titleText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
                        metadataField: S.MetadataFields.CREATED_AT,
                        existingPendingConfiguration: t.get(S.MetadataFields.CREATED_AT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(L, {
                        titleText: N.default.Messages.CONNECTIONS_PAYPAL_VERIFIED,
                        fieldText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_PAYPAL_VERIFIED_BANK_ACCOUNT,
                        metadataField: S.MetadataFields.PAYPAL_VERIFIED,
                        existingPendingConfiguration: t.get(S.MetadataFields.PAYPAL_VERIFIED),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    })]
                })
            }

            function D(e) {
                let {
                    configMetadataMap: t,
                    onConfigurationChange: s,
                    locked: n
                } = e, l = _.default.get(I.PlatformTypes.EBAY);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(m, {
                        titleText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
                        metadataField: S.MetadataFields.CREATED_AT,
                        existingPendingConfiguration: t.get(S.MetadataFields.CREATED_AT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_EBAY_POSITIVE_FEEDBACK_PERCENTAGE,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_POSITIVE_FEEDBACK_PERCENTAGE,
                        metadataField: S.MetadataFields.EBAY_POSITIVE_FEEDBACK_PERCENTAGE,
                        existingPendingConfiguration: t.get(S.MetadataFields.EBAY_POSITIVE_FEEDBACK_PERCENTAGE),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_UNIQUE_POSITIVE_FEEDBACK_COUNT,
                        metadataField: S.MetadataFields.EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT,
                        existingPendingConfiguration: t.get(S.MetadataFields.EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_MOST_UNIQUE_NEGATIVE_FEEDBACK_COUNT,
                        metadataField: S.MetadataFields.EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT,
                        existingPendingConfiguration: t.get(S.MetadataFields.EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n,
                        operator: S.OperatorTypes.LESS_THAN
                    }), (0, a.jsx)(L, {
                        titleText: N.default.Messages.CONNECTIONS_EBAY_TOP_RATED_SELLER,
                        fieldText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_TOP_RATED_SELLER,
                        metadataField: S.MetadataFields.EBAY_TOP_RATED_SELLER,
                        existingPendingConfiguration: t.get(S.MetadataFields.EBAY_TOP_RATED_SELLER),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    })]
                })
            }

            function M(e) {
                let {
                    configMetadataMap: t,
                    onConfigurationChange: s,
                    locked: n
                } = e, l = _.default.get(I.PlatformTypes.TIKTOK);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(L, {
                        titleText: N.default.Messages.CONNECTIONS_TIKTOK_VERIFIED,
                        fieldText: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_VERIFIED,
                        metadataField: S.MetadataFields.TIKTOK_VERIFIED,
                        existingPendingConfiguration: t.get(S.MetadataFields.TIKTOK_VERIFIED),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_TIKTOK_FOLLOWERS,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_FOLLOWERS,
                        metadataField: S.MetadataFields.TIKTOK_FOLLOWER_COUNT,
                        existingPendingConfiguration: t.get(S.MetadataFields.TIKTOK_FOLLOWER_COUNT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_TIKTOK_FOLLOWING,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_FOLLOWING,
                        metadataField: S.MetadataFields.TIKTOK_FOLLOWING_COUNT,
                        existingPendingConfiguration: t.get(S.MetadataFields.TIKTOK_FOLLOWING_COUNT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    }), (0, a.jsx)(m, {
                        titleText: N.default.Messages.CONNECTIONS_TIKTOK_LIKES,
                        fieldTextHook: N.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_LIKES,
                        metadataField: S.MetadataFields.TIKTOK_LIKES_COUNT,
                        existingPendingConfiguration: t.get(S.MetadataFields.TIKTOK_LIKES_COUNT),
                        platform: l,
                        onConfigurationChange: s,
                        locked: n
                    })]
                })
            }

            function G(e) {
                let {
                    configMetadataMap: t,
                    onConfigurationChange: s,
                    locked: n,
                    integration: l
                } = e;
                if (null == l || null == l.role_connections_metadata) return null;
                let i = l.role_connections_metadata.map(e => {
                    var i, r;
                    let o;
                    switch (e.type) {
                        case S.MetadataItemTypes.INTEGER_LESS_THAN_EQUAL:
                        case S.MetadataItemTypes.DATETIME_LESS_THAN_EQUAL:
                            o = S.OperatorTypes.LESS_THAN;
                            break;
                        case S.MetadataItemTypes.INTEGER_GREATER_THAN_EQUAL:
                        case S.MetadataItemTypes.DATETIME_GREATER_THAN_EQUAL:
                            o = S.OperatorTypes.GREATER_THAN;
                            break;
                        case S.MetadataItemTypes.INTEGER_EQUAL:
                        case S.MetadataItemTypes.BOOLEAN_EQUAL:
                            o = S.OperatorTypes.EQUAL;
                            break;
                        case S.MetadataItemTypes.INTEGER_NOT_EQUAL:
                        case S.MetadataItemTypes.BOOLEAN_NOT_EQUAL:
                            o = S.OperatorTypes.NOT_EQUAL;
                            break;
                        default:
                            return null
                    }
                    switch (e.type) {
                        case S.MetadataItemTypes.INTEGER_LESS_THAN_EQUAL:
                        case S.MetadataItemTypes.INTEGER_GREATER_THAN_EQUAL:
                        case S.MetadataItemTypes.INTEGER_EQUAL:
                        case S.MetadataItemTypes.INTEGER_NOT_EQUAL:
                        case S.MetadataItemTypes.DATETIME_LESS_THAN_EQUAL:
                        case S.MetadataItemTypes.DATETIME_GREATER_THAN_EQUAL:
                            return (0, a.jsx)(m, {
                                titleText: e.name,
                                fieldText: e.description,
                                metadataField: e.key,
                                existingPendingConfiguration: t.get(e.key),
                                platform: null,
                                onConfigurationChange: s,
                                locked: n,
                                operator: o,
                                applicationId: null === (i = l.application) || void 0 === i ? void 0 : i.id
                            }, e.key);
                        case S.MetadataItemTypes.BOOLEAN_EQUAL:
                        case S.MetadataItemTypes.BOOLEAN_NOT_EQUAL:
                            return (0, a.jsx)(L, {
                                titleText: e.name,
                                fieldText: e.description,
                                metadataField: e.key,
                                existingPendingConfiguration: t.get(e.key),
                                platform: null,
                                onConfigurationChange: s,
                                locked: n,
                                operator: o,
                                applicationId: null === (r = l.application) || void 0 === r ? void 0 : r.id
                            }, e.key)
                    }
                });
                return (0, a.jsx)(a.Fragment, {
                    children: i
                })
            }

            function x(e) {
                let t, {
                        configurationItems: s,
                        onConfigurationChange: n,
                        locked: l,
                        integrations: i
                    } = e,
                    r = (0, E.default)();
                if (s.length < 1) return null;
                let o = s[0].configuration.applicationId,
                    d = null != o ? null == i ? void 0 : i.find(e => {
                        var t;
                        return (null === (t = e.application) || void 0 === t ? void 0 : t.id) === o
                    }) : void 0;
                if (null != o && null == d) return null;
                let u = null;
                try {
                    u = _.default.get(s[0].configuration.connectionType)
                } catch (e) {}
                let c = new Map;
                s.forEach(e => {
                    null != e.configuration.connectionMetadataField ? c.set(e.configuration.connectionMetadataField, e) : null == e.configuration.value && null == e.configuration.operator && null == e.configuration.connectionMetadataField && (t = e)
                });
                let T = {
                        configMetadataMap: c,
                        onConfigurationChange: n,
                        locked: l
                    },
                    S = null;
                switch (null == u ? void 0 : u.type) {
                    case I.PlatformTypes.STEAM:
                        S = (0, a.jsx)(C, {
                            ...T
                        });
                        break;
                    case I.PlatformTypes.TWITTER:
                        S = (0, a.jsx)(O, {
                            ...T
                        });
                        break;
                    case I.PlatformTypes.REDDIT:
                        S = (0, a.jsx)(h, {
                            ...T
                        });
                        break;
                    case I.PlatformTypes.PAYPAL:
                        S = (0, a.jsx)(R, {
                            ...T
                        });
                        break;
                    case I.PlatformTypes.EBAY:
                        S = (0, a.jsx)(D, {
                            ...T
                        });
                        break;
                    case I.PlatformTypes.TIKTOK:
                        S = (0, a.jsx)(M, {
                            ...T
                        });
                        break;
                    default:
                        S = (0, a.jsx)(G, {
                            ...T,
                            integration: d
                        })
                }
                return (0, a.jsxs)("div", {
                    className: f.container,
                    children: [(0, a.jsx)(g, {
                        theme: r,
                        platform: u,
                        integration: d,
                        onRemove: () => n(null, t.index),
                        locked: l
                    }), S]
                })
            }
        },
        462752: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return U
                }
            }), s("222007"), s("424973"), s("834022");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s.n(r),
                d = s("446674"),
                u = s("77078"),
                c = s("913144"),
                E = s("535013"),
                _ = s("476765"),
                T = s("351825"),
                I = s("423487"),
                S = s("701909"),
                N = s("36402"),
                f = s("766419"),
                g = s("531493"),
                A = s("50693"),
                L = s("609542"),
                m = s("91816"),
                C = s("53948"),
                O = s("49111"),
                h = s("214509"),
                R = s("782340"),
                D = s("621525"),
                M = s("219638");
            let G = (0, _.uid)();

            function x(e, t) {
                return t !== E.ConnectionConfigurationRuleOperator.AND ? Object.values(o.groupBy(e, e => "".concat(e.connectionType, ":").concat(e.applicationId))) : 0 === e.length ? [] : [
                    [...e]
                ]
            }

            function p(e) {
                let {
                    handleAddVerificationClicked: t,
                    locked: s
                } = e;
                return (0, a.jsxs)("div", {
                    className: D.headerNoConfigContainer,
                    children: [(0, a.jsx)(u.Heading, {
                        className: D.headerHeading,
                        variant: "eyebrow",
                        children: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER
                    }), (0, a.jsx)(u.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        children: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_DESCRIPTION_LEARN_MORE.format({
                            helpdeskArticleUrl: S.default.getArticleURL(O.HelpdeskArticles.CONNECTION_DETAILS_ADMIN)
                        })
                    }), (0, a.jsx)(u.Button, {
                        disabled: s,
                        className: D.addVerificationButton,
                        size: u.Button.Sizes.MEDIUM,
                        look: u.Button.Looks.FILLED,
                        color: u.Button.Colors.BRAND_NEW,
                        onClick: t,
                        children: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_ADD_CONNECTION
                    })]
                })
            }

            function U(e) {
                let {
                    guild: t,
                    role: s,
                    locked: l,
                    setSelectedSection: r,
                    integrations: o
                } = e, {
                    headerHeight: _,
                    headerRef: U
                } = (0, A.default)(0), {
                    scrolledToTop: v,
                    handleScroll: j
                } = (0, m.useScrolledToTop)(), P = (0, d.useStateFromStores)([N.default], () => {
                    var e;
                    return null === (e = N.default.getRoleMemberCount(t.id)) || void 0 === e ? void 0 : e[s.id]
                }, [s.id, t.id]), y = (0, d.useStateFromStoresArray)([g.default], () => {
                    var e;
                    return null !== (e = g.default.getEditedRoleConnectionConfigurationsMap().get(s.id)) && void 0 !== e ? e : []
                }), b = y.length > 1 ? E.ConnectionConfigurationRuleOperator.OR : E.ConnectionConfigurationRuleOperator.AND, B = n.useMemo(() => b === E.ConnectionConfigurationRuleOperator.OR ? y.flat() : null != y && y.length > 0 ? y[0] : [], [b, y]), F = n.useMemo(() => new Set(B.map(e => e.connectionType)), [B]);

                function H(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0,
                        a = [...B];
                    a.push({
                        connectionType: e,
                        connectionMetadataField: void 0,
                        applicationId: t,
                        operator: void 0,
                        value: void 0
                    }), (0, f.updateRoleConnectionConfigurations)(s.id, x(a, b))
                }

                function V() {
                    c.default.dispatch({
                        type: "CONNECTIONS_GRID_MODAL_SHOW",
                        onComplete: e => H(e),
                        excludedPlatformTypes: F,
                        integrations: o,
                        onCompleteApplication: e => H(h.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE, e)
                    })
                }
                let k = null;
                if (0 === B.length) k = (0, a.jsx)(p, {
                    handleAddVerificationClicked: V,
                    locked: l
                });
                else if (B.length > 0) {
                    var w, Y;
                    let e = null;
                    B.length < 10 && (e = (0, a.jsx)(u.Button, {
                        className: i(D.addVerificationButton, D.addVerificationButtonAppend),
                        size: u.Button.Sizes.LARGE,
                        look: u.Button.Looks.BLANK,
                        color: u.Button.Colors.LINK,
                        onClick: V,
                        disabled: l,
                        children: (0, a.jsxs)("div", {
                            className: D.addVerificationButtonAppendTextContainer,
                            children: [(0, a.jsx)(T.default, {}), R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_ADD_CONNECTION]
                        })
                    })), k = (0, a.jsxs)(a.Fragment, {
                        children: [(w = () => (0, f.updateRoleConnectionConfigurations)(s.id, []), Y = l, (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsxs)("div", {
                                className: D.headerTitleContainer,
                                children: [(0, a.jsx)("div", {
                                    className: D.headerTitleTextContainer,
                                    children: (0, a.jsx)(u.Heading, {
                                        variant: "eyebrow",
                                        children: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER
                                    })
                                }), (0, a.jsx)(u.Button, {
                                    className: D.headerTitleButton,
                                    size: u.Button.Sizes.TINY,
                                    look: u.Button.Looks.LINK,
                                    color: u.Button.Colors.LINK,
                                    onClick: w,
                                    disabled: Y,
                                    children: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_CLEAR_ALL
                                })]
                            }), (0, a.jsx)(u.Text, {
                                variant: "text-sm/normal",
                                children: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_DESCRIPTION_LEARN_MORE.format({
                                    helpdeskArticleUrl: S.default.getArticleURL(O.HelpdeskArticles.CONNECTION_DETAILS_ADMIN)
                                })
                            })]
                        })), function(e, t, s, n, l) {
                            let i = x(n, E.ConnectionConfigurationRuleOperator.OR);
                            return (0, a.jsx)(u.FormItem, {
                                className: D.operatorContainer,
                                title: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_REQUIREMENTS,
                                children: (0, a.jsx)(u.RadioGroup, {
                                    options: [{
                                        name: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_OR_DESCRIPTION,
                                        value: E.ConnectionConfigurationRuleOperator.OR
                                    }, {
                                        name: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AND_DESCRIPTION,
                                        value: E.ConnectionConfigurationRuleOperator.AND
                                    }],
                                    onChange: e => l(n, e.value),
                                    value: s,
                                    disabled: e || i.length < 2,
                                    "aria-labelledby": G
                                })
                            })
                        }(l, s.id, b, B, (e, t) => (0, f.updateRoleConnectionConfigurations)(s.id, x(e, t))), function(e, t, s, n, l) {
                            function i(s, a) {
                                let n = [];
                                for (let t of e) n.push({
                                    ...t
                                });
                                if (null == s) {
                                    let t = e[a];
                                    null !== t && null == t.connectionMetadataField && null == t.operator && null == t.value ? n = n.filter(e => null == t.applicationId ? e.connectionType !== t.connectionType : e.connectionType !== t.connectionType && e.applicationId !== t.applicationId) : n.splice(a, 1)
                                } else - 1 === a ? n.push(s) : a >= 0 && (n[a] = s);
                                t(n)
                            }
                            let r = new Map;
                            for (let t of (e.forEach((e, t) => {
                                    let s = "".concat(e.connectionType, ":").concat(e.applicationId);
                                    if (r.has(s)) {
                                        let a = r.get(s);
                                        null == a || a.push({
                                            index: t,
                                            configuration: e
                                        })
                                    } else r.set(s, [{
                                        index: t,
                                        configuration: e
                                    }])
                                }), r.values())) {
                                if (t.some(e => {
                                        let {
                                            configuration: t
                                        } = e;
                                        return null == t.connectionMetadataField && null == t.operator && null == t.value
                                    })) continue;
                                let s = {
                                        ...t[0].configuration,
                                        connectionMetadataField: void 0,
                                        operator: void 0,
                                        value: void 0
                                    },
                                    a = e.push(s);
                                t.push({
                                    index: a - 1,
                                    configuration: s
                                })
                            }
                            return (0, a.jsx)("div", {
                                className: D.configurationsContainer,
                                children: Array.from(r.values()).map(e => (0, a.jsx)(L.default, {
                                    configurationItems: e,
                                    onConfigurationChange: i,
                                    locked: s,
                                    integrations: l
                                }, e[0].configuration.connectionType + ":" + e[0].index))
                            })
                        }(B, e => (0, f.updateRoleConnectionConfigurations)(s.id, x(e, b)), l, s.id, o), e]
                    })
                }
                return (0, a.jsx)(u.AdvancedScrollerAuto, {
                    className: D.scroller,
                    style: {
                        scrollPaddingTop: _
                    },
                    onScroll: j,
                    children: (0, a.jsxs)("div", {
                        className: M.contentWidth,
                        children: [(0, a.jsx)("div", {
                            className: i(M.header, M.stickyHeader, {
                                [M.stickyHeaderElevated]: !v
                            }),
                            ref: U,
                            children: (0, a.jsx)(m.default, {
                                guild: t,
                                role: s,
                                selectedSection: C.GuildSettingsRoleEditSections.VERIFICATIONS,
                                setSelectedSection: r
                            })
                        }), (null != P ? P : 0) > 0 ? (0, a.jsxs)("div", {
                            className: D.warningContainer,
                            children: [(0, a.jsx)(I.default, {
                                className: D.warningIcon
                            }), (0, a.jsx)(u.Text, {
                                variant: "text-sm/normal",
                                color: "text-normal",
                                children: R.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MEMBERS_WARNING
                            })]
                        }) : null, k]
                    })
                })
            }
        },
        505002: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return B
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s.n(r),
                d = s("446674"),
                u = s("77078"),
                c = s("269936"),
                E = s("405645"),
                _ = s("692038"),
                T = s("815297"),
                I = s("291655"),
                S = s("766274"),
                N = s("957255"),
                f = s("439932"),
                g = s("766419"),
                A = s("50693"),
                L = s("243863"),
                m = s("91816"),
                C = s("902750"),
                O = s("449804"),
                h = s("53948"),
                R = s("49111"),
                D = s("782340"),
                M = s("131706"),
                G = s("219638"),
                x = s("452593"),
                p = s("572701");
            let U = (0, c.makeLazy)({
                    createPromise: () => s.el("282585").then(s.bind(s, "282585")),
                    webpackId: "282585"
                }),
                v = o.debounce((e, t) => (0, g.updateRoleName)(e, t), 200);

            function j(e) {
                let {
                    role: t,
                    disabled: s
                } = e, [l, i] = n.useState(t.name);
                return n.useEffect(() => {
                    i(t.name)
                }, [t.name]), (0, a.jsx)(u.FormItem, {
                    title: D.default.Messages.FORM_LABEL_ROLE_NAME,
                    required: !0,
                    children: (0, a.jsx)(u.TextInput, {
                        type: "text",
                        value: l,
                        maxLength: R.ROLE_NAME_MAX_LENGTH,
                        onChange: function(e) {
                            i(e), v(t.id, e)
                        },
                        disabled: s
                    })
                })
            }

            function P(e) {
                let {
                    role: t,
                    disabled: s
                } = e;
                return (0, a.jsxs)(u.FormItem, {
                    className: M.colorPicker,
                    title: D.default.Messages.FORM_LABEL_ROLE_COLOR,
                    required: !0,
                    children: [(0, a.jsx)(u.FormText, {
                        className: M.colorDescription,
                        children: D.default.Messages.ROLE_COLOR_HELP
                    }), (0, a.jsx)(U, {
                        defaultColor: R.DEFAULT_ROLE_COLOR,
                        colors: R.ROLE_COLORS,
                        value: t.color,
                        disabled: s,
                        onChange: e => {
                            var s, a;
                            return s = t, a = e, void(s.color !== a && (a !== R.DEFAULT_ROLE_COLOR || 0 !== s.color) && (a === R.DEFAULT_ROLE_COLOR && (a = 0), (0, g.updateRoleColor)(s.id, a)))
                        },
                        customPickerPosition: "right"
                    }, t.id)]
                })
            }

            function y(e) {
                var t, l;
                let {
                    role: i,
                    guildId: r
                } = e;
                let o = (l = D.default.Messages.ROLE_SAMPLE_MESSAGE, n.useMemo(() => {
                        let e = (0, _.createMessageRecord)({
                            ...(0, T.default)({
                                channelId: "1337",
                                content: l
                            }),
                            state: R.MessageStates.SENT,
                            id: "31337"
                        });
                        return e.author = new S.default({
                            id: "313337",
                            username: D.default.Messages.WUMPUS,
                            discriminator: "0000",
                            bot: !1
                        }), e.author.getAvatarURL = () => s("457737"), e
                    }, [l])),
                    d = {
                        nick: o.author.username,
                        colorString: null !== (t = i.colorString) && void 0 !== t ? t : void 0
                    },
                    c = {
                        src: x,
                        name: i.name
                    },
                    N = {
                        src: p,
                        name: i.name
                    },
                    g = (0, E.useRoleIconForPreview)(r, i);
                return (0, a.jsx)(u.FocusBlock, {
                    children: (0, a.jsxs)("div", {
                        className: M.previewContainer,
                        "aria-hidden": !0,
                        children: [(0, a.jsx)("div", {
                            className: (0, f.getThemeClass)(R.ThemeTypes.LIGHT),
                            children: (0, a.jsx)("div", {
                                className: M.messageContainer,
                                children: (0, a.jsx)(I.default, {
                                    author: d,
                                    message: o,
                                    roleIcon: null != g ? g : N,
                                    isGroupStart: !0
                                })
                            })
                        }), (0, a.jsx)("div", {
                            className: (0, f.getThemeClass)(R.ThemeTypes.DARK),
                            children: (0, a.jsx)("div", {
                                className: M.messageContainer,
                                children: (0, a.jsx)(I.default, {
                                    author: d,
                                    message: o,
                                    roleIcon: null != g ? g : c,
                                    isGroupStart: !0
                                })
                            })
                        })]
                    })
                })
            }

            function b(e) {
                let {
                    role: t,
                    disabled: s
                } = e;
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(u.FormSwitch, {
                        disabled: s,
                        value: t.hoist,
                        onChange: e => (0, g.toggleRoleSettings)(t.id, e, t.mentionable),
                        hideBorder: !0,
                        children: D.default.Messages.FORM_LABEL_HOIST_DESCRIPTION
                    }), (0, a.jsx)(u.FormDivider, {
                        className: M.divider
                    }), (0, a.jsx)(u.FormSwitch, {
                        disabled: s,
                        value: t.mentionable,
                        onChange: e => (0, g.toggleRoleSettings)(t.id, t.hoist, e),
                        note: D.default.Messages.FORM_LABEL_MENTIONABLE_DESCRIPTION,
                        hideBorder: !0,
                        children: D.default.Messages.FORM_LABEL_MENTIONABLE.format()
                    })]
                })
            }

            function B(e) {
                let {
                    guild: t,
                    role: s,
                    locked: n,
                    setSelectedSection: l
                } = e, r = s.id === (null == t ? void 0 : t.id), o = n || r, c = (0, d.useStateFromStores)([N.default], () => N.default.canImpersonateRole(t, s)), {
                    headerHeight: E,
                    headerRef: _
                } = (0, A.default)(0), {
                    scrolledToTop: T,
                    handleScroll: I
                } = (0, m.useScrolledToTop)();
                return (0, a.jsx)(u.AdvancedScrollerAuto, {
                    className: M.scroller,
                    style: {
                        scrollPaddingTop: E
                    },
                    onScroll: I,
                    children: (0, a.jsxs)("div", {
                        className: G.contentWidth,
                        children: [(0, a.jsx)("div", {
                            className: i(G.header, G.stickyHeader, {
                                [G.stickyHeaderElevated]: !T
                            }),
                            ref: _,
                            children: (0, a.jsx)(m.default, {
                                guild: t,
                                role: s,
                                selectedSection: h.GuildSettingsRoleEditSections.DISPLAY,
                                setSelectedSection: l
                            })
                        }), (0, a.jsx)(j, {
                            role: s,
                            disabled: o
                        }), (0, a.jsx)("div", {
                            className: M.noticeContainer,
                            children: (0, a.jsx)(O.default, {
                                role: s
                            })
                        }), (0, a.jsx)(u.FormDivider, {
                            className: M.divider
                        }), (0, a.jsx)(P, {
                            role: s,
                            disabled: o
                        }), (0, a.jsx)(L.default, {
                            guild: t,
                            disabled: o,
                            role: s
                        }), (0, a.jsx)(y, {
                            role: s,
                            guildId: t.id
                        }), (0, a.jsx)(u.FormDivider, {
                            className: M.divider
                        }), (0, a.jsx)(b, {
                            role: s,
                            disabled: o
                        }), c ? (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(u.FormDivider, {
                                className: M.divider
                            }), (0, a.jsx)(C.ImpersonateRoleDescription, {
                                guildId: t.id,
                                role: s
                            })]
                        }) : null]
                    })
                })
            }
        },
        91816: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useScrolledToTop: function() {
                    return S
                },
                default: function() {
                    return N
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("272030"),
                o = s("726527"),
                d = s("555158"),
                u = s("433487"),
                c = s("36402"),
                E = s("364222"),
                _ = s("53948"),
                T = s("782340"),
                I = s("925041");

            function S() {
                let [e, t] = n.useState(!0);
                return {
                    scrolledToTop: e,
                    handleScroll: function(e) {
                        t(0 === e.currentTarget.scrollTop)
                    }
                }
            }

            function N(e) {
                let {
                    guild: t,
                    role: S,
                    selectedSection: N,
                    setSelectedSection: f
                } = e, g = n.useCallback(e => {
                    f(e)
                }, [f]), A = (0, l.useStateFromStores)([c.default], () => {
                    var e;
                    return null === (e = c.default.getRoleMemberCount(t.id)) || void 0 === e ? void 0 : e[S.id]
                }, [S.id, t.id]), L = t.id === S.id, m = (0, E.default)(S);
                n.useEffect(() => {
                    L && f(_.GuildSettingsRoleEditSections.PERMISSIONS)
                }, [L, f]);
                let C = (0, o.useHasGuildRoleItems)(t, S);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: I.titleContainer,
                        children: [(0, a.jsx)(i.Text, {
                            className: I.titleText,
                            color: "header-primary",
                            variant: "text-md/semibold",
                            children: T.default.Messages.ROLE_EDIT_TITLE_WITH_NAME.format({
                                roleName: S.name
                            })
                        }), C ? (0, a.jsx)(i.Clickable, {
                            className: I.menu,
                            onClick: function(e) {
                                (0, r.openContextMenuLazy)(e, async () => {
                                    let {
                                        default: e
                                    } = await s.el("726527").then(s.bind(s, "726527"));
                                    return s => (0, a.jsx)(e, {
                                        ...s,
                                        guild: t,
                                        role: S
                                    })
                                })
                            },
                            "aria-label": T.default.Messages.MORE_OPTIONS,
                            children: (0, a.jsx)(u.default, {})
                        }) : null]
                    }), null != m ? (0, a.jsx)(d.default, {
                        messageType: d.HelpMessageTypes.WARNING,
                        children: m
                    }) : null, (0, a.jsxs)(i.TabBar, {
                        className: I.tabBar,
                        "aria-label": T.default.Messages.OPTIONS,
                        selectedItem: N,
                        type: "top",
                        look: "brand",
                        onItemSelect: g,
                        children: [(0, a.jsx)(i.TabBar.Item, {
                            className: I.tabBarItem,
                            id: _.GuildSettingsRoleEditSections.DISPLAY,
                            disabled: L,
                            children: T.default.Messages.ROLE_EDIT_TAB_DISPLAY
                        }), (0, a.jsx)(i.TabBar.Item, {
                            className: I.tabBarItem,
                            id: _.GuildSettingsRoleEditSections.PERMISSIONS,
                            children: T.default.Messages.ROLE_EDIT_TAB_PERMISSIONS
                        }), (0, a.jsx)(i.TabBar.Item, {
                            className: I.tabBarItem,
                            id: _.GuildSettingsRoleEditSections.VERIFICATIONS,
                            disabled: L,
                            children: T.default.Messages.ROLE_EDIT_TAB_VERIFICATION
                        }), (0, a.jsx)(i.TabBar.Item, {
                            className: I.tabBarItem,
                            id: _.GuildSettingsRoleEditSections.MEMBERS,
                            disabled: L,
                            children: L ? T.default.Messages.ROLE_EDIT_TAB_MANAGE_MEMBERS : T.default.Messages.ROLE_EDIT_TAB_MEMBERS_WITH_LIST.format({
                                numMembers: String(A)
                            })
                        })]
                    })]
                })
            }
        },
        893448: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return b
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("272030"),
                u = s("599417"),
                c = s("750560"),
                E = s("506885"),
                _ = s("981601"),
                T = s("697218"),
                I = s("555158"),
                S = s("810567"),
                N = s("381546"),
                f = s("155207"),
                g = s("599110"),
                A = s("36402"),
                L = s("592407"),
                m = s("531493"),
                C = s("986654"),
                O = s("50693"),
                h = s("91816"),
                R = s("120318"),
                D = s("53948"),
                M = s("49111"),
                G = s("782340"),
                x = s("681453"),
                p = s("219638");
            async function U(e, t, s) {
                let n = e.roles.filter(e => e !== s);
                try {
                    await L.default.updateMemberRoles(t, e.id, n, [], [s])
                } catch (t) {
                    let e = new u.default(t);
                    (0, o.openModal)(t => (0, a.jsx)(o.ConfirmModal, {
                        ...t,
                        header: G.default.Messages.ERROR_GENERIC_TITLE,
                        confirmText: G.default.Messages.OKAY,
                        confirmButtonColor: o.Button.Colors.BRAND,
                        children: (0, a.jsx)(o.Text, {
                            color: "text-normal",
                            variant: "text-md/normal",
                            children: e.getAnyErrorMessage()
                        })
                    }))
                }
            }

            function v(e) {
                let {
                    member: t,
                    guildId: l,
                    roleId: r,
                    locked: u
                } = e, I = n.useMemo(() => ({
                    [l]: [t.id]
                }), [l, t.id]);

                function S(e) {
                    if (e.stopPropagation(), !u) {
                        if (e.shiftKey) {
                            U(t, l, r);
                            return
                        }! function(e, t, s) {
                            let n = m.default.getRole(s);
                            (0, o.openModal)(l => (0, a.jsxs)(o.ConfirmModal, {
                                ...l,
                                header: G.default.Messages.ROLE_REMOVE_MEMBER_CONFIRM_TITLE,
                                confirmText: G.default.Messages.REMOVE,
                                cancelText: G.default.Messages.CANCEL,
                                onConfirm: () => U(e, t, s),
                                children: [(0, a.jsx)(o.Text, {
                                    color: "text-normal",
                                    variant: "text-md/normal",
                                    children: G.default.Messages.ROLE_REMOVE_MEMBER_CONFIRM_BODY.format({
                                        username: e.name,
                                        roleName: null == n ? void 0 : n.name
                                    })
                                }), (0, a.jsx)(o.Text, {
                                    className: x.removeTip,
                                    color: "text-muted",
                                    variant: "text-md/normal",
                                    children: G.default.Messages.ROLE_REMOVE_MEMBER_CONFIRM_TIP
                                })]
                            }))
                        }(t, l, r)
                    }
                }

                function f(e) {
                    let n = T.default.getUser(t.id);
                    null != n && (0, d.openContextMenuLazy)(e, async () => {
                        let {
                            default: e
                        } = await s.el("539593").then(s.bind(s, "539593"));
                        return t => (0, a.jsx)(e, {
                            ...t,
                            user: n,
                            guildId: l,
                            showChatItems: !1
                        })
                    })
                }
                return (0, c.useSubscribeGuildMembers)(I), (0, a.jsx)("div", {
                    className: p.contentWidth,
                    children: (0, a.jsx)(o.Popout, {
                        renderPopout: e => (0, a.jsx)(_.default, {
                            guildId: l,
                            userId: t.id,
                            ...e
                        }),
                        position: "left",
                        preload: () => (0, E.default)(t.id, t.avatarURL, {
                            guildId: l
                        }),
                        children: e => (0, a.jsxs)(o.Clickable, {
                            ...e,
                            className: x.memberRow,
                            onContextMenu: f,
                            children: [(0, a.jsx)(R.default, {
                                className: x.memberDetails,
                                avatarURL: t.avatarURL,
                                name: t.name,
                                bot: t.bot,
                                verifiedBot: t.verifiedBot,
                                userTag: t.userTag
                            }), (0, a.jsx)("div", {
                                className: x.removeButtonContainer,
                                children: (0, a.jsx)(o.Tooltip, {
                                    text: u ? G.default.Messages.ROLE_REMOVE_MEMBER_MANAGED : G.default.Messages.ROLE_REMOVE_MEMBER_CONFIRM_TITLE,
                                    position: "top",
                                    children: e => (0, a.jsx)(o.Clickable, {
                                        ...e,
                                        className: i(x.removeButton, {
                                            [x.removeButtonDisabled]: u
                                        }),
                                        onClick: S,
                                        children: (0, a.jsx)(N.default, {
                                            width: 16,
                                            height: 16
                                        })
                                    })
                                })
                            })]
                        })
                    })
                })
            }

            function j(e) {
                let {
                    handleAddClick: t,
                    locked: s
                } = e;
                return (0, a.jsx)("div", {
                    className: p.contentWidth,
                    children: (0, a.jsxs)("div", {
                        className: i(x.memberRow, x.emptyRowContainer),
                        children: [(0, a.jsx)(f.default, {}), (0, a.jsx)(o.Text, {
                            className: x.emptyRowText,
                            variant: "text-sm/semibold",
                            color: "text-muted",
                            children: G.default.Messages.ROLE_EDIT_MEMBERS_NO_SEARCH_RESULTS.format({
                                addMembersHook: function(e, n) {
                                    return s ? null : (0, a.jsx)(o.Anchor, {
                                        onClick: t,
                                        children: e
                                    }, n)
                                }
                            })
                        })]
                    })
                })
            }

            function P(e) {
                let {
                    guildId: t,
                    roleId: s,
                    query: l,
                    headerHeight: i,
                    locked: r,
                    onScroll: d,
                    roleMembers: u,
                    handleAddClick: c
                } = e, E = n.useMemo(() => l.trim().toLowerCase(), [l]);
                (0, C.useQueryGuildMembers)(t, E);
                let _ = n.useMemo(() => u.filter(e => (0, C.filterFullMembersByQuery)(E, e)), [u, E]),
                    T = n.useMemo(() => _.sort((e, t) => e.name.localeCompare(t.name)), [_]);
                return (0, a.jsx)(o.ListAuto, {
                    className: x.list,
                    sections: [Math.max(_.length, 1)],
                    sectionHeight: i,
                    renderSection: () => (0, a.jsx)("div", {
                        style: {
                            height: i
                        }
                    }, "section"),
                    style: {
                        scrollPaddingTop: i
                    },
                    rowHeight: 40,
                    renderRow: function(e) {
                        let {
                            row: n
                        } = e;
                        if (0 === T.length) return (0, a.jsx)(j, {
                            handleAddClick: c,
                            locked: r
                        }, "empty");
                        let l = T[n];
                        return (0, a.jsx)(v, {
                            member: l,
                            guildId: t,
                            roleId: s,
                            locked: r
                        }, l.id)
                    },
                    onScroll: d
                })
            }

            function y(e) {
                let {
                    query: t,
                    setQuery: s,
                    locked: n,
                    handleAddClick: l
                } = e;
                return (0, a.jsxs)("div", {
                    className: x.searchContainer,
                    children: [(0, a.jsx)(S.default, {
                        size: S.default.Sizes.MEDIUM,
                        query: t,
                        onChange: s,
                        onClear: () => s(""),
                        placeholder: G.default.Messages.SEARCH_MEMBERS,
                        "aria-label": G.default.Messages.SEARCH_MEMBERS
                    }), (0, a.jsx)(o.Button, {
                        className: x.addButton,
                        size: o.Button.Sizes.SMALL,
                        onClick: l,
                        disabled: n,
                        children: G.default.Messages.ROLE_ADD_MEMBERS_BUTTON
                    })]
                })
            }

            function b(e) {
                let {
                    guild: t,
                    role: l,
                    locked: d,
                    setSelectedSection: u
                } = e, [c, E] = n.useState(""), {
                    headerHeight: _,
                    headerRef: T
                } = (0, O.default)(0), {
                    scrolledToTop: S,
                    handleScroll: N
                } = (0, h.useScrolledToTop)(), f = l.managed || d, L = (0, C.useGuildRoleMembers)(t.id, l.id), m = (0, r.useStateFromStores)([A.default], () => {
                    var e, s;
                    return null !== (s = null === (e = A.default.getRoleMemberCount(t.id)) || void 0 === e ? void 0 : e[l.id]) && void 0 !== s ? s : 0
                }), R = m > L.length, U = () => {
                    g.default.track(M.AnalyticEvents.OPEN_MODAL, {
                        type: "Add Role Members",
                        location_page: "Role Settings",
                        location_section: "Members"
                    }), (0, o.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("744581").then(s.bind(s, "744581"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            roleId: l.id,
                            guildId: t.id
                        })
                    })
                };
                return (0, a.jsxs)("div", {
                    className: x.container,
                    children: [(0, a.jsx)("div", {
                        className: x.headerContainer,
                        ref: T,
                        children: (0, a.jsx)("div", {
                            className: p.contentWidth,
                            children: (0, a.jsxs)("div", {
                                className: i(p.header, {
                                    [p.stickyHeaderElevated]: !S
                                }),
                                children: [(0, a.jsx)(h.default, {
                                    guild: t,
                                    role: l,
                                    selectedSection: D.GuildSettingsRoleEditSections.MEMBERS,
                                    setSelectedSection: u
                                }), (0, a.jsx)(y, {
                                    query: c,
                                    setQuery: E,
                                    locked: f,
                                    handleAddClick: U
                                }), R ? (0, a.jsx)(I.default, {
                                    className: x.searchWarning,
                                    messageType: I.HelpMessageTypes.INFO,
                                    children: G.default.Messages.ROLE_EDIT_MEMBERS_MISSING
                                }) : null]
                            })
                        })
                    }), (0, a.jsx)(P, {
                        headerHeight: _ + 8,
                        query: c,
                        guildId: t.id,
                        roleId: l.id,
                        locked: f,
                        onScroll: N,
                        roleMembers: L,
                        handleAddClick: U
                    })]
                })
            }
        },
        376252: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return G
                }
            }), s("70102"), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("316693"),
                o = s("446674"),
                d = s("77078"),
                u = s("900676"),
                c = s("957255"),
                E = s("697218"),
                _ = s("810567"),
                T = s("599110"),
                I = s("465305"),
                S = s("991170"),
                N = s("766419"),
                f = s("507453"),
                g = s("50693"),
                A = s("91816"),
                L = s("449804"),
                m = s("53948"),
                C = s("49111"),
                O = s("782340"),
                h = s("715273"),
                R = s("219638");

            function D(e) {
                let {
                    guild: t,
                    role: s,
                    locked: l
                } = e, i = (0, o.useStateFromStores)([E.default], () => E.default.getCurrentUser()), u = n.useMemo(() => S.default.computePermissions({
                    user: i,
                    context: t
                }), [i, t]), c = n.useMemo(() => ({
                    [s.id]: {
                        ...s,
                        permissions: S.default.NONE
                    }
                }), [s]), _ = n.useMemo(() => S.default.computePermissions({
                    user: i,
                    context: t,
                    roles: c
                }), [i, t, c]), T = !r.default.equals(u, _);
                return (0, a.jsx)("div", {
                    className: h.clearButtonWrapper,
                    children: (0, a.jsx)(d.Tooltip, {
                        text: T ? O.default.Messages.HELP_CLEAR_PERMISSIONS : null,
                        position: "top",
                        color: d.Tooltip.Colors.RED,
                        children: e => {
                            let {
                                onMouseEnter: t,
                                onMouseLeave: n
                            } = e;
                            return (0, a.jsx)(d.Button, {
                                className: h.clearButton,
                                size: d.Button.Sizes.TINY,
                                look: d.Button.Looks.LINK,
                                color: d.Button.Colors.LINK,
                                onClick: () => (0, N.clearRolePermissions)(s.id),
                                onMouseEnter: t,
                                onMouseLeave: n,
                                disabled: r.default.equals(s.permissions, S.default.NONE) || T || l,
                                children: O.default.Messages.ROLE_PERMISSIONS_CLEAR_PERMISSIONS
                            })
                        }
                    })
                })
            }

            function M(e) {
                let {
                    guild: t,
                    role: s,
                    specs: n,
                    locked: l
                } = e;
                if (0 === n.length) return (0, a.jsxs)("div", {
                    className: h.noResultsContainer,
                    children: [(0, a.jsx)(f.default, {
                        className: h.noResults
                    }), (0, a.jsx)(d.Text, {
                        variant: "text-sm/normal",
                        children: O.default.Messages.ROLE_PERMISSIONS_EMPTY_TEXT
                    })]
                });

                function i(e) {
                    return c.default.can(e, t) ? !c.default.can(e, t, null, {
                        [s.id]: {
                            ...s,
                            permissions: r.default.remove(s.permissions, e)
                        }
                    }) && O.default.Messages.HELP_SINGULAR_PERMISSION : O.default.Messages.HELP_MISSING_PERMISSION
                }
                return (0, a.jsxs)("div", {
                    className: h.permissionsWrapper,
                    children: [(0, a.jsx)(D, {
                        guild: t,
                        role: s,
                        locked: l
                    }), n.map((e, t) => (0, a.jsx)(u.default, {
                        className: h.permissionsForm,
                        spec: e,
                        permissions: s.permissions,
                        locked: l,
                        onChange: (e, t) => {
                            if ("string" == typeof t) throw Error("Unexpected string `allow`");
                            (0, N.updateRolePermissions)(s.id, e, t)
                        },
                        permissionRender: i
                    }, t))]
                })
            }

            function G(e) {
                let {
                    guild: t,
                    role: s,
                    locked: l,
                    setSelectedSection: r,
                    initialSearchQuery: o
                } = e, [u, c] = n.useState(null != o ? o : ""), E = n.useMemo(() => I.default.generateGuildPermissionSpec(t), [t]), S = E.map(e => ({
                    ...e,
                    permissions: e.permissions.filter(e => {
                        let t = u.trimStart().toLowerCase();
                        return e.title.toLowerCase().includes(t) || null != e.description && e.description.toString().toLowerCase().includes(t)
                    })
                })).filter(e => e.permissions.length > 0), {
                    headerHeight: N,
                    headerRef: f
                } = (0, g.default)(0), {
                    scrolledToTop: D,
                    handleScroll: G
                } = (0, A.useScrolledToTop)(), x = n.useRef(!1);
                return n.useEffect(() => {
                    !x.current && "" !== u.trimStart() && (T.default.track(C.AnalyticEvents.SEARCH_STARTED, {
                        search_type: "Permissions"
                    }), x.current = !0)
                }, [u]), (0, a.jsx)(d.AdvancedScrollerAuto, {
                    className: h.scroller,
                    style: {
                        scrollPaddingTop: N
                    },
                    onScroll: G,
                    children: (0, a.jsxs)("div", {
                        className: R.contentWidth,
                        children: [(0, a.jsxs)("div", {
                            className: i(R.header, R.stickyHeader, {
                                [R.stickyHeaderElevated]: !D
                            }),
                            ref: f,
                            children: [(0, a.jsx)(A.default, {
                                guild: t,
                                role: s,
                                selectedSection: m.GuildSettingsRoleEditSections.PERMISSIONS,
                                setSelectedSection: r
                            }), (0, a.jsx)("div", {
                                className: h.noticeContainer,
                                children: (0, a.jsx)(L.default, {
                                    role: s
                                })
                            }), (0, a.jsx)("div", {
                                className: h.searchContainer,
                                children: (0, a.jsx)(_.default, {
                                    size: _.default.Sizes.MEDIUM,
                                    query: u,
                                    onChange: c,
                                    onClear: () => c(""),
                                    placeholder: O.default.Messages.ROLE_PERMISSIONS_SEARCH_PLACEHOLDER,
                                    "aria-label": O.default.Messages.ROLE_PERMISSIONS_SEARCH_PLACEHOLDER
                                })
                            })]
                        }), (0, a.jsx)(M, {
                            guild: t,
                            role: s,
                            specs: S,
                            locked: l
                        })]
                    })
                })
            }
        },
        728955: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return G
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("476042"),
                o = s("509043"),
                d = s("446674"),
                u = s("77078"),
                c = s("272030"),
                E = s("851387"),
                _ = s("206230"),
                T = s("339023"),
                I = s("957255"),
                S = s("730988"),
                N = s("246053"),
                f = s("151185"),
                g = s("531493"),
                A = s("476324"),
                L = s("983521"),
                m = s("91816"),
                C = s("53948"),
                O = s("49111"),
                h = s("782340"),
                R = s("450057");
            let D = "DRAGGABLE_ROLE";

            function M(e) {
                var t, n;
                let l, {
                        guild: d,
                        role: E,
                        highestRole: _,
                        selectedItem: I,
                        onClick: S,
                        currentPosition: N,
                        onDragStart: f,
                        onDragReset: g,
                        onDragComplete: L,
                        roleStyle: m
                    } = e,
                    C = (0, A.useLockTooltip)(d, _, E),
                    h = (null == d ? void 0 : d.id) === E.id,
                    M = null == C && !h,
                    G = (null === (t = E.tags) || void 0 === t ? void 0 : t.guild_connections) !== void 0,
                    [, x] = (0, r.useDrag)({
                        type: D,
                        item: () => (f(E.id), {
                            id: E.id,
                            position: N
                        }),
                        canDrag: () => M,
                        end: (e, t) => {
                            let s = t.getDropResult();
                            if (null == s) {
                                g();
                                return
                            }
                            L(s.roleId)
                        }
                    }),
                    [{
                        dragSourcePosition: p
                    }, U] = (0, r.useDrop)({
                        accept: D,
                        canDrop: () => M,
                        collect: e => {
                            let t = e.getItem();
                            return null != t && e.isOver() && e.canDrop() ? {
                                dragSourcePosition: t.position
                            } : {
                                dragSourcePosition: null
                            }
                        },
                        drop: () => ({
                            roleId: E.id
                        })
                    }),
                    v = null !== (n = E.colorString) && void 0 !== n ? n : (0, o.int2hex)(O.DEFAULT_ROLE_COLOR);
                return l = G ? (0, a.jsx)(T.default, {
                    size: 12,
                    color: E.colorString,
                    className: R.verifiedRoleIcon
                }) : "dot" === m ? (0, a.jsx)(u.RoleDot, {
                    color: v,
                    background: !1,
                    tooltip: !1
                }) : (0, a.jsx)(u.RoleCircle, {
                    color: v
                }), (0, a.jsxs)(u.TabBar.Item, {
                    className: i(R.row, {
                        [R.dragBefore]: null !== p && N < p,
                        [R.dragAfter]: null !== p && N > p
                    }),
                    id: E.id,
                    selectedItem: I,
                    itemType: "side",
                    onClick: S,
                    onContextMenu: function(e) {
                        (0, c.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("726527").then(s.bind(s, "726527"));
                            return t => (0, a.jsx)(e, {
                                ...t,
                                role: E,
                                guild: d
                            })
                        })
                    },
                    "aria-label": E.name,
                    clickableRef: e => {
                        var t;
                        return x(U(null !== (t = null == e ? void 0 : e.ref) && void 0 !== t ? t : null))
                    },
                    children: [l, null != C ? (0, a.jsx)(A.default, {
                        className: R.lock,
                        tooltipText: C
                    }) : null, (0, a.jsx)(u.Text, {
                        variant: "text-sm/medium",
                        color: h ? "header-primary" : "interactive-active",
                        lineClamp: 1,
                        children: E.name
                    })]
                })
            }

            function G(e) {
                let {
                    guild: t,
                    currentRoleId: s,
                    setCurrentRoleId: l,
                    setSelectedSection: r
                } = e, o = (0, d.useStateFromStores)([g.default], () => g.default.roles), c = (0, d.useStateFromStores)([I.default], () => I.default.getHighestRole(t)), T = (0, d.useStateFromStores)([_.default], () => _.default.roleStyle), [A, O] = n.useState(o.length), {
                    scrolledToTop: D,
                    handleScroll: G
                } = (0, m.useScrolledToTop)(), {
                    handleDragStart: x,
                    handleDragReset: p,
                    handleDragComplete: U
                } = (0, L.default)(o), v = n.useRef(null), j = n.useCallback(e => {
                    var t, s;
                    let a = o.findIndex(t => t.id === e);
                    null === (s = v.current) || void 0 === s || null === (t = s.getScrollerNode()) || void 0 === t || t.scrollTo({
                        top: Math.max((a - 2) * 34, 0)
                    })
                }, [o]);
                n.useEffect(() => {
                    j(s)
                }, []), n.useEffect(() => {
                    o.length > A && j(s), o.length !== A && O(o.length)
                }, [o.length, A, O, j, s]);
                let P = () => {
                    E.default.createRole(t.id), r(C.GuildSettingsRoleEditSections.DISPLAY)
                };
                return (0, a.jsx)(S.default.Sidebar, {
                    className: R.sidebar,
                    children: (0, a.jsxs)("div", {
                        className: R.container,
                        children: [(0, a.jsxs)("div", {
                            className: i(R.titleContainer, {
                                [R.titleElevated]: !D
                            }),
                            children: [(0, a.jsxs)(u.Clickable, {
                                className: R.title,
                                onClick: () => l(null),
                                children: [(0, a.jsx)(N.default, {
                                    direction: N.default.Directions.LEFT
                                }), (0, a.jsx)(u.Text, {
                                    className: R.titleText,
                                    variant: "text-md/semibold",
                                    color: "none",
                                    children: h.default.Messages.BACK
                                })]
                            }), (0, a.jsx)(u.Tooltip, {
                                position: "top",
                                "aria-label": h.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_CREATE,
                                text: (0, a.jsx)(u.Text, {
                                    className: R.tooltip,
                                    variant: "text-sm/normal",
                                    children: h.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_CREATE
                                }),
                                children: e => (0, a.jsx)(u.Clickable, {
                                    className: R.addRole,
                                    ...e,
                                    onClick: P,
                                    children: (0, a.jsx)(f.default, {
                                        width: 20,
                                        height: 20
                                    })
                                })
                            })]
                        }), (0, a.jsx)(u.AdvancedScroller, {
                            className: R.list,
                            ref: v,
                            onScroll: G,
                            children: (0, a.jsx)(u.TabBar, {
                                selectedItem: s,
                                onItemSelect: e => l(e),
                                orientation: "vertical",
                                children: o.map((e, n) => (0, a.jsx)(M, {
                                    guild: t,
                                    role: e,
                                    highestRole: c,
                                    selectedItem: s,
                                    onClick: () => l(e.id),
                                    currentPosition: n,
                                    onDragStart: x,
                                    onDragReset: p,
                                    onDragComplete: U,
                                    roleStyle: T
                                }, e.id))
                            })
                        })]
                    })
                })
            }
        },
        902750: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ImpersonateRoleDescription: function() {
                    return E
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("479756"),
                i = s("507950"),
                r = s("246053"),
                o = s("592407"),
                d = s("49111"),
                u = s("782340"),
                c = s("686273");

            function E(e) {
                let {
                    guildId: t,
                    role: s
                } = e;
                return (0, a.jsx)(a.Fragment, {
                    children: (0, a.jsxs)(n.FormItem, {
                        title: u.default.Messages.VIEW_AS_ROLE,
                        className: c.container,
                        children: [(0, a.jsx)(n.Text, {
                            variant: "text-sm/normal",
                            children: u.default.Messages.VIEW_AS_ROLE_DESCRIPTION
                        }), (0, a.jsxs)(n.Button, {
                            className: c.button,
                            innerClassName: c.buttonInner,
                            size: n.Button.Sizes.SMALL,
                            color: n.Button.Colors.PRIMARY,
                            onClick: () => {
                                o.default.close(), (0, l.startImpersonating)(t, {
                                    type: i.ImpersonateType.ROLES,
                                    roles: {
                                        [s.id]: s
                                    },
                                    returnToSection: d.GuildSettingsSections.ROLES
                                })
                            },
                            children: [u.default.Messages.VIEW_AS_ROLE, (0, a.jsx)(r.default, {
                                width: 16,
                                height: 16,
                                direction: r.default.Directions.RIGHT,
                                className: c.arrowIcon
                            })]
                        })]
                    })
                })
            }
        },
        449804: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            }), s("702976");
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("423487"),
                i = s("568734"),
                r = s("385334"),
                o = s("49111"),
                d = s("782340"),
                u = s("539605"),
                c = e => {
                    let {
                        role: t
                    } = e;
                    return (0, i.hasFlag)(t.flags, o.RoleFlags.IN_PROMPT) ? (0, r.isRolePowerful)(t) ? (0, a.jsxs)("div", {
                        className: u.notice,
                        children: [(0, a.jsx)(l.default, {
                            className: u.noticeIconPowerful
                        }), (0, a.jsx)(n.Text, {
                            variant: "text-sm/normal",
                            children: d.default.Messages.ROLE_IN_PROMPT_POWERFUL_NOTICE_TEXT
                        })]
                    }) : (0, a.jsxs)("div", {
                        className: u.notice,
                        children: [(0, a.jsx)(l.default, {
                            className: u.noticeIcon
                        }), (0, a.jsx)(n.Text, {
                            variant: "text-sm/normal",
                            children: d.default.Messages.ROLE_IN_PROMPT_NOTICE_TEXT
                        })]
                    }) : null
                }
        },
        120318: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("65597"),
                r = s("77078"),
                o = s("102985"),
                d = s("79798"),
                u = s("713431");

            function c(e) {
                let {
                    className: t,
                    avatarURL: s,
                    name: n,
                    bot: c,
                    verifiedBot: E,
                    userTag: _
                } = e, T = (0, i.default)([o.default], () => o.default.hidePersonalInformation);
                return (0, a.jsxs)("div", {
                    className: l(u.container, t),
                    children: [(0, a.jsx)(r.Avatar, {
                        className: u.avatar,
                        src: s,
                        size: r.AvatarSizes.SIZE_24,
                        "aria-label": n
                    }), (0, a.jsxs)("div", {
                        className: u.textContainer,
                        children: [(0, a.jsx)(r.Text, {
                            tag: "span",
                            className: u.name,
                            color: "header-primary",
                            variant: "text-sm/semibold",
                            children: n
                        }), c ? (0, a.jsx)(d.default, {
                            className: u.botTag,
                            verified: E
                        }) : null, T ? null : (0, a.jsx)(r.Text, {
                            tag: "span",
                            color: "interactive-normal",
                            className: u.userTag,
                            variant: "text-sm/normal",
                            children: _
                        })]
                    })]
                })
            }
        },
        983521: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            }), s("222007");
            var a = s("372283"),
                n = s("766419");

            function l(e) {
                (0, n.updateRoleSort)([...e.map(e => e.id)])
            }

            function i(e) {
                return (0, a.default)(e, l)
            }
        },
        50693: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return n
                }
            }), s("222007");
            var a = s("884691");

            function n(e) {
                let [t, s] = a.useState(e), n = a.useRef(null);
                return a.useEffect(() => {
                    var t, a;
                    s(null !== (a = null === (t = n.current) || void 0 === t ? void 0 : t.offsetHeight) && void 0 !== a ? a : e)
                }), {
                    headerHeight: t,
                    headerRef: n
                }
            }
        },
        364222: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("713841"),
                r = s("376556"),
                o = s("37785"),
                d = s("592407"),
                u = s("900938"),
                c = s("49111"),
                E = s("782340");

            function _(e) {
                let t = (0, l.useStateFromStores)([u.default], () => u.default.getProps().integrations);
                return n.useMemo(() => (function(e, t) {
                    var s, n, l, u;
                    let _;
                    if (!e.managed) return null;
                    let T = null === (s = e.tags) || void 0 === s ? void 0 : s.bot_id,
                        I = null === (n = e.tags) || void 0 === n ? void 0 : n.integration_id,
                        S = (null === (l = e.tags) || void 0 === l ? void 0 : l.premium_subscriber) !== void 0,
                        N = (null === (u = e.tags) || void 0 === u ? void 0 : u.guild_connections) !== void 0;
                    if (null != T ? _ = null == t ? void 0 : t.find(e => {
                            var t;
                            let {
                                application: s
                            } = e;
                            return (null == s ? void 0 : null === (t = s.bot) || void 0 === t ? void 0 : t.id) === T
                        }) : null != I && (_ = null == t ? void 0 : t.find(e => {
                            let {
                                id: t
                            } = e;
                            return t === I
                        })), null != _ && null != _.application && null != _.name) {
                        let e = _.application.id,
                            t = _.name;
                        [c.PlatformTypes.TWITCH, c.PlatformTypes.YOUTUBE].includes(_.type) && (t = "".concat(r.default.get(_.type).name, " - ").concat(t));
                        let s = () => {
                            d.default.setSection(c.GuildSettingsSections.INTEGRATIONS), i.default.setSection(c.IntegrationSettingsSections.APPLICATION, e)
                        };
                        return E.default.Messages.MANAGED_ROLE_INTEGRATION_LINKED_EXPLANATION.format({
                            name: t,
                            integrationNameHook: (e, t) => (0, a.jsx)(o.default, {
                                onClick: s,
                                children: e
                            }, t)
                        })
                    }
                    return S ? E.default.Messages.MANAGED_ROLE_PREMIUM_SUBSCRIBER_EXPLANATION : N ? E.default.Messages.MANAGED_ROLE_GUILD_CONNECTIONS_EXPLANATION : E.default.Messages.MANAGED_ROLE_EXPLAINATION
                })(e, t), [e, t])
            }
        },
        431451: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                setSafetyPage: function() {
                    return n
                }
            });
            var a = s("913144");

            function n(e) {
                a.default.dispatch({
                    type: "GUILD_SETTINGS_SAFETY_PAGE",
                    page: e
                })
            }
        },
        353830: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            });
            var a = s("446674"),
                n = s("913144"),
                l = s("900938"),
                i = s("772871"),
                r = s("49111");
            let o = i.GuildSettingsSafetyPage.OVERVIEW,
                d = null;

            function u(e) {
                let {
                    subsection: t
                } = e;
                switch (t) {
                    case r.GuildSettingsSubsections.SAFETY_AUTOMOD:
                        o = i.GuildSettingsSafetyPage.AUTOMOD;
                        break;
                    case r.GuildSettingsSubsections.SAFETY_DM_AND_SPAM_PROTECTION:
                        o = i.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION;
                        break;
                    case r.GuildSettingsSubsections.SAFETY_CAPTCHA_AND_RAID_PROTECTION:
                        o = i.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION;
                        break;
                    case r.GuildSettingsSubsections.SAFETY_PERMISSIONS:
                        o = i.GuildSettingsSafetyPage.PERMISSIONS;
                        break;
                    case r.GuildSettingsSubsections.SAFETY_OVERVIEW:
                    default:
                        o = i.GuildSettingsSafetyPage.OVERVIEW
                }
            }
            class c extends a.default.Store {
                getCurrentPage() {
                    return o
                }
            }
            c.displayName = "GuildSettingsSafetyStore";
            var E = new c(n.default, {
                GUILD_SETTINGS_INIT: function() {
                    if (l.default.getGuildId() === d) return !1;
                    d = l.default.getGuildId()
                },
                GUILD_SETTINGS_SET_SECTION: u,
                GUILD_SETTINGS_SAFETY_SET_SUBSECTION: u,
                GUILD_SETTINGS_SAFETY_PAGE: function(e) {
                    let {
                        page: t
                    } = e;
                    o = t
                }
            })
        },
        772871: function(e, t, s) {
            "use strict";
            var a, n;
            s.r(t), s.d(t, {
                GuildSettingsSafetyPage: function() {
                    return a
                }
            }), (n = a || (a = {}))[n.OVERVIEW = 0] = "OVERVIEW", n[n.CAPTCHA_AND_RAID_PROTECTION = 1] = "CAPTCHA_AND_RAID_PROTECTION", n[n.DM_AND_SPAM_PROTECTION = 2] = "DM_AND_SPAM_PROTECTION", n[n.AUTOMOD = 3] = "AUTOMOD", n[n.PERMISSIONS = 4] = "PERMISSIONS"
        },
        614840: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return m
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("151426"),
                r = s("77078"),
                o = s("10641"),
                d = s("329606"),
                u = s("305961"),
                c = s("137215"),
                E = s("900938"),
                _ = s("431451"),
                T = s("353830"),
                I = s("772871"),
                S = s("900084"),
                N = s("239990"),
                f = s("766829"),
                g = s("994428"),
                A = s("782340"),
                L = s("642622");

            function m(e) {
                let t, {
                        hideChangelog: s
                    } = e,
                    m = (0, l.useStateFromStores)([E.default], () => E.default.getGuildId()),
                    C = (0, l.useStateFromStores)([u.default], () => u.default.getGuild(m)),
                    O = (0, l.useStateFromStores)([T.default], () => T.default.getCurrentPage());
                if (n.useEffect(() => {
                        (0, o.markDismissibleContentAsDismissed)(i.DismissibleContent.COMMUNITY_GUILD_SETTINGS_SAFETY, {
                            dismissAction: g.ContentDismissActionType.AUTO
                        })
                    }, []), null == C) return null;
                let h = (0, f.getGuildSafetySettings)(C);
                switch (O) {
                    case I.GuildSettingsSafetyPage.OVERVIEW:
                        t = (0, a.jsx)(S.default, {
                            guild: C,
                            hideChangelog: s
                        });
                        break;
                    case I.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION:
                        t = (0, a.jsx)(N.default, {
                            title: A.default.Messages.GUILD_SETTINGS_SAFETY_CAPTCHA_RAID_PROTECTION,
                            settings: h[I.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION]
                        });
                        break;
                    case I.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION:
                        t = (0, a.jsx)(N.default, {
                            title: A.default.Messages.GUILD_SETTINGS_SAFETY_DM_SPAM_PROTECTION,
                            settings: h[I.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION]
                        });
                        break;
                    case I.GuildSettingsSafetyPage.AUTOMOD:
                        t = (0, a.jsx)(d.default, {
                            guildId: C.id
                        });
                        break;
                    case I.GuildSettingsSafetyPage.PERMISSIONS:
                        t = (0, a.jsx)(N.default, {
                            title: A.default.Messages.GUILD_SETTINGS_SAFETY_PERMISSIONS_TITLE,
                            settings: h[I.GuildSettingsSafetyPage.PERMISSIONS]
                        })
                }
                return (0, a.jsxs)(a.Fragment, {
                    children: [O !== I.GuildSettingsSafetyPage.OVERVIEW && (0, a.jsxs)(r.Button, {
                        className: L.back,
                        innerClassName: L.backButton,
                        look: r.Button.Looks.BLANK,
                        size: r.Button.Sizes.MIN,
                        onClick: () => {
                            (0, _.setSafetyPage)(I.GuildSettingsSafetyPage.OVERVIEW)
                        },
                        children: [(0, a.jsx)(c.default, {
                            className: L.arrow,
                            direction: c.default.Directions.LEFT
                        }), (0, a.jsx)(r.Text, {
                            variant: "text-sm/semibold",
                            color: "interactive-normal",
                            children: A.default.Messages.BACK
                        })]
                    }), t]
                })
            }
        },
        900084: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return N
                }
            }), s("834022");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("353575"),
                r = s("296839"),
                o = s("348934"),
                d = s("449008"),
                u = s("431451"),
                c = s("772871"),
                E = s("766829"),
                _ = s("782340"),
                T = s("544067");

            function I() {
                let e = "• ";
                return (0, a.jsxs)("div", {
                    className: T.changelog,
                    children: [(0, a.jsx)("img", {
                        className: T.changelogImage,
                        src: s("195238"),
                        alt: "changelog"
                    }), (0, a.jsxs)("div", {
                        children: [(0, a.jsx)(l.Heading, {
                            variant: "heading-md/semibold",
                            color: "header-primary",
                            className: T.updatesHeader,
                            children: _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_HEADER
                        }), (0, a.jsx)(l.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            className: T.updatesDescription,
                            children: _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_LINE_1
                        }), (0, a.jsx)(l.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            className: T.updatesDescription,
                            children: _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_LINE_2
                        }), (0, a.jsxs)(l.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: [e, _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_ITEM_1]
                        }), (0, a.jsxs)(l.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: [e, _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_ITEM_2]
                        }), (0, a.jsxs)(l.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: [e, _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_ITEM_3]
                        }), (0, a.jsxs)(l.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: [e, _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_ITEM_4]
                        })]
                    })]
                })
            }

            function S(e) {
                let {
                    title: t,
                    subtitle: s,
                    icon: n,
                    page: i
                } = e;
                return (0, a.jsxs)("div", {
                    className: T.safetyStepRow,
                    children: [(0, a.jsxs)("div", {
                        className: T.safetyStepContent,
                        children: [(0, a.jsx)(l.Avatar, {
                            src: n,
                            size: l.AvatarSizes.SIZE_40,
                            "aria-label": t
                        }), (0, a.jsxs)("div", {
                            children: [(0, a.jsx)(l.Heading, {
                                variant: "heading-md/semibold",
                                color: "header-primary",
                                children: t
                            }), (0, a.jsx)(l.Text, {
                                variant: "text-xs/medium",
                                color: "header-secondary",
                                children: s
                            })]
                        })]
                    }), (0, a.jsx)(l.Button, {
                        className: T.editButton,
                        size: l.Button.Sizes.SMALL,
                        color: l.Button.Colors.PRIMARY,
                        look: l.Button.Looks.OUTLINED,
                        borderColor: l.Button.BorderColors.PRIMARY,
                        onClick: () => (0, u.setSafetyPage)(i),
                        children: _.default.Messages.EDIT
                    })]
                })
            }

            function N(e) {
                let {
                    guild: t,
                    hideChangelog: u
                } = e;
                (0, i.useSyncAutomodRulesEffect)(t.id);
                let N = (0, r.useAvailableTriggerTypes)(t.id),
                    {
                        rulesByTriggerType: f
                    } = (0, i.useAutomodRulesList)(t.id),
                    {
                        numEnabledRules: g,
                        numRules: A
                    } = n.useMemo(() => {
                        let e = 0,
                            t = 0;
                        if (null == f) return {
                            numEnabledRules: e,
                            numRules: t
                        };
                        let s = Object.values(N).flat();
                        return s.forEach(s => {
                            var a;
                            let n = null === (a = f[s]) || void 0 === a ? void 0 : a.filter(d.isNotNullish);
                            if (null == n || 0 === n.length) {
                                t++;
                                return
                            }
                            n.forEach(s => {
                                s.enabled && e++, t++
                            })
                        }), {
                            numEnabledRules: e,
                            numRules: t
                        }
                    }, [N, f]),
                    L = (0, E.getGuildSafetySettings)(t),
                    m = L[c.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION],
                    C = L[c.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION],
                    O = L[c.GuildSettingsSafetyPage.PERMISSIONS],
                    h = (0, o.useCanCurrentUserManageAutomod)(t.id);
                return (0, a.jsxs)("div", {
                    children: [(0, a.jsx)(l.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        className: T.header,
                        children: _.default.Messages.GUILD_SETTINGS_SAFETY_SETUP_HEADER
                    }), !u && (0, a.jsx)(I, {}), (0, a.jsxs)("div", {
                        className: T.safetyChecklist,
                        children: [(0, a.jsx)(S, {
                            icon: s("373558"),
                            title: _.default.Messages.GUILD_SETTINGS_SAFETY_CAPTCHA_RAID_PROTECTION,
                            subtitle: _.default.Messages.GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED.format({
                                enabled: m.filter(e => e.enabled).length,
                                total: m.length
                            }),
                            page: c.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION
                        }), (0, a.jsx)("div", {
                            className: T.divider
                        }), (0, a.jsx)(S, {
                            icon: s("119134"),
                            title: _.default.Messages.GUILD_SETTINGS_SAFETY_DM_SPAM_PROTECTION,
                            subtitle: _.default.Messages.GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED.format({
                                enabled: C.filter(e => e.enabled).length,
                                total: C.length
                            }),
                            page: c.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION
                        }), (0, a.jsx)("div", {
                            className: T.divider
                        }), h && (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(S, {
                                icon: s("799036"),
                                title: _.default.Messages.GUILD_SETTINGS_AUTOMOD_TITLE,
                                subtitle: _.default.Messages.GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED.format({
                                    enabled: g,
                                    total: A
                                }),
                                page: c.GuildSettingsSafetyPage.AUTOMOD
                            }), (0, a.jsx)("div", {
                                className: T.divider
                            })]
                        }), (0, a.jsx)(S, {
                            icon: s("444964"),
                            title: _.default.Messages.PERMISSIONS,
                            subtitle: _.default.Messages.GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED.format({
                                enabled: O.filter(e => e.enabled).length,
                                total: O.length
                            }),
                            page: c.GuildSettingsSafetyPage.PERMISSIONS
                        })]
                    })]
                })
            }
        },
        239990: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("642622");

            function i(e) {
                let {
                    title: t,
                    settings: s
                } = e;
                return (0, a.jsxs)("div", {
                    children: [(0, a.jsx)(n.Heading, {
                        variant: "heading-lg/semibold",
                        color: "header-primary",
                        className: l.header,
                        children: t
                    }), s.map(e => e.renderComponent())]
                })
            }
        },
        974724: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("917351"),
                l = s("446674"),
                i = s("77078"),
                r = s("79112"),
                o = s("957255"),
                d = s("697218"),
                u = s("592407"),
                c = s("690343"),
                E = s("49111"),
                _ = s("782340"),
                T = s("642622");

            function I(e) {
                let t, {
                        guild: s
                    } = e,
                    I = s.mfaLevel,
                    S = (0, l.useStateFromStores)([o.default], () => null != s && o.default.can(E.Permissions.MANAGE_GUILD, s), [s]),
                    N = (0, l.useStateFromStores)([d.default], () => d.default.getCurrentUser()),
                    f = s.isOwner(N),
                    g = null == N ? void 0 : N.mfaEnabled,
                    A = I === E.MFALevels.ELEVATED,
                    L = f && g,
                    m = (0, n.throttle)(async e => {
                        L && await u.default.updateMFALevel({
                            guildId: s.id,
                            level: e ? E.MFALevels.ELEVATED : E.MFALevels.NONE,
                            isEnabled: !e
                        })
                    }, 1e3);
                if (!S) return null;
                !L && (t = f ? _.default.Messages.GUILD_SETTINGS_SAFETY_MFA_OWNER_DETAIL.format({
                    settingsHook: () => r.default.open(E.UserSettingsSections.ACCOUNT)
                }) : _.default.Messages.GUILD_SETTINGS_SAFETY_MFA_NON_OWNER_DETAIL);
                let C = s.hasFeature(E.GuildFeatures.DISCOVERABLE);
                return (0, a.jsxs)("div", {
                    className: T.simpleItemWrapper,
                    children: [(0, a.jsxs)("div", {
                        className: T.itemContent,
                        children: [(0, a.jsx)(i.Heading, {
                            variant: "text-md/semibold",
                            color: "header-primary",
                            children: _.default.Messages.GUILD_SETTINGS_REQ_MFA_LABEL
                        }), (0, a.jsxs)(i.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: [_.default.Messages.GUILD_SETTINGS_SAFETY_MFA_BODY, " ", t]
                        })]
                    }), !L || A && C ? (0, a.jsx)(i.Tooltip, {
                        text: C ? _.default.Messages.GUILD_SETTINGS_SAFETY_MFA_DISCOVERABLE_DISABLED_TOOLTIP : f ? _.default.Messages.GUILD_SETTINGS_SAFETY_MFA_OWNER_TOOLTIP : _.default.Messages.GUILD_SETTINGS_SAFETY_MFA_NON_OWNER_TOOLTIP,
                        children: e => (0, a.jsx)(c.default, {
                            checked: A,
                            disabled: !0,
                            onChange: m,
                            className: T.bringToFront,
                            tooltipProps: e
                        })
                    }) : (0, a.jsx)(c.default, {
                        checked: A,
                        onChange: m,
                        className: T.bringToFront
                    })]
                })
            }
        },
        495454: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getRiskyPerms: function() {
                    return S
                },
                default: function() {
                    return N
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("316693"),
                r = s("77078"),
                o = s("957255"),
                d = s("578706"),
                u = s("423487"),
                c = s("991170"),
                E = s("695838"),
                _ = s("69741"),
                T = s("782340"),
                I = s("642622");

            function S(e) {
                return _.MODERATOR_PERMISSIONS.filter(t => (null == e ? void 0 : e.id) !== E.FAVORITES_RAW_GUILD_ID && c.default.canEveryone(t, e))
            }

            function N(e) {
                let {
                    guild: t
                } = e, n = t.roles[t.id], c = S(t), E = c.length > 0, N = _.MODERATOR_PERMISSIONS.some(e => !o.default.can(e, t, null, {
                    [n.id]: {
                        ...n,
                        permissions: i.default.remove(n.permissions, e)
                    }
                })), f = (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: I.itemContent,
                        children: [(0, a.jsx)(r.Heading, {
                            variant: "text-md/semibold",
                            color: "header-primary",
                            children: T.default.Messages.GUILD_SETTINGS_SAFETY_EVERYONE_RISKY_PERMISSIONS
                        }), (0, a.jsx)(r.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: T.default.Messages.GUILD_SETTINGS_SAFETY_EVERYONE_RISKY_PERMISSIONS_DETAILS.format({
                                numPerms: c.length
                            })
                        })]
                    }), E ? (0, a.jsx)(u.default, {
                        height: 24,
                        width: 24,
                        className: I.warning,
                        "aria-label": T.default.Messages.SAFETY_REMOVE_RISKY_PERMS_ARIA_LABEL
                    }) : (0, a.jsx)(d.default, {
                        height: 24,
                        width: 24,
                        className: I.check,
                        "aria-label": T.default.Messages.SAFETY_REMOVE_RISKY_PERMS_ARIA_LABEL_COMPLETE
                    })]
                });
                return E ? N ? (0, a.jsx)(r.Tooltip, {
                    text: T.default.Messages.SAFETY_REMOVE_RISKY_PERMS_WARNING,
                    children: e => (0, a.jsx)("div", {
                        className: l(I.simpleItemWrapper, I.disabled),
                        ...e,
                        children: f
                    })
                }) : (0, a.jsx)(r.Clickable, {
                    onClick: () => {
                        (0, r.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("343600").then(s.bind(s, "343600"));
                            return s => (0, a.jsx)(e, {
                                guild: t,
                                ...s
                            })
                        })
                    },
                    className: l(I.simpleItemWrapper, I.clickable),
                    children: f
                }) : (0, a.jsx)("div", {
                    className: I.simpleItemWrapper,
                    children: f
                })
            }
        },
        380993: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return G
                },
                RaidAlertsSection: function() {
                    return x
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("298386"),
                o = s("446674"),
                d = s("77078"),
                u = s("716241"),
                c = s("679653"),
                E = s("311340"),
                _ = s("701203"),
                T = s("85448"),
                I = s("567062"),
                S = s("42203"),
                N = s("923959"),
                f = s("957255"),
                g = s("27618"),
                A = s("697218"),
                L = s("593195"),
                m = s("592407"),
                C = s("690343"),
                O = s("49111"),
                h = s("782340"),
                R = s("642622");

            function D(e) {
                let {
                    guild: t,
                    isExpanded: s,
                    selectedChannelId: l,
                    className: r
                } = e, I = (0, _.useCanEnableRaidAlerts)(t), N = t.canHaveRaidActivityAlerts(), [f, g] = n.useState(N), A = (0, o.useStateFromStores)([S.default], () => S.default.getChannel(l), [l]), m = (0, c.default)(A), D = async () => {
                    g(!f);
                    try {
                        var e;
                        await (0, E.setGuildRaidAlerts)(t, !N);
                        let s = null !== (e = null != l ? l : t.safetyAlertsChannelId) && void 0 !== e ? e : null;
                        if (null != s) {
                            let e = {
                                raid_alert_type: T.RaidAlertType.JOIN_RAID,
                                enabled: !N,
                                raid_alert_channel_id: s,
                                guild_id: t.id,
                                channel_id: s
                            };
                            (0, u.trackWithMetadata)(O.AnalyticEvents.GUILD_RAID_ALERTS_SETUP, e)
                        }
                    } catch (e) {
                        (0, d.showToast)((0, d.createToast)(h.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ERROR, d.ToastType.FAILURE)), g(!N)
                    }
                };
                return (0, a.jsxs)("div", {
                    className: i(R.itemWrapper, r),
                    children: [(0, a.jsxs)("div", {
                        className: R.itemContent,
                        children: [(0, a.jsx)(d.Heading, {
                            variant: "text-md/semibold",
                            color: "header-primary",
                            children: h.default.Messages.GUILD_SETTINGS_SAFETY_RAID_ALERTS_TITLE
                        }), (0, a.jsx)(d.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: h.default.Messages.GUILD_SETTINGS_SAFETY_RAID_ALERTS_DESCRIPTION
                        }), s || null == l ? null : (0, a.jsxs)(d.Text, {
                            color: "interactive-normal",
                            variant: "text-xs/medium",
                            className: R.valuePill,
                            children: [(0, a.jsx)(L.default, {
                                width: 12,
                                height: 12
                            }), " ", m]
                        })]
                    }), (0, a.jsx)(C.default, {
                        checked: f,
                        onChange: D,
                        disabled: !I || null == l
                    })]
                })
            }

            function M(e) {
                var t;
                let {
                    guild: s,
                    selectedChannelId: n,
                    setSelectedChannelId: l,
                    className: E
                } = e, _ = null !== (t = s.safetyAlertsChannelId) && void 0 !== t ? t : null, I = (0, o.useStateFromStoresArray)([N.default, A.default, g.default, f.default], () => {
                    let e = N.default.getChannels(s.id),
                        t = e[0, N.GUILD_SELECTABLE_CHANNELS_KEY].filter(e => {
                            let {
                                channel: t
                            } = e;
                            return t.type === r.ChannelTypes.GUILD_TEXT && f.default.can(O.Permissions.SEND_MESSAGES, t)
                        }).map(e => {
                            let {
                                channel: t
                            } = e;
                            return {
                                value: t.id,
                                label: (0, c.computeChannelName)(t, A.default, g.default, !0)
                            }
                        });
                    return null != _ ? t : [...t]
                }, [s.id, _]), S = async e => {
                    l(e);
                    try {
                        if (e !== _ && (await m.default.saveGuild(s.id, {
                                safetyAlertsChannelId: e
                            }, {
                                throwErr: !0
                            }), m.default.updateGuild({
                                safetyAlertsChannelId: e
                            })), null != e) {
                            let t = {
                                raid_alert_type: T.RaidAlertType.JOIN_RAID,
                                enabled: s.canHaveRaidActivityAlerts(),
                                raid_alert_channel_id: e,
                                guild_id: s.id,
                                channel_id: e
                            };
                            (0, u.trackWithMetadata)(O.AnalyticEvents.GUILD_RAID_ALERTS_SETUP, t)
                        }
                    } catch (e) {
                        (0, d.showToast)((0, d.createToast)(h.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ERROR, d.ToastType.FAILURE)), l(_)
                    }
                };
                return (0, a.jsx)("div", {
                    className: i(R.itemBodyContainer, E),
                    children: (0, a.jsxs)("div", {
                        className: R.itemBodyInner,
                        children: [(0, a.jsx)(d.FormTitle, {
                            children: h.default.Messages.GUILD_ANTIRAID_SAFETY_CHANNEL_TITLE
                        }), (0, a.jsx)(d.SearchableSelect, {
                            wrapperClassName: R.bringToFront,
                            options: I,
                            onChange: S,
                            value: n,
                            maxVisibleItems: 5
                        }), (0, a.jsx)(d.Text, {
                            variant: "text-sm/medium",
                            color: "interactive-normal",
                            children: h.default.Messages.GUILD_SETTINGS_SAFETY_NOTIFICATIONS_CHANNEL_DESCRIPTION
                        })]
                    })
                })
            }

            function G(e) {
                var t, s;
                let {
                    guild: l
                } = e, [i, r] = n.useState(!1), o = null !== (t = l.safetyAlertsChannelId) && void 0 !== t ? t : null, [d, u] = n.useState(null != o ? o : null !== (s = null == l ? void 0 : l.publicUpdatesChannelId) && void 0 !== s ? s : null);
                return (0, a.jsx)(I.default, {
                    renderHeader: (0, a.jsx)(D, {
                        isExpanded: i,
                        guild: l,
                        selectedChannelId: d
                    }),
                    isExpanded: i,
                    onExpand: () => r(!i),
                    children: (0, a.jsx)(M, {
                        guild: l,
                        selectedChannelId: d,
                        setSelectedChannelId: u
                    })
                })
            }

            function x(e) {
                var t, s;
                let {
                    guild: l
                } = e, i = null !== (t = l.safetyAlertsChannelId) && void 0 !== t ? t : null, [r, o] = n.useState(null != i ? i : null !== (s = null == l ? void 0 : l.publicUpdatesChannelId) && void 0 !== s ? s : null);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(D, {
                        isExpanded: !0,
                        guild: l,
                        selectedChannelId: r,
                        className: R.noPadding
                    }), (0, a.jsx)(M, {
                        guild: l,
                        selectedChannelId: r,
                        setSelectedChannelId: o,
                        className: R.noPadding
                    })]
                })
            }
        },
        766829: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getGuildSafetySettings: function() {
                    return _
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("772871"),
                l = s("974724"),
                i = s("495454"),
                r = s("380993"),
                o = s("281239"),
                d = s("439979"),
                u = s("771075"),
                c = s("49111"),
                E = s("782340");
            let _ = e => ({
                [n.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION]: [{
                    renderComponent: () => (0, a.jsx)(r.default, {
                        guild: e
                    }, "raid-alerts"),
                    enabled: !e.hasFeature(c.GuildFeatures.RAID_ALERTS_DISABLED)
                }, {
                    renderComponent: () => (0, a.jsx)(o.default, {
                        title: E.default.Messages.GUILD_SETTINGS_SAFETY_RAID_CAPTCHA
                    }, "captcha-suspicious-joins"),
                    enabled: !0
                }, {
                    renderComponent: () => (0, a.jsx)(o.default, {
                        title: E.default.Messages.GUILD_SETTINGS_SAFETY_RAID_CAPTCH_RAID
                    }, "captcha-raid-joins"),
                    enabled: !0
                }],
                [n.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION]: [{
                    renderComponent: () => (0, a.jsx)(u.default, {
                        guild: e
                    }, "verification-level"),
                    enabled: !0
                }, {
                    renderComponent: () => (0, a.jsx)(d.default, {
                        guild: e
                    }, "member-verification"),
                    enabled: e.hasVerificationGate()
                }, {
                    renderComponent: () => (0, a.jsx)(o.default, {
                        title: E.default.Messages.GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_DMS,
                        details: E.default.Messages.GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_DMS_DESCRIPTION
                    }, "hide-suspicious-dms"),
                    enabled: !0
                }, {
                    renderComponent: () => (0, a.jsx)(o.default, {
                        title: E.default.Messages.GUILD_SETTINGS_SAFETY_SPAM_DM_NON_FRIENDS,
                        details: E.default.Messages.GUILD_SETTINGS_SAFETY_SPAM_DM_NON_FRIENDS_DESCRIPTION
                    }, "filter-unknown-dms"),
                    enabled: !0
                }, {
                    renderComponent: () => (0, a.jsx)(o.default, {
                        title: E.default.Messages.GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_LINKS
                    }, "outbound-links-warn"),
                    enabled: !0
                }, {
                    renderComponent: () => (0, a.jsx)(o.default, {
                        title: E.default.Messages.GUILD_SETTINGS_SAFETY_SPAM_DM_SUSPCIOUS_MESSAGES
                    }, "delete-spam"),
                    enabled: !0
                }],
                [n.GuildSettingsSafetyPage.PERMISSIONS]: [{
                    renderComponent: () => (0, a.jsx)(l.default, {
                        guild: e
                    }, "guild-mfa"),
                    enabled: e.mfaLevel === c.MFALevels.ELEVATED
                }, {
                    renderComponent: () => (0, a.jsx)(i.default, {
                        guild: e
                    }, "disable-risky-perms"),
                    enabled: 0 === (0, i.getRiskyPerms)(e).length
                }]
            })
        },
        690343: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("642622");

            function o(e) {
                let {
                    checked: t,
                    onChange: s,
                    disabled: n,
                    className: o,
                    tooltipProps: d
                } = e, u = e => {
                    e.stopPropagation(), e.preventDefault()
                };
                return (0, a.jsx)(i.Clickable, {
                    onClick: u,
                    onMouseDown: u,
                    onMouseUp: u,
                    className: l(r.switch, o),
                    ...d,
                    children: (0, a.jsx)(i.Switch, {
                        checked: t,
                        onChange: s,
                        disabled: n
                    })
                })
            }
        },
        281239: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("690343"),
                i = s("843455"),
                r = s("782340"),
                o = s("642622");

            function d(e) {
                let {
                    title: t,
                    details: s
                } = e;
                return (0, a.jsxs)("div", {
                    className: o.simpleItemWrapper,
                    children: [(0, a.jsxs)("div", {
                        className: o.itemContent,
                        children: [(0, a.jsx)(n.Heading, {
                            variant: "text-md/semibold",
                            color: "header-primary",
                            children: t
                        }), "string" == typeof s ? (0, a.jsx)(n.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: s
                        }) : s]
                    }), (0, a.jsx)(n.Tooltip, {
                        tooltipContentClassName: o.tooltip,
                        text: r.default.Messages.GUILD_SETTINGS_SAFETY_ON_BY_DEFAULT,
                        children: e => (0, a.jsx)(l.default, {
                            checked: !0,
                            disabled: !0,
                            onChange: i.NOOP,
                            className: o.bringToFront,
                            tooltipProps: e
                        })
                    })]
                })
            }
        },
        439979: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return m
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("567062"),
                u = s("50926"),
                c = s("526253"),
                E = s("567054"),
                _ = s("859130"),
                T = s("613786"),
                I = s("462579"),
                S = s("641892"),
                N = s("690343"),
                f = s("782340"),
                g = s("642622"),
                A = s("628652");

            function L(e) {
                let {
                    guild: t,
                    isExpanded: l,
                    emptyFormFields: i,
                    hasTermsField: r
                } = e, d = t.hasVerificationGate(), [c, E] = n.useState(d), _ = e => {
                    e.preventDefault(), e.stopPropagation()
                }, T = async e => {
                    try {
                        E(e), await u.default.enableVerificationForm(t.id, e)
                    } catch {
                        E(c)
                    }
                }, L = e => {
                    e && i ? (0, o.openModalLazy)(async () => {
                        let {
                            ConfirmModal: t
                        } = await s.el("77078").then(s.bind(s, "77078"));
                        return s => (0, a.jsx)(t, {
                            ...s,
                            header: f.default.Messages.MEMBER_VERIFICATION_WARNING_TITLE,
                            cancelText: f.default.Messages.MEMBER_VERIFICATION_WARNING_CANCEL,
                            confirmText: f.default.Messages.MEMBER_VERIFICATION_WARNING_CONFIRM,
                            onConfirm: () => T(e),
                            children: (0, a.jsx)(o.Text, {
                                variant: "text-md/normal",
                                children: f.default.Messages.MEMBER_VERIFICATION_AUTOMATIC_WARNING
                            })
                        })
                    }) : T(e)
                }, m = () => {
                    (0, o.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("93184").then(s.bind(s, "93184"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guildId: t.id,
                            isPreview: !0
                        })
                    })
                };
                return (0, a.jsxs)("div", {
                    className: g.itemWrapper,
                    children: [(0, a.jsxs)("div", {
                        className: g.itemContent,
                        children: [(0, a.jsx)(o.Heading, {
                            variant: "text-md/semibold",
                            color: "header-primary",
                            children: f.default.Messages.GUILD_SETTINGS_SAFETY_RULES_SCREENING
                        }), (l || i && !c) && (0, a.jsx)(o.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: f.default.Messages.GUILD_SETTINGS_SAFETY_RULES_EDIT_SUBTITLE
                        }), !l && (0, a.jsx)("div", {
                            className: A.pillRow,
                            children: r && (0, a.jsxs)(o.Text, {
                                color: "interactive-normal",
                                variant: "text-xs/medium",
                                className: g.valuePill,
                                children: [(0, a.jsx)(S.default, {
                                    width: 16,
                                    height: 16
                                }), f.default.Messages.GUILD_SETTINGS_SAFETY_RULES_FORM_PILL]
                            })
                        })]
                    }), (0, a.jsx)("div", {
                        className: A.previewAndEnable,
                        children: l || c || !i ? (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(o.Clickable, {
                                onMouseDown: _,
                                onMouseUp: _,
                                onClick: e => {
                                    _(e), m()
                                },
                                children: (0, a.jsx)(o.Tooltip, {
                                    tooltipContentClassName: A.tooltip,
                                    text: f.default.Messages.PREVIEW,
                                    children: e => (0, a.jsx)(I.default, {
                                        height: 24,
                                        width: 24,
                                        className: A.previewIcon,
                                        ...e
                                    })
                                })
                            }), (0, a.jsx)(N.default, {
                                checked: c,
                                onChange: () => L(!c)
                            })]
                        }) : (0, a.jsx)(o.Button, {
                            size: o.Button.Sizes.SMALL,
                            children: f.default.Messages.GUILD_AUTOMOD_RULE_SETUP_BUTTON
                        })
                    })]
                })
            }

            function m(e) {
                var t;
                let {
                    guild: s
                } = e, [l, o] = n.useState(!1), [I, S] = n.useState(!1), N = n.useRef(!1), f = n.useCallback(() => {
                    N.current = !0
                }, []), m = (0, _.useSubmittedGuildJoinRequestTotal)({
                    guildId: s.id
                }), C = (0, r.useStateFromStores)([c.default], () => c.default.get(s.id)), O = null !== (t = null == C ? void 0 : C.formFields) && void 0 !== t ? t : [];
                return n.useEffect(() => {
                    u.default.fetchVerificationForm(s.id).then(() => {
                        S(!0)
                    })
                }, [s.id]), (0, a.jsx)(d.default, {
                    renderHeader: (0, a.jsx)(L, {
                        guild: s,
                        isExpanded: l,
                        emptyFormFields: (null == O ? void 0 : O.length) == null || (null == O ? void 0 : O.length) === 0,
                        hasTermsField: null == O ? void 0 : O.some(e => e.field_type === E.VerificationFormFieldTypes.TERMS)
                    }),
                    isExpanded: l,
                    onExpand: () => o(!l),
                    children: (0, a.jsx)("div", {
                        className: i(g.itemBodyContainer, A.rulesScreeningItems),
                        children: I && (0, a.jsx)(T.default, {
                            guild: s,
                            submittedGuildJoinRequestsCount: m,
                            formFields: O,
                            onFormFieldUpdate: f,
                            hideVerificationLevelField: !0
                        })
                    })
                })
            }
        },
        771075: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("925993"),
                d = s("461380"),
                u = s("556081"),
                c = s("216947"),
                E = s("49111"),
                _ = s("782340"),
                T = s("642622");

            function I(e) {
                let {
                    guild: t
                } = e, l = t.verificationLevel, I = n.useMemo(() => (0, o.getVerificationLevelText)(l), [l]);
                return (0, a.jsxs)(r.Clickable, {
                    onClick: () => (0, r.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("161069").then(s.bind(s, "161069"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guild: t,
                            hideColors: !0
                        })
                    }),
                    className: i(T.simpleItemWrapper, T.clickable),
                    children: [(0, a.jsxs)("div", {
                        className: T.itemContent,
                        children: [(0, a.jsx)(r.Heading, {
                            variant: "text-md/semibold",
                            color: "header-primary",
                            children: _.default.Messages.FORM_LABEL_VERIFICATION_LEVEL
                        }), (0, a.jsx)(r.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            children: _.default.Messages.GUILD_SETTINGS_SAFETY_VERIFICATION_DESCRIPTION
                        }), (0, a.jsx)("div", {
                            className: T.pillRow,
                            children: (0, a.jsxs)(r.Text, {
                                variant: "text-xs/medium",
                                color: "interactive-normal",
                                className: T.valuePill,
                                children: [l === E.VerificationLevels.VERY_HIGH ? (0, a.jsx)(c.default, {
                                    width: 16,
                                    height: 16
                                }) : (0, a.jsx)(u.default, {
                                    width: 16,
                                    height: 16
                                }), I]
                            })
                        })]
                    }), (0, a.jsx)(d.default, {
                        height: 24,
                        width: 24,
                        direction: d.default.Directions.RIGHT,
                        className: T.caret
                    })]
                })
            }
        },
        369158: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("36694"),
                o = s("987772"),
                d = s("782340"),
                u = s("442316");

            function c(e) {
                let {
                    className: t,
                    enabled: s,
                    previewCTA: n,
                    onPreview: c,
                    onToggle: E,
                    animateStatus: _,
                    firstLine: T,
                    secondLine: I,
                    disabled: S
                } = e;
                return (0, a.jsxs)("div", {
                    className: l(t, u.enableContainer),
                    children: [s ? (0, a.jsx)(r.default, {
                        width: 24,
                        height: 24,
                        className: l(u.activeCircle, {
                            [u.animate]: _
                        })
                    }) : (0, a.jsx)(o.default, {
                        width: 24,
                        height: 24,
                        className: l(u.editCircle, {
                            [u.animate]: _
                        })
                    }), (0, a.jsxs)("div", {
                        className: u.enableDescription,
                        children: [(0, a.jsx)(i.Text, {
                            variant: "text-sm/normal",
                            children: T
                        }), (0, a.jsx)(i.Text, {
                            variant: "text-sm/normal",
                            children: I
                        })]
                    }), (0, a.jsxs)("div", {
                        className: u.buttonContainer,
                        children: [null == c ? null : (0, a.jsx)(i.Button, {
                            className: u.previewButton,
                            look: i.Button.Looks.LINK,
                            size: i.Button.Sizes.SMALL,
                            onClick: c,
                            disabled: S,
                            color: i.Button.Colors.PRIMARY,
                            children: null != n ? n : d.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_PREVIEW
                        }), (0, a.jsx)(i.Button, {
                            disabled: null == E || S,
                            size: i.Button.Sizes.SMALL,
                            color: s ? i.Button.Colors.RED : i.Button.Colors.BRAND,
                            onClick: E,
                            children: s ? d.default.Messages.DISABLE : d.default.Messages.ENABLE
                        })]
                    })]
                })
            }
        },
        725621: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getGuildSettingsSections: function() {
                    return ew
                },
                default: function() {
                    return ez
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("759843"),
                i = s("446674"),
                r = s("151426"),
                o = s("77078"),
                d = s("54239"),
                u = s("800751"),
                c = s("534291"),
                E = s("812204"),
                _ = s("716241"),
                T = s("685665"),
                I = s("412707"),
                S = s("838093"),
                N = s("7331"),
                f = s("736271"),
                g = s("283167"),
                A = s("10641"),
                L = s("298878"),
                m = s("184890"),
                C = s("773372"),
                O = s("348934"),
                h = s("329606"),
                R = s("685829"),
                D = s("863636"),
                M = s("380710"),
                G = s("347895"),
                x = s("233706"),
                p = s("287883"),
                U = s("883206"),
                v = s("808388"),
                j = s("65722"),
                P = s("432153"),
                y = s("922835"),
                b = s("801171"),
                B = s("883069"),
                F = s("569808"),
                H = s("269596"),
                V = s("977169"),
                k = s("161778"),
                w = s("223170"),
                Y = s("478964"),
                K = s("59811"),
                W = s("628624"),
                z = s("923959"),
                X = s("525065"),
                Z = s("957255"),
                J = s("697218"),
                Q = s("228220"),
                q = s("659500"),
                $ = s("199938"),
                ee = s("961394"),
                et = s("592407"),
                es = s("738216"),
                ea = s("692541"),
                en = s("952943"),
                el = s("531493"),
                ei = s("900938"),
                er = s("355665"),
                eo = s("137933"),
                ed = s("397947"),
                eu = s("259483"),
                ec = s("867928"),
                eE = s("648704"),
                e_ = s("887754"),
                eT = s("614840"),
                eI = s("902273"),
                eS = s("721822"),
                eN = s("925538"),
                ef = s("423013"),
                eg = s("191329"),
                eA = s("851545"),
                eL = s("527042"),
                em = s("977887"),
                eC = s("912477"),
                eO = s("969741"),
                eh = s("849823"),
                eR = s("788831"),
                eD = s("201461"),
                eM = s("817674"),
                eG = s("187975"),
                ex = s("473126"),
                ep = s("582372"),
                eU = s("789123"),
                ev = s("78730"),
                ej = s("757120"),
                eP = s("310490"),
                ey = s("49111"),
                eb = s("533613"),
                eB = s("69741"),
                eF = s("782340"),
                eH = s("160157");

            function eV(e) {
                return "" !== e.toString() ? e.toString() : eF.default.Messages.SERVER_SETTINGS
            }

            function ek(e) {
                let {
                    guild: t,
                    canManageGuild: n,
                    canViewAuditLog: i,
                    canViewAuditLogV2: u,
                    canManageRoles: E,
                    canManageGuildExpressions: _,
                    canManageWebhooks: T,
                    canManageBans: g,
                    canAccessMembersPage: m,
                    canViewGuildAnalytics: R,
                    isOwner: G,
                    isOwnerWithRequiredMfaLevel: B,
                    showDirtyGuildTemplateIndicator: F,
                    memberCount: V,
                    isGuildAuditLogV2Enabled: k,
                    showAccessRate: w,
                    onboardingStep: K,
                    onboardingEnabled: z,
                    welcomeScreenEmpty: X,
                    guildMetadata: Z,
                    section: $
                } = e, es = () => (0, j.canSeeGuildRoleSubscriptionSettings)({
                    guild: t,
                    isOwner: G,
                    canManageGuildRoleSubscriptions: (0, j.canManageGuildRoleSubscriptions)(t),
                    isMonetizationWaitlistEnabledForGuild: (0, N.isMonetizationWaitlistEnabledForGuild)(t.id),
                    isGuildEligibleForRoleSubscriptions: (0, v.isGuildEligibleForRoleSubscriptions)(t.id),
                    isExpeditedMonetizationOnboardingGuild: (0, N.isExpeditedMonetizationOnboardingGuild)(t),
                    isUserInCreatorMonetizationEligibleCountry: (0, N.isUserInCreatorMonetizationEligibleCountry)(),
                    shouldRestrictUpdatingRoleSubscriptionSettings: (0, f.shouldRestrictUpdatingCreatorMonetizationSettings)(t.id)
                }), ea = (0, p.isGuildEligibleForGuildProducts)(t.id, "guild_settings"), ek = !1 === t.hasFeature(ey.GuildFeatures.CREATOR_MONETIZABLE) && !1 === t.hasFeature(ey.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL), ew = ea && ek ? {
                    label: (0, a.jsx)("div", {
                        className: eH.roleSubLabel,
                        children: eF.default.Messages.GUILD_SETTINGS_ENABLE_MONETIZATION_TAB_TITLE
                    }),
                    ariaLabel: eF.default.Messages.GUILD_SETTINGS_ENABLE_MONETIZATION_TAB_TITLE
                } : {
                    label: (0, a.jsx)("div", {
                        className: eH.roleSubLabel,
                        children: eF.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TITLE
                    }),
                    ariaLabel: eF.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TITLE
                };
                return [{
                    section: c.SectionTypes.HEADER,
                    label: eV(t)
                }, {
                    section: ey.GuildSettingsSections.OVERVIEW,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_OVERVIEW,
                    label: eF.default.Messages.OVERVIEW,
                    ariaLabel: eF.default.Messages.OVERVIEW,
                    element: eR.default,
                    notice: {
                        stores: [ei.default],
                        element: eR.GuildSettingsOverviewNotice
                    }
                }, {
                    section: ey.GuildSettingsSections.ROLES,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_ROLES,
                    label: eF.default.Messages.ROLES,
                    element: e_.default,
                    type: c.ContentTypes.MINIMAL,
                    ariaLabel: eF.default.Messages.GUILD_SETTINGS_ROLE_ICON_SIDEBAR_NEW_ARIA_LABEL,
                    notice: {
                        stores: [el.default],
                        element: e_.GuildSettingsRolesNotice
                    },
                    predicate: () => E
                }, {
                    section: ey.GuildSettingsSections.EMOJI,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_EMOJI,
                    label: eF.default.Messages.EMOJI,
                    element: eL.default,
                    predicate: () => _
                }, {
                    section: ey.GuildSettingsSections.STICKERS,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_STICKERS,
                    label: eF.default.Messages.GUILD_SETTINGS_STICKERS,
                    ariaLabel: eF.default.Messages.GUILD_SETTINGS_STICKERS,
                    element: ep.default,
                    predicate: () => _
                }, {
                    section: ey.GuildSettingsSections.SOUNDBOARD,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_SOUNDBOARD,
                    label: eF.default.Messages.GUILD_SETTINGS_SOUNDBOARD,
                    ariaLabel: eF.default.Messages.GUILD_SETTINGS_SOUNDBOARD,
                    element: ex.default,
                    predicate: () => _
                }, {
                    section: ey.GuildSettingsSections.WIDGET,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_WIDGET,
                    label: eF.default.Messages.WIDGET,
                    element: eP.default,
                    predicate: () => n
                }, {
                    section: ey.GuildSettingsSections.GUILD_TEMPLATES,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_TEMPLATE,
                    label: (0, a.jsx)(ev.default, {
                        showDirtyIndicator: F
                    }),
                    ariaLabel: eF.default.Messages.GUILD_TEMPLATES,
                    element: eU.default,
                    notice: {
                        stores: [eU.GuildSettingsTemplateMetadataStore],
                        element: eU.GuildSettingsTemplateNotice
                    },
                    predicate: () => n
                }, {
                    section: ey.GuildSettingsSections.VANITY_URL,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_VANITY_URL,
                    label: eF.default.Messages.VANITY_URL,
                    element: ej.default,
                    notice: {
                        stores: [er.default],
                        element: ej.GuildSettingsVanityURLNotice
                    },
                    predicate: () => n
                }, {
                    section: c.SectionTypes.DIVIDER,
                    predicate: () => n || T
                }, {
                    section: c.SectionTypes.HEADER,
                    label: eF.default.Messages.APPS,
                    predicate: () => n || T
                }, {
                    section: ey.GuildSettingsSections.INTEGRATIONS,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_INTEGRATION,
                    label: eF.default.Messages.INTEGRATIONS,
                    ariaLabel: eF.default.Messages.INTEGRATIONS,
                    element: em.default,
                    notice: {
                        stores: [en.default, ei.default],
                        element: em.GuildSettingsIntegrationsNotice
                    },
                    predicate: () => n || T
                }, {
                    section: ey.GuildSettingsSections.APP_DIRECTORY,
                    label: eF.default.Messages.APP_DIRECTORY,
                    ariaLabel: eF.default.Messages.APP_DIRECTORY,
                    onClick() {
                        (0, S.goToAppDirectory)({
                            guildId: t.id,
                            entrypoint: {
                                name: I.ApplicationDirectoryEntrypointNames.GUILD_SETTINGS,
                                guildSettingsSection: $
                            }
                        }), (0, d.popLayer)()
                    }
                }, {
                    section: c.SectionTypes.DIVIDER,
                    predicate: () => n
                }, {
                    section: c.SectionTypes.HEADER,
                    label: eF.default.Messages.MODERATION,
                    predicate: () => n
                }, {
                    section: ey.GuildSettingsSections.SAFETY,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_SAFETY,
                    label: eF.default.Messages.SAFETY_SETUP,
                    ariaLabel: eF.default.Messages.SAFETY_SETUP,
                    element: eT.default,
                    newIndicatorDismissibleContentTypes: [r.DismissibleContent.COMMUNITY_GUILD_SETTINGS_SAFETY],
                    predicate: () => n && t.hasFeature(ey.GuildFeatures.COMMUNITY)
                }, {
                    section: ey.GuildSettingsSections.MODERATION,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_MODERATION,
                    label: eF.default.Messages.SAFETY_SETUP,
                    element: eM.default,
                    predicate: () => n && !t.hasFeature(ey.GuildFeatures.COMMUNITY)
                }, {
                    section: ey.GuildSettingsSections.GUILD_AUTOMOD,
                    label: (0, a.jsx)("div", {
                        className: eH.landingPageTabLink,
                        children: eF.default.Messages.GUILD_SETTINGS_AUTOMOD_TITLE
                    }),
                    ariaLabel: eF.default.Messages.GUILD_SETTINGS_AUTOMOD_TITLE,
                    element: h.default,
                    newIndicatorDismissibleContentTypes: null,
                    predicate: () => !t.hasFeature(ey.GuildFeatures.COMMUNITY) && ((0, O.canCurrentUserManageAutomod)(t.id) || (0, O.canCurrentUserManageMessageFilters)(t.id))
                }, {
                    section: ey.GuildSettingsSections.AUDIT_LOG,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_AUDIT_LOG,
                    label: eF.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG,
                    element: eo.default,
                    type: c.ContentTypes.CUSTOM,
                    predicate: () => i
                }, {
                    section: ey.GuildSettingsSections.AUDIT_LOG_V2,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_AUDIT_LOG_V2,
                    label: eF.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG,
                    element: C.default,
                    type: c.ContentTypes.CUSTOM,
                    predicate: () => u && k
                }, {
                    section: ey.GuildSettingsSections.BANS,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_BANS,
                    label: eF.default.Messages.BANS,
                    element: eS.default,
                    type: c.ContentTypes.CUSTOM,
                    predicate: () => g
                }, {
                    section: c.SectionTypes.DIVIDER,
                    predicate: () => n || R
                }, {
                    section: c.SectionTypes.HEADER,
                    label: eF.default.Messages.COMMUNITY,
                    predicate: () => n || R
                }, {
                    section: ey.GuildSettingsSections.COMMUNITY,
                    impressionName: t.hasFeature(ey.GuildFeatures.COMMUNITY) ? l.ImpressionNames.GUILD_SETTINGS_COMMUNITY_OVERVIEW : l.ImpressionNames.GUILD_SETTINGS_ENABLE_COMMUNITY,
                    label: t.hasFeature(ey.GuildFeatures.COMMUNITY) ? eF.default.Messages.OVERVIEW : eF.default.Messages.GUILD_SETTINGS_COMMUNITY_ENABLE_COMMUNITY,
                    element: eN.default,
                    ariaLabel: t.hasFeature(ey.GuildFeatures.COMMUNITY) ? eF.default.Messages.OVERVIEW : eF.default.Messages.GUILD_SETTINGS_COMMUNITY_ENABLE_COMMUNITY,
                    newIndicator: !t.hasFeature(ey.GuildFeatures.COMMUNITY) && null != V && V >= eB.COMMUNITY_UPSELL_MINIMUM_GUILD_SIZE && H.default.hasHotspot(eb.HotspotLocations.GUILD_SETTINGS_COMMUNITY_GUILD_UPSELL),
                    notice: {
                        stores: [ei.default],
                        element: eN.GuildSettingsCommunityOverviewNotice
                    },
                    predicate: () => n
                }, {
                    section: ey.GuildSettingsSections.ONBOARDING,
                    label: eF.default.Messages.ONBOARDING,
                    element: eh.default,
                    ariaLabel: eF.default.Messages.ONBOARDING,
                    newIndicatorDismissibleContentTypes: z ? null : [r.DismissibleContent.COMMUNITY_ONBOARDING_NEW_BADGE],
                    notice: {
                        stores: [ed.default],
                        element: eE.default
                    },
                    predicate: () => (0, M.isGuildOnboardingSettingsAvailable)(t.id),
                    decoration: function(e, t) {
                        let {
                            homeSettingsEnabled: s
                        } = (0, x.getOnboardingHomeAdminExperiment)(e);
                        if (D.default.getEnabled(e)) return eF.default.Messages.GUILD_ONBOARDING_ON.toUpperCase();
                        if ((0, ec.isOnboardingWizardCompleted)(e)) return eF.default.Messages.GUILD_ONBOARDING_OFF.toUpperCase();
                        let a = eu.COMPLETABLE_ONBOARDING_STEPS.filter(e => !!s || e !== eu.GuildSettingsOnboardingPage.HOME_SETTINGS || !1),
                            n = a.findIndex(e => e === t);
                        if (-1 !== n) return eF.default.Messages.GUILD_ONBOARDING_SETUP_STEP_COUNTER.format({
                            count: n + 1,
                            total: a.length
                        })
                    }(t.id, K)
                }, {
                    section: ey.GuildSettingsSections.ANALYTICS,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_ANALYTICS,
                    label: eF.default.Messages.SERVER_INSIGHTS,
                    ariaLabel: eF.default.Messages.SERVER_INSIGHTS,
                    element: eI.default,
                    newIndicator: H.default.hasHotspot(eb.HotspotLocations.GUILD_ANALYTICS_GUILD_SETTINGS_MENU),
                    newIndicatorDismissibleContentTypes: w ? [r.DismissibleContent.GUILD_INSIGHTS_ACCESS_RATE_NEW] : null,
                    predicate: () => R && t.hasFeature(ey.GuildFeatures.COMMUNITY)
                }, {
                    section: ey.GuildSettingsSections.DISCOVERY,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_DISCOVERY,
                    label: eF.default.Messages.DISCOVERY,
                    element: eg.default,
                    notice: {
                        stores: [ei.default],
                        element: eg.GuildSettingsDiscoveryNotice
                    },
                    predicate: () => n && t.hasFeature(ey.GuildFeatures.COMMUNITY),
                    ariaLabel: t.hasFeature(ey.GuildFeatures.DISCOVERABLE) ? eF.default.Messages.DISCOVERY : eF.default.Messages.GUILD_SETTINGS_ENABLE_DISCOVERABLE
                }, {
                    section: ey.GuildSettingsSections.DISCOVERY_LANDING_PAGE,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_DISCOVERY_LANDING_PAGE,
                    label: (0, a.jsxs)("div", {
                        className: eH.landingPageTabLink,
                        children: [eF.default.Messages.DISCOVERY_LANDING_PAGE, " ", (0, a.jsx)(L.default, {})]
                    }),
                    ariaLabel: eF.default.Messages.DISCOVERY_LANDING_PAGE,
                    element: eA.default,
                    notice: {
                        stores: [ei.default],
                        element: eA.GuildSettingsDiscoveryLandingPageNotice
                    },
                    type: c.ContentTypes.CUSTOM,
                    predicate: () => n && (t.hasFeature(ey.GuildFeatures.DISCOVERABLE) || !!(null == Z ? void 0 : Z.isPublished))
                }, {
                    section: ey.GuildSettingsSections.COMMUNITY_WELCOME,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_COMMUNITY_WELCOME,
                    label: eF.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME,
                    ariaLabel: eF.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME,
                    element: ef.default,
                    notice: {
                        stores: [Y.default],
                        element: W.default
                    },
                    predicate: () => n && t.hasFeature(ey.GuildFeatures.COMMUNITY) && !X && !t.hasFeature(ey.GuildFeatures.GUILD_SERVER_GUIDE)
                }, {
                    section: c.SectionTypes.DIVIDER,
                    predicate: es
                }, {
                    section: c.SectionTypes.HEADER,
                    label: eF.default.Messages.MONETIZATION,
                    predicate: es
                }, {
                    ...ew,
                    section: ey.GuildSettingsSections.ROLE_SUBSCRIPTIONS,
                    element: y.default,
                    type: c.ContentTypes.CUSTOM,
                    predicate: es,
                    newIndicatorDismissibleContentTypes: (0, P.isEligibleForNewBadge)(t) ? [r.DismissibleContent.SERVER_SUBSCRIPTION_SETTINGS_NEW_BADGE_TIER_TEMPLATE] : null
                }, {
                    section: ey.GuildSettingsSections.GUILD_PRODUCTS,
                    label: eF.default.Messages.GUILD_PRODUCTS_TITLE,
                    ariaLabel: eF.default.Messages.GUILD_PRODUCTS_TITLE,
                    element: U.default,
                    predicate: () => es() && (0, p.isGuildEligibleForGuildProducts)(t.id, "guild_product_settings_predicate") && (0, v.hasEnabledMonetization)(t)
                }, {
                    section: ey.GuildSettingsSections.ROLE_SUBSCRIPTIONS_STORE_PAGE,
                    impressionName: l.ImpressionNames.GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_GUILD_SETTINGS,
                    newIndicator: 2022 === new Date().getFullYear(),
                    label: eF.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTIONS_STORE_PAGE,
                    ariaLabel: eF.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTIONS_STORE_PAGE,
                    element: b.default,
                    predicate: () => es() && (0, v.hasEnabledMonetization)(t)
                }, {
                    section: c.SectionTypes.DIVIDER
                }, {
                    section: ey.GuildSettingsSections.GUILD_PREMIUM,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_BOOST_STATUS,
                    label: eF.default.Messages.GUILD_PREMIUM,
                    ariaLabel: eF.default.Messages.GUILD_PREMIUM,
                    element: eD.default,
                    className: eH.serverBoostTabItem,
                    icon: (0, a.jsx)(eG.default, {
                        className: eH.icon
                    })
                }, {
                    section: c.SectionTypes.DIVIDER
                }, {
                    section: c.SectionTypes.HEADER,
                    label: eF.default.Messages.USER_MANAGEMENT
                }, {
                    section: ey.GuildSettingsSections.MEMBERS,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_MEMBERS,
                    label: (0, a.jsx)(eO.GuildSettingsMembersRow, {}),
                    ariaLabel: eF.default.Messages.MEMBERS,
                    element: eO.default,
                    type: c.ContentTypes.CUSTOM,
                    predicate: () => m
                }, {
                    section: ey.GuildSettingsSections.INSTANT_INVITES,
                    impressionName: l.ImpressionNames.GUILD_SETTINGS_INVITES,
                    label: eF.default.Messages.INVITES,
                    element: eC.default,
                    type: c.ContentTypes.CUSTOM,
                    predicate: () => n
                }, {
                    section: c.SectionTypes.DIVIDER,
                    predicate: () => B
                }, {
                    section: ey.GuildSettingsSections.DELETE,
                    onClick() {
                        let e = J.default.getCurrentUser();
                        if (null == e) return;
                        let n = t.toString(),
                            l = {
                                header: eF.default.Messages.DELETE_SERVER_TITLE.format({
                                    name: n
                                }),
                                confirmText: eF.default.Messages.DELETE_SERVER,
                                cancelText: eF.default.Messages.CANCEL,
                                onConfirm: () => {
                                    q.ComponentDispatch.subscribeOnce(ey.ComponentActions.LAYER_POP_COMPLETE, () => {
                                        et.default.deleteGuild(t.id, n).then(() => {
                                            if ((0, A.isDismissibleContentDismissed)(r.DismissibleContent.GUILD_DELETE_FEEDBACK)) return;
                                            ee.default.trackExposure({
                                                location: "e4be39_1"
                                            });
                                            let {
                                                showFeedback: e
                                            } = ee.default.getCurrentConfig({
                                                location: "e4be39_2"
                                            }, {
                                                autoTrackExposure: !1
                                            });
                                            e && (0, o.openModalLazy)(async () => {
                                                let {
                                                    default: e
                                                } = await s.el("56814").then(s.bind(s, "56814"));
                                                return s => (0, a.jsx)(e, {
                                                    ...s,
                                                    guildId: t.id
                                                })
                                            })
                                        })
                                    }), (0, d.popLayer)()
                                }
                            };
                        e.mfaEnabled ? (0, o.openModal)(e => (0, a.jsx)(o.ConfirmModal, {
                            ...e,
                            ...l,
                            children: (0, a.jsx)(o.Text, {
                                variant: "text-md/normal",
                                children: eF.default.Messages.DELETE_SERVER_BODY.format({
                                    name: n
                                })
                            })
                        })) : (0, o.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("494078").then(s.bind(s, "494078"));
                            return t => (0, a.jsx)(e, {
                                ...t,
                                ...l,
                                validationText: n,
                                instructionText: eF.default.Messages.DELETE_SERVER_ENTER_NAME,
                                errorText: eF.default.Messages.DELETE_SERVER_INCORRECT_NAME,
                                children: eF.default.Messages.DELETE_SERVER_BODY.format({
                                    name: n
                                })
                            })
                        })
                    },
                    label: eF.default.Messages.DELETE_SERVER,
                    ariaLabel: eF.default.Messages.DELETE_SERVER,
                    icon: (0, a.jsx)(Q.default, {
                        width: 16,
                        height: 16
                    }),
                    predicate: () => B
                }]
            }

            function ew(e, t) {
                return ek({
                    channels: t,
                    showDirtyGuildTemplateIndicator: !1,
                    ...Z.default.getGuildPermissionProps(e),
                    isGuildAuditLogV2Enabled: !1,
                    showAccessRate: !1
                }).filter(e => {
                    let {
                        section: t
                    } = e;
                    return t !== c.SectionTypes.HEADER && t !== c.SectionTypes.DIVIDER
                }).filter(e => null == e.predicate || e.predicate())
            }

            function eY(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                    s = arguments.length > 2 ? arguments[2] : void 0;
                _.default.trackWithMetadata(ey.AnalyticEvents.SETTINGS_PANE_VIEWED, {
                    settings_type: "guild",
                    origin_pane: t,
                    destination_pane: e,
                    location: s
                })
            }
            let eK = {
                canManageGuild: !1,
                canManageChannels: !1,
                canManageRoles: !1,
                canManageBans: !1,
                canManageNicknames: !1,
                canManageGuildExpressions: !1,
                canViewAuditLog: !1,
                canViewAuditLogV2: !1,
                canManageWebhooks: !1,
                canAccessMembersPage: !1,
                canViewGuildAnalytics: !1,
                isOwner: !1,
                isOwnerWithRequiredMfaLevel: !1
            };
            class eW extends n.PureComponent {
                componentDidMount() {
                    eY(this.props.section, null, this.props.analyticsLocation)
                }
                componentWillUnmount() {
                    et.default.close()
                }
                componentDidUpdate(e) {
                    let {
                        section: t
                    } = e, {
                        section: s,
                        canManageGuild: a,
                        canManageRoles: n,
                        canManageBans: l,
                        canManageNicknames: i,
                        canManageGuildExpressions: r,
                        canViewAuditLog: o,
                        canViewAuditLogV2: u,
                        canManageWebhooks: c,
                        canAccessMembersPage: E,
                        canViewGuildAnalytics: _
                    } = this.props;
                    s !== t && eY(s, t), (!a && !n && !l && !i && !r && !o && !u && !E && !c || !o && s === ey.GuildSettingsSections.AUDIT_LOG || !u && s === ey.GuildSettingsSections.AUDIT_LOG_V2 || !n && s === ey.GuildSettingsSections.ROLES || !r && s === ey.GuildSettingsSections.EMOJI || !r && s === ey.GuildSettingsSections.STICKERS || !r && s === ey.GuildSettingsSections.SOUNDBOARD || !l && s === ey.GuildSettingsSections.BANS || !_ && s === ey.GuildSettingsSections.ANALYTICS || !E && s === ey.GuildSettingsSections.MEMBERS) && (0, d.popLayer)()
                }
                render() {
                    var e, t;
                    let {
                        theme: s,
                        sidebarTheme: n,
                        section: l,
                        guild: i,
                        channels: r,
                        canManageGuild: o,
                        canViewAuditLog: c,
                        canViewAuditLogV2: E,
                        canManageRoles: _,
                        canManageGuildExpressions: T,
                        canManageWebhooks: I,
                        canManageBans: S,
                        canAccessMembersPage: N,
                        canViewGuildAnalytics: f,
                        isOwner: g,
                        isOwnerWithRequiredMfaLevel: A,
                        showDirtyGuildTemplateIndicator: L,
                        memberCount: m,
                        isGuildAuditLogV2Enabled: C,
                        showAccessRate: O,
                        onboardingStep: h,
                        onboardingEnabled: R,
                        welcomeScreenEmpty: D,
                        guildMetadata: M
                    } = this.props;
                    if (null == i) return null;
                    let G = ek({
                            guild: i,
                            channels: r,
                            canManageGuild: o,
                            canViewAuditLog: c,
                            canViewAuditLogV2: E,
                            canManageRoles: _,
                            canManageGuildExpressions: T,
                            canManageWebhooks: I,
                            canManageBans: S,
                            canAccessMembersPage: N,
                            canViewGuildAnalytics: f,
                            isOwner: g,
                            isOwnerWithRequiredMfaLevel: A,
                            showDirtyGuildTemplateIndicator: L,
                            memberCount: m,
                            isGuildAuditLogV2Enabled: C,
                            showAccessRate: O,
                            onboardingStep: h,
                            onboardingEnabled: R,
                            welcomeScreenEmpty: D,
                            guildMetadata: M,
                            section: l
                        }),
                        x = (null === (t = G.find(e => e.section === l)) || void 0 === t ? void 0 : null === (e = t.predicate) || void 0 === e ? void 0 : e.call(t)) !== !1;
                    return (0, a.jsxs)("div", {
                        children: [(0, a.jsx)(u.default, {
                            theme: s,
                            sidebarTheme: n,
                            section: x && null != l ? l : ey.GuildSettingsSections.OVERVIEW,
                            onSetSection: et.default.setSection,
                            onClose: d.popLayer,
                            title: eV(i),
                            sections: G
                        }), (0, a.jsx)(V.ViewingRolesSettingsNotice, {
                            guildId: i.id
                        })]
                    })
                }
            }

            function ez() {
                var e, t;
                let {
                    guild: s,
                    section: l,
                    analyticsLocation: r,
                    guildMetadata: o,
                    isGuildMetadataLoaded: d
                } = (0, i.useStateFromStoresObject)([ei.default], () => ei.default.getProps()), {
                    AnalyticsLocationProvider: u
                } = (0, T.default)(E.default.GUILD_SETTINGS), c = (0, i.useStateFromStores)([k.default], () => k.default.theme), _ = (0, i.useStateFromStores)([k.default], () => k.default.darkSidebar ? ey.ThemeTypes.DARK : void 0), I = (0, i.useStateFromStores)([z.default], () => null != s ? z.default.getChannels(s.id).SELECTABLE : null, [s]), S = (0, i.useStateFromStoresObject)([Z.default], () => null != s ? Z.default.getGuildPermissionProps(s) : eK), N = null == s ? void 0 : s.id, f = (0, i.useStateFromStores)([Z.default], () => null != s && Z.default.canAccessGuildSettings(s)), A = null != s && (0, $.staffOnlyGuildSettingsAccess)(s.id), L = A || f, C = A || S.canViewGuildAnalytics, {
                    shouldFetchMemberInsights: O,
                    hasAccessRate: h
                } = (0, i.useStateFromStoresObject)([ea.default], () => ({
                    shouldFetchMemberInsights: null != s && ea.default.shouldFetchMemberInsights(s.id),
                    hasAccessRate: null != s && ea.default.getMemberInsights(s.id).hasAccessRate
                }));
                n.useEffect(() => {
                    !d && null != N && (0, g.fetchMetadataForGuild)(N)
                }, [d, N]), n.useEffect(() => {
                    L && C && O && null != N && (0, es.fetchMemberInsights)(N)
                }, [L, C, O, N]);
                let M = null !== (e = null == s ? void 0 : s.hasFeature(ey.GuildFeatures.COMMUNITY)) && void 0 !== e && e;
                n.useEffect(() => {
                    null != N && M && ((0, R.fetchOnboardingPrompts)(N), (0, w.fetchWelcomeScreen)(N))
                }, [N, M]);
                let {
                    homeSettingsEnabled: p
                } = (0, x.useOnboardingHomeAdminExperiment)(null != N ? N : "");
                n.useEffect(() => {
                    null != N && p && (0, G.fetchGuildHomeSettings)(N)
                }, [p, N]);
                let {
                    showAccessRate: U
                } = (0, $.useGuildAccessRateInsightExperiment)(null == s ? void 0 : s.id, !h || !C || !L), v = (0, i.useStateFromStores)([F.default], () => {
                    var e;
                    return (null == s ? void 0 : s.id) != null && (null === (e = F.default.getForGuild(s.id)) || void 0 === e ? void 0 : e.isDirty) === !0
                }, [s]), j = (0, i.useStateFromStores)([X.default], () => X.default.getMemberCount(null == s ? void 0 : s.id), [s]), P = (0, m.useGuildAuditLogV2Enabled)(null !== (t = null == s ? void 0 : s.id) && void 0 !== t ? t : "");
                n.useEffect(() => {
                    null != N && S.canManageGuild && B.default.loadTemplatesForGuild(N)
                }, [N, S.canManageGuild]), n.useEffect(() => {
                    !L && et.default.close()
                }, [L]);
                let y = (0, i.useStateFromStores)([ed.default], () => ed.default.getCurrentPage()),
                    b = (0, i.useStateFromStores)([D.default], () => null != N && D.default.getEnabled(N)),
                    H = (0, i.useStateFromStores)([K.default], () => null != N && K.default.isEmpty(N));
                return (0, a.jsx)(u, {
                    children: (0, a.jsx)(eW, {
                        guild: s,
                        section: l,
                        theme: c,
                        sidebarTheme: _,
                        channels: I,
                        showDirtyGuildTemplateIndicator: v,
                        analyticsLocation: r,
                        memberCount: j,
                        isGuildAuditLogV2Enabled: P,
                        ...S,
                        canViewGuildAnalytics: C,
                        showAccessRate: U,
                        onboardingStep: y,
                        onboardingEnabled: b,
                        welcomeScreenEmpty: H,
                        guildMetadata: o
                    })
                })
            }
        },
        902273: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return W
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("748820"),
                i = s("86758"),
                r = s("446674"),
                o = s("872717"),
                d = s("151426"),
                u = s("669491"),
                c = s("77078"),
                E = s("655772"),
                _ = s("10641"),
                T = s("597517"),
                I = s("915639"),
                S = s("525065"),
                N = s("305961"),
                f = s("37785"),
                g = s("68238"),
                A = s("956089"),
                L = s("599110"),
                m = s("199938"),
                C = s("592407"),
                O = s("738216"),
                h = s("692541"),
                R = s("900938"),
                D = s("49111"),
                M = s("994428"),
                G = s("533613"),
                x = s("782340"),
                p = s("383353"),
                U = s("330808"),
                v = s("424596"),
                j = s("284776"),
                P = s("101332"),
                y = s("831153"),
                b = s("432392"),
                B = s("933861"),
                F = s("877026"),
                H = s("775113");
            let V = function(e, t, s) {
                    let a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
                        n = null;
                    return null == t || Number.isNaN(t) ? (null == t || Number.isNaN(t)) && null != e && (n = x.default.Messages.GUILD_ANALYTICS_METRICS_LAST_WEEK) : n = x.default.Messages.PERCENTAGE_SINCE_LAST_WEEK.format({
                        percentage: (0, i.truncateAndLocalizeNumber)(Math.abs(t), s)
                    }), {
                        localizedNumber: null != e ? "".concat((0, i.truncateAndLocalizeNumber)(e, s)).concat(a ? "%" : "") : x.default.Messages.NOT_AVAILABLE,
                        subtext: n,
                        isTrendingUp: t > 0,
                        isTrendingDown: t < 0
                    }
                },
                k = function(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    return t || e === D.AbortCodes.NOT_ENOUGH_GUILD_MEMBERS ? (0, a.jsx)(c.FormErrorBlock, {
                        icon: g.default,
                        className: p.notEnoughMembersError,
                        backgroundColor: c.FormErrorBlockColors.BACKGROUND_ACCENT,
                        children: x.default.Messages.GUILD_ANALYTICS_ERROR_GUILD_SIZE
                    }) : null == e ? null : (0, a.jsx)(c.FormErrorBlock, {
                        backgroundColor: c.FormErrorBlockColors.BACKGROUND_ACCENT,
                        children: x.default.Messages.GUILD_ANALYTICS_ERROR_MESSAGE
                    })
                };

            function w(e) {
                L.default.track(D.AnalyticEvents.GUILD_INSIGHTS_SETTINGS_CTA_CLICKED, {
                    guild_id: e
                });
                let t = null == e ? D.RelativeMarketingURLs.DEVELOPER_PORTAL : D.RelativeMarketingURLs.DEVELOPER_PORTAL_GUILD_ANALYTICS(e),
                    s = (0, l.v4)();
                return o.default.post({
                    url: D.Endpoints.HANDOFF,
                    body: {
                        key: s
                    },
                    oldFormErrors: !0
                }).then(e => {
                    let a = e.body.handoff_token;
                    window.open(D.MarketingURLs.DEVELOPER_PORTAL_LOGIN_HANDOFF(s, a, t))
                }, () => {
                    window.open(t)
                })
            }
            let Y = () => {
                let [e, t] = n.useState(!1), s = (0, r.useStateFromStores)([R.default], () => R.default.getGuildId());
                return (0, a.jsx)(c.Button, {
                    className: p.developerPortalCta,
                    onClick: () => {
                        t(!0), w(s).then(() => {
                            t(!1)
                        })
                    },
                    submitting: e,
                    children: x.default.Messages.GUILD_ANALYICS_DEVELOPERS_BUTTON
                })
            };

            function K(e) {
                let {
                    guildId: t
                } = e, {
                    hasAccessRate: s,
                    accessRate: l
                } = (0, r.useStateFromStoresObject)([h.default], () => h.default.getMemberInsights(t)), i = (0, r.useStateFromStores)([S.default], () => {
                    var e;
                    return null !== (e = S.default.getMemberCount()) && void 0 !== e ? e : 0
                }), {
                    showAccessRate: o
                } = (0, m.useGuildAccessRateInsightExperiment)(t, !s);
                if (n.useEffect(() => {
                        o && ((0, _.requestMarkDismissibleContentAsShown)(d.DismissibleContent.GUILD_INSIGHTS_ACCESS_RATE_NEW), (0, _.markDismissibleContentAsDismissed)(d.DismissibleContent.GUILD_INSIGHTS_ACCESS_RATE_NEW, {
                            dismissAction: M.ContentDismissActionType.AUTO
                        }))
                    }, [o]), !o || !s || null == l) return null;
                let E = 10 * Math.ceil((1 - l) * 10),
                    T = H,
                    I = null,
                    N = null;
                return l >= .9 ? (T = H, I = x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_VERY_GOOD.format({
                    ratingHook: (e, t) => (0, a.jsx)("span", {
                        className: p.ratingVeryGood,
                        children: e
                    }, t)
                }), N = x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_LESS.format({
                    accessRate: 10
                })) : l >= (i > 1e4 ? .7 : .8) ? (T = B, I = x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_GOOD.format({
                    ratingHook: (e, t) => (0, a.jsx)("span", {
                        className: p.ratingGood,
                        children: e
                    }, t)
                }), N = x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_APPROX.format({
                    accessRate: E
                })) : l >= .5 ? (T = F, I = x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_NEUTRAL.format({
                    ratingHook: (e, t) => (0, a.jsx)("span", {
                        className: p.ratingNeutral,
                        children: e
                    }, t)
                }), N = x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_APPROX.format({
                    accessRate: E
                })) : (T = b, I = x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_BAD.format({
                    ratingHook: (e, t) => (0, a.jsx)("span", {
                        className: p.ratingBad,
                        children: e
                    }, t)
                }), N = 100 === E ? x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_APPROX.format({
                    accessRate: E
                }) : x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_MORE.format({
                    accessRate: E
                })), (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)(c.Heading, {
                        variant: "heading-md/semibold",
                        className: p.insightsTitle,
                        children: [x.default.Messages.MEMBER_INSIGHTS_SERVER_ACCESS, (0, a.jsx)(A.TextBadge, {
                            text: x.default.Messages.BETA,
                            color: u.default.unsafe_rawColors.BRAND_500.css,
                            className: p.betaTag
                        })]
                    }), (0, a.jsxs)("div", {
                        className: p.memberInsightsContainer,
                        children: [(0, a.jsxs)("div", {
                            className: p.insightsHeader,
                            children: [(0, a.jsx)("img", {
                                alt: "",
                                className: p.insightsIcon,
                                src: T
                            }), (0, a.jsxs)("div", {
                                children: [(0, a.jsx)(c.Text, {
                                    variant: "text-md/semibold",
                                    className: p.title,
                                    children: I
                                }), (0, a.jsxs)(c.Text, {
                                    className: p.description,
                                    variant: "text-sm/normal",
                                    children: [N, (0, a.jsx)(c.TooltipContainer, {
                                        text: x.default.Messages.MEMBER_INSIGHTS_ACCESS_RATE_TOOLTIP,
                                        className: p.insightsTooltip,
                                        children: (0, a.jsx)(g.default, {
                                            className: p.insightsTooltipIcon
                                        })
                                    })]
                                })]
                            })]
                        }), l < .9 ? (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)("div", {
                                className: p.divider
                            }), (0, a.jsx)(c.Text, {
                                className: p.tips,
                                variant: "text-sm/semibold",
                                children: x.default.Messages.MEMBER_INSIGHTS_TIPS.format()
                            }), (0, a.jsxs)("div", {
                                className: p.insightsActions,
                                children: [(0, a.jsxs)("div", {
                                    className: p.insightAction,
                                    children: [(0, a.jsx)("img", {
                                        alt: "",
                                        className: p.actionIcon,
                                        src: j
                                    }), (0, a.jsx)(c.Text, {
                                        className: p.actionText,
                                        variant: "text-sm/normal",
                                        children: x.default.Messages.ACCESS_RATE_ACTION_SIMPLIFY
                                    })]
                                }), (0, a.jsx)("div", {
                                    className: p.dividerInline
                                }), (0, a.jsxs)("div", {
                                    className: p.insightAction,
                                    children: [(0, a.jsx)("img", {
                                        alt: "",
                                        className: p.actionIcon,
                                        src: P
                                    }), (0, a.jsx)(c.Text, {
                                        className: p.actionText,
                                        variant: "text-sm/normal",
                                        children: x.default.Messages.ACCESS_RATE_ACTION_EXTRA_STEPS
                                    })]
                                }), (0, a.jsx)("div", {
                                    className: p.dividerInline
                                }), (0, a.jsxs)("div", {
                                    className: p.insightAction,
                                    children: [(0, a.jsx)("img", {
                                        alt: "",
                                        className: p.actionIcon,
                                        src: v
                                    }), (0, a.jsx)(c.Text, {
                                        className: p.actionText,
                                        variant: "text-sm/normal",
                                        children: x.default.Messages.ACCESS_RATE_ACTION_BOTS.format({
                                            integrationsHook: (e, t) => (0, a.jsx)(f.default, {
                                                onClick: () => C.default.setSection(D.GuildSettingsSections.INTEGRATIONS),
                                                className: p.link,
                                                children: e
                                            }, t)
                                        })
                                    })]
                                }), (0, a.jsx)("div", {
                                    className: p.dividerInline
                                }), (0, a.jsxs)("div", {
                                    className: p.insightAction,
                                    children: [(0, a.jsx)("img", {
                                        alt: "",
                                        className: p.actionIcon,
                                        src: U
                                    }), (0, a.jsx)(c.Text, {
                                        className: p.actionText,
                                        variant: "text-sm/normal",
                                        children: x.default.Messages.ACCESS_RATE_ACTION_AUDIT
                                    })]
                                })]
                            })]
                        }) : (0, a.jsx)("div", {
                            className: p.insightsActions,
                            children: (0, a.jsxs)("div", {
                                className: p.insightAction,
                                children: [(0, a.jsx)("img", {
                                    alt: "",
                                    className: p.actionIcon,
                                    src: y
                                }), (0, a.jsx)(c.Text, {
                                    className: p.actionText,
                                    variant: "text-sm/normal",
                                    children: x.default.Messages.ACCESS_RATE_ACTION_SUCCESS.format({
                                        insightsHook: (e, s) => (0, a.jsx)(f.default, {
                                            onClick: () => w(t),
                                            className: p.link,
                                            children: e
                                        }, s)
                                    })
                                })]
                            })
                        })]
                    }), (0, a.jsx)("div", {
                        className: p.divider
                    }), (0, a.jsx)(c.Heading, {
                        variant: "heading-md/semibold",
                        className: p.insightsTitle,
                        children: x.default.Messages.SERVER_INSIGHTS
                    })]
                })
            }
            var W = () => {
                let e = (0, r.useStateFromStores)([R.default], () => R.default.getGuildId()),
                    t = (0, r.useStateFromStores)([S.default], () => S.default.getMemberCount(e)),
                    s = (0, r.useStateFromStores)([N.default], () => N.default.getGuild(e)),
                    l = (0, r.useStateFromStores)([I.default], () => I.default.locale),
                    {
                        analytics: i,
                        errorCode: o
                    } = (0, r.useStateFromStoresObject)([h.default], () => ({
                        analytics: null != e ? h.default.getOverviewAnalytics(e) : null,
                        errorCode: h.default.getError()
                    })),
                    d = null == t || null == s || null != t && t < 500 && null != s && !s.hasFeature(D.GuildFeatures.PARTNERED) && !s.hasFeature(D.GuildFeatures.VERIFIED);
                n.useEffect(() => {
                    null != e && !d && ((0, O.fetchEngagementOverview)(e), (0, O.fetchGrowthActivationOverview)(e), (0, O.fetchGrowthActivationRetention)(e))
                }, [e, d]), n.useEffect(() => {
                    (0, T.hideHotspot)(G.HotspotLocations.GUILD_ANALYTICS_GUILD_SETTINGS_MENU)
                }, []);
                let u = null != i ? (0, a.jsx)("div", {
                    className: p.guildAnalyticsOverviewWrapper,
                    children: (0, a.jsxs)("div", {
                        className: p.overviewData,
                        children: [(0, a.jsx)(E.default, {
                            title: x.default.Messages.WEEKLY_VISITORS,
                            tooltipText: x.default.Messages.VISITORS_INFO,
                            ...V(i.visitors, i.visitorsChange, l)
                        }), (0, a.jsx)(E.default, {
                            title: x.default.Messages.WEEKLY_COMMUNICATORS,
                            tooltipText: x.default.Messages.COMMUNICATORS_INFO,
                            ...V(i.communicators, i.communicatorsChange, l)
                        }), (0, a.jsx)(E.default, {
                            title: x.default.Messages.WEEKLY_NEW_MEMBERS,
                            ...V(i.newMembers, i.newMembersChange, l)
                        }), (0, a.jsx)(E.default, {
                            title: x.default.Messages.WEEKLY_NEW_MEMBER_RETENTION,
                            tooltipText: x.default.Messages.NEW_MEMBER_RETENTION_INFO,
                            ...V(i.pctRetained, i.pctRetainedChange, l, !0)
                        })]
                    })
                }) : null;
                return (0, a.jsxs)(c.FormSection, {
                    tag: c.FormTitleTags.H1,
                    title: x.default.Messages.SERVER_INSIGHTS,
                    children: [(0, a.jsx)(c.FormText, {
                        type: c.FormTextTypes.DESCRIPTION,
                        children: x.default.Messages.GUILD_ANALYTICS_DESCRIPTION.format()
                    }), k(o, d), null != e ? (0, a.jsx)(K, {
                        guildId: e
                    }) : null, (0, a.jsxs)("div", {
                        className: p.developerPortalCtaWrapper,
                        children: [(0, a.jsx)("div", {
                            className: p.placeholderImage
                        }), (0, a.jsx)(c.Text, {
                            className: p.developerPortalCtaText,
                            variant: "text-sm/normal",
                            children: x.default.Messages.GUILD_ANALYTICS_DEVELOPERS_CTA
                        }), (0, a.jsx)(Y, {})]
                    }), u]
                })
            }
        },
        721822: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return b
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s("446674"),
                d = s("77078"),
                u = s("272030"),
                c = s("851387"),
                E = s("534291"),
                _ = s("599417"),
                T = s("161778"),
                I = s("102985"),
                S = s("697218"),
                N = s("941886"),
                f = s("810567"),
                g = s("258078"),
                A = s("117362"),
                L = s("655518"),
                m = s("158998"),
                C = s("592407"),
                O = s("468349"),
                h = s("900938"),
                R = s("431451"),
                D = s("772871"),
                M = s("318496"),
                G = s("49111"),
                x = s("782340"),
                p = s("383385"),
                U = s("405879");

            function v(e) {
                let {
                    transitionState: t,
                    guild: s,
                    user: l,
                    ban: i,
                    hideDiscriminator: r,
                    onClose: o
                } = e, [u, E] = n.useState(!1), [T, I] = n.useState(null);
                async function S() {
                    if (null != s) {
                        I(null), E(!0);
                        try {
                            await c.default.unbanUser(s.id, l.id), o()
                        } catch (e) {
                            I(new _.default(e)), E(!1)
                        }
                    }
                }
                return (0, a.jsxs)(d.ModalRoot, {
                    className: p.bannedUserModal,
                    transitionState: t,
                    children: [(0, a.jsxs)(d.ModalHeader, {
                        className: p.header,
                        separator: !1,
                        children: [(0, a.jsx)(g.default, {
                            size: g.default.Sizes.SIZE_24,
                            className: p.userUsername,
                            children: m.default.getUserTag(l, {
                                mode: "username",
                                identifiable: r ? "never" : "always"
                            })
                        }), r || l.isPomelo() ? null : (0, a.jsxs)(g.default, {
                            size: g.default.Sizes.SIZE_24,
                            className: p.userDiscrim,
                            children: ["#", l.discriminator]
                        })]
                    }), (0, a.jsxs)(d.ModalContent, {
                        className: p.content,
                        children: [(0, a.jsx)(d.Text, {
                            className: p.reasonHeader,
                            variant: "text-xs/normal",
                            children: x.default.Messages.BAN_REASON
                        }), (0, a.jsx)(d.Text, {
                            variant: "text-sm/normal",
                            children: null != i.reason && "" !== i.reason ? i.reason : x.default.Messages.NO_BAN_REASON
                        }), null != T ? (0, a.jsx)(d.Text, {
                            className: p.error,
                            color: "text-danger",
                            variant: "text-sm/normal",
                            children: T.getAnyErrorMessage()
                        }) : null]
                    }), (0, a.jsxs)(d.ModalFooter, {
                        className: p.footer,
                        children: [(0, a.jsx)(d.Button, {
                            onClick: S,
                            look: d.Button.Looks.LINK,
                            color: d.Button.Colors.RED,
                            submitting: u,
                            children: x.default.Messages.REVOKE_BAN
                        }), (0, a.jsx)(d.Button, {
                            onClick: o,
                            children: x.default.Messages.DONE
                        })]
                    })]
                })
            }
            class j extends n.PureComponent {
                render() {
                    let {
                        user: e,
                        hideDiscriminator: t,
                        guild: s
                    } = this.props;
                    return (0, a.jsxs)(d.Clickable, {
                        className: i(p.bannedUser, U.card),
                        onClick: this.handleShowModal,
                        onContextMenu: this.handleContextMenu,
                        children: [(0, a.jsx)(d.Avatar, {
                            src: e.getAvatarURL(null == s ? void 0 : s.id, 40),
                            "aria-label": e.username,
                            size: d.AvatarSizes.SIZE_40,
                            className: p.bannedUserAvatar
                        }), (0, a.jsxs)("div", {
                            className: p.username,
                            children: [m.default.getUserTag(e, {
                                mode: "username",
                                identifiable: t ? "never" : "always"
                            }), !t && !e.isPomelo() && (0, a.jsxs)("span", {
                                className: p.discrim,
                                children: ["#", e.discriminator]
                            })]
                        })]
                    })
                }
                constructor(...e) {
                    super(...e), this.handleShowModal = () => {
                        let {
                            guild: e,
                            user: t,
                            hideDiscriminator: s,
                            ban: n
                        } = this.props;
                        (0, d.openModal)(l => (0, a.jsx)(v, {
                            ...l,
                            guild: e,
                            user: t,
                            ban: n,
                            hideDiscriminator: s
                        }))
                    }, this.handleContextMenu = e => {
                        (0, u.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("590079").then(s.bind(s, "590079"));
                            return t => (0, a.jsx)(e, {
                                ...t,
                                user: this.props.user
                            })
                        })
                    }
                }
            }
            class P extends n.PureComponent {
                makeFilter(e) {
                    if (null == e || 0 === e.length) return e => null != e;
                    {
                        let t = RegExp("^".concat(L.default.escape(e)), "i");
                        return s => null != s && (s.id === e || t.test(s.username))
                    }
                }
                render() {
                    let {
                        bans: e,
                        guild: t,
                        searchQuery: s
                    } = this.props;
                    if (null == t) return null;
                    let n = this.getSortedBans(e, s);
                    return (0, a.jsx)(E.ListContentScroller, {
                        sections: [Math.max(1, n.length)],
                        sectionHeight: this.getSectionHeight,
                        renderSection: this.renderSection,
                        rowHeight: this.getRowHeight,
                        renderRow: this.renderRow
                    })
                }
                handleModerationClick() {
                    C.default.setSection(G.GuildSettingsSections.SAFETY), (0, R.setSafetyPage)(D.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION)
                }
                handleQueryChange(e) {
                    C.default.setSearchQuery(e)
                }
                handleQueryClear() {
                    C.default.setSearchQuery("")
                }
                constructor(...e) {
                    super(...e), this.getSortedBans = (0, A.cachedFunction)((e, t) => {
                        if (null == e) return [];
                        let s = this.makeFilter(t),
                            a = [];
                        for (let t of e.keys()) {
                            let e = S.default.getUser(t);
                            null != e && s(e) && a.push(e)
                        }
                        return a.sort((e, t) => e.username.localeCompare(t.username))
                    }), this.getRowHeight = (e, t) => {
                        var s;
                        if (e > 0) return 0;
                        let {
                            bans: a,
                            searchQuery: n
                        } = this.props, l = this.getSortedBans(a, n);
                        if (0 === l.length && 1 === t) return 56;
                        let i = l[t],
                            r = null == a ? void 0 : a.get(null !== (s = null == i ? void 0 : i.id) && void 0 !== s ? s : "");
                        return null == i || null == r ? 0 : 56
                    }, this.renderRow = e => {
                        var t;
                        let {
                            section: s,
                            row: n
                        } = e, {
                            bans: l,
                            streamerMode: i,
                            guild: r,
                            searchQuery: o
                        } = this.props;
                        if (s > 0) return null;
                        if (null == l && 0 === n) return (0, a.jsx)(d.Spinner, {
                            className: p.spinner,
                            type: d.Spinner.Type.SPINNING_CIRCLE
                        }, "spinner");
                        let u = this.getSortedBans(l, o),
                            c = u[n],
                            E = null == l ? void 0 : l.get(null !== (t = null == c ? void 0 : c.id) && void 0 !== t ? t : "");
                        if (null != c && null != E) return (0, a.jsx)(j, {
                            user: c,
                            ban: E,
                            hideDiscriminator: i,
                            guild: r
                        }, c.id)
                    }, this.getSectionHeight = e => {
                        if (e > 0) return 0;
                        let {
                            bans: t
                        } = this.props;
                        return null == t ? 462 : 120
                    }, this.renderSection = () => {
                        var e;
                        let t;
                        let {
                            bans: n,
                            theme: l,
                            searchQuery: i
                        } = this.props;
                        null == n ? t = null : (null == n ? void 0 : n.size) === 0 && (t = (0, a.jsxs)(N.default, {
                            theme: l,
                            className: p.emptyState,
                            children: [(0, a.jsx)(N.EmptyStateImage, {
                                darkSrc: s("325911"),
                                lightSrc: s("138147"),
                                width: 256,
                                height: 212
                            }), (0, a.jsx)(N.EmptyStateText, {
                                note: x.default.Messages.BANS_NO_USERS_BANNED,
                                style: {
                                    maxWidth: 300
                                },
                                children: x.default.Messages.NO_BANS
                            })]
                        }));
                        let r = null !== (e = null == n ? void 0 : n.size) && void 0 !== e ? e : 0;
                        return (0, a.jsxs)(d.FormSection, {
                            tag: d.FormTitleTags.H1,
                            title: x.default.Messages.BANS_HEADER.format({
                                bans: r
                            }),
                            children: [(0, a.jsxs)("div", {
                                className: p.settingsHeader,
                                children: [(0, a.jsx)(d.FormText, {
                                    type: d.FormTextTypes.DESCRIPTION,
                                    className: p.description,
                                    children: x.default.Messages.BANS_HINT.format({
                                        onModerationClick: this.handleModerationClick
                                    })
                                }), null == t && (0, a.jsx)(f.default, {
                                    className: p.searchBar,
                                    query: null != i ? i : "",
                                    placeholder: x.default.Messages.BANS_SEARCH_PLACEHOLDER,
                                    "aria-label": x.default.Messages.BANS_SEARCH_PLACEHOLDER,
                                    onChange: this.handleQueryChange,
                                    onClear: this.handleQueryClear
                                })]
                            }), (0, a.jsx)(d.FormDivider, {
                                style: {
                                    marginBottom: -1
                                }
                            }), t]
                        }, "bans-header")
                    }
                }
            }
            let y = o.default.connectStores([h.default, T.default, I.default], () => {
                let {
                    bans: e,
                    guild: t,
                    searchQuery: s
                } = h.default.getProps();
                return {
                    searchQuery: null != s ? s : "",
                    bans: e,
                    guild: t,
                    theme: T.default.theme,
                    streamerMode: I.default.hidePersonalInformation
                }
            })(P);

            function b() {
                var e;
                let {
                    guild: t
                } = (0, o.useStateFromStores)([h.default], () => h.default.getProps(), [], r.isEqual), {
                    enabled: s
                } = O.GuildSettingsBansNewExperiment.useExperiment({
                    guildId: null !== (e = null == t ? void 0 : t.id) && void 0 !== e ? e : "",
                    location: "4d6318_1"
                }, {
                    autoTrackExposure: !0
                });
                return s ? (0, a.jsx)(M.default, {}) : (0, a.jsx)(y, {})
            }
        },
        318496: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return y
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s.n(r),
                d = s("65597"),
                u = s("77078"),
                c = s("272030"),
                E = s("851387"),
                _ = s("599417"),
                T = s("84339"),
                I = s("841098"),
                S = s("770115"),
                N = s("102985"),
                f = s("697218"),
                g = s("941886"),
                A = s("810567"),
                L = s("124299"),
                m = s("258078"),
                C = s("334572"),
                O = s("158998"),
                h = s("592407"),
                R = s("900938"),
                D = s("431451"),
                M = s("772871"),
                G = s("49111"),
                x = s("782340"),
                p = s("282802");

            function U(e) {
                let {
                    transitionState: t,
                    guild: s,
                    user: l,
                    ban: i,
                    hideDiscriminator: r,
                    onClose: o
                } = e, [d, c] = n.useState(!1), [T, I] = n.useState(null);
                async function S() {
                    if (null != s) {
                        I(null), c(!0);
                        try {
                            await E.default.unbanUser(s.id, l.id), o()
                        } catch (e) {
                            I(new _.default(e)), c(!1)
                        }
                    }
                }
                return (0, a.jsxs)(u.ModalRoot, {
                    className: p.bannedUserModal,
                    transitionState: t,
                    children: [(0, a.jsxs)(u.ModalHeader, {
                        className: p.header,
                        separator: !1,
                        children: [(0, a.jsx)(m.default, {
                            size: m.default.Sizes.SIZE_24,
                            className: p.userUsername,
                            children: O.default.getUserTag(l, {
                                mode: "username",
                                identifiable: r ? "never" : "always"
                            })
                        }), r || l.isPomelo() ? null : (0, a.jsxs)(m.default, {
                            size: m.default.Sizes.SIZE_24,
                            className: p.userDiscrim,
                            children: ["#", l.discriminator]
                        })]
                    }), (0, a.jsxs)(u.ModalContent, {
                        className: p.content,
                        children: [(0, a.jsx)(u.Text, {
                            className: p.reasonHeader,
                            variant: "text-xs/normal",
                            children: x.default.Messages.BAN_REASON
                        }), (0, a.jsx)(u.Text, {
                            variant: "text-sm/normal",
                            children: null != i.reason && "" !== i.reason ? i.reason : x.default.Messages.NO_BAN_REASON
                        }), null != T ? (0, a.jsx)(u.Text, {
                            className: p.error,
                            color: "text-danger",
                            variant: "text-sm/normal",
                            children: T.getAnyErrorMessage()
                        }) : null]
                    }), (0, a.jsxs)(u.ModalFooter, {
                        className: p.footer,
                        children: [(0, a.jsx)(u.Button, {
                            onClick: S,
                            look: u.Button.Looks.LINK,
                            color: u.Button.Colors.RED,
                            submitting: d,
                            children: x.default.Messages.REVOKE_BAN
                        }), (0, a.jsx)(u.Button, {
                            onClick: o,
                            children: x.default.Messages.DONE
                        })]
                    })]
                })
            }
            class v extends n.PureComponent {
                render() {
                    let {
                        user: e,
                        hideDiscriminator: t,
                        guild: s
                    } = this.props, n = O.default.getGlobalName(e);
                    return (0, a.jsxs)(u.Clickable, {
                        className: i(p.bannedUser),
                        onClick: this.handleShowModal,
                        onContextMenu: this.handleContextMenu,
                        children: [(0, a.jsx)(u.Avatar, {
                            src: e.getAvatarURL(null == s ? void 0 : s.id, 40),
                            "aria-label": e.username,
                            size: u.AvatarSizes.SIZE_40,
                            className: p.bannedUserAvatar
                        }), (0, a.jsxs)("div", {
                            className: p.username,
                            children: [O.default.getUserTag(e, {
                                mode: "username",
                                identifiable: t ? "never" : "always"
                            }), !t && !e.isPomelo() && (0, a.jsxs)("span", {
                                className: p.discrim,
                                children: ["#", e.discriminator]
                            }), e.isPomelo() && (0, a.jsxs)("span", {
                                className: p.discrim,
                                children: ["(", n, ")"]
                            })]
                        })]
                    })
                }
                constructor(...e) {
                    super(...e), this.handleShowModal = () => {
                        let {
                            guild: e,
                            user: t,
                            hideDiscriminator: s,
                            ban: n
                        } = this.props;
                        (0, u.openModal)(l => (0, a.jsx)(U, {
                            ...l,
                            guild: e,
                            user: t,
                            ban: n,
                            hideDiscriminator: s
                        }))
                    }, this.handleContextMenu = e => {
                        (0, c.openContextMenuLazy)(e, async () => {
                            let {
                                default: e
                            } = await s.el("590079").then(s.bind(s, "590079"));
                            return t => (0, a.jsx)(e, {
                                ...t,
                                user: this.props.user
                            })
                        })
                    }
                }
            }
            let j = n.forwardRef(function(e, t) {
                let {
                    guild: s,
                    sortedBans: l,
                    bans: i
                } = e, r = (0, d.default)([N.default], () => N.default.hidePersonalInformation, []), o = n.useCallback(e => {
                    var t;
                    if (null == i && 0 === e) return 60;
                    let s = l[e],
                        a = null == i ? void 0 : i.get(null !== (t = null == s ? void 0 : s.id) && void 0 !== t ? t : "");
                    return null == s || null == a ? 0 : 60
                }, [i, l]), c = n.useCallback(e => {
                    var t;
                    if (null == i && 0 === e) return (0, a.jsx)(u.Spinner, {
                        className: p.spinner,
                        type: u.Spinner.Type.SPINNING_CIRCLE
                    }, "spinner");
                    let n = l[e],
                        o = null == i ? void 0 : i.get(null !== (t = null == n ? void 0 : n.id) && void 0 !== t ? t : "");
                    if (null != n && null != o) return (0, a.jsx)(v, {
                        user: n,
                        ban: o,
                        hideDiscriminator: r,
                        guild: s
                    }, n.id)
                }, [i, s, l, r]);
                return (0, a.jsx)(L.default, {
                    role: "listbox",
                    listPadding: [8, 8, 8, 8],
                    rowCount: l.length,
                    rowHeight: o,
                    renderRow: c,
                    ref: t
                })
            });

            function P(e) {
                let {
                    guildId: t,
                    storedSearchQuery: s
                } = e, [l, i] = n.useState(null != s ? s : ""), [r, o] = n.useState(!1), d = n.useCallback(() => {
                    h.default.setSection(G.GuildSettingsSections.SAFETY), (0, D.setSafetyPage)(M.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION)
                }, []), c = n.useCallback(e => {
                    i(e), 0 === e.trim().length && h.default.setSearchQuery(e)
                }, []), _ = n.useCallback(() => {
                    i(""), h.default.setSearchQuery("")
                }, []), T = n.useCallback(async () => {
                    if (0 === l.trim().length) {
                        h.default.setSearchQuery(l), o(!1);
                        return
                    }
                    if (!r) try {
                        o(!0);
                        let [e, s] = (0, S.splitQuery)(l), a = e[0];
                        h.default.setSearchQuery(l), await E.default.searchGuildBans(t, a, s), o(!1)
                    } catch (e) {
                        o(!1)
                    }
                }, [t, r, l]), I = n.useCallback(e => {
                    "Enter" === e.key && (e.preventDefault(), e.stopPropagation(), T())
                }, [T]);
                return (0, a.jsxs)(u.FormSection, {
                    tag: u.FormTitleTags.H1,
                    title: x.default.Messages.BANS_HEADER_NEW,
                    children: [(0, a.jsx)("div", {
                        className: p.settingsHeader,
                        children: (0, a.jsx)(u.FormText, {
                            type: u.FormTextTypes.DESCRIPTION,
                            className: p.description,
                            children: x.default.Messages.BANS_HINT.format({
                                onModerationClick: d
                            })
                        })
                    }), (0, a.jsxs)("div", {
                        className: p.bansSearchContainer,
                        children: [(0, a.jsx)(A.default, {
                            className: p.searchBar,
                            query: null != l ? l : "",
                            placeholder: x.default.Messages.BANS_SEARCH_PLACEHOLDER_NEW,
                            "aria-label": x.default.Messages.BANS_SEARCH_PLACEHOLDER_NEW,
                            onChange: c,
                            onKeyDown: I,
                            onClear: _,
                            size: A.default.Sizes.MEDIUM,
                            isLoading: r
                        }), (0, a.jsx)(u.Button, {
                            color: u.Button.Colors.BRAND,
                            onClick: T,
                            size: u.Button.Sizes.SMALL,
                            disabled: r,
                            submitting: r,
                            className: p.searchButton,
                            children: x.default.Messages.SEARCH
                        })]
                    })]
                }, "bans-header")
            }

            function y() {
                var e, t;
                let {
                    guild: l,
                    searchQuery: c
                } = (0, d.default)([R.default], () => R.default.getProps(), [], r.isEqual), _ = null != c && c.trim().length > 0, N = (0, T.default)(_), A = _ !== N, [L] = (0, d.default)([R.default], () => R.default.getBans(), [], C.isVersionEqual), m = null !== (e = null == L ? void 0 : L.size) && void 0 !== e ? e : 0, O = (0, I.default)(), h = null !== (t = null == l ? void 0 : l.id) && void 0 !== t ? t : "", D = n.useRef(null), M = n.useCallback(e => null == e || 0 === e.length ? e => null != e : t => {
                    if (null == t || 0 === e.trim().length) return !1;
                    let [
                        [s], a
                    ] = (0, S.splitQuery)(e);
                    return !!a.includes(t.id) || null != s && (!!(t.username.toLowerCase().includes(s.toLowerCase()) || null != t.globalName && t.globalName.toLowerCase().includes(s.toLowerCase())) || !1)
                }, []), G = n.useCallback((e, t, s) => {
                    if (null == e || 0 === s) return [];
                    let a = [];
                    for (let s of e.keys()) {
                        let e = f.default.getUser(s);
                        null != e && M(t)(e) && a.push(e)
                    }
                    return a
                }, [M]), U = n.useMemo(() => G(L, c, m), [L, G, c, m]), v = null != L, y = U.length % 1e3 == 0 && U.length > 0 && v, b = 0 === U.length, [B, F] = n.useState({
                    currentPage: 1,
                    pageSize: 100
                });
                n.useEffect(() => {
                    A && 1 !== B.currentPage && F(e => ({
                        ...e,
                        currentPage: 1
                    }))
                }, [A, B.currentPage]);
                let H = n.useCallback(e => {
                        E.default.fetchGuildBansBatch(h, 1e3, e)
                    }, [h]),
                    V = n.useMemo(() => o.chunk(U, B.pageSize), [B.pageSize, U]),
                    k = n.useCallback(e => {
                        var t, s, a;
                        null === (t = D.current) || void 0 === t || t.scrollToSectionTop(0);
                        let n = (e + 1) * B.pageSize,
                            l = n > U.length;
                        l && y && !_ && (w.current = null !== (a = null === (s = U[U.length - 1]) || void 0 === s ? void 0 : s.id) && void 0 !== a ? a : null, H(w.current)), (null != V[e - 1] || y) && F(t => ({
                            ...t,
                            currentPage: e
                        }))
                    }, [B.pageSize, U, y, V, H, _]),
                    w = n.useRef(null);
                n.useEffect(() => {
                    H(w.current)
                }, [H]);
                let Y = n.useMemo(() => {
                    var e;
                    return null !== (e = V[B.currentPage - 1]) && void 0 !== e ? e : []
                }, [V, B.currentPage]);
                return null == l ? null : (0, a.jsxs)("div", {
                    className: i(p.container),
                    children: [(0, a.jsx)(P, {
                        guildId: h,
                        storedSearchQuery: c
                    }), (0, a.jsxs)("div", {
                        className: i(p.scrollerContainer),
                        children: [!b && (0, a.jsx)(j, {
                            guild: l,
                            bans: L,
                            sortedBans: Y,
                            ref: D
                        }), !y && b && (0, a.jsxs)(g.default, {
                            theme: O,
                            className: p.emptyState,
                            children: [(0, a.jsx)(g.EmptyStateImage, {
                                darkSrc: s("325911"),
                                lightSrc: s("138147"),
                                width: 256,
                                height: 212
                            }), (0, a.jsx)(g.EmptyStateText, {
                                note: x.default.Messages.BANS_NO_USERS_BANNED,
                                style: {
                                    maxWidth: 300
                                },
                                children: x.default.Messages.NO_BANS
                            })]
                        })]
                    }), (0, a.jsx)("div", {
                        className: i(p.paginationContainer),
                        children: (0, a.jsx)(u.Paginator, {
                            className: i(p.paginationInput),
                            totalCount: U.length + (y ? B.pageSize : 0),
                            pageSize: B.pageSize,
                            currentPage: B.currentPage,
                            onPageChange: k,
                            maxVisiblePages: 9
                        })
                    })]
                })
            }
        },
        925538: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsCommunityOverviewNotice: function() {
                    return p
                },
                default: function() {
                    return j
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("872717"),
                d = s("95410"),
                u = s("77078"),
                c = s("45299"),
                E = s("679653"),
                _ = s("413476"),
                T = s("239380"),
                I = s("923959"),
                S = s("305961"),
                N = s("957255"),
                f = s("27618"),
                g = s("697218"),
                A = s("945330"),
                L = s("268997"),
                m = s("592407"),
                C = s("900938"),
                O = s("271407"),
                h = s("49111"),
                R = s("447621"),
                D = s("782340"),
                M = s("133226"),
                G = s("936815");
            let x = "dismissedCommunityFeaturesUpsell",
                p = () => {
                    let {
                        guild: e,
                        submitting: t
                    } = (0, r.useStateFromStoresObject)([C.default], () => ({
                        submitting: C.default.isSubmitting(),
                        guild: C.default.getGuild()
                    }));
                    return (0, a.jsx)(c.default, {
                        submitting: t,
                        onReset: () => {
                            null != e && m.default.init(e.id)
                        },
                        onSave: () => {
                            null != e && m.default.saveGuild(e.id, {
                                rulesChannelId: e.rulesChannelId,
                                preferredLocale: e.preferredLocale,
                                safetyAlertsChannelId: e.safetyAlertsChannelId,
                                publicUpdatesChannelId: e.publicUpdatesChannelId,
                                description: e.description,
                                features: e.features
                            })
                        }
                    })
                },
                U = e => {
                    let {
                        discoveryEnabled: t,
                        welcomeScreenEnabled: s,
                        guildId: l
                    } = e, [i, c] = n.useState(!0 === d.default.get(x)), [E, _] = n.useState(!1);
                    n.useEffect(() => {
                        o.default.get(h.Endpoints.GUILD_ADMIN_SERVER_ELIGIBILITY(l)).then(e => {
                            _(e.body.eligible_for_admin_server)
                        }).catch(() => _(!1))
                    }, []);
                    let {
                        enabled: I
                    } = L.CommunityAdminServerExperiment.useExperiment({
                        guildId: l,
                        location: "c1af51_1"
                    }, {
                        autoTrackExposure: !0
                    }), N = (0, r.useStateFromStores)([S.default], () => S.default.getGuild("942897714956472401")), f = I && E && !(null != N);
                    if (t && s && !f) return null;
                    let g = async () => {
                        try {
                            let e = await o.default.post({
                                url: h.Endpoints.JOIN_ADMIN_SERVER(l),
                                oldFormErrors: !0
                            });
                            m.default.close(), (0, T.transitionToGuild)(e.body.id)
                        } catch {}
                    };
                    return i && !f ? null : (0, a.jsxs)("div", {
                        className: M.upsellContainer,
                        children: [(0, a.jsxs)("div", {
                            className: M.upsellContent,
                            children: [(0, a.jsx)("img", {
                                src: G,
                                alt: "",
                                width: 60,
                                className: M.upsellImage
                            }), (0, a.jsxs)("div", {
                                children: [(0, a.jsx)(u.Heading, {
                                    variant: "heading-md/semibold",
                                    className: M.upsellHeader,
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_UPSELL_HEADER
                                }), (0, a.jsx)(u.Text, {
                                    variant: "text-sm/normal",
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_UPSELL_BODY
                                })]
                            })]
                        }), (0, a.jsx)(u.Button, {
                            "aria-label": D.default.Messages.CLOSE,
                            look: u.Button.Looks.BLANK,
                            size: u.Button.Sizes.NONE,
                            className: M.upsellClose,
                            onClick: () => {
                                d.default.set(x, !0), c(!0)
                            },
                            children: (0, a.jsx)(A.default, {
                                width: 24,
                                height: 24
                            })
                        }), (0, a.jsxs)("div", {
                            className: M.upsellFooter,
                            children: [f && (0, a.jsx)(u.Button, {
                                size: u.Button.Sizes.SMALL,
                                onClick: g,
                                className: M.upsellButton,
                                children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_ADMIN_SERVER
                            }), s ? null : (0, a.jsx)(u.Button, {
                                size: u.Button.Sizes.SMALL,
                                onClick: () => {
                                    m.default.setSection(h.GuildSettingsSections.COMMUNITY_WELCOME)
                                },
                                className: M.upsellButton,
                                children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_WELCOME_SCREEN
                            }), t ? null : (0, a.jsx)(u.Button, {
                                size: u.Button.Sizes.SMALL,
                                onClick: () => {
                                    m.default.setSection(h.GuildSettingsSections.DISCOVERY)
                                },
                                className: M.upsellButton,
                                color: u.Button.Colors.PRIMARY,
                                children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_DISCOVERY
                            }), (0, a.jsx)(u.Button, {
                                size: u.Button.Sizes.SMALL,
                                onClick: () => {
                                    m.default.setSection(h.GuildSettingsSections.ANALYTICS)
                                },
                                className: M.upsellButton,
                                color: u.Button.Colors.PRIMARY,
                                children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_ANALYTICS
                            })]
                        })]
                    })
                },
                v = () => {
                    var e;
                    let t = (0, r.useStateFromStores)([C.default], () => C.default.getGuild()),
                        {
                            canManageGuild: s,
                            isGuildAdmin: l
                        } = (0, r.useStateFromStoresObject)([N.default], () => ({
                            canManageGuild: N.default.can(h.Permissions.MANAGE_GUILD, t),
                            isGuildAdmin: N.default.can(h.Permissions.ADMINISTRATOR, t)
                        })),
                        o = (0, r.useStateFromStores)([I.default], () => null != t ? I.default.getChannels(t.id) : null),
                        c = n.useMemo(R.calculateLocaleOptions, []),
                        T = !0 !== d.default.get(x),
                        {
                            enableRaidAlerts: S
                        } = _.RaidAlertExperiment.useExperiment({
                            guildId: null !== (e = null == t ? void 0 : t.id) && void 0 !== e ? e : "",
                            location: "c1af51_2"
                        }, {
                            autoTrackExposure: s
                        });
                    if (null == t) return null;
                    let A = [];
                    null != o && o[0, I.GUILD_SELECTABLE_CHANNELS_KEY].forEach(e => {
                        let {
                            channel: t
                        } = e;
                        t.type === h.ChannelTypes.GUILD_TEXT && A.push({
                            value: t.id,
                            label: (0, E.computeChannelName)(t, g.default, f.default, !0)
                        })
                    });
                    let L = () => {
                            m.default.init(t.id), m.default.open(t.id, h.GuildSettingsSections.MEMBER_VERIFICATION)
                        },
                        O = () => {
                            if (null == t) return;
                            let e = new Set(t.features);
                            e.delete(h.GuildFeatures.COMMUNITY), e.delete(h.GuildFeatures.DISCOVERABLE), e.delete(h.GuildFeatures.MEMBER_VERIFICATION_GATE_ENABLED), e.delete(h.GuildFeatures.PREVIEW_ENABLED), m.default.updateGuild({
                                features: e,
                                rulesChannelId: null,
                                publicUpdatesChannelId: null
                            })
                        },
                        G = e => {
                            m.default.updateGuild({
                                rulesChannelId: e
                            })
                        },
                        p = e => {
                            m.default.updateGuild({
                                safetyAlertsChannelId: e
                            })
                        },
                        v = e => {
                            m.default.updateGuild({
                                publicUpdatesChannelId: e
                            })
                        },
                        j = e => {
                            m.default.updateGuild({
                                preferredLocale: e
                            })
                        },
                        P = e => {
                            m.default.updateGuild({
                                description: e
                            })
                        },
                        y = () => {
                            t.features.has(h.GuildFeatures.DISCOVERABLE) && t.features.has(h.GuildFeatures.PARTNERED) ? (0, u.openModal)(e => (0, a.jsx)(u.ConfirmModal, {
                                ...e,
                                header: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE,
                                confirmText: D.default.Messages.CONFIRM,
                                cancelText: D.default.Messages.NEVERMIND,
                                onConfirm: O,
                                children: (0, a.jsx)(u.Text, {
                                    variant: "text-sm/normal",
                                    children: D.default.Messages.GUILD_SETTINGS_PARTNER_AND_DISCOVERY_DISABLE_PUBLIC_CONFIRM_TEXT
                                })
                            })) : t.features.has(h.GuildFeatures.DISCOVERABLE) ? (0, u.openModal)(e => (0, a.jsx)(u.ConfirmModal, {
                                ...e,
                                header: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE,
                                confirmText: D.default.Messages.CONFIRM,
                                cancelText: D.default.Messages.NEVERMIND,
                                onConfirm: O,
                                children: (0, a.jsx)(u.Text, {
                                    variant: "text-sm/normal",
                                    children: D.default.Messages.GUILD_SETTINGS_DISCOVERY_DISABLE_PUBLIC_CONFIRM_TEXT
                                })
                            })) : t.features.has(h.GuildFeatures.PARTNERED) ? (0, u.openModal)(e => (0, a.jsx)(u.ConfirmModal, {
                                ...e,
                                header: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE,
                                confirmText: D.default.Messages.CONFIRM,
                                cancelText: D.default.Messages.NEVERMIND,
                                onConfirm: O,
                                children: (0, a.jsx)(u.Text, {
                                    variant: "text-sm/normal",
                                    children: D.default.Messages.GUILD_SETTINGS_PARTNER_DISABLE_PUBLIC_CONFIRM_TEXT
                                })
                            })) : t.features.has(h.GuildFeatures.MEMBER_VERIFICATION_GATE_ENABLED) ? (0, u.openModal)(e => (0, a.jsx)(u.ConfirmModal, {
                                ...e,
                                header: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE,
                                confirmButtonColor: u.Button.Colors.BRAND,
                                confirmText: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_MEMBER_VERIFICATION_CONFIRM,
                                cancelText: D.default.Messages.NEVERMIND,
                                onConfirm: L,
                                children: (0, a.jsx)(u.Text, {
                                    variant: "text-sm/normal",
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_MEMBER_VERIFICATION
                                })
                            })) : O()
                        };
                    return (0, a.jsxs)(u.FormSection, {
                        title: D.default.Messages.GUILD_SETTINGS_COMMUNITY,
                        tag: u.FormTitleTags.H1,
                        children: [T ? (0, a.jsx)(U, {
                            discoveryEnabled: t.features.has(h.GuildFeatures.DISCOVERABLE),
                            welcomeScreenEnabled: t.features.has(h.GuildFeatures.WELCOME_SCREEN_ENABLED),
                            guildId: t.id
                        }) : null, (0, a.jsxs)(u.FormSection, {
                            className: i(M.twoColumnFormSection, M.firstSection),
                            children: [(0, a.jsxs)("div", {
                                className: M.descriptionColumn,
                                children: [(0, a.jsx)(u.FormTitle, {
                                    className: M.formTitle,
                                    children: D.default.Messages.FORM_LABEL_DISCOVERY_RULES_CHANNEL
                                }), (0, a.jsx)(u.FormText, {
                                    type: u.FormTextTypes.DESCRIPTION,
                                    className: M.formDescription,
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_RULES_CHANNEL_HELP
                                })]
                            }), (0, a.jsx)("div", {
                                className: M.selectColumn,
                                children: (0, a.jsx)(u.SearchableSelect, {
                                    value: t.rulesChannelId,
                                    options: A,
                                    onChange: G,
                                    isDisabled: !s
                                })
                            })]
                        }), (0, a.jsx)(u.FormDivider, {
                            className: M.divider
                        }), (0, a.jsxs)(u.FormSection, {
                            className: i(M.twoColumnFormSection, M.firstSection),
                            children: [(0, a.jsxs)("div", {
                                className: M.descriptionColumn,
                                children: [(0, a.jsx)(u.FormTitle, {
                                    className: M.formTitle,
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_TITLE
                                }), (0, a.jsx)(u.FormText, {
                                    type: u.FormTextTypes.DESCRIPTION,
                                    className: M.formDescription,
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_HELP
                                })]
                            }), (0, a.jsx)("div", {
                                className: M.selectColumn,
                                children: (0, a.jsx)(u.SearchableSelect, {
                                    value: t.publicUpdatesChannelId,
                                    options: A,
                                    onChange: v,
                                    isDisabled: !s
                                })
                            })]
                        }), (0, a.jsx)(u.FormDivider, {
                            className: M.divider
                        }), S && (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsxs)(u.FormSection, {
                                className: i(M.twoColumnFormSection, M.firstSection),
                                children: [(0, a.jsxs)("div", {
                                    className: M.descriptionColumn,
                                    children: [(0, a.jsx)(u.FormTitle, {
                                        className: M.formTitle,
                                        children: D.default.Messages.GUILD_ANTIRAID_SAFETY_CHANNEL_TITLE
                                    }), (0, a.jsx)(u.FormText, {
                                        type: u.FormTextTypes.DESCRIPTION,
                                        className: M.formDescription,
                                        children: D.default.Messages.GUILD_ANTIRAID_SAFETY_CHANNEL_DESCRIPTION
                                    })]
                                }), (0, a.jsx)("div", {
                                    className: M.selectColumn,
                                    children: (0, a.jsx)(u.SearchableSelect, {
                                        value: t.safetyAlertsChannelId,
                                        options: A,
                                        onChange: p,
                                        isDisabled: !s
                                    })
                                })]
                            }), (0, a.jsx)(u.FormDivider, {
                                className: M.divider
                            })]
                        }), (0, a.jsxs)(u.FormSection, {
                            className: M.twoColumnFormSection,
                            children: [(0, a.jsxs)("div", {
                                className: M.descriptionColumn,
                                children: [(0, a.jsx)(u.FormTitle, {
                                    className: M.formTitle,
                                    children: D.default.Messages.FORM_LABEL_SERVER_LANGUAGE
                                }), (0, a.jsx)(u.FormText, {
                                    type: u.FormTextTypes.DESCRIPTION,
                                    className: M.formDescription,
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_LOCALE_HELP
                                })]
                            }), (0, a.jsx)("div", {
                                className: M.selectColumn,
                                children: (0, a.jsx)(u.SearchableSelect, {
                                    value: t.preferredLocale,
                                    options: c,
                                    onChange: j,
                                    isDisabled: !s
                                })
                            })]
                        }), (0, a.jsx)(u.FormDivider, {
                            className: M.divider
                        }), (() => {
                            var e;
                            if (null != t) return (0, a.jsxs)(u.FormSection, {
                                children: [(0, a.jsx)(u.FormTitle, {
                                    className: M.formTitle,
                                    children: D.default.Messages.FORM_LABEL_SERVER_DESCRIPTION
                                }), (0, a.jsx)(u.FormText, {
                                    className: M.description,
                                    type: u.FormTextTypes.DESCRIPTION,
                                    children: D.default.Messages.FORM_HELP_SERVER_DESCRIPTION
                                }), (0, a.jsx)(u.TextArea, {
                                    value: null !== (e = t.description) && void 0 !== e ? e : "",
                                    placeholder: D.default.Messages.SERVER_DESCIPTION_EMPTY,
                                    onChange: P,
                                    maxLength: 120,
                                    disabled: !s
                                })]
                            })
                        })(), (0, a.jsx)(u.FormDivider, {
                            className: M.divider
                        }), (0, a.jsxs)(u.FormSection, {
                            className: M.twoColumnFormSection,
                            children: [(0, a.jsxs)("div", {
                                className: M.descriptionColumn,
                                children: [(0, a.jsx)(u.FormTitle, {
                                    className: M.formTitle,
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY
                                }), (0, a.jsx)(u.FormText, {
                                    type: u.FormTextTypes.DESCRIPTION,
                                    className: M.formDescription,
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY_DESCRIPTION
                                })]
                            }), (0, a.jsx)(u.Tooltip, {
                                text: l ? null : D.default.Messages.GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY,
                                "aria-label": l ? void 0 : D.default.Messages.GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY,
                                children: e => (0, a.jsx)(u.Button, {
                                    size: u.Button.Sizes.SMALL,
                                    onClick: y,
                                    color: u.Button.Colors.RED,
                                    disabled: !l,
                                    ...e,
                                    children: D.default.Messages.GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY
                                })
                            })]
                        })]
                    })
                };
            var j = () => {
                let e = (0, r.useStateFromStores)([C.default], () => C.default.getGuild());
                if (null == e) return null;
                let t = e.features.has(h.GuildFeatures.COMMUNITY);
                return t ? (0, a.jsx)(v, {}) : (0, a.jsx)(O.default, {
                    guild: e
                })
            }
        },
        271407: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return j
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("669491"),
                d = s("77078"),
                u = s("347924"),
                c = s("597517"),
                E = s("45395"),
                _ = s("957255"),
                T = s("756609"),
                I = s("68238"),
                S = s("240292"),
                N = s("701909"),
                f = s("49111"),
                g = s("533613"),
                A = s("782340"),
                L = s("430364"),
                m = s("175717"),
                C = s("869917"),
                O = s("133765"),
                h = s("138131"),
                R = s("52846"),
                D = s("656011"),
                M = s("845929"),
                G = s("144582");
            let x = () => [{
                    icon: S.default,
                    color: o.default.unsafe_rawColors.GREEN_360.css,
                    header: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_DISCOVERY_HEADER,
                    body: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_DISCOVERY_BODY.format({
                        featureHook: (e, t) => (0, a.jsx)("strong", {
                            className: L.featuredText,
                            children: e
                        }, t)
                    })
                }, {
                    icon: T.default,
                    color: o.default.unsafe_rawColors.PARTNER.css,
                    header: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_HEADER,
                    body: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_BODY.format({
                        infoHook: () => (0, a.jsx)(d.Tooltip, {
                            text: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_TOOLTIP,
                            "aria-label": A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_TOOLTIP,
                            children: e => (0, a.jsx)(I.default, {
                                className: L.infoIcon,
                                ...e
                            })
                        }),
                        featureHook: (e, t) => (0, a.jsx)("strong", {
                            className: L.featuredText,
                            children: e
                        }, t)
                    })
                }, {
                    icon: I.default,
                    color: o.default.unsafe_rawColors.RED_360.css,
                    header: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_STAY_INFORMED_HEADER,
                    body: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_STAY_INFORMED_BODY
                }],
                p = [{
                    iconSrc: D,
                    name: "Pokemon GO Paris",
                    position: [-230, -100]
                }, {
                    iconSrc: M,
                    name: "Python",
                    position: [-180, -100],
                    faded: !0,
                    rightAlign: !0
                }, {
                    iconSrc: h,
                    name: "Learn Latin",
                    position: [-280, -30],
                    faded: !0
                }, {
                    iconSrc: R,
                    name: "r/leagueoflegends",
                    position: [-320, -30],
                    rightAlign: !0
                }, {
                    iconSrc: G,
                    name: "Sneaker Fans",
                    position: [-250, 40]
                }, {
                    iconSrc: O,
                    name: "Hogwarts School",
                    position: [-270, 40],
                    faded: !0,
                    rightAlign: !0
                }],
                U = e => {
                    let {
                        icon: t,
                        color: s,
                        size: n = 24,
                        header: l,
                        body: i
                    } = e;
                    return (0, a.jsxs)("div", {
                        className: L.featureCard,
                        children: [(0, a.jsx)("div", {
                            className: L.featureIcon,
                            children: (0, a.jsx)(t, {
                                color: s,
                                width: n,
                                height: n
                            })
                        }), (0, a.jsx)(d.Heading, {
                            variant: "heading-md/semibold",
                            className: L.featureHeader,
                            children: l
                        }), (0, a.jsx)(d.Text, {
                            color: "header-secondary",
                            variant: "text-sm/normal",
                            children: i
                        })]
                    })
                },
                v = e => {
                    let {
                        iconSrc: t,
                        name: s,
                        position: n,
                        faded: l,
                        rightAlign: r,
                        imageCoordinates: o
                    } = e, u = {
                        [r ? "right" : "left"]: o[0] + n[0],
                        top: o[1] + n[1]
                    };
                    return (0, a.jsxs)("div", {
                        className: i(L.guildDetails, {
                            [L.faded]: l
                        }),
                        style: u,
                        children: [(0, a.jsx)("div", {
                            className: L.guildIcon,
                            children: (0, a.jsx)("img", {
                                alt: "",
                                src: t,
                                width: 24,
                                height: 24
                            })
                        }), (0, a.jsx)(d.Heading, {
                            variant: "heading-deprecated-12/semibold",
                            children: s
                        })]
                    })
                };
            var j = e => {
                let {
                    guild: t
                } = e, [s, l] = n.useState(0), [i, o] = n.useState(0), [T, I] = n.useState(), S = (0, r.useStateFromStores)([_.default], () => _.default.can(f.Permissions.ADMINISTRATOR, t)), O = (0, u.useInServerBadgingExperiment)(t.id), h = null == T ? void 0 : T.offsetWidth, R = null == T ? void 0 : T.offsetHeight;
                n.useEffect(() => {
                    null != h && l(h / 2), null != R && o(R / 2)
                }, [h, R, l, o]), n.useEffect(() => {
                    (0, c.hideHotspot)(g.HotspotLocations.GUILD_SETTINGS_COMMUNITY_GUILD_UPSELL)
                }, []);
                let D = () => {
                        E.default.open()
                    },
                    M = O ? A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_BODY_WITH_HELP_ARTICLE.format({
                        helpdeskArticle: N.default.getArticleURL(f.HelpdeskArticles.FRIEND_COMMUNITY_DISCOVERABLE_GUILD_TYPES)
                    }) : A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_BODY;
                return (0, a.jsxs)("div", {
                    className: L.container,
                    children: [(0, a.jsxs)("div", {
                        className: L.banner,
                        ref: e => I(e),
                        children: [p.map(e => (0, a.jsx)(v, {
                            ...e,
                            imageCoordinates: [s, i]
                        }, e.name)), (0, a.jsx)("img", {
                            alt: "",
                            src: m,
                            className: L.image,
                            width: 256
                        }), (0, a.jsx)("img", {
                            alt: "",
                            src: C,
                            className: L.sparkles
                        })]
                    }), (0, a.jsx)(d.Heading, {
                        variant: "heading-xl/semibold",
                        children: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_HEADER
                    }), (0, a.jsx)(d.Text, {
                        color: "header-secondary",
                        variant: "text-md/normal",
                        className: L.body,
                        children: M
                    }), (0, a.jsx)(d.Tooltip, {
                        text: S ? null : A.default.Messages.GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY,
                        "aria-label": S ? void 0 : A.default.Messages.GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY,
                        children: e => (0, a.jsx)(d.Button, {
                            onClick: D,
                            className: L.button,
                            disabled: !S,
                            ...e,
                            children: A.default.Messages.GET_STARTED
                        })
                    }), (0, a.jsx)("hr", {
                        className: L.separator
                    }), (0, a.jsx)(d.Text, {
                        color: "header-secondary",
                        variant: "text-sm/normal",
                        children: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_DETAILS
                    }), (0, a.jsx)(d.Text, {
                        color: "header-secondary",
                        className: L.body,
                        variant: "text-sm/normal",
                        children: A.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_LEARN_MORE.format({
                            helpdeskArticle: N.default.getArticleURL(f.HelpdeskArticles.GUILD_COMMUNITY_FEATURE)
                        })
                    }), (0, a.jsx)("div", {
                        className: L.features,
                        children: x().map((e, t) => (0, a.jsx)(U, {
                            ...e
                        }, t))
                    })]
                })
            }
        },
        423013: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return g
                }
            }), s("222007");
            var a, n, l = s("37983"),
                i = s("884691"),
                r = s("446674"),
                o = s("77078"),
                d = s("913144"),
                u = s("430568"),
                c = s("223170"),
                E = s("449008"),
                _ = s("900938"),
                T = s("999905"),
                I = s("782340"),
                S = s("812735"),
                N = s("756058");
            (n = a || (a = {}))[n.LOADING = 0] = "LOADING", n[n.INTRO = 1] = "INTRO", n[n.SETTINGS = 2] = "SETTINGS";
            let f = e => {
                let {
                    setWelcomeView: t,
                    setShowCreateModal: a
                } = e, n = [{
                    emoji: "\uD83D\uDCAC",
                    description: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_1,
                    name: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_1
                }, {
                    emoji: "\uD83C\uDFF9",
                    description: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_2,
                    name: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_2
                }, {
                    emoji: "\uD83D\uDDDE",
                    description: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_3,
                    name: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_3
                }];
                return (0, l.jsxs)(o.FormSection, {
                    title: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME,
                    tag: "h1",
                    children: [(0, l.jsxs)("div", {
                        className: S.welcomeDescription,
                        children: [(0, l.jsx)(o.Text, {
                            variant: "text-sm/normal",
                            children: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_INTRO_TEXT.format()
                        }), (0, l.jsx)(o.Button, {
                            onClick: () => {
                                a(!0), t(2)
                            },
                            children: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_INTRO_BUTTON
                        })]
                    }), (0, l.jsxs)("div", {
                        className: S.exampleContainer,
                        children: [(0, l.jsxs)("div", {
                            className: S.exampleWumpus,
                            children: [(0, l.jsx)("img", {
                                className: S.wumpus,
                                alt: "",
                                src: s("517226")
                            }), (0, l.jsx)("div", {
                                className: S.tooltipPointer
                            }), (0, l.jsx)("div", {
                                className: S.tooltip,
                                children: I.default.Messages.GUILD_SETTINGS_EXAMPLE_TOOLTIP
                            })]
                        }), (0, l.jsxs)("div", {
                            className: S.exampleModal,
                            children: [(0, l.jsx)("img", {
                                alt: "",
                                className: N.guildIcon,
                                src: s("822460"),
                                width: 64,
                                height: 64
                            }), (0, l.jsx)(o.Heading, {
                                variant: "heading-xl/semibold",
                                className: S.header,
                                children: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_TITLE.format()
                            }), (0, l.jsx)(o.Text, {
                                variant: "text-sm/normal",
                                color: "header-secondary",
                                className: N.guildDescription,
                                children: I.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_DESCRIPTION
                            }), (0, l.jsx)(o.FormTitle, {
                                className: N.choiceHeader,
                                children: I.default.Messages.WELCOME_SCREEN_CHOICE_HEADER
                            }), (0, l.jsx)("div", {
                                className: N.options,
                                children: n.map(e => (0, l.jsxs)("div", {
                                    className: S.optionContainer,
                                    children: [(0, l.jsx)(u.default, {
                                        emojiName: e.emoji,
                                        className: N.optionEmoji
                                    }), (0, l.jsxs)("div", {
                                        className: N.optionTextContainer,
                                        children: [(0, l.jsx)(o.Text, {
                                            variant: "text-md/semibold",
                                            className: N.channelDescription,
                                            children: e.description
                                        }), (0, l.jsx)(o.Text, {
                                            variant: "text-xs/normal",
                                            color: "header-secondary",
                                            children: "#".concat(e.name)
                                        })]
                                    })]
                                }, e.name))
                            })]
                        })]
                    })]
                })
            };
            var g = () => {
                let {
                    guild: e
                } = (0, r.useStateFromStores)([_.default], () => _.default.getProps()), [t, s] = i.useState(0), [a, n] = i.useState(!1);
                switch (i.useEffect(() => {
                        null != e && d.default.wait(() => {
                            (0, c.fetchWelcomeScreen)(e.id).then(e => {
                                s(null == e ? 1 : 2)
                            })
                        })
                    }, [e]), t) {
                    case 0:
                        return (0, l.jsx)(o.Spinner, {
                            type: o.Spinner.Type.SPINNING_CIRCLE
                        });
                    case 1:
                        return (0, l.jsx)(f, {
                            setWelcomeView: s,
                            setShowCreateModal: n
                        });
                    case 2:
                        return (0, l.jsx)(T.default, {
                            guild: e,
                            showCreateModal: a
                        });
                    default:
                        return (0, E.assertNever)(t)
                }
            }
        },
        999905: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return B
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("714617"),
                o = s.n(r),
                d = s("476042"),
                u = s("446674"),
                c = s("77078"),
                E = s("272030"),
                _ = s("430568"),
                T = s("206230"),
                I = s("679653"),
                S = s("419830"),
                N = s("385976"),
                f = s("233706"),
                g = s("223170"),
                A = s("478964"),
                L = s("310457"),
                m = s("42203"),
                C = s("580357"),
                O = s("476263"),
                h = s("37785"),
                R = s("593195"),
                D = s("315585"),
                M = s("599110"),
                G = s("991170"),
                x = s("592407"),
                p = s("369158"),
                U = s("49111"),
                v = s("843455"),
                j = s("782340"),
                P = s("244317");
            let y = "WELCOME_CHANNEL",
                b = e => {
                    var t;
                    let l, {
                            guildId: r,
                            welcomeChannel: o,
                            onEdit: T,
                            onChannelReorder: g,
                            isDropHovered: A,
                            index: C
                        } = e,
                        [O, h] = n.useState(!1),
                        M = n.useRef(null),
                        x = (0, u.useStateFromStores)([m.default], () => m.default.getChannel(o.channel_id)),
                        p = (0, u.useStateFromStores)([N.default], () => null != o.emoji_id ? N.default.getUsableCustomEmojiById(o.emoji_id) : null),
                        b = null != x && G.default.canEveryoneRole(U.Permissions.VIEW_CHANNEL, x),
                        B = null !== (t = (0, S.getChannelIconComponent)(x)) && void 0 !== t ? t : R.default,
                        F = (0, I.default)(x, !1),
                        {
                            homeSettingsEnabled: H
                        } = (0, f.useOnboardingHomeAdminExperiment)(r),
                        [, V] = (0, d.useDrag)({
                            type: y,
                            item: {
                                channel: o,
                                index: C
                            },
                            end: (e, t) => {
                                null != e && !t.didDrop() && g(e.channel, null, !0)
                            }
                        }),
                        [, k] = (0, d.useDrop)({
                            accept: y,
                            hover: e => {
                                g(e.channel, C, !1)
                            },
                            drop: e => {
                                g(e.channel, C, !0)
                            }
                        });
                    return n.useLayoutEffect(() => (V(k(M)), () => {
                        V(null), k(null)
                    }), [V, k]), l = b ? null != p || null != o.emoji_name ? (0, a.jsx)(_.default, {
                        emojiId: null == p ? void 0 : p.id,
                        emojiName: null != p ? p.name : o.emoji_name,
                        animated: !!(null == p ? void 0 : p.animated)
                    }) : (0, a.jsx)(B, {
                        width: 24,
                        height: 24,
                        className: P.channelIcon
                    }) : (0, a.jsx)(D.default, {
                        width: 24,
                        height: 24,
                        className: P.warningIcon
                    }), (0, a.jsxs)("div", {
                        className: i(P.welcomeChannel, {
                            [P.dragging]: A
                        }),
                        ref: M,
                        "data-dnd-name": o.description,
                        onContextMenu: e => {
                            (0, E.openContextMenuLazy)(e, async () => {
                                let {
                                    default: e
                                } = await s.el("824527").then(s.bind(s, "824527"));
                                return t => (0, a.jsx)(e, {
                                    ...t,
                                    guildId: r,
                                    welcomeChannel: o,
                                    onChannelReorder: g,
                                    setShowConfirmModal: h,
                                    onEdit: T,
                                    index: C
                                })
                            })
                        },
                        children: [l, (0, a.jsxs)("div", {
                            className: P.channelDescriptionWrapper,
                            children: [(0, a.jsx)(c.Text, {
                                variant: "text-md/semibold",
                                color: "header-primary",
                                children: o.description
                            }), (0, a.jsxs)(c.Text, {
                                className: b ? void 0 : P.channelWarning,
                                variant: "text-xs/normal",
                                color: "header-secondary",
                                children: [(0, a.jsx)(B, {
                                    className: P.channelTitleIcon,
                                    width: 12,
                                    height: 12
                                }), (0, a.jsx)("span", {
                                    children: b ? F : j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_INVALID_CHANNEL
                                })]
                            })]
                        }), (0, a.jsx)(c.Button, {
                            color: c.Button.Colors.PRIMARY,
                            size: c.Button.Sizes.SMALL,
                            disabled: H,
                            onClick: () => (0, c.openModalLazy)(async () => {
                                let {
                                    default: e
                                } = await s.el("277432").then(s.bind(s, "277432"));
                                return t => (0, a.jsx)(e, {
                                    ...t,
                                    welcomeChannel: o,
                                    guildId: r,
                                    onSave: T
                                })
                            }, {
                                onCloseRequest: () => v.NOOP_NULL
                            }),
                            children: j.default.Messages.EDIT
                        }), O && (0, a.jsx)(L.default, {
                            onConfirm: () => T(),
                            onCancel: () => h(!1),
                            channelId: o.channel_id
                        })]
                    })
                };
            var B = e => {
                var t;
                let {
                    guild: l,
                    showCreateModal: i
                } = e, {
                    welcomeSettings: r,
                    originalWelcomeSettings: d
                } = (0, u.useStateFromStores)([A.default], () => A.default.getSettingsProps()), E = (0, u.useStateFromStores)([T.default], () => T.default.useReducedMotion), [_, I] = n.useState(null), [S, N] = n.useState(!1), [L, m] = n.useState(!1), {
                    description: R,
                    channels: G,
                    enabled: y
                } = r, {
                    homeSettingsEnabled: B
                } = (0, f.useOnboardingHomeAdminExperiment)(null !== (t = null == l ? void 0 : l.id) && void 0 !== t ? t : ""), F = () => {
                    if (null != l) R !== d.description && ((0, g.saveWelcomeScreen)(l.id, {
                        description: null == R ? void 0 : R.trim()
                    }), N(!0))
                }, H = e => {
                    if (null != l) !o(e, d.channels) && ((0, g.saveWelcomeScreen)(l.id, {
                        channels: e
                    }), N(!0))
                }, V = e => {
                    if (null != l) e !== d.enabled && ((0, g.saveWelcomeScreen)(l.id, {
                        enabled: e
                    }), m(!E), N(!0))
                }, k = e => {
                    if (null == e) return;
                    let t = [...null != G ? G : [], e];
                    (0, g.updateSettings)({
                        channels: t
                    }), H(t)
                }, w = e => t => {
                    let s = [...null != G ? G : []];
                    null == t ? s.splice(e, 1) : s[e] = t, (0, g.updateSettings)({
                        channels: s
                    }), H(s), 0 === s.length && y && ((0, g.updateSettings)({
                        enabled: !1
                    }), V(!1))
                }, Y = (e, t, s) => {
                    if (null == G) return;
                    let a = G.indexOf(e),
                        n = [...G];
                    null != t && t !== a && (n.splice(a, 1), n.splice(t, 0, e), (0, g.updateSettings)({
                        channels: n
                    })), s ? (H(n), I(null)) : I(t)
                }, K = n.useRef(!1);
                n.useEffect(() => (null != l && i && (0, c.openModalLazy)(async () => {
                    let {
                        default: e
                    } = await s.el("277432").then(s.bind(s, "277432"));
                    return t => (0, a.jsx)(e, {
                        ...t,
                        guildId: l.id,
                        onSave: k
                    })
                }, {
                    onCloseRequest: () => v.NOOP_NULL
                }), () => {
                    K.current = !0
                }), []), n.useEffect(() => () => {
                    if (K.current && S) {
                        let e = [],
                            t = [],
                            s = !1;
                        null == G || G.forEach(a => {
                            e.push(a.description), t.push(a.channel_id), null != a.emoji_id && (s = !0)
                        }), M.default.track(U.AnalyticEvents.GUILD_WELCOME_SCREEN_SETTINGS_UPDATED, {
                            guild_id: null == l ? void 0 : l.id,
                            options: e,
                            options_channel_ids: t,
                            guild_description: R,
                            has_custom_emojis: s,
                            is_enabled: y
                        })
                    }
                }, [S, G, R, y, l, K]), n.useEffect(() => () => (0, g.clearWelcomeScreenSettings)(), []);
                let W = n.useCallback(() => {
                    null != l && x.default.open(l.id, U.GuildSettingsSections.ONBOARDING)
                }, [l]);
                return null == l ? null : (0, a.jsxs)(c.FormSection, {
                    title: j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME,
                    tag: c.FormTitleTags.H1,
                    children: [B && (0, a.jsx)("div", {
                        className: P.notice,
                        children: (0, a.jsxs)(c.Text, {
                            variant: "text-md/normal",
                            children: [(0, a.jsx)(D.default, {
                                className: P.noticeIcon
                            }), j.default.Messages.WELCOME_SCREEN_DEPRECATED.format({
                                onboardingLink: e => (0, a.jsx)(h.default, {
                                    onClick: W,
                                    children: e
                                })
                            })]
                        })
                    }), (0, a.jsx)(c.Text, {
                        className: P.description,
                        variant: "text-sm/normal",
                        children: j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_SETTINGS_TEXT
                    }), (0, a.jsx)(p.default, {
                        enabled: y,
                        onPreview: (null == G ? void 0 : G.length) === 0 ? void 0 : () => {
                            null != l && (0, c.openModalLazy)(async () => {
                                let {
                                    default: e
                                } = await s.el("900257").then(s.bind(s, "900257"));
                                return t => (0, a.jsx)(e, {
                                    ...t,
                                    guildId: l.id,
                                    isPreview: !0
                                })
                            })
                        },
                        onToggle: y || (null == G ? void 0 : G.length) !== 0 ? () => {
                            V(!y)
                        } : void 0,
                        animateStatus: L,
                        firstLine: y ? j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_ENABLED : j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_PROGRESS_WILL_SAVE,
                        secondLine: y ? j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_ENABLED_SECOND_LINE : j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_ENABLE_REMINDER
                    }), (0, a.jsxs)("div", {
                        className: P.previewContainer,
                        children: [(0, a.jsxs)("div", {
                            className: P.welcomeHeader,
                            children: [(0, a.jsx)(O.default, {
                                size: O.default.Sizes.LARGER,
                                className: P.icon,
                                guild: l,
                                animate: !0,
                                tabIndex: -1
                            }), (0, a.jsx)(c.Heading, {
                                className: P.welcomeTitle,
                                variant: "heading-xl/semibold",
                                children: j.default.Messages.WELCOME_SCREEN_TITLE.format({
                                    guildName: l.name,
                                    guildNameHook: (e, t) => (0, a.jsxs)("span", {
                                        children: [(0, a.jsx)(C.default, {
                                            guild: l,
                                            className: P.headerGuildBadge,
                                            flowerStarClassName: P.flowerStar
                                        }), (0, a.jsx)("strong", {
                                            children: e
                                        })]
                                    }, t)
                                })
                            }), (0, a.jsx)("div", {
                                className: P.descriptionWrapper,
                                children: (0, a.jsx)(c.TextArea, {
                                    className: P.descriptionInput,
                                    placeholder: j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_DESCRIPTION_PLACEHOLDER,
                                    onChange: e => {
                                        (0, g.updateSettings)({
                                            description: e
                                        })
                                    },
                                    onBlur: () => {
                                        F()
                                    },
                                    onKeyDown: e => {
                                        e.keyCode === U.KeyboardKeys.ENTER && e.preventDefault()
                                    },
                                    value: R,
                                    maxLength: 140,
                                    disabled: B
                                })
                            })]
                        }), (0, a.jsx)(c.FormDivider, {
                            className: P.divider
                        }), (0, a.jsxs)("div", {
                            className: P.welcomeChannels,
                            children: [(0, a.jsx)(c.FormTitle, {
                                children: j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_RECOMMENDED_CHANNELS_TITLE
                            }), (0, a.jsx)(c.Text, {
                                variant: "text-sm/normal",
                                className: P.addChannelSubtext,
                                children: j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_RECOMMENDED_CHANNELS_DESCRIPTION
                            }), null == G ? void 0 : G.map((e, t) => (0, a.jsx)(b, {
                                guildId: l.id,
                                welcomeChannel: e,
                                onEdit: w(t),
                                onChannelReorder: Y,
                                isDropHovered: t === _,
                                index: t
                            }, t)), (null == G || G.length < 5) && (0, a.jsx)(c.Button, {
                                onClick: () => (0, c.openModalLazy)(async () => {
                                    let {
                                        default: e
                                    } = await s.el("277432").then(s.bind(s, "277432"));
                                    return t => (0, a.jsx)(e, {
                                        ...t,
                                        guildId: l.id,
                                        onSave: k
                                    })
                                }, {
                                    onCloseRequest: () => v.NOOP_NULL
                                }),
                                className: P.addChannelButton,
                                disabled: B,
                                color: c.Button.Colors.PRIMARY,
                                children: j.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_ADD_RECOMMENDED_CHANNEL
                            })]
                        })]
                    })]
                })
            }
        },
        191329: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsDiscoveryNotice: function() {
                    return k
                },
                default: function() {
                    return Y
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("748820"),
                i = s("446674"),
                r = s("77078"),
                o = s("45299"),
                d = s("711622"),
                u = s("679653"),
                c = s("804578"),
                E = s("271889"),
                _ = s("75766"),
                T = s("758276"),
                I = s("453910"),
                S = s("283167"),
                N = s("868246"),
                f = s("324105"),
                g = s("385976"),
                A = s("407063"),
                L = s("694187"),
                m = s("608684"),
                C = s("446066"),
                O = s("459698"),
                h = s("923959"),
                R = s("957255"),
                D = s("27618"),
                M = s("697218"),
                G = s("954419"),
                x = s("315102"),
                p = s("794818"),
                U = s("592407"),
                v = s("900938"),
                j = s("26991"),
                P = s("796178"),
                y = s("237938"),
                b = s("53948"),
                B = s("49111"),
                F = s("447621"),
                H = s("782340"),
                V = s("15145");
            let k = i.default.connectStores([v.default], () => {
                let {
                    guild: e,
                    originalGuild: t,
                    submitting: s,
                    guildMetadata: a
                } = v.default.getProps();
                return {
                    guild: e,
                    submitting: s,
                    onReset() {
                        null != e && U.default.init(e.id)
                    },
                    onSave() {
                        null != e && ((0, T.trackDiscoverySettingsChange)(e, t), U.default.saveGuild(e.id, {
                            features: e.features,
                            discoverySplash: e.discoverySplash,
                            description: e.description,
                            safetyAlertsChannelId: e.safetyAlertsChannelId,
                            rulesChannelId: e.rulesChannelId,
                            preferredLocale: e.preferredLocale
                        }), S.saveGuildMetadata({
                            guildId: e.id,
                            primaryCategoryId: a.primaryCategoryId,
                            keywords: a.keywords,
                            emojiDiscoverabilityEnabled: a.emojiDiscoverabilityEnabled,
                            partnerActionedTimestamp: a.partnerActionedTimestamp,
                            partnerApplicationTimestamp: a.partnerApplicationTimestamp,
                            isPublished: a.isPublished,
                            reasonsToJoin: a.reasonsToJoin,
                            socialLinks: a.socialLinks,
                            about: a.about
                        }))
                    }
                }
            })(o.default);
            class w extends n.PureComponent {
                async componentDidMount() {
                    let {
                        guild: e
                    } = this.props;
                    if (null != e) {
                        (0, E.fetchDiscoveryChecklist)(e.id).then(() => {
                            (0, c.trackGuildSettingsDiscoveryViewed)(e.id)
                        }), S.maybeFetchGuildDiscoveryCategories(), S.fetchMetadataForGuild(e.id);
                        let t = await (0, p.getDiscoverableGuild)(e.id);
                        null != t && this.setState({
                            discoverableGuild: t
                        });
                        let s = this.checkForLowerMemberCountReqEnabled(e);
                        s && I.DiscoveryRequirementsM2Experiment.trackExposure({
                            guildId: e.id,
                            location: "006266_1"
                        })
                    }
                }
                renderDiscoverableSection() {
                    let {
                        guild: e,
                        isGuildAdmin: t
                    } = this.props;
                    if (null == e) return;
                    let s = e.hasFeature(B.GuildFeatures.DISCOVERABLE);
                    return (0, a.jsxs)(r.FormSection, {
                        className: V.twoColumnFormSection,
                        children: [(0, a.jsxs)("div", {
                            children: [(0, a.jsx)(r.FormTitle, {
                                className: V.formTitle,
                                children: H.default.Messages.GUILD_SETTINGS_ENABLE_DISCOVERABLE
                            }), (0, a.jsx)(r.FormText, {
                                type: r.FormTextTypes.DESCRIPTION,
                                className: V.formDescription,
                                children: H.default.Messages.FORM_HELP_ENABLE_DISCOVERABLE
                            }), (0, a.jsx)(r.FormText, {
                                type: r.FormTextTypes.DESCRIPTION,
                                className: V.formDescription,
                                children: H.default.Messages.FORM_HELP_DISCOVERABLE_CHANGE_TIME
                            }), (0, a.jsx)(r.Tooltip, {
                                text: t ? null : H.default.Messages.GUILD_SETTINGS_DISCOVERY_ADMIN_ONLY,
                                children: e => (0, a.jsx)(r.Button, {
                                    size: r.Button.Sizes.SMALL,
                                    onClick: this.handleToggleDiscovery,
                                    color: s ? r.Button.Colors.PRIMARY : r.Button.Colors.GREEN,
                                    hover: s ? r.Button.Colors.PRIMARY : r.Button.Colors.GREEN,
                                    disabled: !t,
                                    ...e,
                                    children: s ? H.default.Messages.GUILD_SETTINGS_DISABLE_DISCOVERABLE : H.default.Messages.GUILD_SETTINGS_ENABLE_DISCOVERABLE
                                })
                            })]
                        }), (0, a.jsx)(f.default, {
                            className: V.guildCard,
                            loading: null == e,
                            guild: e
                        })]
                    })
                }
                renderCoverImageSection() {
                    let {
                        guild: e,
                        errors: t,
                        canManageGuild: s
                    } = this.props;
                    if (null != e) return (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsxs)(r.FormSection, {
                            className: V.twoColumnFormSection,
                            children: [(0, a.jsxs)("div", {
                                children: [(0, a.jsx)(r.FormTitle, {
                                    className: V.formTitle,
                                    children: H.default.Messages.FORM_LABEL_DISCOVERY_COVER_IMAGE
                                }), (0, a.jsx)(r.FormText, {
                                    type: r.FormTextTypes.DESCRIPTION,
                                    className: V.formDescription,
                                    children: H.default.Messages.FORM_HELP_DISCOVERY_COVER_IMAGE
                                }), (0, a.jsxs)(r.Button, {
                                    size: r.Button.Sizes.SMALL,
                                    color: r.Button.Colors.PRIMARY,
                                    hover: r.Button.Colors.PRIMARY,
                                    children: [H.default.Messages.UPLOAD_BACKGROUND, (0, a.jsx)(L.default, {
                                        disabled: !s,
                                        onChange: this.handleSplashChange
                                    })]
                                })]
                            }), (0, a.jsx)("div", {
                                className: V.imageUploaderWrapper,
                                children: (0, a.jsx)(m.default, {
                                    image: e.discoverySplash,
                                    makeURL: t => x.default.getGuildDiscoverySplashURL({
                                        id: e.id,
                                        splash: t,
                                        size: 512 * (0, A.getDevicePixelRatio)()
                                    }),
                                    disabled: !s,
                                    onChange: this.handleSplashChange,
                                    hint: H.default.Messages.CHANGE_SPLASH,
                                    imageClassName: V.imageUploaderInnerSquare,
                                    hideSize: !0
                                })
                            })]
                        }), (null == t ? void 0 : t.discovery_splash) != null ? (0, a.jsx)(r.Text, {
                            color: "text-danger",
                            variant: "text-sm/normal",
                            children: t.discovery_splash
                        }) : null]
                    })
                }
                renderEmojiDiscoverabilitySection() {
                    var e;
                    let {
                        canManageGuild: t,
                        guildMetadata: s,
                        guild: n
                    } = this.props, {
                        discoverableGuild: i
                    } = this.state, {
                        emojiDiscoverabilityEnabled: o
                    } = s, d = i;
                    if (null == d && null != n) {
                        let e = g.default.getGuildEmoji(n.id);
                        d = {
                            ...n,
                            premiumSubscriptionCount: null == n ? void 0 : n.premiumSubscriberCount,
                            emojis: e,
                            emojiCount: e.length,
                            presenceCount: 1234,
                            memberCount: 1234
                        }
                    }
                    let u = null != d ? C.default.createFromDiscoverableGuild(d) : null,
                        c = null == d ? void 0 : null === (e = d.emojis) || void 0 === e ? void 0 : e[0],
                        E = null != c ? {
                            name: c.require_colons ? ":".concat(c.name, ":") : c.name,
                            emojiId: c.id,
                            animated: c.animated,
                            jumboable: !0
                        } : {};
                    return (0, a.jsxs)(r.FormSection, {
                        className: V.twoColumnFormSection,
                        children: [(0, a.jsxs)("div", {
                            className: V.formColumnLeft,
                            children: [(0, a.jsx)(r.FormTitle, {
                                className: V.formTitle,
                                children: H.default.Messages.GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_TITLE
                            }), (0, a.jsx)(r.FormText, {
                                className: V.description,
                                type: r.FormTextTypes.DESCRIPTION,
                                children: H.default.Messages.GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_DESCRIPTION
                            }), (0, a.jsx)(r.Button, {
                                size: r.Button.Sizes.SMALL,
                                color: o ? r.Button.Colors.PRIMARY : r.Button.Colors.GREEN,
                                hover: o ? r.Button.Colors.PRIMARY : r.Button.Colors.GREEN,
                                disabled: !t,
                                onClick: this.handleToggleEmojiDiscoverability,
                                children: o ? H.default.Messages.GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_DISABLE : H.default.Messages.GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_ENABLE
                            })]
                        }), null != u && u.isDiscoverable() && (0, a.jsx)(O.CustomGuildEmojiPopout, {
                            expressionSourceGuild: u,
                            node: E,
                            closePopout: B.NOOP,
                            nonce: (0, l.v4)(),
                            demoMode: !0
                        })]
                    })
                }
                renderLocaleSelector() {
                    let {
                        guild: e,
                        canManageGuild: t,
                        localeOptions: s
                    } = this.props;
                    if (null != e) return (0, a.jsxs)(r.FormSection, {
                        className: V.twoColumnFormSection,
                        children: [(0, a.jsxs)("div", {
                            children: [(0, a.jsx)(r.FormTitle, {
                                className: V.formTitle,
                                children: H.default.Messages.FORM_LABEL_SERVER_LANGUAGE
                            }), (0, a.jsx)(r.FormText, {
                                type: r.FormTextTypes.DESCRIPTION,
                                className: V.formDescription,
                                children: H.default.Messages.GUILD_SETTINGS_DISCOVERY_LOCALE_HELP
                            })]
                        }), (0, a.jsx)("div", {
                            className: V.formSelect,
                            children: (0, a.jsx)(r.SingleSelect, {
                                value: e.preferredLocale,
                                options: s,
                                onChange: this.handleLocaleChange,
                                isDisabled: !t
                            })
                        })]
                    })
                }
                renderCategoriesSection() {
                    let {
                        canManageGuild: e,
                        guildMetadata: t,
                        primaryCategoryOptions: s,
                        errors: n,
                        guild: l
                    } = this.props;
                    if (null != l) return (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsxs)(r.FormSection, {
                            children: [(0, a.jsx)(r.FormTitle, {
                                className: V.formTitle,
                                children: H.default.Messages.GUILD_SETTINGS_DISCOVERY_PRIMARY_CATEGORY_TITLE
                            }), (0, a.jsx)(r.FormText, {
                                type: r.FormTextTypes.DESCRIPTION,
                                className: V.description,
                                children: H.default.Messages.GUILD_SETTINGS_DISCOVERY_PRIMARY_CATEGORY_DESCRIPTION
                            })]
                        }), (0, a.jsx)(G.default, {
                            value: t.primaryCategoryId === F.DEFAULT_DISCOVERY_CATEGORY_ID ? null : t.primaryCategoryId,
                            placeholder: H.default.Messages.SELECT,
                            options: s,
                            onChange: this.handlePrimaryCategoryChange,
                            disabled: !e,
                            searchable: !0,
                            clearable: !0
                        }), (0, a.jsxs)(r.FormSection, {
                            className: V.noDividerFormSection,
                            children: [(0, a.jsx)(r.FormTitle, {
                                className: V.formTitle,
                                children: H.default.Messages.GUILD_SETTINGS_DISCOVERY_SUBCATEGORY_TITLE
                            }), (0, a.jsx)(j.default, {
                                guild: l,
                                guildMetadata: t
                            })]
                        }), (null == n ? void 0 : n.category) != null ? (0, a.jsx)(r.Text, {
                            color: "text-danger",
                            className: V.error,
                            variant: "text-sm/normal",
                            children: n.category
                        }) : null]
                    })
                }
                renderKeywordsSection() {
                    let {
                        canManageGuild: e,
                        guildMetadata: t,
                        errors: s
                    } = this.props;
                    return (0, a.jsxs)(r.FormSection, {
                        children: [(0, a.jsx)(r.FormTitle, {
                            className: V.formTitle,
                            children: H.default.Messages.GUILD_SETTINGS_DISCOVERY_SEARCH_KEYWORDS_TITLE
                        }), (0, a.jsx)(r.FormText, {
                            className: V.description,
                            type: r.FormTextTypes.DESCRIPTION,
                            children: H.default.Messages.GUILD_SETTINGS_DISCOVERY_SEARCH_KEYWORDS_DESCRIPTION.format()
                        }), (0, a.jsx)(d.default, {
                            tags: t.keywords,
                            onRemoveTag: this.handleRemoveKeyword,
                            onAddTag: this.handleAddKeyword,
                            maxTags: b.MAX_KEYWORDS,
                            maxTaxLength: b.MAX_KEYWORD_LENGTH,
                            disabled: !e
                        }), (null == s ? void 0 : s.keywords) != null ? (0, a.jsx)(r.Text, {
                            color: "text-danger",
                            className: V.error,
                            variant: "text-sm/normal",
                            children: s.keywords
                        }) : null]
                    })
                }
                render() {
                    let {
                        guild: e,
                        discoveryChecklist: t,
                        isGuildAdmin: s
                    } = this.props;
                    if (null == e || null == t) return null;
                    let n = (0, T.getSettingsView)(e, t);
                    switch (n) {
                        case T.DiscoverySettingsViews.INTRO:
                            return (0, a.jsx)(y.default, {
                                guild: e,
                                onEnableDiscovery: this.handleEnableDiscovery,
                                isGuildAdmin: s
                            });
                        case T.DiscoverySettingsViews.DISQUALIFIED:
                            return (0, a.jsx)(P.default, {
                                guild: e
                            });
                        case T.DiscoverySettingsViews.SETTINGS:
                            return (0, a.jsxs)(r.FormSection, {
                                className: V.discoverySettings,
                                title: H.default.Messages.DISCOVERY,
                                tag: r.FormTitleTags.H1,
                                children: [this.renderDiscoverableSection(), (0, a.jsx)(r.FormDivider, {
                                    className: V.divider
                                }), this.renderCoverImageSection(), (0, a.jsx)(r.FormDivider, {
                                    className: V.divider
                                }), this.renderEmojiDiscoverabilitySection(), (0, a.jsx)(r.FormDivider, {
                                    className: V.divider
                                }), this.renderCategoriesSection(), (0, a.jsx)(r.FormDivider, {
                                    className: V.divider
                                }), this.renderKeywordsSection(), (0, a.jsx)(r.FormDivider, {
                                    className: V.divider
                                }), this.renderLocaleSelector()]
                            });
                        default:
                            return null
                    }
                }
                constructor(...e) {
                    super(...e), this.state = {
                        discoverableGuild: null
                    }, this.checkForLowerMemberCountReqEnabled = e => {
                        let {
                            isGuildAdmin: t
                        } = this.props, s = e.hasFeature(B.GuildFeatures.COMMUNITY), {
                            enableLowerMemberCountReq: a
                        } = I.DiscoveryRequirementsM2Experiment.getCurrentConfig({
                            guildId: e.id,
                            location: "006266_2"
                        }, {
                            disable: !(t && s),
                            autoTrackExposure: !1
                        });
                        return a
                    }, this.handleToggleDiscovery = () => {
                        let {
                            guild: e
                        } = this.props;
                        if (null == e) return;
                        let t = new Set(e.features);
                        e.hasFeature(B.GuildFeatures.DISCOVERABLE) ? t.delete(B.GuildFeatures.DISCOVERABLE) : t.add(B.GuildFeatures.DISCOVERABLE), U.default.updateGuild({
                            features: t
                        })
                    }, this.handleEnableDiscovery = async () => {
                        let e = await (0, r.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("941089").then(s.bind(s, "941089"));
                            return t => {
                                let {
                                    ...s
                                } = t;
                                return (0, a.jsx)(e, {
                                    ...s
                                })
                            }
                        }, {
                            onCloseRequest: () => {
                                null != e && (0, r.closeModal)(e)
                            }
                        })
                    }, this.handleSplashChange = e => {
                        U.default.updateGuild({
                            discoverySplash: e
                        })
                    }, this.handleLocaleChange = e => {
                        U.default.updateGuild({
                            preferredLocale: e
                        })
                    }, this.handlePrimaryCategoryChange = e => {
                        var t;
                        let {
                            guild: s
                        } = this.props;
                        (null == s ? void 0 : s.id) != null && S.updateGuildPrimaryCategory(null == s ? void 0 : s.id, null !== (t = null == e ? void 0 : e.value) && void 0 !== t ? t : F.DEFAULT_DISCOVERY_CATEGORY_ID)
                    }, this.handleRemoveKeyword = e => {
                        let {
                            guild: t,
                            guildMetadata: s
                        } = this.props;
                        if ((null == t ? void 0 : t.id) == null) return;
                        let a = [...s.keywords];
                        a.splice(e, 1), S.updateGuildKeywords(t.id, a)
                    }, this.handleAddKeyword = e => {
                        let {
                            guild: t,
                            guildMetadata: s
                        } = this.props, {
                            keywords: a
                        } = s;
                        if ((null == t ? void 0 : t.id) != null) !(a.length >= b.MAX_KEYWORDS) && S.updateGuildKeywords(t.id, [...a, e])
                    }, this.handleToggleEmojiDiscoverability = () => {
                        let {
                            guild: e,
                            guildMetadata: t
                        } = this.props, {
                            emojiDiscoverabilityEnabled: s
                        } = t;
                        (null == e ? void 0 : e.id) != null && S.updateGuildEmojiDiscoverabilityEnabled(e.id, !s)
                    }
                }
            }
            var Y = i.default.connectStores([v.default, R.default, _.default, h.default, N.default, M.default, D.default], () => {
                let {
                    guild: e,
                    errors: t,
                    submitting: s,
                    guildMetadata: a
                } = v.default.getProps(), n = R.default.can(B.Permissions.MANAGE_GUILD, e), l = R.default.can(B.Permissions.ADMINISTRATOR, e), i = null != e ? _.default.getDiscoveryChecklist(e.id) : null, r = null != e ? h.default.getChannels(e.id) : null, o = [];
                null != r && r[0, h.GUILD_SELECTABLE_CHANNELS_KEY].forEach(e => {
                    let {
                        channel: t
                    } = e;
                    t.type === B.ChannelTypes.GUILD_TEXT && o.push({
                        value: t.id,
                        label: (0, u.computeChannelName)(t, M.default, D.default, !0)
                    })
                });
                let d = N.default.getPrimaryCategories().map(e => {
                        let {
                            categoryId: t,
                            name: s
                        } = e;
                        return {
                            value: t,
                            label: s
                        }
                    }),
                    c = (0, F.calculateLocaleOptions)();
                return {
                    guild: e,
                    errors: t,
                    submitting: s,
                    discoveryChecklist: i,
                    selectableChannels: o,
                    canManageGuild: n,
                    isGuildAdmin: l,
                    guildMetadata: a,
                    primaryCategoryOptions: d,
                    localeOptions: c
                }
            })(w)
        },
        851545: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsDiscoveryLandingPageNotice: function() {
                    return v
                },
                default: function() {
                    return P
                }
            }), s("222007"), s("511434"), s("313619"), s("654714"), s("287168"), s("956660"), s("686130"), s("781738");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("669491"),
                r = s("77078"),
                o = s("133403"),
                d = s("913801"),
                u = s("45299"),
                c = s("283167"),
                E = s("868246"),
                _ = s("298878"),
                T = s("407063"),
                I = s("694187"),
                S = s("608684"),
                N = s("957255"),
                f = s("93581"),
                g = s("954419"),
                A = s("578706"),
                L = s("381546"),
                m = s("315102"),
                C = s("701909"),
                O = s("592407"),
                h = s("900938"),
                R = s("26991"),
                D = s("744421"),
                M = s("49111"),
                G = s("447621"),
                x = s("782340"),
                p = s("409616");
            let U = "https:" + window.GLOBAL_ENV.MARKETING_ENDPOINT + "/servers/",
                v = () => {
                    let {
                        guild: e,
                        guildMetadata: t,
                        submitting: s
                    } = (0, l.useStateFromStoresObject)([h.default], () => ({
                        submitting: h.default.isSubmitting(),
                        guild: h.default.getGuild(),
                        guildMetadata: h.default.getMetadata()
                    }));
                    return (0, a.jsx)(u.default, {
                        submitting: s,
                        onReset: () => {
                            null != e && O.default.init(e.id)
                        },
                        onSave: () => {
                            null != e && (O.default.saveGuild(e.id, {
                                discoverySplash: e.discoverySplash,
                                description: e.description
                            }), c.saveGuildMetadata({
                                guildId: e.id,
                                primaryCategoryId: t.primaryCategoryId,
                                keywords: t.keywords,
                                emojiDiscoverabilityEnabled: t.emojiDiscoverabilityEnabled,
                                partnerActionedTimestamp: t.partnerActionedTimestamp,
                                partnerApplicationTimestamp: t.partnerApplicationTimestamp,
                                isPublished: t.isPublished,
                                reasonsToJoin: t.reasonsToJoin,
                                socialLinks: t.socialLinks.filter(e => e),
                                about: t.about
                            }))
                        }
                    })
                },
                j = () => {
                    var e;
                    let t = n.useRef(null),
                        s = (0, l.useStateFromStores)([h.default], () => h.default.getGuild()),
                        [u, v] = n.useState(!1);
                    n.useEffect(() => {
                        !u && null != s && (c.maybeFetchGuildDiscoveryCategories(), c.fetchMetadataForGuild(s.id), c.fetchSlugForGuild(s.id), v(!0))
                    }, [s, u]);
                    let {
                        canManageGuild: j
                    } = (0, l.useStateFromStoresObject)([N.default], () => ({
                        canManageGuild: N.default.can(M.Permissions.MANAGE_GUILD, s)
                    })), P = (0, l.useStateFromStores)([h.default], () => h.default.isGuildMetadataLoaded()), y = (0, l.useStateFromStores)([h.default], () => null != s ? h.default.getMetadata() : null), b = (0, l.useStateFromStores)([h.default], () => null != s && (null == y ? void 0 : y.isPublished) ? h.default.getSlug() : null), [B, F] = n.useState([!0]), [H, V] = n.useState(!0), [k, w] = n.useState([!1]), [Y, K] = n.useState([""]), W = e => {
                        let t = Object.entries(G.ALLOWED_SOCIAL_LINKS_DOMAINS).filter(e => !Y.includes(e[1].presentation)).map(e => ({
                            label: e[1].presentation,
                            value: e[0]
                        }));
                        return null == e || "" === e ? t : t.concat({
                            label: e,
                            value: e
                        })
                    }, z = e => {
                        try {
                            var t, s, a, n;
                            let l = new URL(e).hostname.split(".");
                            if (3 === l.length && "bandcamp" === l[1].toLowerCase()) return G.ALLOWED_SOCIAL_LINKS_DOMAINS.bandcamp.presentation;
                            let i = null !== (s = null === (t = l.shift()) || void 0 === t ? void 0 : t.toLowerCase()) && void 0 !== s ? s : "";
                            if ("www" === i && (i = null !== (n = null === (a = l.shift()) || void 0 === a ? void 0 : a.toLowerCase()) && void 0 !== n ? n : ""), i in G.ALLOWED_SOCIAL_LINKS_DOMAINS) return G.ALLOWED_SOCIAL_LINKS_DOMAINS[i].presentation;
                            return null
                        } catch {
                            return null
                        }
                    };
                    n.useEffect(() => {
                        if (null !== y) {
                            let e = [],
                                t = [];
                            y.socialLinks.forEach((s, a) => {
                                if ("" !== s) {
                                    let n = z(s);
                                    null !== n ? (t[a] = n, e[a] = !0) : e[a] = !1
                                } else e[a] = !0
                            }), K(t), F(e), V(e.every(e => !0 === e))
                        }
                    }, [y]);
                    let X = (0, l.useStateFromStores)([h.default], () => null != s ? h.default.getErrors() : null),
                        Z = (0, l.useStateFromStores)([E.default], () => E.default.getPrimaryCategories(), [], E.areDiscoveryCategoriesEqual);
                    if (null == s || null == y) return null;
                    let J = e => {
                            O.default.updateGuild({
                                discoverySplash: e
                            })
                        },
                        Q = e => {
                            var t;
                            (null == s ? void 0 : s.id) != null && c.updateGuildPrimaryCategory(null == s ? void 0 : s.id, null !== (t = null == e ? void 0 : e.value) && void 0 !== t ? t : G.DEFAULT_DISCOVERY_CATEGORY_ID)
                        },
                        q = e => {
                            var t;
                            O.default.updateGuild({
                                description: null !== (t = null == e ? void 0 : e.replaceAll("\n", "")) && void 0 !== t ? t : ""
                            })
                        },
                        $ = e => {
                            c.updateGuildDiscoveryMetadataAbout(s.id, e)
                        },
                        ee = e => {
                            c.updateGuildDiscoveryMetadataIsPublished(s.id, e), e ? c.saveGuildMetadata({
                                guildId: s.id,
                                primaryCategoryId: y.primaryCategoryId,
                                keywords: y.keywords,
                                emojiDiscoverabilityEnabled: y.emojiDiscoverabilityEnabled,
                                partnerActionedTimestamp: y.partnerActionedTimestamp,
                                partnerApplicationTimestamp: y.partnerApplicationTimestamp,
                                isPublished: !0,
                                reasonsToJoin: y.reasonsToJoin,
                                socialLinks: y.socialLinks,
                                about: y.about
                            }) : c.saveGuildMetadata({
                                guildId: s.id,
                                primaryCategoryId: y.primaryCategoryId,
                                keywords: y.keywords,
                                emojiDiscoverabilityEnabled: y.emojiDiscoverabilityEnabled,
                                partnerActionedTimestamp: y.partnerActionedTimestamp,
                                partnerApplicationTimestamp: y.partnerApplicationTimestamp,
                                isPublished: !1,
                                reasonsToJoin: y.reasonsToJoin,
                                socialLinks: y.socialLinks,
                                about: y.about
                            }), O.default.saveGuild(s.id, {
                                discoverySplash: s.discoverySplash,
                                description: s.description
                            })
                        },
                        et = () => {
                            if (y.socialLinks.length < 9) {
                                let e = [...y.socialLinks];
                                c.updateGuildDiscoveryMetadataSocialLinks(s.id, e.concat("")), K(Y.concat(""))
                            }
                        },
                        es = (e, t) => {
                            let a = [...y.socialLinks],
                                n = [...Y],
                                l = [...B];
                            n[t] = e, a[t] = G.ALLOWED_SOCIAL_LINKS_DOMAINS[e].baseUrl, l[t] = !0, F(l), K(n), V(l.every(e => !0 === e)), c.updateGuildDiscoveryMetadataSocialLinks(s.id, a)
                        },
                        ea = (e, t) => {
                            let a = [...y.socialLinks],
                                n = a[t],
                                l = e;
                            if (0 === n.length && l.length > 1) {
                                let e = RegExp("^https?:");
                                !1 === e.test(l) && (l = "https://" + l)
                            }
                            a[t] = l, c.updateGuildDiscoveryMetadataSocialLinks(s.id, a)
                        },
                        en = e => {
                            let t = [...k];
                            t.splice(e, 1), w(t);
                            let a = [...B];
                            a.splice(e, 1), F(a);
                            let n = [...Y];
                            n.splice(e, 1), K(n);
                            let l = [...y.socialLinks];
                            l.splice(e, 1), c.updateGuildDiscoveryMetadataSocialLinks(s.id, l)
                        },
                        el = e => {
                            let {
                                reason: t = "",
                                emoji_name: s = ""
                            } = e;
                            return null !== t && t.length >= 10 && t.length <= 128 && null !== s
                        },
                        ei = e => {
                            let {
                                reason: t = "",
                                emoji_name: s = ""
                            } = e;
                            return (null === t || "" === t) && null === s
                        },
                        er = [{
                            title: x.default.Messages.DISCOVERY_LANDING_PAGE_CHECKLIST_REQUIREMENTS,
                            items: [{
                                description: x.default.Messages.DISCOVERY_LANDING_PAGE_CHECKLIST_UPLOAD_COVER_IMAGE,
                                completed: null !== s.discoverySplash && "" !== s.discoverySplash
                            }, {
                                description: x.default.Messages.DISCOVERY_LANDING_PAGE_CHECKLIST_SHORT_DESCRIPTION,
                                completed: null !== s.description && "" !== s.description
                            }, {
                                description: x.default.Messages.DISCOVERY_LANDING_PAGE_CHECKLIST_ABOUT,
                                completed: null !== y.about && y.about.length >= 300 && y.about.length <= 2400
                            }, {
                                description: x.default.Messages.DISCOVERY_LANDING_PAGE_CHECKLIST_REASONS,
                                completed: null !== y.reasonsToJoin && y.reasonsToJoin.every(e => ei(e) || el(e)) && y.reasonsToJoin.filter(el).length >= 2
                            }]
                        }],
                        eo = Z.map(e => ({
                            label: e.name,
                            value: e.categoryId
                        })),
                        ed = (e, t) => {
                            let s = [...k];
                            s[e] = t, w(s)
                        };
                    return (0, a.jsx)("div", {
                        className: p.settingsColumn,
                        children: (0, a.jsx)("div", {
                            className: p.settingsContainer,
                            children: (0, a.jsx)(r.ScrollerAuto, {
                                className: p.settingsScroller,
                                children: (0, a.jsx)("main", {
                                    ref: t,
                                    className: p.settingsContent,
                                    children: (0, a.jsx)(r.FocusRingScope, {
                                        containerRef: t,
                                        children: (0, a.jsxs)("div", {
                                            className: p.container,
                                            children: [(0, a.jsxs)(r.FormSection, {
                                                className: p.mainContent,
                                                title: (0, a.jsxs)("div", {
                                                    children: [x.default.Messages.DISCOVERY_LANDING_PAGE, " ", (0, a.jsx)(_.default, {
                                                        className: p.betaTag
                                                    })]
                                                }),
                                                tag: r.FormTitleTags.H1,
                                                children: [(0, a.jsxs)(r.FormText, {
                                                    className: p.tabMainDescription,
                                                    type: r.FormTextTypes.DESCRIPTION,
                                                    children: [x.default.Messages.DISCOVERY_LANDING_PAGE_DESCRIPTION.format({
                                                        discordURL: window.GLOBAL_ENV.MARKETING_ENDPOINT
                                                    }), " ", x.default.Messages.DISCOVERY_LANDING_PAGE_LEARN_MORE.format({
                                                        learnMoreURL: C.default.getArticleURL(M.HelpdeskArticles.SERVER_WEB_PAGES)
                                                    })]
                                                }), (() => {
                                                    if (!y.isPublished || null == b) return;
                                                    let e = U + b;
                                                    return (0, a.jsx)(a.Fragment, {
                                                        children: (0, a.jsxs)(r.FormSection, {
                                                            className: p.noDividerFormSection,
                                                            children: [(0, a.jsx)(r.FormTitle, {
                                                                className: p.formTitle,
                                                                children: x.default.Messages.DISCOVERY_LANDING_PAGE_PUBLISHED_URL_TITLE
                                                            }), (0, a.jsx)(d.default, {
                                                                value: e
                                                            }), (0, a.jsx)(r.Button, {
                                                                className: p.viewPageButton,
                                                                size: r.Button.Sizes.SMALL,
                                                                color: r.Button.Colors.BRAND,
                                                                hover: r.Button.Colors.BRAND,
                                                                onClick: () => window.open(e),
                                                                children: x.default.Messages.DISCOVERY_LANDING_PAGE_PUBLISHED_URL_VIEW_PAGE_BUTTON
                                                            })]
                                                        })
                                                    })
                                                })(), (0, a.jsx)(r.FormDivider, {
                                                    className: p.divider
                                                }), (() => {
                                                    if (null != s) return (0, a.jsxs)(a.Fragment, {
                                                        children: [(0, a.jsxs)(r.FormSection, {
                                                            children: [(0, a.jsx)(r.FormTitle, {
                                                                className: p.formTitle,
                                                                children: x.default.Messages.DISCOVERY_LANDING_PAGE_CATEGORY_TITLE
                                                            }), (0, a.jsx)(r.FormText, {
                                                                type: r.FormTextTypes.DESCRIPTION,
                                                                className: p.description,
                                                                children: x.default.Messages.DISCOVERY_LANDING_PAGE_CATEGORY_DESCRIPTION
                                                            })]
                                                        }), (0, a.jsx)(g.default, {
                                                            value: y.primaryCategoryId === G.DEFAULT_DISCOVERY_CATEGORY_ID ? null : null == y ? void 0 : y.primaryCategoryId,
                                                            placeholder: x.default.Messages.SELECT,
                                                            options: eo,
                                                            onChange: Q,
                                                            disabled: !j,
                                                            searchable: !0,
                                                            clearable: !0
                                                        }), (0, a.jsxs)(r.FormSection, {
                                                            className: p.noDividerFormSection,
                                                            children: [(0, a.jsx)(r.FormTitle, {
                                                                className: p.formTitle,
                                                                children: x.default.Messages.GUILD_SETTINGS_DISCOVERY_SUBCATEGORY_TITLE
                                                            }), (0, a.jsx)(R.default, {
                                                                guild: s,
                                                                guildMetadata: y,
                                                                disabled: !j
                                                            })]
                                                        }), (null == X ? void 0 : X.category) != null ? (0, a.jsx)(r.Text, {
                                                            color: "text-danger",
                                                            className: p.error,
                                                            variant: "text-sm/normal",
                                                            children: X.category
                                                        }) : null]
                                                    })
                                                })(), (0, a.jsx)(r.FormDivider, {
                                                    className: p.divider
                                                }), (() => {
                                                    if (null != s) return (0, a.jsxs)(a.Fragment, {
                                                        children: [(0, a.jsxs)(r.FormSection, {
                                                            className: p.twoColumnFormSection,
                                                            children: [(0, a.jsxs)("div", {
                                                                children: [(0, a.jsx)(r.FormTitle, {
                                                                    className: p.formTitle,
                                                                    children: x.default.Messages.FORM_LABEL_DISCOVERY_COVER_IMAGE
                                                                }), (0, a.jsx)(r.FormText, {
                                                                    type: r.FormTextTypes.DESCRIPTION,
                                                                    className: p.formDescription,
                                                                    children: x.default.Messages.DISCOVERY_LANDING_PAGE_COVER_IMAGE_DESCRIPTION
                                                                }), (0, a.jsxs)(r.Button, {
                                                                    size: r.Button.Sizes.SMALL,
                                                                    color: r.Button.Colors.PRIMARY,
                                                                    hover: r.Button.Colors.PRIMARY,
                                                                    children: [x.default.Messages.UPLOAD_BACKGROUND, (0, a.jsx)(I.default, {
                                                                        disabled: !j,
                                                                        onChange: J
                                                                    })]
                                                                })]
                                                            }), (0, a.jsx)(S.default, {
                                                                image: s.discoverySplash,
                                                                makeURL: e => m.default.getGuildDiscoverySplashURL({
                                                                    id: s.id,
                                                                    splash: e,
                                                                    size: 512 * (0, T.getDevicePixelRatio)()
                                                                }),
                                                                disabled: !j,
                                                                onChange: J,
                                                                hint: x.default.Messages.CHANGE_SPLASH,
                                                                imageClassName: p.imageUploaderInnerSquare,
                                                                hideSize: !0
                                                            })]
                                                        }), (null == X ? void 0 : X.discovery_splash) != null ? (0, a.jsx)(r.Text, {
                                                            color: "text-danger",
                                                            variant: "text-sm/normal",
                                                            children: X.discovery_splash
                                                        }) : null]
                                                    })
                                                })(), (0, a.jsx)(r.FormDivider, {
                                                    className: p.divider
                                                }), (0, a.jsxs)(r.FormSection, {
                                                    children: [(0, a.jsx)(r.FormTitle, {
                                                        className: p.formTitle,
                                                        children: x.default.Messages.FORM_LABEL_SERVER_DESCRIPTION
                                                    }), (0, a.jsx)(r.FormText, {
                                                        className: p.description,
                                                        type: r.FormTextTypes.DESCRIPTION,
                                                        children: x.default.Messages.DISCOVERY_LANDING_PAGE_SERVER_DESCRIPTION
                                                    }), (0, a.jsx)(r.TextArea, {
                                                        value: null !== s.description ? s.description : "",
                                                        placeholder: x.default.Messages.DISCOVERY_LANDING_PAGE_SERVER_DESCRIPTION_HINT,
                                                        onChange: q,
                                                        maxLength: 120,
                                                        disabled: !j
                                                    })]
                                                }), (0, a.jsx)(r.FormDivider, {
                                                    className: p.divider
                                                }), (() => {
                                                    if (null == y) return null;
                                                    let e = 0 === y.reasonsToJoin.length ? [, , , , ].fill({
                                                        reason: "",
                                                        emoji_name: null
                                                    }) : y.reasonsToJoin;
                                                    return (0, a.jsxs)(r.FormSection, {
                                                        children: [(0, a.jsx)(r.FormTitle, {
                                                            className: p.formTitle,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_TITLE
                                                        }), (0, a.jsx)(r.FormText, {
                                                            type: r.FormTextTypes.DESCRIPTION,
                                                            className: p.description,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_DESCRIPTION
                                                        }), (0, a.jsx)("div", {
                                                            className: p.reasonToJoin,
                                                            children: (0, a.jsx)(D.default, {
                                                                reasonMinLength: 10,
                                                                reasonMaxLength: 128,
                                                                guildId: s.id,
                                                                reasons: e
                                                            })
                                                        }), (null == X ? void 0 : X.reasons_to_join) != null ? (0, a.jsx)(r.Text, {
                                                            color: "text-danger",
                                                            variant: "text-sm/normal",
                                                            children: X.reasons_to_join
                                                        }) : null]
                                                    })
                                                })(), (0, a.jsx)(r.FormDivider, {
                                                    className: p.divider
                                                }), (0, a.jsxs)(a.Fragment, {
                                                    children: [(0, a.jsxs)(r.FormSection, {
                                                        children: [(0, a.jsx)(r.FormTitle, {
                                                            className: p.formTitle,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_ABOUT_TITLE
                                                        }), (0, a.jsx)(r.FormText, {
                                                            className: p.description,
                                                            type: r.FormTextTypes.DESCRIPTION,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_ABOUT_DESCRIPTION
                                                        }), (0, a.jsx)(r.TextArea, {
                                                            showCharacterCount: !0,
                                                            className: p.textArea,
                                                            value: y.about,
                                                            placeholder: x.default.Messages.DISCOVERY_LANDING_PAGE_ABOUT_HINT,
                                                            onChange: $,
                                                            minLength: 300,
                                                            maxLength: 2400,
                                                            disabled: !j,
                                                            defaultDirty: (null === (e = y.about) || void 0 === e ? void 0 : e.length) > 0
                                                        }, "text-area-".concat(P))]
                                                    }), (null == X ? void 0 : X.about) != null ? (0, a.jsx)(r.Text, {
                                                        color: "text-danger",
                                                        variant: "text-sm/normal",
                                                        children: X.about
                                                    }) : null]
                                                }), (0, a.jsx)(r.FormDivider, {
                                                    className: p.divider
                                                }), (0, a.jsx)(a.Fragment, {
                                                    children: (0, a.jsxs)(r.FormSection, {
                                                        children: [(0, a.jsx)(r.FormTitle, {
                                                            className: p.formTitle,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_TITLE
                                                        }), (0, a.jsx)(r.FormText, {
                                                            className: p.description,
                                                            type: r.FormTextTypes.DESCRIPTION,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_DESCRIPTION
                                                        }), y.socialLinks.map((e, t) => (0, a.jsxs)("div", {
                                                            className: p.socialLinksContainer,
                                                            onMouseOver: () => ed(t, !0),
                                                            onFocus: () => ed(t, !0),
                                                            onMouseOut: () => ed(t, !1),
                                                            onBlur: () => ed(t, !1),
                                                            children: [(0, a.jsx)(r.SingleSelect, {
                                                                className: y.isPublished ? p.socialLinksDropdownMax : p.socialLinksDropdownMin,
                                                                options: W(Y[t]),
                                                                placeholder: x.default.Messages.DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_DROPDOWN_PLACEHOLDER,
                                                                value: Y[t],
                                                                onChange: e => es(e, t),
                                                                isDisabled: !j
                                                            }, "dropdown-" + t), (0, a.jsx)(r.TextInput, {
                                                                value: e,
                                                                className: y.isPublished ? p.socialLinksMax : p.socialLinksMin,
                                                                onChange: e => ea(e, t),
                                                                placeholder: x.default.Messages.DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_HINT,
                                                                maxLength: 150,
                                                                disabled: !j
                                                            }, "link-" + t), B[t] ? (0, a.jsx)(A.default, {
                                                                className: y.isPublished ? p.validationButtonMax : p.validationButtonMin,
                                                                color: i.default.unsafe_rawColors.GREEN_230.css,
                                                                width: 20,
                                                                height: 20
                                                            }, "validation-passed-" + t) : (0, a.jsx)(L.default, {
                                                                className: y.isPublished ? p.validationButtonMax : p.validationButtonMin,
                                                                color: i.default.unsafe_rawColors.RED_400.css,
                                                                width: 20,
                                                                height: 20
                                                            }, "validation-failed-" + t), j && (0, a.jsx)(o.default, {
                                                                className: k[t] ? y.isPublished ? p.deleteButtonMax : p.deleteButtonMin : y.isPublished ? p.deleteButtonHiddenMax : p.deleteButtonHiddenMin,
                                                                onClick: () => en(t)
                                                            }, "delete-button-" + t)]
                                                        }, "social-container-" + t)), (null == X ? void 0 : X.social_links) != null ? (0, a.jsx)(r.Text, {
                                                            color: "text-danger",
                                                            variant: "text-sm/normal",
                                                            children: X.social_links
                                                        }) : null, (0, a.jsx)(r.Button, {
                                                            size: r.Button.Sizes.SMALL,
                                                            color: r.Button.Colors.PRIMARY,
                                                            hover: r.Button.Colors.PRIMARY,
                                                            onClick: et,
                                                            disabled: !j || y.socialLinks.length >= 9,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_BUTTON_ADD_ANOTHER
                                                        })]
                                                    })
                                                }), y.isPublished && (0, a.jsxs)(a.Fragment, {
                                                    children: [(0, a.jsx)(r.FormDivider, {
                                                        className: p.divider
                                                    }), (0, a.jsxs)(r.FormSection, {
                                                        children: [(0, a.jsx)(r.FormTitle, {
                                                            className: p.formTitle,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_DISABLE_TITLE
                                                        }), (0, a.jsx)(r.FormText, {
                                                            className: p.description,
                                                            type: r.FormTextTypes.DESCRIPTION,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_DISABLE_DESCRIPTION
                                                        }), (0, a.jsx)(r.Button, {
                                                            size: r.Button.Sizes.SMALL,
                                                            color: r.Button.Colors.RED,
                                                            hover: r.Button.Colors.RED,
                                                            onClick: () => ee(!1),
                                                            disabled: !j,
                                                            children: x.default.Messages.DISCOVERY_LANDING_PAGE_DISABLE_BUTTON
                                                        })]
                                                    })]
                                                }), (null == X ? void 0 : X.is_published) != null ? (0, a.jsx)(r.Text, {
                                                    color: "text-danger",
                                                    variant: "text-sm/normal",
                                                    children: X.is_published
                                                }) : null]
                                            }), !y.isPublished && (0, a.jsx)("div", {
                                                className: p.checklist,
                                                children: (0, a.jsx)(f.default, {
                                                    title: x.default.Messages.DISCOVERY_LANDING_PAGE_CHECKLIST_TITLE,
                                                    children: er,
                                                    buttonLabel: x.default.Messages.DISCOVERY_LANDING_PAGE_CHECKLIST_PUBLISH,
                                                    buttonCallback: () => ee(!0),
                                                    disabled: !j || !H
                                                })
                                            })]
                                        })
                                    })
                                })
                            })
                        })
                    })
                };
            var P = () => {
                let e = (0, l.useStateFromStores)([h.default], () => h.default.getGuild());
                return null == e ? null : (0, a.jsx)(j, {})
            }
        },
        527042: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                EmojiTableTitle: function() {
                    return K
                },
                EmojiTable: function() {
                    return W
                },
                default: function() {
                    return X
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("627445"),
                o = s.n(r),
                d = s("917351"),
                u = s.n(d),
                c = s("748820"),
                E = s("446674"),
                _ = s("77078"),
                T = s("404118"),
                I = s("150021"),
                S = s("133403"),
                N = s("349389"),
                f = s("84339"),
                g = s("250666"),
                A = s("169722"),
                L = s("345988"),
                m = s("153043"),
                C = s("426733"),
                O = s("817963"),
                h = s("161778"),
                R = s("941886"),
                D = s("987772"),
                M = s("599110"),
                G = s("315102"),
                x = s("402671"),
                p = s("427459"),
                U = s("592407"),
                v = s("816880"),
                j = s("900938"),
                P = s("802310"),
                y = s("49111"),
                b = s("958706"),
                B = s("782340"),
                F = s("341569"),
                H = s("405879");
            let V = u.throttle(I.fetchEmoji, 1e3),
                k = e => {
                    let {
                        currentTarget: t,
                        which: s
                    } = e;
                    13 === s && t.blur()
                },
                w = e => {
                    let {
                        guildId: t,
                        emoji: s,
                        onEdit: l,
                        editingDisabled: r = !1
                    } = e, [o, d] = n.useState(s.name), u = G.default.getEmojiURL({
                        id: s.id,
                        animated: s.animated,
                        size: 32
                    });
                    return (0, a.jsxs)("div", {
                        className: i(F.emojiRow, H.card),
                        children: [(0, a.jsx)("div", {
                            className: F.emojiColumn,
                            children: (0, a.jsx)(_.Tooltip, {
                                text: s.available ? null : B.default.Messages.EMOJI_DISABLED_PREMIUM_TIER_LOST,
                                children: e => (0, a.jsx)("div", {
                                    ...e,
                                    className: i(F.emojiImage, {
                                        [F.emojiDisabled]: !s.available
                                    }),
                                    style: {
                                        backgroundImage: "url(".concat(u, ")")
                                    }
                                })
                            })
                        }), (0, a.jsxs)("div", {
                            className: F.column,
                            children: [(0, a.jsx)(_.TextInput, {
                                className: i(F.emojiAliasInput, {
                                    [F.emojiAliasInputDisabled]: r
                                }),
                                inputClassName: F.emojiInput,
                                placeholder: B.default.Messages.GUILD_SETTINGS_EMOJI_ALIAS_PLACEHOLDER,
                                onKeyPress: k,
                                onChange: d,
                                onBlur: () => {
                                    o !== s.name && (0, I.updateEmoji)({
                                        guildId: t,
                                        emojiId: s.id,
                                        name: x.default.sanitizeEmojiName(o)
                                    })
                                },
                                size: _.TextInput.Sizes.MINI,
                                value: o,
                                maxLength: b.EMOJI_MAX_LENGTH,
                                disabled: r
                            }), (0, a.jsx)("div", {
                                className: F.emojiAliasPlaceholder,
                                children: (0, a.jsx)("div", {
                                    className: F.emojiAliasPlaceholderContent,
                                    children: o.length > 0 ? o : B.default.Messages.GUILD_SETTINGS_EMOJI_ALIAS_PLACEHOLDER
                                })
                            })]
                        }), (0, a.jsxs)("div", {
                            className: F.column,
                            children: [(0, a.jsx)(_.Avatar, {
                                src: s.user.getAvatarURL(t, 24),
                                "aria-label": s.user.username,
                                size: _.AvatarSizes.SIZE_24,
                                className: F.avatar
                            }), (0, a.jsx)(_.FormText, {
                                className: i(F.emojiRowText),
                                children: s.user.username
                            })]
                        }), null != l && !r && (0, a.jsx)(_.Clickable, {
                            "aria-label": B.default.Messages.EDIT,
                            className: F.editEmojiRolesButton,
                            onClick: () => l(s, t),
                            children: (0, a.jsx)(D.default, {
                                width: 24,
                                height: 24,
                                className: F.editEmojiRolesIcon
                            })
                        }), !r && (0, a.jsx)(S.default, {
                            className: F.emojiRemove,
                            onClick: () => {
                                (0, I.deleteEmoji)(t, s.id).catch(e => {
                                    let {
                                        status: t
                                    } = e;
                                    429 === t && T.default.show({
                                        title: B.default.Messages.GENERIC_ERROR_TITLE,
                                        body: B.default.Messages.RATE_LIMITED
                                    })
                                })
                            }
                        })]
                    })
                },
                Y = e => {
                    let {
                        isLoading: t,
                        staticEmojis: n,
                        animatedEmojis: l,
                        theme: i,
                        guild: r
                    } = e;
                    return t ? (0, a.jsx)(_.Spinner, {
                        className: F.spinner,
                        type: _.Spinner.Type.SPINNING_CIRCLE
                    }) : 0 === n.length && 0 === l.length ? (0, a.jsxs)(R.default, {
                        theme: i,
                        className: F.empty,
                        children: [(0, a.jsx)(R.EmptyStateImage, {
                            darkSrc: s("404807"),
                            lightSrc: s("124495"),
                            width: 272,
                            height: 212
                        }), (0, a.jsx)(R.EmptyStateText, {
                            note: B.default.Messages.NO_EMOJI,
                            children: B.default.Messages.NO_EMOJI_TITLE
                        })]
                    }) : (0, a.jsxs)("div", {
                        children: [(0, a.jsx)(K, {
                            title: B.default.Messages.EMOJI,
                            maxSlots: r.getMaxEmojiSlots(),
                            emojiCount: n.length
                        }), (0, a.jsx)(W, {
                            emojis: n,
                            guild: r
                        }), (0, a.jsx)(K, {
                            title: B.default.Messages.ANIMATED_EMOJI,
                            maxSlots: r.getMaxEmojiSlots(),
                            emojiCount: l.length
                        }), (0, a.jsx)(W, {
                            emojis: l,
                            guild: r
                        })]
                    })
                },
                K = e => {
                    let {
                        title: t,
                        maxSlots: s,
                        emojiCount: n
                    } = e;
                    return (0, a.jsxs)(_.FormTitle, {
                        tag: _.FormTitleTags.H2,
                        className: F.title,
                        children: [t, (0, a.jsxs)("span", {
                            children: [" — ", B.default.Messages.EMOJI_SLOTS_AVAILABLE.format({
                                count: s - n
                            })]
                        })]
                    })
                },
                W = e => {
                    let {
                        emojis: t,
                        guild: s,
                        onEdit: l,
                        editingDisabled: i = !1
                    } = e, r = n.useMemo(() => [...t].reverse(), [t]), {
                        canManageGuildExpression: o
                    } = (0, O.getManageResourcePermissions)(s);
                    return 0 === t.length ? (0, a.jsx)(_.FormText, {
                        type: _.FormTextTypes.DESCRIPTION,
                        className: F.content,
                        children: B.default.Messages.NO_EMOJI_BODY
                    }) : (0, a.jsxs)(_.FormSection, {
                        className: F.content,
                        children: [(0, a.jsxs)("div", {
                            className: F.emojiTable,
                            children: [(0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                className: F.emojiColumn,
                                children: B.default.Messages.GUILD_SETTINGS_EMOJI_IMAGE
                            }), (0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                className: F.columnLabel,
                                children: B.default.Messages.GUILD_SETTINGS_EMOJI_NAME
                            }), (0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                className: F.columnLabel,
                                children: B.default.Messages.UPLOADED_BY
                            })]
                        }), r.map(e => (0, a.jsx)(w, {
                            guildId: s.id,
                            emoji: e,
                            onEdit: l,
                            editingDisabled: i || !o(e)
                        }, e.id))]
                    })
                },
                z = e => {
                    let t, s, n, {
                            staticEmojiCount: l,
                            animatedEmojiCount: i,
                            guild: r
                        } = e,
                        o = r.getMaxEmojiSlots(),
                        d = Math.min(o - l, o - i),
                        u = r.premiumTier,
                        c = (0, p.getNextTier)(u, r.id);
                    return null == c || u === y.BoostedGuildTiers.TIER_3 || d > 0 ? null : (d > o ? (t = B.default.Messages.GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TOO_MANY_EMOJIS_HEADER.format({
                        level: c
                    }), s = B.default.Messages.GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TOO_MANY_EMOJIS_TEXT.format({
                        level: c
                    }), n = y.AnalyticsObjects.BOOST_UPSELL_BANNER_LOST_LEVEL) : (t = B.default.Messages.PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_HEADER, s = B.default.Messages.GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TEXT.format({
                        level: c
                    }), n = y.AnalyticsObjects.BOOST_UPSELL_BANNER_SLOTS_FULL), (0, a.jsx)(L.default, {
                        header: t,
                        text: s,
                        guild: r,
                        analyticsLocation: {
                            page: y.AnalyticsPages.GUILD_SETTINGS,
                            section: y.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                            object: n,
                            objectType: (0, p.boostedGuildTierToAnalyticsObjectType)(c)
                        }
                    }))
                };
            var X = () => {
                let e = (0, E.useStateFromStores)([j.default], () => j.default.getGuild()),
                    [t, l] = n.useState("");
                o(null != e, "ConnectedGuildSettingsEmoji must be rendered within a guild context");
                let i = (0, E.useStateFromStores)([h.default], () => h.default.theme),
                    {
                        canCreateExpressions: r
                    } = (0, O.useManageResourcePermissions)(e),
                    {
                        revision: d,
                        emojis: T
                    } = (0, E.useStateFromStoresObject)([v.default], () => ({
                        revision: v.default.getEmojiRevision(e.id),
                        emojis: v.default.getEmojis(e.id)
                    })),
                    I = (0, f.default)(d),
                    [S, L] = n.useState(!1),
                    [R, D] = n.useState(!1),
                    G = n.useRef(null);
                n.useEffect(() => {
                    S && W()
                }, [S]), n.useEffect(() => {
                    V(e.id)
                }, [e.id]), n.useEffect(() => {
                    null != I && I < d && V(e.id)
                }, [d, I, e.id]);
                let [x, p] = n.useMemo(() => {
                    let t = null == T ? void 0 : T.filter(t => !(0, m.isRoleSubscriptionEmoji)(t, e.id)),
                        [s, a] = u.partition(t, e => !e.animated);
                    return [s, a]
                }, [T, e.id]), H = e.getMaxEmojiSlots(), k = Math.max(H - x.length, H - p.length), w = (s, a, n) => (0, A.uploadEmojiFile)({
                    data: s,
                    file: a,
                    image: n,
                    guildId: e.id,
                    uploadId: t,
                    hideErrorModal: !0
                }), K = async s => {
                    let a = (0, c.v4)();
                    l(a), M.default.track(y.AnalyticEvents.EMOJI_UPLOAD_STARTED, {
                        guild_id: e.id,
                        upload_id: t
                    }), await (0, C.processImages)(s, w), L(!0)
                }, W = () => {
                    null !== G.current && ((0, _.closeModal)(G.current), G.current = null)
                }, X = async e => {
                    G.current = await (0, _.openModalLazy)(async () => {
                        let {
                            default: t
                        } = await s.el("7476").then(s.bind(s, "7476"));
                        return s => (0, a.jsx)(t, {
                            processFiles: () => K(e),
                            ...s
                        })
                    })
                }, Z = (0, g.isCreatorMonetizationEnabledGuild)(e);
                return (0, a.jsxs)("div", {
                    className: F.emojiSettings,
                    children: [0 === k ? null : (0, a.jsx)(N.default, {
                        className: F.emojiUploadContainer,
                        onDrop: X
                    }), (0, a.jsxs)(_.FormSection, {
                        tag: _.FormTitleTags.H1,
                        title: B.default.Messages.EMOJI,
                        children: [(0, a.jsx)(z, {
                            guild: e,
                            staticEmojiCount: x.length,
                            animatedEmojiCount: p.length
                        }), (0, a.jsxs)(_.FormSection, {
                            className: F.uploader,
                            children: [(0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                children: B.default.Messages.GUILD_SETTINGS_EMOJI_UPLOAD_TO_SERVER_DESCRIPTION.format({
                                    count: H
                                })
                            }), Z && (0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                children: B.default.Messages.GUILD_ROLE_SUBSCRIPTION_EMOJI_SETTINGS_MANAGE_PREMIUM_TEXT.format({
                                    onClick: () => U.default.open(e.id, y.GuildSettingsSections.ROLE_SUBSCRIPTIONS, void 0, y.GuildSettingsSubsections.ROLE_SUBSCRIPTION_EMOJI)
                                })
                            }), (0, a.jsxs)("div", {
                                children: [(0, a.jsx)(_.FormTitle, {
                                    tag: _.FormTitleTags.H2,
                                    className: F.emojiUploadUploadRequirementsHeading,
                                    children: B.default.Messages.GUILD_SETTINGS_EMOJI_UPLOAD_HEADING
                                }), (0, a.jsxs)("ul", {
                                    className: F.emojiUploadUploadRequirementsList,
                                    children: [(0, a.jsx)("li", {
                                        children: (0, a.jsx)(_.FormText, {
                                            type: _.FormTextTypes.DESCRIPTION,
                                            children: B.default.Messages.GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_1
                                        })
                                    }), (0, a.jsx)("li", {
                                        children: (0, a.jsx)(_.FormText, {
                                            type: _.FormTextTypes.DESCRIPTION,
                                            children: B.default.Messages.GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_2.format({
                                                maxSize: b.EMOJI_MAX_FILESIZE_KB
                                            })
                                        })
                                    }), (0, a.jsx)("li", {
                                        children: (0, a.jsx)(_.FormText, {
                                            type: _.FormTextTypes.DESCRIPTION,
                                            children: B.default.Messages.GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_3
                                        })
                                    }), (0, a.jsx)("li", {
                                        children: (0, a.jsx)(_.FormText, {
                                            type: _.FormTextTypes.DESCRIPTION,
                                            children: B.default.Messages.GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_4
                                        })
                                    })]
                                })]
                            }), (0, a.jsxs)(_.Button, {
                                tabIndex: -1,
                                size: _.Button.Sizes.MEDIUM,
                                onClick: () => {
                                    let t = (0, c.v4)();
                                    l(t), M.default.track(y.AnalyticEvents.EMOJI_UPLOAD_STARTED, {
                                        guild_id: e.id,
                                        upload_id: t
                                    })
                                },
                                disabled: R || 0 === k || !r,
                                submitting: R,
                                focusProps: {
                                    within: !0
                                },
                                children: [B.default.Messages.UPLOAD_EMOJI, k > 0 ? (0, a.jsx)(C.default, {
                                    disabled: R || 0 === k || !r,
                                    tabIndex: 0,
                                    onChange: w,
                                    setLoading: D,
                                    multiple: !0
                                }) : null]
                            })]
                        }), (0, a.jsx)(P.GuildSettingsEmojiInventory, {
                            guild: e
                        }), (0, a.jsx)(Y, {
                            isLoading: null == T,
                            staticEmojis: x,
                            animatedEmojis: p,
                            guild: e,
                            theme: i
                        })]
                    })]
                })
            }
        },
        802310: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsEmojiInventory: function() {
                    return N
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("252931"),
                o = s("13162"),
                d = s("330893"),
                u = s("817963"),
                c = s("915639"),
                E = s("599110"),
                _ = s("240481"),
                T = s("49111"),
                I = s("782340"),
                S = s("174715");
            let N = e => {
                let {
                    guild: t
                } = e, {
                    inventorySettings: s
                } = t, N = (null == s ? void 0 : s.isEmojiPackCollectible) !== !1, f = (0, u.useHasInventoryGuildSettingsPermission)(t), {
                    showSettingsToggle: g
                } = (0, r.useInventoryGuildSettingsExperiment)({
                    guildId: t.id
                }), [A, L] = n.useState(N), [m, C] = n.useState(void 0), O = (0, l.useStateFromStores)([c.default], () => c.default.locale);
                n.useEffect(() => {
                    if (!f) return;
                    let e = async () => {
                        var e;
                        let s = await (0, o.getPackMetadata)({
                            packId: t.id
                        });
                        C(null !== (e = null == s ? void 0 : s.collectedCount) && void 0 !== e ? e : 0)
                    };
                    e()
                }, [t.id, f]);
                let h = async () => {
                    try {
                        L(!N), await (0, o.updateInventorySettings)({
                            guildId: t.id,
                            settings: {
                                isEmojiPackCollectible: !N
                            }
                        }), E.default.track(T.AnalyticEvents.INVENTORY_GUILD_SETTINGS, {
                            publish_emoji_in_pack: !N,
                            guild_id: t.id
                        })
                    } catch {
                        L(N)
                    }
                };
                return g && f ? (0, a.jsxs)(i.FormSection, {
                    children: [(0, a.jsx)(i.FormSwitch, {
                        className: S.marginBottom8,
                        value: A,
                        onChange: () => {
                            let e = null != m ? m : 0;
                            if (A && e > 0) {
                                let t = (0, _.humanizeValue)(e, O);
                                (0, d.openInventoryDisablePublishEmojiModal)({
                                    collectedCount: t,
                                    onConfirm: h
                                })
                            } else h()
                        },
                        hideBorder: !0,
                        children: I.default.Messages.INVENTORY_ALLOW_USE_SETTING_V2
                    }), (0, a.jsx)(i.FormText, {
                        className: S.marginBottom4,
                        children: I.default.Messages.INVENTORY_EMOJI_VISIBLE_DESCRIPTION
                    }), void 0 !== m && (0, a.jsx)(i.FormText, {
                        children: I.default.Messages.INVENTORY_EMOJI_COLLECTED_DESCRIPTION_V2.format({
                            number: (0, _.humanizeValue)(m, O)
                        })
                    }), (0, a.jsx)(i.FormDivider, {
                        className: S.divider
                    })]
                }) : null
            }
        },
        977887: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return _
                },
                GuildSettingsIntegrationsNotice: function() {
                    return T
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("713841"),
                i = s("45299"),
                r = s("467733"),
                o = s("592407"),
                d = s("952943"),
                u = s("900938"),
                c = s("482391"),
                E = s("683830");

            function _(e) {
                let {
                    refToScroller: t
                } = e, s = (0, n.useStateFromStores)([u.default], () => u.default.getGuild()), {
                    section: l,
                    sectionId: i,
                    integrations: o,
                    editedIntegration: c,
                    webhooks: E,
                    editedWebhook: _,
                    isFetching: T,
                    errors: I
                } = (0, n.useStateFromStoresObject)([d.default], () => ({
                    editedIntegration: d.default.editedIntegration,
                    editedWebhook: d.default.editedWebhook,
                    errors: d.default.getErrors(),
                    integrations: d.default.integrations,
                    isFetching: d.default.isFetching(),
                    section: d.default.getSection(),
                    sectionId: d.default.getSectionId(),
                    webhooks: d.default.webhooks
                }));
                return null == s ? null : (0, a.jsx)(r.default, {
                    guild: s,
                    section: l,
                    sectionId: i,
                    integrations: o,
                    webhooks: E,
                    editedIntegration: c,
                    editedWebhook: _,
                    isFetching: T,
                    hasChanges: d.default.hasChanges,
                    errors: I,
                    refToScroller: t
                })
            }

            function T() {
                let {
                    guild: e,
                    submitting: t
                } = (0, n.useStateFromStoresObject)([u.default], () => ({
                    guild: u.default.getGuild(),
                    submitting: u.default.isSubmitting()
                }));
                return (0, a.jsx)(i.default, {
                    submitting: t,
                    onReset: () => {
                        l.default.init(), c.resetPermissions(), null != e && o.default.init(e.id)
                    },
                    onSave: () => {
                        if (null != e) {
                            if (null != d.default.editedIntegration) l.default.saveIntegration(e.id, d.default.editedIntegration);
                            else if (null != d.default.editedWebhook) l.default.saveWebhook(e.id, d.default.editedWebhook);
                            else if (null != d.default.editedCommandId) {
                                let t = d.default.getSectionId(),
                                    s = E.default.getEditedApplication();
                                if (null == t || null == s) return;
                                l.default.saveApplicationPermissions(t, e.id, Object.values(s))
                            }
                            u.default.hasChanges() && o.default.saveGuild(e.id, {
                                features: e.features
                            })
                        }
                    }
                })
            }
        },
        912477: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("102985"),
                i = s("900938"),
                r = s("758085");

            function o() {
                let e = (0, n.useStateFromStores)([l.default], () => l.default.hideInstantInvites),
                    {
                        invites: t,
                        guild: s
                    } = (0, n.useStateFromStoresObject)([i.default], () => i.default.getProps(), []);
                return (0, a.jsx)(r.default, {
                    invites: t,
                    guild: s,
                    showChannel: !0,
                    hide: e
                })
            }
        },
        969741: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsMembersRow: function() {
                    return S
                },
                default: function() {
                    return N
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("917351"),
                l = s("446674"),
                i = s("77078"),
                r = s("466818"),
                o = s("645266"),
                d = s("284234"),
                u = s("758710"),
                c = s("592407"),
                E = s("900938"),
                _ = s("49111"),
                T = s("782340"),
                I = s("927911");

            function S() {
                var e;
                let t = (0, l.useStateFromStores)([E.default], () => E.default.getProps().guild, []),
                    s = null !== (e = null == t ? void 0 : t.isCommunity()) && void 0 !== e && e;
                return (0, a.jsxs)(i.Clickable, {
                    onClick: e => {
                        null != t && (s ? (e.preventDefault(), c.default.close(), (0, o.goToMemberSafetyDashboard)(t.id)) : c.default.open(t.id, _.GuildSettingsSections.MEMBERS))
                    },
                    className: I.rowContainer,
                    children: [(0, a.jsx)("div", {
                        children: T.default.Messages.MEMBERS
                    }), s && (0, a.jsx)(u.default, {
                        className: I.linkIcon,
                        width: 16,
                        height: 16
                    })]
                })
            }

            function N() {
                var e;
                let {
                    guild: t
                } = (0, l.useStateFromStores)([E.default], () => E.default.getProps(), [], n.isEqual), s = null !== (e = null == t ? void 0 : t.id) && void 0 !== e ? e : "", i = (0, r.useCanAccessMemberSafetyPage)(s);
                return i ? (0, a.jsx)(d.default, {
                    guildId: s
                }) : null
            }
        },
        849823: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return G
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("151426"),
                d = s("77078"),
                u = s("10641"),
                c = s("233706"),
                E = s("137215"),
                _ = s("900938"),
                T = s("851490"),
                I = s("131835"),
                S = s("330724"),
                N = s("136278"),
                f = s("397947"),
                g = s("259483"),
                A = s("867928"),
                L = s("706866"),
                m = s("764151"),
                C = s("887313"),
                O = s("832931"),
                h = s("584027"),
                R = s("614840"),
                D = s("782340"),
                M = s("917323");

            function G() {
                let e = (0, r.useStateFromStores)([_.default], () => _.default.getGuildId());
                return null == e ? null : (0, a.jsx)(x, {
                    guildId: e
                })
            }

            function x(e) {
                let t, {
                        guildId: s
                    } = e,
                    l = (0, r.useStateFromStores)([f.default], () => f.default.getCurrentPage()),
                    _ = (0, r.useStateFromStores)([f.default], () => {
                        let e = (0, g.pageToEducationUpsellType)(l);
                        return null != e && !f.default.isEducationUpsellDismissed(e)
                    }),
                    N = (0, A.default)(s),
                    G = !N && _,
                    {
                        homeSettingsEnabled: x
                    } = (0, c.useOnboardingHomeAdminExperiment)(s);
                switch (n.useEffect(() => {
                        (0, u.markDismissibleContentAsDismissed)(o.DismissibleContent.COMMUNITY_ONBOARDING_NEW_BADGE)
                    }, []), l) {
                    case g.GuildSettingsOnboardingPage.LANDING:
                        t = N ? (0, a.jsx)(C.default, {
                            completed: !0,
                            guildId: s
                        }) : (0, a.jsx)(h.default, {});
                        break;
                    case g.GuildSettingsOnboardingPage.SAFETY_CHECK:
                        t = (0, a.jsx)(R.default, {
                            hideChangelog: !0
                        });
                        break;
                    case g.GuildSettingsOnboardingPage.DEFAULT_CHANNELS:
                        t = (0, a.jsx)(L.default, {
                            saveOnClose: !N
                        });
                        break;
                    case g.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS:
                        t = (0, a.jsx)(O.default, {
                            saveOnClose: !N
                        });
                        break;
                    case g.GuildSettingsOnboardingPage.HOME_SETTINGS:
                        t = (0, a.jsx)(m.default, {
                            saveOnClose: !N
                        });
                        break;
                    case g.GuildSettingsOnboardingPage.REVIEW:
                        t = (0, a.jsx)(C.default, {
                            completed: N,
                            guildId: s
                        })
                }
                return (0, a.jsxs)("div", {
                    className: i(M.onboardingContainer, {
                        [M.upsellOnTop]: G
                    }),
                    children: [!N && l !== g.GuildSettingsOnboardingPage.LANDING && (0, a.jsx)(p, {
                        setOnboardingStep: I.setOnboardingStep,
                        page: l,
                        homeSettingsEnabled: x
                    }), N && l !== g.GuildSettingsOnboardingPage.LANDING && (0, a.jsx)("div", {
                        children: (0, a.jsxs)(d.Button, {
                            innerClassName: M.backButton,
                            look: d.Button.Looks.BLANK,
                            size: d.Button.Sizes.MIN,
                            onClick: () => {
                                (0, S.resetGuildOnboardingPrompts)(), (0, T.resetDefaultChannels)(), (0, I.setOnboardingStep)(g.GuildSettingsOnboardingPage.LANDING)
                            },
                            children: [(0, a.jsx)(E.default, {
                                className: M.arrow,
                                direction: E.default.Directions.LEFT
                            }), (0, a.jsx)(d.Text, {
                                variant: "text-sm/semibold",
                                color: "interactive-normal",
                                children: D.default.Messages.BACK
                            })]
                        })
                    }), (0, a.jsx)("div", {
                        children: t
                    })]
                })
            }

            function p(e) {
                let {
                    page: t,
                    setOnboardingStep: s,
                    homeSettingsEnabled: n
                } = e, l = (0, r.useStateFromStores)([f.default], () => f.default.hasErrors()), o = e => {
                    if (!l) return () => s(e)
                }, u = (0, r.useStateFromStores)([N.default], () => N.default.advancedMode);
                return (0, a.jsxs)("div", {
                    className: M.progressContainer,
                    children: [(0, a.jsxs)(d.Clickable, {
                        className: i(M.progressBarContainer, M.clickableProgressBar),
                        onClick: o(g.GuildSettingsOnboardingPage.SAFETY_CHECK),
                        children: [(0, a.jsx)("div", {
                            className: i(M.progressBar, {
                                [M.progressBarCurrent]: t === g.GuildSettingsOnboardingPage.SAFETY_CHECK
                            })
                        }), (0, a.jsx)(d.Text, {
                            color: t === g.GuildSettingsOnboardingPage.SAFETY_CHECK ? "text-brand" : "text-muted",
                            variant: "text-xs/medium",
                            children: D.default.Messages.GUILD_ONBOARDING_SETUP_STEP_SAFETY.format({
                                stepNumber: 1
                            })
                        })]
                    }), (0, a.jsxs)(d.Clickable, {
                        className: i(M.progressBarContainer, M.clickableProgressBar),
                        onClick: o(g.GuildSettingsOnboardingPage.DEFAULT_CHANNELS),
                        children: [(0, a.jsx)("div", {
                            className: i(M.progressBar, {
                                [M.progressBarCurrent]: t === g.GuildSettingsOnboardingPage.DEFAULT_CHANNELS
                            })
                        }), (0, a.jsx)(d.Text, {
                            color: t === g.GuildSettingsOnboardingPage.DEFAULT_CHANNELS ? "text-brand" : "text-muted",
                            variant: "text-xs/medium",
                            children: u ? D.default.Messages.GUILD_ONBOARDING_SETUP_STEP_CHANNELS_ADVANCED.format({
                                stepNumber: 2
                            }) : D.default.Messages.GUILD_ONBOARDING_SETUP_STEP_CHANNELS.format({
                                stepNumber: 2
                            })
                        })]
                    }), (0, a.jsxs)(d.Clickable, {
                        className: i(M.progressBarContainer, M.clickableProgressBar),
                        onClick: o(g.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS),
                        children: [(0, a.jsx)("div", {
                            className: i(M.progressBar, {
                                [M.progressBarCurrent]: t === g.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS
                            })
                        }), (0, a.jsx)(d.Text, {
                            color: t === g.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS ? "text-brand" : "text-muted",
                            variant: "text-xs/medium",
                            children: u ? D.default.Messages.GUILD_ONBOARDING_SETUP_STEP_PROMPTS_ADVANCED.format({
                                stepNumber: 3
                            }) : D.default.Messages.GUILD_ONBOARDING_SETUP_STEP_PROMPTS.format({
                                stepNumber: 3
                            })
                        })]
                    }), n && (0, a.jsxs)(d.Clickable, {
                        className: i(M.progressBarContainer, M.clickableProgressBar),
                        onClick: o(g.GuildSettingsOnboardingPage.HOME_SETTINGS),
                        children: [(0, a.jsx)("div", {
                            className: i(M.progressBar, {
                                [M.progressBarCurrent]: t === g.GuildSettingsOnboardingPage.HOME_SETTINGS
                            })
                        }), (0, a.jsx)(d.Text, {
                            color: t === g.GuildSettingsOnboardingPage.HOME_SETTINGS ? "text-brand" : "text-muted",
                            variant: "text-xs/medium",
                            children: D.default.Messages.GUILD_ONBOARDING_SETUP_STEP_HOME.format({
                                stepNumber: 4
                            })
                        })]
                    }), (0, a.jsxs)("div", {
                        className: M.progressBarContainer,
                        children: [(0, a.jsx)("div", {
                            className: i(M.progressBar, {
                                [M.progressBarCurrent]: t === g.GuildSettingsOnboardingPage.REVIEW
                            })
                        }), (0, a.jsx)(d.Text, {
                            color: t === g.GuildSettingsOnboardingPage.REVIEW ? "text-brand" : "text-muted",
                            variant: "text-xs/medium",
                            children: D.default.Messages.GUILD_ONBOARDING_SETUP_STEP_REVIEW.format({
                                stepNumber: 3 + (n ? 1 : 0) + 1
                            })
                        })]
                    })]
                })
            }
        },
        788831: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsOverviewNotice: function() {
                    return eA
                },
                default: function() {
                    return em
                }
            }), s("222007"), s("843762");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("627445"),
                o = s.n(r),
                d = s("917351"),
                u = s.n(d),
                c = s("446674"),
                E = s("669491"),
                _ = s("819855"),
                T = s("77078"),
                I = s("45299"),
                S = s("734575"),
                N = s("841098"),
                f = s("812204"),
                g = s("716241"),
                A = s("685665"),
                L = s("320954"),
                m = s("679653"),
                C = s("419830"),
                O = s("578899"),
                h = s("298878"),
                R = s("634544"),
                D = s("836275"),
                M = s("379532"),
                G = s("677315"),
                x = s("146005"),
                p = s("843257"),
                U = s("139321"),
                v = s("597517"),
                j = s("424960"),
                P = s("656913"),
                y = s("694187"),
                b = s("608684"),
                B = s("42203"),
                F = s("245997"),
                H = s("525065"),
                V = s("957255"),
                k = s("27618"),
                w = s("697218"),
                Y = s("145131"),
                K = s("181114"),
                W = s("612434"),
                z = s("118503"),
                X = s("956089"),
                Z = s("315102"),
                J = s("568734"),
                Q = s("449008"),
                q = s("701909"),
                $ = s("592407"),
                ee = s("900938"),
                et = s("53948"),
                es = s("49111"),
                ea = s("944305"),
                en = s("75015"),
                el = s("453252"),
                ei = s("782340"),
                er = s("560427"),
                eo = s("482644"),
                ed = s("282725");
            let eu = "NO_AFK_CHANNEL",
                ec = "NO_SYSTEM_CHANNEL",
                eE = "".concat(60),
                e_ = "".concat(300),
                eT = "".concat(900),
                eI = "".concat(1800),
                eS = "".concat(3600);

            function eN(e) {
                return ef(e[0])
            }

            function ef(e) {
                if (null == e) return;
                let {
                    label: t,
                    channel: s,
                    category: n
                } = e, l = (0, C.getChannelIconComponent)(s), i = null != n ? (0, m.computeChannelName)(n, w.default, k.default) : null;
                return (0, a.jsx)(W.default, {
                    title: t,
                    icon: l,
                    subtitle: i
                })
            }

            function eg(e) {
                return {
                    value: e.id,
                    label: (0, m.computeChannelName)(e, w.default, k.default),
                    channel: e,
                    category: B.default.getChannel(e.parent_id)
                }
            }
            let eA = () => {
                let {
                    guild: e,
                    originalGuild: t,
                    submitting: s,
                    errors: l
                } = (0, c.useStateFromStoresObject)([ee.default], () => ee.default.getProps()), i = n.useMemo(() => (0, et.getSettingsErrorMessage)(l), [l]), r = n.useCallback(() => {
                    if (null == e) return;
                    let s = {
                            name: e.name,
                            icon: e.icon,
                            splash: e.splash,
                            afkChannelId: e.afkChannelId,
                            afkTimeout: e.afkTimeout,
                            systemChannelId: e.systemChannelId,
                            safetyAlertsChannelId: e.safetyAlertsChannelId,
                            verificationLevel: e.verificationLevel,
                            defaultMessageNotifications: e.defaultMessageNotifications,
                            explicitContentFilter: e.explicitContentFilter,
                            description: e.description,
                            banner: e.banner,
                            systemChannelFlags: e.systemChannelFlags,
                            publicUpdatesChannelId: e.publicUpdatesChannelId,
                            premiumProgressBarEnabled: e.premiumProgressBarEnabled,
                            homeHeader: e.homeHeader
                        },
                        a = (0, Q.areSetsEqual)(new Set(e.features), new Set(t.features));
                    !a && (s.features = e.features), $.default.saveGuild(e.id, s)
                }, [e, t]), o = n.useCallback(() => {
                    null != e && $.default.init(e.id)
                }, [e]);
                return (0, a.jsx)(I.default, {
                    submitting: s,
                    errorMessage: i,
                    onSave: r,
                    onReset: o
                })
            };
            class eL extends n.PureComponent {
                componentDidMount() {
                    if (this.props.subsection === es.GuildSettingsSubsections.DISPLAY && null != this._displaySectionRef.current) {
                        let e = this._displaySectionRef.current;
                        setTimeout(() => e.scrollIntoView(), 0)
                    } else if (this.props.subsection === es.GuildSettingsSubsections.INVITE && null != this._inviteSectionRef.current) {
                        let e = this._inviteSectionRef.current;
                        setTimeout(() => e.scrollIntoView(), 0)
                    } else if (this.props.subsection === es.GuildSettingsSubsections.DEFAULT_NOTIFICATIONS && null != this._notificationSectionRef.current) {
                        let e = this._notificationSectionRef.current;
                        setTimeout(() => e.scrollIntoView(), 0)
                    }
                }
                handleNameChange(e) {
                    $.default.updateGuild({
                        name: e
                    })
                }
                handleAFKChannelChange(e) {
                    e === eu && (e = null), $.default.updateGuild({
                        afkChannelId: e
                    })
                }
                handleAFKTimeoutChange(e) {
                    $.default.updateGuild({
                        afkTimeout: parseInt(e, 10)
                    })
                }
                handleSystemChannelChange(e) {
                    e === ec && (e = null), $.default.updateGuild({
                        systemChannelId: e
                    })
                }
                handleDefaultMessageNotificationsChange(e) {
                    let {
                        value: t
                    } = e;
                    $.default.updateGuild({
                        defaultMessageNotifications: t
                    })
                }
                handleSplashChange(e) {
                    $.default.updateGuild({
                        splash: e
                    })
                }
                handleSystemChannelFlagsChange(e, t) {
                    let {
                        guild: s
                    } = this.props, a = (0, J.setFlag)(s.systemChannelFlags, e, t);
                    $.default.updateGuild({
                        systemChannelFlags: a
                    })
                }
                handlePremiumProgressBarEnabledChange(e) {
                    $.default.updateGuild({
                        premiumProgressBarEnabled: e
                    })
                }
                handleChangeDescription(e) {
                    $.default.updateGuild({
                        description: e
                    })
                }
                renderBaseSettings() {
                    let {
                        guild: e,
                        errors: t,
                        canManageGuild: s
                    } = this.props;
                    return (0, a.jsxs)(Y.default, {
                        className: i(er.baseSection),
                        children: [(0, a.jsxs)(Y.default, {
                            basis: "50%",
                            justify: Y.default.Justify.BETWEEN,
                            children: [(0, a.jsxs)(Y.default.Child, {
                                wrap: !0,
                                children: [(0, a.jsx)(b.default, {
                                    showIcon: !0,
                                    name: e.name,
                                    image: e.icon,
                                    onChange: this.handleIconChange,
                                    disabled: !s,
                                    hint: ei.default.Messages.CHANGE_ICON,
                                    makeURL: t => Z.default.getGuildIconURL({
                                        id: e.id,
                                        icon: t,
                                        canAnimate: !0,
                                        size: 100
                                    }),
                                    className: i({
                                        [er.avatarUploader]: s,
                                        [er.avatarUploaderDisabled]: !s
                                    }),
                                    imageClassName: i(er.avatarUploaderInner, {
                                        [er.avatarUploaderInnerEmpty]: null == e.icon
                                    })
                                }), null != t.icon ? (0, a.jsx)("div", {
                                    className: er.iconError,
                                    children: t.icon
                                }) : null]
                            }), (0, a.jsxs)(Y.default, {
                                direction: Y.default.Direction.VERTICAL,
                                align: Y.default.Align.START,
                                style: {
                                    maxWidth: 180
                                },
                                children: [(0, a.jsx)(T.FormText, {
                                    type: T.FormTextTypes.DESCRIPTION,
                                    className: er.marginBottom8,
                                    children: ei.default.Messages.GUILD_SETTINGS_ICON_RECOMMEND
                                }), (0, a.jsxs)(T.Button, {
                                    look: T.ButtonLooks.OUTLINED,
                                    color: T.ButtonColors.PRIMARY,
                                    disabled: !s,
                                    className: er.marginTop8,
                                    onClick: this.handleUploadImage,
                                    children: [ei.default.Messages.UPLOAD_IMAGE, (0, a.jsx)(y.default, {
                                        ref: this._imageInputRef,
                                        onChange: this.handleOpenImageCroppingModal,
                                        disabled: !s
                                    })]
                                })]
                            })]
                        }), (0, a.jsx)(Y.default.Child, {
                            basis: "50%",
                            children: (0, a.jsx)(T.FormItem, {
                                title: ei.default.Messages.FORM_LABEL_SERVER_NAME,
                                className: er.marginBottom20,
                                children: (0, a.jsx)(T.TextInput, {
                                    type: "text",
                                    disabled: !s,
                                    value: e.name,
                                    maxLength: 100,
                                    onChange: this.handleNameChange,
                                    error: t.name
                                })
                            })
                        })]
                    })
                }
                renderAFKSection() {
                    var e;
                    let {
                        guild: t,
                        canManageGuild: s,
                        channels: n
                    } = this.props, l = null != t.afkTimeout ? "".concat(t.afkTimeout) : null, i = null !== (e = t.afkChannelId) && void 0 !== e ? e : eu, r = [{
                        value: eE,
                        label: ei.default.Messages.DURATION_MINUTES.format({
                            minutes: 1
                        })
                    }, {
                        value: e_,
                        label: ei.default.Messages.DURATION_MINUTES.format({
                            minutes: 5
                        })
                    }, {
                        value: eT,
                        label: ei.default.Messages.DURATION_MINUTES.format({
                            minutes: 15
                        })
                    }, {
                        value: eI,
                        label: ei.default.Messages.DURATION_MINUTES.format({
                            minutes: 30
                        })
                    }, {
                        value: eS,
                        label: ei.default.Messages.DURATION_HOURS.format({
                            hours: 1
                        })
                    }], o = u(n).filter(e => {
                        let {
                            channel: t
                        } = e;
                        return t.type === es.ChannelTypes.GUILD_VOICE
                    }).map(e => {
                        let {
                            channel: t
                        } = e;
                        return eg(t)
                    }).value();
                    return o.unshift({
                        value: eu,
                        label: ei.default.Messages.NO_AFK_CHANNEL
                    }), (0, a.jsxs)(T.FormSection, {
                        className: er.divider,
                        children: [(0, a.jsxs)(Y.default, {
                            children: [(0, a.jsx)(Y.default.Child, {
                                basis: "50%",
                                children: (0, a.jsx)(T.FormItem, {
                                    title: ei.default.Messages.FORM_LABEL_AFK_CHANNEL,
                                    children: (0, a.jsx)(T.SingleSelect, {
                                        value: i,
                                        options: o,
                                        onChange: this.handleAFKChannelChange,
                                        isDisabled: !s,
                                        renderOptionLabel: ef,
                                        renderOptionValue: eN
                                    })
                                })
                            }), (0, a.jsx)(Y.default.Child, {
                                basis: "50%",
                                children: (0, a.jsx)(T.FormItem, {
                                    title: ei.default.Messages.FORM_LABEL_AFK_TIMEOUT,
                                    children: (0, a.jsx)(T.SingleSelect, {
                                        value: l,
                                        options: r,
                                        isDisabled: i === eu || !s,
                                        onChange: this.handleAFKTimeoutChange
                                    })
                                })
                            })]
                        }), (0, a.jsx)(T.FormText, {
                            className: er.marginTop8,
                            type: T.FormTextTypes.DESCRIPTION,
                            children: ei.default.Messages.FORM_HELP_AFK_CHANNEL
                        })]
                    })
                }
                renderJoinNotificationSection() {
                    var e;
                    let {
                        guild: t,
                        channels: s,
                        canManageGuild: n,
                        eligibleForDeadchatPrompt: l
                    } = this.props, r = null !== (e = t.systemChannelId) && void 0 !== e ? e : ec, o = u(s).filter(e => {
                        let {
                            channel: t
                        } = e;
                        return t.type === es.ChannelTypes.GUILD_TEXT
                    }).map(e => {
                        let {
                            channel: t
                        } = e;
                        return eg(t)
                    }).value();
                    o.unshift({
                        value: ec,
                        label: ei.default.Messages.NO_SYSTEM_CHANNEL
                    });
                    let d = (0, p.isEligibleForRoleSubscriptionPurchaseSystemMessageSettings)(t),
                        c = d || (0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS),
                        E = d || (0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES);
                    return (0, a.jsxs)(T.FormSection, {
                        className: er.divider,
                        children: [(0, a.jsx)(T.FormTitle, {
                            children: ei.default.Messages.FORM_LABEL_SYSTEM_CHANNEL
                        }), (0, a.jsx)(T.SingleSelect, {
                            value: r,
                            options: o,
                            isDisabled: !n,
                            onChange: this.handleSystemChannelChange,
                            renderOptionLabel: ef,
                            renderOptionValue: eN
                        }), (0, a.jsx)(T.FormText, {
                            className: er.marginTop8,
                            type: T.FormTextTypes.DESCRIPTION,
                            children: ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL
                        }), (0, a.jsx)(T.FormSwitch, {
                            className: er.marginTop20,
                            onChange: this.handleShowJoinsChange,
                            value: !(0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATIONS),
                            hideBorder: !0,
                            disabled: !n || r === ec,
                            children: ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_JOIN_MESSAGES
                        }), (0, a.jsx)(T.FormSwitch, {
                            className: i(er.marginReset, er.marginTop20),
                            onChange: this.handleShowJoinRepliesChange,
                            value: !(0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATION_REPLIES),
                            hideBorder: !0,
                            disabled: !n || r === ec,
                            children: ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_JOIN_MESSAGE_REPLIES
                        }), (0, a.jsx)(T.FormSwitch, {
                            className: i(er.marginReset, er.marginTop20),
                            onChange: this.handleShowSubscriptionsChange,
                            value: !(0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_PREMIUM_SUBSCRIPTIONS),
                            hideBorder: !0,
                            disabled: !n || r === ec,
                            children: ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_PREMIUM_SUBSCRIPTION_MESSAGES
                        }), (0, a.jsx)(T.FormSwitch, {
                            className: i(er.marginReset, er.marginTop20),
                            onChange: this.handleShowGuildRemindersChange,
                            value: !(0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_GUILD_REMINDER_NOTIFICATIONS),
                            hideBorder: !0,
                            disabled: !n || r === ec,
                            children: ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_GUILD_REMINDERS
                        }), c && (0, a.jsx)(T.FormSwitch, {
                            className: i(er.marginReset, er.marginTop20),
                            onChange: this.handleShowGuildRoleSubscriptionPurchaseMessages,
                            value: !(0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS),
                            hideBorder: !0,
                            disabled: !n || r === ec,
                            children: ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_ROLE_SUBSCRIPTION_PURCHASE_MESSAGES
                        }), E && (0, a.jsx)(T.FormSwitch, {
                            className: i(er.marginReset, er.marginTop20),
                            onChange: this.handleShowGuildRoleSubscriptionPurchaseMessageRepliesChange,
                            value: !(0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES),
                            hideBorder: !0,
                            disabled: !n || r === ec,
                            children: ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_ROLE_SUBSCRIPTION_PURCHASE_MESSAGE_REPLIES
                        }), l && (0, a.jsx)(T.FormSwitch, {
                            className: i(er.marginReset, er.marginTop20),
                            onChange: this.handleShowDeadchatPromptMessageChange,
                            value: !(0, J.hasFlag)(t.systemChannelFlags, es.SystemChannelFlags.SUPPRESS_CHANNEL_PROMPT_DEADCHAT),
                            hideBorder: !0,
                            disabled: !n || r === ec,
                            children: (0, a.jsxs)("div", {
                                className: er.flexRow,
                                children: [ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_DEADCHAT_PROMPT_MESSAGE, (0, a.jsx)(h.default, {})]
                            })
                        })]
                    })
                }
                renderNotificationSection() {
                    let {
                        guild: e,
                        canManageGuild: t,
                        guildMemberCount: s
                    } = this.props, n = [{
                        name: ei.default.Messages.FORM_LABEL_ALL_MESSAGES,
                        value: es.UserNotificationSettings.ALL_MESSAGES,
                        desc: null != s && s >= es.MAX_MEMBERS_NOTIFY_ALL_MESSAGES ? ei.default.Messages.GUILD_SETTINGS_DEFAULT_NOTIFICATIONS_LARGE_GUILD_NOTIFY_ALL : null
                    }, {
                        name: ei.default.Messages.FORM_LABEL_ONLY_MENTIONS.format(),
                        value: es.UserNotificationSettings.ONLY_MENTIONS
                    }];
                    return (0, a.jsx)("div", {
                        ref: this._notificationSectionRef,
                        children: (0, a.jsxs)(T.FormSection, {
                            className: er.divider,
                            children: [(0, a.jsx)(T.FormTitle, {
                                children: ei.default.Messages.FORM_LABEL_DEFAULT_NOTIFICATION_SETTINGS
                            }), (0, a.jsx)(T.FormText, {
                                type: T.FormTextTypes.DESCRIPTION,
                                className: er.marginBottom20,
                                children: ei.default.Messages.GUILD_SETTINGS_DEFAULT_NOTIFICATION_SETTINGS_INTRO
                            }), (0, a.jsx)(T.FormText, {
                                type: T.FormTextTypes.DESCRIPTION,
                                className: er.marginBottom20,
                                children: ei.default.Messages.GUILD_SETTINGS_DEFAULT_NOTIFICATION_SETTINGS_TIP
                            }), (0, a.jsx)(T.RadioGroup, {
                                options: n,
                                value: e.defaultMessageNotifications,
                                disabled: !t,
                                onChange: this.handleDefaultMessageNotificationsChange
                            })]
                        })
                    })
                }
                renderSummariesSection() {
                    let {
                        guild: e,
                        canManageGuild: t
                    } = this.props, s = (0, S.canGuildUseConversationSummaries)(e, !1);
                    return s ? (0, a.jsx)("div", {
                        children: (0, a.jsx)(T.FormSection, {
                            className: er.divider,
                            children: (0, a.jsx)(T.FormSwitch, {
                                className: i(er.marginTop8, er.marginBottom8),
                                onChange: this.handleConversationSummariesToggle,
                                value: e.hasFeature(es.GuildFeatures.SUMMARIES_ENABLED_BY_USER),
                                hideBorder: !0,
                                note: ei.default.Messages.GUILD_SETTINGS_SUMMARIES_TOGGLE_DESCRIPTION.format({
                                    helpdeskArticle: q.default.getArticleURL(es.HelpdeskArticles.CONVERSATION_SUMMARIES)
                                }),
                                disabled: !t,
                                children: (0, a.jsxs)("div", {
                                    className: er.badgedItem,
                                    children: [ei.default.Messages.GUILD_SETTINGS_SUMMARIES_TOGGLE, (0, a.jsx)(X.TextBadge, {
                                        text: ei.default.Messages.BETA,
                                        color: E.default.unsafe_rawColors.BRAND_500.css,
                                        className: er.betaTag
                                    })]
                                })
                            })
                        })
                    }) : null
                }
                renderServerInviteBGSection() {
                    let {
                        guild: e,
                        canManageGuild: t
                    } = this.props, s = e.hasFeature(es.GuildFeatures.INVITE_SPLASH), n = t && s, l = (0, a.jsx)(P.default, {
                        image: e.splash,
                        makeURL: t => null != t ? Z.default.getGuildSplashURL({
                            id: e.id,
                            splash: t
                        }) : null,
                        disabled: !n,
                        onChange: this.handleSplashChange,
                        hint: ei.default.Messages.CHANGE_SPLASH,
                        enabled: n,
                        maxFileSizeBytes: el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                        onFileSizeError: () => (0, j.default)(el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES)
                    });
                    return (0, a.jsx)("div", {
                        ref: this._inviteSectionRef,
                        children: (0, a.jsx)(T.FormSection, {
                            className: er.divider,
                            children: (0, a.jsxs)(Y.default, {
                                basis: "50%",
                                direction: Y.default.Direction.HORIZONTAL,
                                align: Y.default.Justify.START,
                                children: [(0, a.jsxs)(Y.default.Child, {
                                    wrap: !0,
                                    basis: "50%",
                                    children: [(0, a.jsxs)(T.FormTitle, {
                                        className: er.flexFormTitle,
                                        children: [(0, a.jsx)("div", {
                                            children: ei.default.Messages.GUILD_SETTINGS_SERVER_INVITE_BACKGROUND
                                        }), (0, a.jsx)(R.default, {
                                            guild: e,
                                            guildFeature: es.GuildFeatures.INVITE_SPLASH,
                                            className: er.guildFeatureAvailabilityIndicator,
                                            onClick: this.handleInviteSplashUpsellIndicator
                                        })]
                                    }), (0, a.jsx)(T.FormText, {
                                        type: T.FormTextTypes.DESCRIPTION,
                                        className: er.marginBottom8,
                                        children: ei.default.Messages.GUILD_SETTINGS_SPLASH_DESCRIPTION
                                    }), (0, a.jsx)(T.FormText, {
                                        type: T.FormTextTypes.DESCRIPTION,
                                        children: ei.default.Messages.GUILD_SETTINGS_SPLASH_RECOMMEND.format({
                                            articleURL: q.default.getArticleURL(es.HelpdeskArticles.GUILD_INVITE_SPLASH)
                                        })
                                    }), s ? (0, a.jsxs)(T.Button, {
                                        disabled: !n,
                                        color: T.ButtonColors.BRAND_NEW,
                                        className: er.marginTop16,
                                        children: [ei.default.Messages.UPLOAD_BACKGROUND, (0, a.jsx)(y.default, {
                                            disabled: !n,
                                            onChange: this.handleSplashChange,
                                            maxFileSizeBytes: el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                                            onFileSizeError: () => (0, j.default)(el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES)
                                        })]
                                    }) : this.uploadBGUpsellButton(this.handleInviteSplashUpsellButton)]
                                }), (0, a.jsx)(Y.default.Child, {
                                    wrap: !0,
                                    basis: "50%",
                                    children: s ? l : (0, a.jsx)(T.Clickable, {
                                        "aria-hidden": !0,
                                        tabIndex: -1,
                                        className: er.upsell,
                                        onClick: this.handleInviteSplashUpsellUpload,
                                        children: l
                                    })
                                })]
                            })
                        })
                    })
                }
                renderHomeHeaderSection() {
                    let {
                        guild: e,
                        canManageGuild: t
                    } = this.props, s = e.hasFeature(es.GuildFeatures.BANNER), n = (0, G.canSeeGuildHome)(e.id), l = t && n && s, {
                        hasNewHeader: i
                    } = x.GuildHomeHeaderRedesignExperiment.getCurrentConfig({
                        guildId: e.id,
                        location: "4b6c0f_1"
                    });
                    if (!n || !i) return null;
                    let r = (0, a.jsx)(P.default, {
                        image: e.homeHeader,
                        makeURL: t => null != t ? Z.default.getGuildHomeHeaderURL({
                            id: e.id,
                            homeHeader: t
                        }) : null,
                        disabled: !l,
                        onChange: this.handleHomeHeaderChange,
                        hint: ei.default.Messages.CHANGE_HOME_HEADER,
                        enabled: l,
                        maxFileSizeBytes: el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                        onFileSizeError: () => (0, j.default)(el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES)
                    });
                    return (0, a.jsx)(T.FormSection, {
                        className: er.divider,
                        children: (0, a.jsxs)(Y.default, {
                            basis: "50%",
                            direction: Y.default.Direction.HORIZONTAL,
                            align: Y.default.Justify.START,
                            children: [(0, a.jsxs)(Y.default.Child, {
                                wrap: !0,
                                basis: "50%",
                                children: [(0, a.jsxs)(T.FormTitle, {
                                    className: er.flexFormTitle,
                                    children: [(0, a.jsx)("div", {
                                        children: ei.default.Messages.GUILD_SETTINGS_HOME_HEADER
                                    }), (0, a.jsx)(R.default, {
                                        guild: e,
                                        guildFeature: es.GuildFeatures.BANNER,
                                        className: er.guildFeatureAvailabilityIndicator,
                                        onClick: this.handleBannerUpsellIndicator
                                    })]
                                }), (0, a.jsx)(T.FormText, {
                                    type: T.FormTextTypes.DESCRIPTION,
                                    className: er.marginBottom8,
                                    children: ei.default.Messages.GUILD_SETTINGS_HOME_HEADER_DESCRIPTION
                                }), (0, a.jsx)(T.FormText, {
                                    type: T.FormTextTypes.DESCRIPTION,
                                    children: ei.default.Messages.GUILD_SETTINGS_HOME_HEADER_RECOMMEND
                                }), s ? (0, a.jsxs)(T.Button, {
                                    disabled: !l,
                                    color: T.ButtonColors.BRAND_NEW,
                                    className: er.marginTop16,
                                    children: [ei.default.Messages.UPLOAD_BACKGROUND, (0, a.jsx)(y.default, {
                                        disabled: !l,
                                        onChange: this.handleHomeHeaderChange,
                                        maxFileSizeBytes: el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                                        onFileSizeError: () => (0, j.default)(el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES)
                                    })]
                                }) : this.uploadBGUpsellButton(this.handleBannerUpsellButton)]
                            }), (0, a.jsx)(Y.default.Child, {
                                wrap: !0,
                                basis: "50%",
                                children: s ? r : (0, a.jsx)(T.Clickable, {
                                    "aria-hidden": !0,
                                    tabIndex: -1,
                                    className: er.upsell,
                                    onClick: this.handleBannerUpsellUpload,
                                    children: r
                                })
                            })]
                        })
                    })
                }
                renderBanner() {
                    let {
                        guild: e,
                        canManageGuild: t,
                        analyticsLocations: s
                    } = this.props, n = e.hasFeature(es.GuildFeatures.BANNER), l = e.hasFeature(es.GuildFeatures.ANIMATED_BANNER), i = n && t, r = (0, a.jsx)(P.default, {
                        image: e.banner,
                        makeURL: t => null != t ? Z.default.getGuildBannerURL({
                            id: e.id,
                            banner: t
                        }, l) : null,
                        disabled: !i,
                        onChange: this.handleBannerChange,
                        hint: ei.default.Messages.CHANGE_SPLASH,
                        onOpenImageSelectModal: () => eC(en.UploadTypes.GUILD_BANNER, el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES, this.handleBannerChange, !0, {
                            page: es.AnalyticsPages.GUILD_SETTINGS,
                            section: es.AnalyticsSections.GUILD_BANNER
                        }, s),
                        enabled: i
                    }), o = (0, a.jsx)(T.Button, {
                        disabled: !i,
                        color: T.Button.Colors.BRAND_NEW,
                        className: er.marginTop16,
                        onClick: () => eC(en.UploadTypes.GUILD_BANNER, el.MAX_IMAGE_UPLOAD_FILESIZE_BYTES, this.handleBannerChange, !0, {
                            page: es.AnalyticsPages.GUILD_SETTINGS,
                            section: es.AnalyticsSections.GUILD_BANNER
                        }, s),
                        children: ei.default.Messages.UPLOAD_BACKGROUND
                    });
                    return (0, a.jsx)(T.FormSection, {
                        className: er.divider,
                        children: (0, a.jsxs)(Y.default, {
                            basis: "50%",
                            direction: Y.default.Direction.HORIZONTAL,
                            align: Y.default.Justify.START,
                            children: [(0, a.jsxs)(Y.default.Child, {
                                wrap: !0,
                                basis: "50%",
                                children: [(0, a.jsxs)(T.FormTitle, {
                                    className: er.flexFormTitle,
                                    children: [(0, a.jsx)("div", {
                                        children: ei.default.Messages.FORM_LABEL_SERVER_BANNER
                                    }), (0, a.jsx)(R.default, {
                                        guild: e,
                                        guildFeature: es.GuildFeatures.BANNER,
                                        className: er.guildFeatureAvailabilityIndicator,
                                        onClick: this.handleBannerUpsellIndicator
                                    })]
                                }), (0, a.jsx)(T.FormText, {
                                    type: T.FormTextTypes.DESCRIPTION,
                                    className: er.marginBottom8,
                                    children: ei.default.Messages.FORM_HELP_SERVER_BANNER
                                }), (0, a.jsx)(T.FormText, {
                                    type: T.FormTextTypes.DESCRIPTION,
                                    children: ei.default.Messages.GUILD_SETTINGS_BANNER_RECOMMEND.format({
                                        articleURL: q.default.getArticleURL(es.HelpdeskArticles.GUILD_BANNER_SPLASH)
                                    })
                                }), n ? o : this.uploadBGUpsellButton(this.handleBannerUpsellButton)]
                            }), (0, a.jsx)(Y.default.Child, {
                                wrap: !0,
                                basis: "50%",
                                children: n ? r : (0, a.jsx)(T.Clickable, {
                                    "aria-hidden": !0,
                                    tabIndex: -1,
                                    className: er.upsell,
                                    onClick: this.handleBannerUpsellUpload,
                                    children: r
                                })
                            })]
                        })
                    })
                }
                renderProgressBar() {
                    let {
                        guild: e,
                        canManageGuild: t,
                        theme: s
                    } = this.props;
                    return (0, a.jsx)(T.FormSection, {
                        children: (0, a.jsxs)(Y.default, {
                            align: Y.default.Align.START,
                            children: [(0, a.jsxs)(Y.default, {
                                basis: "50%",
                                direction: Y.default.Direction.VERTICAL,
                                align: Y.default.Align.STRETCH,
                                children: [(0, a.jsx)(T.FormSwitch, {
                                    className: i(er.marginTop8, er.marginBottom8),
                                    onChange: this.handlePremiumProgressBarEnabledChange,
                                    value: e.premiumProgressBarEnabled,
                                    hideBorder: !0,
                                    disabled: !t,
                                    children: ei.default.Messages.GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_TITLE
                                }), (0, a.jsx)(T.FormText, {
                                    type: T.FormTextTypes.DESCRIPTION,
                                    className: er.marginBottom8,
                                    children: ei.default.Messages.GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_DESCRIPTION
                                })]
                            }), (0, a.jsx)(Y.default.Child, {
                                wrap: !0,
                                basis: "50%",
                                children: (0, a.jsx)("img", {
                                    alt: ei.default.Messages.GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_IMG_ALT,
                                    src: (0, _.isThemeLight)(s) ? ed : eo,
                                    className: er.progressBarImage
                                })
                            })]
                        })
                    })
                }
                renderDisplaySection() {
                    return (0, a.jsx)("div", {
                        ref: this._displaySectionRef,
                        children: (0, a.jsxs)(T.FormSection, {
                            title: ei.default.Messages.DISPLAY,
                            tag: T.FormTitleTags.H1,
                            className: er.divider,
                            children: [this.renderProgressBar(), this.renderBanner(), this.renderServerInviteBGSection(), this.renderHomeHeaderSection()]
                        })
                    })
                }
                render() {
                    return (0, a.jsxs)(T.FormSection, {
                        title: ei.default.Messages.SERVER_OVERVIEW,
                        tag: T.FormTitleTags.H1,
                        children: [this.renderBaseSettings(), this.renderSummariesSection(), this.renderAFKSection(), this.renderJoinNotificationSection(), this.renderNotificationSection(), this.renderDisplaySection()]
                    })
                }
                constructor(...e) {
                    super(...e), this._imageInputRef = n.createRef(), this._displaySectionRef = n.createRef(), this._inviteSectionRef = n.createRef(), this._notificationSectionRef = n.createRef(), this.handleIconChange = e => {
                        $.default.updateGuild({
                            icon: e
                        })
                    }, this.handleOpenImageCroppingModal = (e, t) => {
                        (0, T.openModalLazy)(async () => {
                            let {
                                default: n
                            } = await s.el("57015").then(s.bind(s, "57015"));
                            return s => (0, a.jsx)(n, {
                                onCrop: this.handleIconChange,
                                imgURI: e,
                                file: t,
                                ...s
                            })
                        })
                    }, this.handleUploadImage = e => {
                        var t;
                        e.target === e.currentTarget && (null === (t = this._imageInputRef.current) || void 0 === t || t.activateUploadDialogue())
                    }, this.handleShowJoinsChange = e => this.handleSystemChannelFlagsChange(es.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATIONS, !e), this.handleShowSubscriptionsChange = e => this.handleSystemChannelFlagsChange(es.SystemChannelFlags.SUPPRESS_PREMIUM_SUBSCRIPTIONS, !e), this.handleShowGuildRemindersChange = e => {
                        this.handleSystemChannelFlagsChange(es.SystemChannelFlags.SUPPRESS_GUILD_REMINDER_NOTIFICATIONS, !e)
                    }, this.handleShowJoinRepliesChange = e => this.handleSystemChannelFlagsChange(es.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATION_REPLIES, !e), this.handleShowGuildRoleSubscriptionPurchaseMessages = e => {
                        this.handleSystemChannelFlagsChange(es.SystemChannelFlags.SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS, !e)
                    }, this.handleShowDeadchatPromptMessageChange = e => {
                        this.handleSystemChannelFlagsChange(es.SystemChannelFlags.SUPPRESS_CHANNEL_PROMPT_DEADCHAT, !e)
                    }, this.handleShowGuildRoleSubscriptionPurchaseMessageRepliesChange = e => {
                        this.handleSystemChannelFlagsChange(es.SystemChannelFlags.SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES, !e)
                    }, this.handleHomeHeaderChange = (e, t) => {
                        if (null == e || void 0 === t) {
                            $.default.updateGuild({
                                homeHeader: null
                            });
                            return
                        }(0, T.openModalLazy)(async () => {
                            let {
                                default: n
                            } = await s.el("57015").then(s.bind(s, "57015"));
                            return s => (0, a.jsx)(n, {
                                imgURI: e,
                                file: t,
                                onCrop: e => $.default.updateGuild({
                                    homeHeader: e
                                }),
                                uploadType: en.UploadTypes.HOME_HEADER,
                                ...s
                            })
                        })
                    }, this.handleBannerChange = (e, t) => {
                        let {
                            guild: s,
                            analyticsLocations: a
                        } = this.props, n = null == t ? void 0 : t.type, l = {
                            page: es.AnalyticsPages.GUILD_SETTINGS,
                            section: es.AnalyticsSections.ANIMATED_GUILD_BANNER_UPSELL,
                            object: "temp"
                        };
                        if (null != n && null != e) {
                            if ("image/gif" !== n || s.hasFeature(es.GuildFeatures.ANIMATED_BANNER)) {
                                if (!s.hasFeature(es.GuildFeatures.BANNER)) {
                                    l.object = es.AnalyticsObjects.IMAGE_CROPPING_MODAL, (0, D.openGuildBannerUpsellModal)({
                                        guild: s,
                                        analyticsLocations: a,
                                        analyticsLocation: l,
                                        banner: e,
                                        isGIF: !1
                                    });
                                    return
                                }
                            } else {
                                l.object = es.AnalyticsObjects.GIF_CROPPING_MODAL, (0, D.openGuildBannerUpsellModal)({
                                    guild: s,
                                    analyticsLocations: a,
                                    analyticsLocation: l,
                                    banner: e,
                                    isGIF: !0
                                });
                                return
                            }
                        }
                        $.default.updateGuild({
                            banner: e
                        })
                    }, this.handleShowModalUpsell = (e, t, s, a) => {
                        e.preventDefault(), e.stopPropagation();
                        let {
                            guild: n,
                            analyticsLocations: l
                        } = this.props;
                        (0, g.trackWithMetadata)(es.AnalyticEvents.PREMIUM_GUILD_PROMOTION_OPENED, {
                            location: {
                                section: t,
                                object: es.AnalyticsObjects.LEARN_MORE
                            },
                            guild_id: null == n ? void 0 : n.id,
                            location_stack: l
                        }), (0, M.default)({
                            analyticsLocations: l,
                            analyticsSourceLocation: {
                                section: t,
                                object: s,
                                page: es.AnalyticsPages.GUILD_SETTINGS
                            },
                            guild: n,
                            perks: a
                        })
                    }, this.handleInviteSplashUpsellIndicator = e => {
                        this.handleShowModalUpsell(e, es.AnalyticsSections.GUILD_INVITE_BACKGROUND, es.AnalyticsObjects.BADGE, (0, ea.guildInviteUpsellPerks)())
                    }, this.handleInviteSplashUpsellButton = e => {
                        this.handleShowModalUpsell(e, es.AnalyticsSections.GUILD_INVITE_BACKGROUND, es.AnalyticsObjects.BUTTON_CTA, (0, ea.guildInviteUpsellPerks)())
                    }, this.handleInviteSplashUpsellUpload = e => {
                        this.handleShowModalUpsell(e, es.AnalyticsSections.GUILD_INVITE_BACKGROUND, es.AnalyticsObjects.UPLOAD_IMAGE, (0, ea.guildInviteUpsellPerks)())
                    }, this.handleBannerUpsellIndicator = e => {
                        this.handleShowModalUpsell(e, es.AnalyticsSections.GUILD_BANNER, es.AnalyticsObjects.BADGE, (0, ea.guildBannerUpsellPerks)())
                    }, this.handleBannerUpsellButton = e => {
                        this.handleShowModalUpsell(e, es.AnalyticsSections.GUILD_BANNER, es.AnalyticsObjects.BUTTON_CTA, (0, ea.guildBannerUpsellPerks)())
                    }, this.handleBannerUpsellUpload = e => {
                        this.handleShowModalUpsell(e, es.AnalyticsSections.GUILD_BANNER, es.AnalyticsObjects.UPLOAD_IMAGE, (0, ea.guildBannerUpsellPerks)())
                    }, this.handleConversationSummariesToggle = e => {
                        let {
                            guild: t
                        } = this.props, s = new Set(t.features);
                        e ? s.add(es.GuildFeatures.SUMMARIES_ENABLED_BY_USER) : s.delete(es.GuildFeatures.SUMMARIES_ENABLED_BY_USER), $.default.updateGuild({
                            features: s
                        })
                    }, this.uploadBGUpsellButton = e => (0, a.jsxs)(K.default, {
                        color: T.Button.Colors.GREEN,
                        className: i(er.marginTop16),
                        innerClassName: er.upsellButton,
                        onClick: e,
                        children: [(0, a.jsx)(z.default, {
                            height: 16,
                            width: 16,
                            className: er.premiumUpsellBadge
                        }), " ", ei.default.Messages.PREMIUM_GUILD_UNLOCK_WTH_BOOSTING_CTA]
                    })
                }
            }

            function em() {
                var e;
                let {
                    guild: t,
                    errors: s,
                    submitting: l,
                    subsection: i
                } = (0, c.useStateFromStoresObject)([ee.default], () => ee.default.getProps()), r = (0, N.default)(), {
                    AnalyticsLocationProvider: d,
                    analyticsLocations: u
                } = (0, A.default)(f.default.OVERVIEW);
                n.useEffect(() => {
                    (0, v.hideHotspot)(U.HotspotLocations.ANIMATED_GUILD_BANNER_SETTINGS_NEW_PILL)
                }, []);
                let E = (0, c.useStateFromStores)([F.default], () => F.default.getCategories(null == t ? void 0 : t.id)),
                    _ = n.useMemo(() => (0, L.default)(E._categories, E), [E]),
                    {
                        canManageGuild: T,
                        isGuildAdmin: I
                    } = (0, c.useStateFromStoresObject)([V.default], () => ({
                        canManageGuild: V.default.can(es.Permissions.MANAGE_GUILD, t),
                        isGuildAdmin: V.default.can(es.Permissions.ADMINISTRATOR, t)
                    })),
                    S = (0, c.useStateFromStores)([H.default], () => H.default.getMemberCount(null == t ? void 0 : t.id)),
                    g = (0, c.useStateFromStores)([w.default], () => w.default.getCurrentUser());
                o(null != g, "GuildSettingsOverview: currentUser cannot be undefined");
                let {
                    enableDeadchat: m
                } = O.SimpleDeadchatPromptExperiment.useExperiment({
                    guildId: null !== (e = null == t ? void 0 : t.id) && void 0 !== e ? e : "",
                    location: "guild_settings"
                }, {
                    disable: null == t,
                    autoTrackExposure: !0
                });
                return null == t ? null : (0, a.jsx)(d, {
                    children: (0, a.jsx)(eL, {
                        channels: _,
                        canManageGuild: T,
                        isGuildAdmin: I,
                        subsection: i,
                        guild: t,
                        errors: s,
                        submitting: l,
                        currentUser: g,
                        guildMemberCount: S,
                        theme: r,
                        analyticsLocations: u,
                        eligibleForDeadchatPrompt: m
                    })
                })
            }

            function eC(e, t, n) {
                let l = !(arguments.length > 3) || void 0 === arguments[3] || arguments[3],
                    i = arguments.length > 4 ? arguments[4] : void 0,
                    r = arguments.length > 5 ? arguments[5] : void 0;
                (0, T.openModalLazy)(async () => {
                    let {
                        default: o
                    } = await s.el("420333").then(s.bind(s, "420333"));
                    return s => (0, a.jsx)(o, {
                        maxFileSizeBytes: t,
                        onComplete: n,
                        uploadType: e,
                        showUpsellHeader: l,
                        analyticsLocation: i,
                        analyticsLocations: r,
                        ...s
                    })
                })
            }
        },
        201461: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return M
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("446674"),
                i = s("77078"),
                r = s("913144"),
                o = s("850068"),
                d = s("775433"),
                u = s("174727"),
                c = s("308592"),
                E = s("866561"),
                _ = s("656142"),
                T = s("566171"),
                I = s("417385"),
                S = s("735201"),
                N = s("555158"),
                f = s("599110"),
                g = s("427459"),
                A = s("701909"),
                L = s("900938"),
                m = s("49111"),
                C = s("782340"),
                O = s("434659");

            function h(e) {
                let {
                    endsAt: t,
                    appliedGuildBoostsToMaintain: s,
                    tierName: n
                } = e, {
                    days: l,
                    hours: i
                } = (0, u.default)(t);
                return s <= 0 ? null : (0, a.jsx)(a.Fragment, {
                    children: 0 === l && 0 === i ? C.default.Messages.PREMIUM_GUILD_GRACE_PERIOD_COOLDOWN_SOON.format({
                        tierName: n,
                        numPremiumSubscriptions: s
                    }) : C.default.Messages.PREMIUM_GUILD_GRACE_PERIOD_COOLDOWN.format({
                        days: l,
                        hours: i,
                        tierName: n,
                        numPremiumSubscriptions: s
                    })
                })
            }

            function R(e) {
                let {
                    appliedGuildBoosts: t,
                    guildId: s
                } = e, n = (0, g.getGracePeriodEndingDate)(t, s), l = (0, g.getTierName)((0, g.getGuildTierFromAppliedBoostCount)(t.length, s));
                if (null == n || null == l) return null;
                let i = (0, g.appliedGuildBoostsRequiredForPerks)(t, s);
                return (0, a.jsxs)(N.default, {
                    messageType: N.HelpMessageTypes.WARNING,
                    children: [(0, a.jsx)("div", {
                        className: O.guildBoostingGracePeriodTitle,
                        children: C.default.Messages.PREMIUM_GUILD_GRACE_PERIOD_TITLE.format()
                    }), (0, a.jsx)(h, {
                        endsAt: n,
                        appliedGuildBoostsToMaintain: i,
                        tierName: l
                    })]
                })
            }
            let D = e => {
                let {
                    isAnimatedTo: t,
                    onSetRef: s,
                    subscriptionCount: n,
                    tier: l,
                    tiers: i,
                    tierIndex: r,
                    guildId: o
                } = e;
                return (0, a.jsx)(I.default, {
                    subscriptionCount: n,
                    tier: l,
                    onSetRef: s,
                    isAnimatedTo: t,
                    hasBottomMargin: r !== i.length - 1,
                    guildId: o
                }, l.tier)
            };

            function M() {
                n.useEffect(() => {
                    r.default.wait(() => {
                        (0, o.fetchPaymentSources)(), (0, d.fetchPremiumSubscriptionPlans)()
                    })
                }, []);
                let e = (0, l.useStateFromStores)([L.default], () => L.default.getGuild()),
                    t = (0, l.useStateFromStores)([S.default], () => null != e ? S.default.getAppliedGuildBoostsForGuild(e.id) : null),
                    s = (0, c.useSubscriptionPlansLoaded)();
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)(n.Fragment, {
                        children: [(0, a.jsx)(i.FormTitle, {
                            tag: i.FormTitleTags.H1,
                            children: C.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_TITLE
                        }), null != t && null != e ? (0, a.jsx)(R, {
                            appliedGuildBoosts: t,
                            guildId: e.id
                        }) : null, (0, a.jsx)(i.FormText, {
                            type: i.FormText.Types.DESCRIPTION,
                            className: O.titleBlurb,
                            children: C.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_BLURB.format({
                                helpdeskArticle: A.default.getArticleURL(m.HelpdeskArticles.GUILD_SUBSCRIPTIONS)
                            })
                        })]
                    }), (0, a.jsx)(T.default, {
                        tiers: (0, g.getTiers)(null != e && e.hasFeature(m.GuildFeatures.COMMUNITY) && e.maxStageVideoChannelUsers >= m.MAX_STAGE_VIDEO_USER_LIMIT_TIER01),
                        renderTier: D
                    }), (0, a.jsx)("div", {
                        className: O.divider
                    }), s ? (0, a.jsx)(_.default, {}) : null, s ? (0, a.jsx)(E.default, {
                        onOpenPremiumClick: () => void f.default.track(m.AnalyticEvents.PREMIUM_PROMOTION_OPENED, {
                            location: {
                                page: m.AnalyticsPages.GUILD_SETTINGS,
                                section: m.AnalyticsSections.NITRO_CROSS_PROMO_FROM_BOOSTING,
                                object: m.AnalyticsObjects.BUTTON_CTA
                            }
                        })
                    }) : null]
                })
            }
        },
        817674: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildExplicitContentFilter: function() {
                    return Y
                },
                toggleModerationExperienceGuildFeature: function() {
                    return K
                },
                default: function() {
                    return X
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s("446674"),
                d = s("77078"),
                u = s("79112"),
                c = s("642950"),
                E = s("716241"),
                _ = s("679653"),
                T = s("419830"),
                I = s("298878"),
                S = s("610174"),
                N = s("413476"),
                f = s("413266"),
                g = s("926809"),
                A = s("466818"),
                L = s("42203"),
                m = s("957255"),
                C = s("102985"),
                O = s("697218"),
                h = s("555158"),
                R = s("593195"),
                D = s("139011"),
                M = s("412131"),
                G = s("935351"),
                x = s("599110"),
                p = s("701909"),
                U = s("62418"),
                v = s("592407"),
                j = s("900938"),
                P = s("797944"),
                y = s("380993"),
                b = s("378826"),
                B = s("998728"),
                F = s("49111"),
                H = s("782340"),
                V = s("761356");

            function k(e) {
                let {
                    guild: t
                } = e, s = t.canHaveRaidActivityAlerts(), l = (0, o.useStateFromStores)([m.default], () => null != t && m.default.can(F.Permissions.MANAGE_GUILD, t), [t]), {
                    enableRaidAlerts: i
                } = N.RaidAlertExperiment.useExperiment({
                    guildId: t.id,
                    location: "1a2662_1"
                }, {
                    autoTrackExposure: l
                }), r = (0, g.useIsMentionRaidExperimentEnabled)(t.id), u = (0, o.useStateFromStores)([L.default], () => L.default.getChannel(t.safetyAlertsChannelId), [t.safetyAlertsChannelId]), c = (0, _.default)(u), S = null != u, A = n.useMemo(() => {
                    let e = (null == u ? void 0 : u.type) != null ? (0, T.getSimpleChannelIconComponent)(u.type) : null;
                    return null != e ? e : R.default
                }, [u]);

                function C() {
                    i && (0, f.openSafetyChannelSetupModal)(t.id)
                }
                return l ? (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(d.FormDivider, {
                        className: V.divider
                    }), (0, a.jsxs)("div", {
                        className: V.setupContainer,
                        children: [(0, a.jsxs)("div", {
                            className: V.switchItemTextContent,
                            children: [(0, a.jsxs)(d.Text, {
                                color: "header-primary",
                                variant: "text-md/semibold",
                                children: [H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_TITLE, " ", (0, a.jsx)(I.default, {
                                    className: V.betaTag
                                })]
                            }), (0, a.jsx)(d.Text, {
                                color: "header-secondary",
                                variant: "text-sm/normal",
                                children: H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_DESCRIPTION
                            })]
                        }), (0, a.jsx)(B.default, {
                            title: (0, a.jsxs)("div", {
                                className: V.settingsRowHeader,
                                children: [(0, a.jsx)(D.default, {
                                    width: 20,
                                    height: 20
                                }), (0, a.jsx)(d.Text, {
                                    color: "text-normal",
                                    variant: "text-sm/medium",
                                    children: H.default.Messages.GUILD_ANTIRAID_SAFETY_JOIN_RAIDS_TITLE
                                })]
                            }),
                            highlightColor: P.HighlightColors.GREEN,
                            action: i ? (0, a.jsx)(d.Button, {
                                look: d.Button.Looks.LINK,
                                size: d.Button.Sizes.MIN,
                                color: d.Button.Colors.LINK,
                                children: s ? H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_MANAGE_ACTION : H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_SETUP_ACTION
                            }) : (0, a.jsx)(d.Text, {
                                color: "text-muted",
                                variant: "text-sm/medium",
                                children: H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_NO_EXPERIMENT_ACTION
                            }),
                            onClick: i ? C : void 0,
                            subsection: i ? (0, a.jsxs)("div", {
                                className: V.settingsRowSubsection,
                                children: [(0, a.jsxs)("div", {
                                    className: V.settingsRowSubsectionItem,
                                    children: [(0, a.jsx)(d.Text, {
                                        color: "text-normal",
                                        variant: "text-xs/semibold",
                                        children: H.default.Messages.GUILD_ANTIRAID_SETTING_PROTECTION_LABEL
                                    }), (0, a.jsx)(d.Text, {
                                        color: "text-muted",
                                        variant: "text-xs/medium",
                                        children: S && s ? H.default.Messages.GUILD_ANTIRAID_SETTING_ENABLED_ALERTS : H.default.Messages.GUILD_ANTIRAID_SETTING_ENABLED
                                    })]
                                }), (0, a.jsx)("div", {
                                    className: V.settingsRowSubsectionItem,
                                    children: S && s ? (0, a.jsxs)(a.Fragment, {
                                        children: [(0, a.jsx)(d.Text, {
                                            color: "text-normal",
                                            variant: "text-xs/semibold",
                                            children: H.default.Messages.GUILD_ANTIRAID_SETTING_CHANNEL_LABEL
                                        }), (0, a.jsxs)(d.Text, {
                                            color: "text-muted",
                                            variant: "text-xs/medium",
                                            className: V.channelContainer,
                                            children: [(0, a.jsx)(A, {
                                                className: V.channelIcon,
                                                width: 12,
                                                height: 12
                                            }), " ", c]
                                        })]
                                    }) : (0, a.jsxs)(a.Fragment, {
                                        children: [(0, a.jsx)(d.Text, {
                                            color: "text-normal",
                                            variant: "text-xs/semibold",
                                            children: H.default.Messages.GUILD_ANTIRAID_SETTING_CHANNEL_NONE_LABEL
                                        }), (0, a.jsx)(d.Text, {
                                            color: "text-muted",
                                            variant: "text-xs/medium",
                                            children: H.default.Messages.GUILD_ANTIRAID_SETTING_CHANNEL_NONE
                                        })]
                                    })
                                })]
                            }) : null
                        }), !S && i ? (0, a.jsx)(h.default, {
                            messageType: h.HelpMessageTypes.INFO,
                            textVariant: "text-xs/normal",
                            children: H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ENABLE_TIP.format({
                                onClick: C
                            })
                        }) : null, r ? (0, a.jsx)(B.default, {
                            title: (0, a.jsxs)("div", {
                                className: V.settingsRowHeader,
                                children: [(0, a.jsx)(M.default, {
                                    width: 20,
                                    height: 20
                                }), (0, a.jsx)(d.Text, {
                                    color: "text-normal",
                                    variant: "text-sm/medium",
                                    children: H.default.Messages.GUILD_ANTIRAID_SAFETY_MENTION_RAIDS_TITLE
                                })]
                            }),
                            highlightColor: P.HighlightColors.GREEN,
                            action: (0, a.jsx)(d.Button, {
                                look: d.Button.Looks.LINK,
                                size: d.Button.Sizes.MIN,
                                color: d.Button.Colors.LINK,
                                onClick: function() {
                                    x.default.track(F.AnalyticEvents.GUILD_SAFETY_MENTION_RAID_SETUP_CTA_CLICKED, {
                                        ...(0, E.collectGuildAnalyticsMetadata)(t.id)
                                    }), v.default.setSection(F.GuildSettingsSections.GUILD_AUTOMOD, F.GuildSettingsSubsections.AUTOMOD_MENTION_SPAM)
                                },
                                children: (0, a.jsxs)("div", {
                                    className: V.setupAutomodButton,
                                    children: [H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_IN_AUTOMOD_ACTION, (0, a.jsx)(G.default, {
                                        className: V.setupAutomodIcon,
                                        width: 16,
                                        height: 16
                                    })]
                                })
                            })
                        }) : null]
                    })]
                }) : null
            }

            function w(e) {
                let {
                    guild: t
                } = e, s = (0, o.useStateFromStores)([m.default], () => null != t && m.default.can(F.Permissions.MANAGE_GUILD, t), [t]), l = n.useCallback(async e => {
                    let {
                        value: s
                    } = e;
                    try {
                        await v.default.saveGuild(t.id, {
                            verificationLevel: s
                        }), v.default.updateGuild({
                            verificationLevel: s
                        })
                    } catch (e) {
                        (0, d.showToast)((0, d.createToast)(H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ERROR, d.ToastType.FAILURE))
                    }
                }, [t]), i = n.useMemo(() => {
                    let e = (0, U.generateVerificationLevelOptions)(null == t ? void 0 : t.hasFeature(F.GuildFeatures.COMMUNITY)).map(e => ({
                        ...e,
                        tooltipPosition: "left"
                    }));
                    return (0, U.mapOptionToHighlightedRowOptions)(e)
                }, [t]), r = n.useMemo(() => i.find(e => e.value === (null == t ? void 0 : t.verificationLevel)), [t, i]);
                return (0, a.jsxs)("div", {
                    className: V.setupContainer,
                    children: [(0, a.jsxs)("div", {
                        className: V.switchItemTextContent,
                        children: [(0, a.jsx)(d.Text, {
                            color: "header-primary",
                            variant: "text-md/semibold",
                            children: H.default.Messages.FORM_LABEL_VERIFICATION_LEVEL
                        }), (0, a.jsx)(d.Text, {
                            color: "header-secondary",
                            variant: "text-sm/normal",
                            children: H.default.Messages.FORM_HELP_VERIFICATION_LEVEL.format()
                        })]
                    }), (0, a.jsx)(b.default, {
                        changeTitle: H.default.Messages.FORM_LABEL_VERIFICATION_LEVEL_CHANGE,
                        value: null == r ? void 0 : r.value,
                        options: i,
                        disabled: !s,
                        onChange: l
                    })]
                })
            }

            function Y(e) {
                let {
                    guild: t,
                    className: s,
                    withDivider: l = !0
                } = e, r = (0, o.useStateFromStores)([m.default], () => null != t && m.default.can(F.Permissions.MANAGE_GUILD, t), [t]), u = n.useCallback(async e => {
                    let {
                        value: s
                    } = e;
                    try {
                        await v.default.saveGuild(t.id, {
                            explicitContentFilter: s
                        }), v.default.updateGuild({
                            explicitContentFilter: s
                        })
                    } catch (e) {
                        (0, d.showToast)((0, d.createToast)(H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ERROR, d.ToastType.FAILURE))
                    }
                }, [t.id]), c = n.useMemo(() => {
                    let e = (0, U.generateContentFilterHighlightedOptions)(null == t ? void 0 : t.hasFeature(F.GuildFeatures.COMMUNITY)).map(e => ({
                        ...e,
                        tooltipPosition: "left"
                    }));
                    return (0, U.mapOptionToHighlightedRowOptions)(e)
                }, [t]), E = n.useMemo(() => c.find(e => e.value === (null == t ? void 0 : t.explicitContentFilter)), [t, c]);
                return (0, a.jsxs)(a.Fragment, {
                    children: [l && (0, a.jsx)(d.FormDivider, {
                        className: V.divider
                    }), (0, a.jsxs)("div", {
                        className: i(V.setupContainer, s),
                        children: [(0, a.jsxs)("div", {
                            className: V.switchItemTextContent,
                            children: [(0, a.jsx)(d.Text, {
                                color: "header-primary",
                                variant: "text-md/semibold",
                                children: H.default.Messages.FORM_LABEL_EXPLICIT_CONTENT_FILTER_V2
                            }), (0, a.jsx)(d.Text, {
                                color: "header-secondary",
                                variant: "text-sm/normal",
                                children: H.default.Messages.FORM_HELP_EXPLICIT_CONTENT_FILTER_V2.format({
                                    helpdeskArticle: p.default.getArticleURL(F.HelpdeskArticles.SAFE_DIRECT_MESSAGING)
                                })
                            })]
                        }), (0, a.jsx)(b.default, {
                            changeTitle: H.default.Messages.FORM_LABEL_EXPLICIT_CONTENT_FILTER_CHANGE,
                            value: null == E ? void 0 : E.value,
                            options: c,
                            disabled: !r,
                            onChange: u
                        })]
                    })]
                })
            }
            async function K(e, t) {
                let s = e.hasFeature(F.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY);
                if (s === t) return;
                let a = e.features;
                return t ? a.add(F.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY) : a.delete(F.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY), await v.default.saveGuild(e.id, {
                    features: a
                })
            }

            function W(e) {
                let {
                    guild: t
                } = e, s = (0, o.useStateFromStores)([m.default], () => null != t && m.default.can(F.Permissions.MANAGE_GUILD, t), [t]), l = t.hasFeature(F.GuildFeatures.COMMUNITY), i = (0, A.useCanAccessMemberSafetyPage)(t.id), [r, u] = n.useState(t.hasFeature(F.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY)), c = n.useCallback(async e => {
                    u(e), await K(t, e)
                }, [t]);
                return l || !i ? null : (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        className: V.setupContainer,
                        children: [(0, a.jsx)(d.FormSwitch, {
                            value: r,
                            onChange: c,
                            className: V.switchItem,
                            disabled: !s,
                            hideBorder: !0,
                            children: (0, a.jsxs)("div", {
                                className: V.switchItemTextContent,
                                children: [(0, a.jsxs)(d.Text, {
                                    color: "header-primary",
                                    variant: "text-md/semibold",
                                    children: [H.default.Messages.GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE, (0, a.jsx)(I.default, {
                                        className: V.betaTag
                                    })]
                                }), (0, a.jsx)(d.Text, {
                                    color: "header-secondary",
                                    variant: "text-sm/normal",
                                    children: H.default.Messages.GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE_DESCRIPTION
                                })]
                            })
                        }), (0, a.jsx)(h.default, {
                            messageType: h.HelpMessageTypes.INFO,
                            textVariant: "text-xs/normal",
                            children: H.default.Messages.GUILD_SETTINGS_SAFETY_MODERATION_EXPERIENCE_IN_COMMUNITY
                        })]
                    }), (0, a.jsx)(d.FormDivider, {
                        className: V.divider
                    })]
                })
            }

            function z(e) {
                let {
                    guild: t,
                    mfaLevel: s
                } = e, l = (0, o.useStateFromStores)([m.default], () => null != t && m.default.can(F.Permissions.MANAGE_GUILD, t), [t]), i = (0, o.useStateFromStores)([O.default], () => O.default.getCurrentUser()), {
                    isGuildOwnerWithMFA: c,
                    showMFAUserTooltip: E
                } = n.useMemo(() => {
                    if (null == i) return {
                        canChangeMFALevel: !1,
                        showMFAUserTooltip: !1
                    };
                    let e = t.isOwnerWithRequiredMfaLevel(i);
                    return {
                        isGuildOwnerWithMFA: e,
                        showMFAUserTooltip: !i.mfaEnabled && t.isOwner(i)
                    }
                }, [i, t]), _ = s === F.MFALevels.ELEVATED, T = (0, r.throttle)(async e => {
                    if (!!c) !E && await v.default.updateMFALevel({
                        guildId: t.id,
                        level: e ? F.MFALevels.ELEVATED : F.MFALevels.NONE,
                        isEnabled: !e
                    })
                }, 1e3);
                return l ? (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(d.FormDivider, {
                        className: V.divider
                    }), (0, a.jsxs)("div", {
                        className: V.setupContainer,
                        children: [(0, a.jsx)(d.FormSwitch, {
                            value: _,
                            onChange: T,
                            className: V.switchItem,
                            disabled: !c,
                            hideBorder: !0,
                            children: (0, a.jsxs)("div", {
                                className: V.switchItemTextContent,
                                children: [(0, a.jsx)(d.Text, {
                                    color: "header-primary",
                                    variant: "text-md/semibold",
                                    children: H.default.Messages.GUILD_SETTINGS_REQ_MFA_LABEL
                                }), (0, a.jsx)(d.Text, {
                                    color: "header-secondary",
                                    variant: "text-sm/normal",
                                    children: H.default.Messages.GUILD_SETTINGS_REQ_MFA_BODY
                                })]
                            })
                        }), E && (0, a.jsx)(h.default, {
                            messageType: h.HelpMessageTypes.INFO,
                            textVariant: "text-xs/normal",
                            children: H.default.Messages.GUILD_SETTINGS_REQ_MFA_TOOLTIP.format({
                                onClick: function() {
                                    u.default.open(F.UserSettingsSections.ACCOUNT)
                                }
                            })
                        })]
                    })]
                }) : null
            }

            function X() {
                var e;
                let {
                    guild: t,
                    mfaLevel: s
                } = (0, o.useStateFromStoresObject)([j.default], () => j.default.getProps(), []), n = (0, o.useStateFromStores)([C.default], () => C.default.enabled, []), {
                    showAlertMode: l
                } = (0, S.useGuildAlertModeEnabled)(null !== (e = null == t ? void 0 : t.id) && void 0 !== e ? e : "");
                return null == t ? null : n ? (0, a.jsx)(c.default, {}) : (0, a.jsxs)(d.FormSection, {
                    title: H.default.Messages.SAFETY_SETUP,
                    tag: d.FormTitleTags.H1,
                    titleClassName: V.headerContainer,
                    children: [(0, a.jsx)(W, {
                        guild: t
                    }), (0, a.jsx)(w, {
                        guild: t
                    }), (0, a.jsx)(z, {
                        guild: t,
                        mfaLevel: s
                    }), (0, a.jsx)(Y, {
                        guild: t
                    }), l ? (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(d.FormDivider, {
                            className: V.divider
                        }), (0, a.jsx)("div", {
                            className: i(V.setupContainer),
                            children: (0, a.jsx)(y.RaidAlertsSection, {
                                guild: t
                            })
                        })]
                    }) : (0, a.jsx)(k, {
                        guild: t
                    })]
                })
            }
        },
        187975: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return n
                }
            });
            var a = s("37983");

            function n(e) {
                return (0, a.jsxs)("svg", {
                    ...e,
                    width: "10",
                    height: "16",
                    viewBox: "0 0 10 16",
                    fill: "#FF73FA",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [(0, a.jsx)("path", {
                        d: "M5 0.5L0 5.5V10.5L5 15.5L10 10.5V5.5L5 0.5ZM8.75 9.9875L5 13.7375L1.25 9.9875V6.0125L5 2.2625L8.75 6.0125V9.9875Z"
                    }), (0, a.jsx)("path", {
                        d: "M2.5 6.53751V9.46251L5 11.9625L7.5 9.46251V6.53751L5 4.03751L2.5 6.53751Z"
                    })]
                })
            }
            s("884691")
        },
        473126: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return b
                }
            }), s("222007"), s("808653");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("597755"),
                o = s.n(r),
                d = s("446674"),
                u = s("77078"),
                c = s("327037"),
                E = s("430568"),
                _ = s("841098"),
                T = s("95039"),
                I = s("817963"),
                S = s("305122"),
                N = s("235004"),
                f = s("520497"),
                g = s("812809"),
                A = s("697218"),
                L = s("941886"),
                m = s("245307"),
                C = s("945330"),
                O = s("95689"),
                h = s("987772"),
                R = s("368121"),
                D = s("315102"),
                M = s("427459"),
                G = s("773336"),
                x = s("900938"),
                p = s("826485"),
                U = s("49111"),
                v = s("846325"),
                j = s("782340"),
                P = s("28058");
            let y = G.isPlatformEmbedded || "Safari" !== o.name && "Firefox" !== o.name;

            function b() {
                let e = (0, d.useStateFromStores)([x.default], () => x.default.getProps().guild);
                return null == e ? null : (0, a.jsx)(u.FormSection, {
                    tag: u.FormTitleTags.H1,
                    title: j.default.Messages.GUILD_SETTINGS_SOUNDBOARD,
                    children: (0, a.jsx)(H, {
                        guild: e
                    })
                })
            }

            function B(e) {
                let {
                    children: t
                } = e;
                return (0, a.jsx)(u.Heading, {
                    className: P.tableHeader,
                    variant: "heading-sm/semibold",
                    color: "header-secondary",
                    children: t
                })
            }

            function F(e) {
                let {
                    currentTier: t,
                    availableSounds: s,
                    guildId: n
                } = e, l = (0, M.getTotalSoundboardSoundCountForTier)(t);
                return 0 === t ? (0, a.jsx)(a.Fragment, {
                    children: j.default.Messages.GUILD_SETTINGS_SOUND_LIST_SOUNDS_AVAILABLE.format({
                        slots: s,
                        totalSlots: l
                    })
                }) : (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(u.Tooltip, {
                        text: j.default.Messages.GUILD_SETTINGS_SOUNDBOARD_BOOST_LEVEL.format({
                            currentBoostLevel: t
                        }),
                        children: e => (0, a.jsx)(u.Clickable, {
                            className: P.boostingIconWrapper,
                            onClick: () => {
                                var e;
                                return e = n, void(0, T.openGuildBoostingMarketingModal)({
                                    guildId: e,
                                    location: {
                                        section: U.AnalyticsSections.GUILD_SETTINGS_SOUNDBOARD,
                                        object: U.AnalyticsObjects.BOOST_GEM_ICON
                                    }
                                })
                            },
                            tabIndex: -1,
                            children: (0, a.jsx)(m.default, {
                                ...e
                            })
                        })
                    }), j.default.Messages.GUILD_SETTINGS_SOUND_LIST_SOUNDS_AVAILABLE_BOOST_LEVEL.format({
                        slots: s,
                        totalSlots: l,
                        boostLevel: t
                    })]
                })
            }

            function H(e) {
                let {
                    guild: t
                } = e, [l, i] = (0, d.useStateFromStoresArray)([N.default], () => {
                    var e;
                    return [null !== (e = N.default.getSoundsForGuild(t.id)) && void 0 !== e ? e : v.EMPTY_SOUND_LIST, N.default.isFetchingSounds() || N.default.isFetchingDefaultSounds()]
                }), {
                    canCreateExpressions: r
                } = (0, I.useManageResourcePermissions)(t), o = n.useRef(null), c = (0, _.default)(), E = t.premiumTier, T = (0, M.getAvailableSoundboardSoundCount)(l, E);
                n.useEffect(() => {
                    (0, S.maybeFetchSoundboardSounds)()
                }, []);
                let A = n.useMemo(() => l.reduce((e, t) => (e[t.soundId] = new Audio((0, f.default)(t.soundId)), e), {}), [l]),
                    m = 0 === l.length && !i;

                function C(e) {
                    var t;
                    null === (t = o.current) || void 0 === t || t.pause();
                    let s = A[e.soundId];
                    null != s && (o.current = s, s.currentTime = 0, s.volume = (0, g.default)(e.volume), s.play())
                }
                n.useEffect(() => () => {
                    var e;
                    null === (e = o.current) || void 0 === e || e.pause()
                }, []);
                if (i) return (0, a.jsx)(u.Spinner, {});
                let O = (0, a.jsx)(u.Button, {
                    onClick: function() {
                        (0, u.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("823749").then(s.bind(s, "823749"));
                            return s => (0, a.jsx)(e, {
                                ...s,
                                guildId: t.id
                            })
                        })
                    },
                    disabled: T <= 0 || !r,
                    children: j.default.Messages.GUILD_SETTINGS_SOUNDBOARD_UPLOAD_SOUND
                });
                return !y && (O = (0, a.jsx)(u.Tooltip, {
                    text: j.default.Messages.GUILD_SETTINGS_SOUNDBOARD_UPLOAD_SOUND_NOT_SUPPORTED.format(),
                    children: e => (0, a.jsx)(u.Button, {
                        ...e,
                        disabled: !0,
                        children: j.default.Messages.GUILD_SETTINGS_SOUNDBOARD_UPLOAD_SOUND
                    })
                })), (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsxs)("div", {
                        children: [(0, a.jsx)(u.Text, {
                            className: P.helpText,
                            variant: "text-sm/normal",
                            color: "header-secondary",
                            children: j.default.Messages.GUILD_SETTINGS_SOUNDBOARD_DESCRIPTION
                        }), (0, a.jsx)("div", {
                            className: P.buttons,
                            children: !m && O
                        })]
                    }), m ? (0, a.jsxs)(L.default, {
                        theme: c,
                        className: P.empty,
                        children: [(0, a.jsx)(L.EmptyStateImage, {
                            darkSrc: s("404807"),
                            lightSrc: s("124495"),
                            width: 272,
                            height: 212
                        }), (0, a.jsx)(L.EmptyStateText, {
                            note: j.default.Messages.NO_SOUNDS,
                            noteClassName: P.emptyText,
                            children: j.default.Messages.NO_SOUNDS_TITLE
                        }), O]
                    }) : (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(u.FormDivider, {
                            className: P.divider
                        }), (0, a.jsx)(u.Heading, {
                            className: P.tableTitle,
                            variant: "heading-md/bold",
                            color: "header-primary",
                            children: (0, a.jsx)(F, {
                                guildId: t.id,
                                currentTier: E,
                                availableSounds: T
                            })
                        }), (0, a.jsx)(p.default, {
                            guild: t,
                            numSounds: l.length,
                            isOutOfSlots: 0 === T
                        }), (0, a.jsxs)("div", {
                            className: P.soundTable,
                            children: [(0, a.jsxs)("div", {
                                className: P.tableHeaders,
                                children: [(0, a.jsx)(B, {
                                    children: j.default.Messages.EMOJI
                                }), (0, a.jsx)(B, {
                                    children: j.default.Messages.GUILD_SETTINGS_SOUND_NAME_COLUMN
                                }), (0, a.jsx)(B, {
                                    children: j.default.Messages.GUILD_SETTINGS_SOUND_UPLOADER_COLUMN
                                })]
                            }), l.map(e => (0, a.jsx)(V, {
                                sound: e,
                                isPlaying: !1,
                                guild: t,
                                onPlaySound: C
                            }, e.soundId))]
                        })]
                    })]
                })
            }

            function V(e) {
                let {
                    sound: t,
                    isPlaying: l,
                    onPlaySound: r,
                    guild: o
                } = e, {
                    soundId: _,
                    name: T,
                    user: N,
                    userId: f,
                    emojiId: g,
                    emojiName: L
                } = t, m = (0, d.useStateFromStores)([A.default], () => null != N ? N : A.default.getUser(f), [f, N]), {
                    canManageGuildExpression: M
                } = (0, I.useManageResourcePermissions)(o), G = n.useMemo(() => M(t), [t, M]), x = null != g || null != L, [p, U] = n.useState(!1);
                async function v() {
                    if (!p) {
                        U(!0);
                        try {
                            await (0, S.deleteSound)(o.id, _)
                        } catch {
                            U(!1)
                        }
                    }
                }
                return n.useEffect(() => {
                    null == m && e();
                    async function e() {
                        await (0, c.getUser)(f)
                    }
                }, [m, f]), (0, a.jsxs)("div", {
                    className: i(P.row, {
                        [P.active]: l
                    }),
                    children: [x ? (0, a.jsx)(E.default, {
                        emojiId: g,
                        emojiName: L,
                        className: P.emoji
                    }) : (0, a.jsx)(O.default, {
                        className: P.emoji
                    }), (0, a.jsx)(u.Clickable, {
                        onClick: () => {
                            !p && r(t)
                        },
                        className: P.soundName,
                        children: (0, a.jsxs)(u.Text, {
                            variant: "text-sm/normal",
                            className: P.soundName,
                            children: [T, " ", (0, a.jsx)(R.default, {
                                className: P.soundPreviewIcon
                            })]
                        })
                    }), null != m && (0, a.jsxs)(u.Text, {
                        className: P.uploaderName,
                        variant: "text-sm/normal",
                        children: [(0, a.jsx)(u.Avatar, {
                            "aria-label": null == m ? void 0 : m.username,
                            size: u.AvatarSizes.SIZE_24,
                            className: P.uploaderAvatar,
                            src: (0, D.getUserAvatarURL)(m, !1, 24)
                        }), null == m ? void 0 : m.username]
                    }), G ? (0, a.jsxs)("div", {
                        className: P.soundEditContainer,
                        children: [(0, a.jsx)(u.Clickable, {
                            className: P.soundUpdate,
                            onClick: function(e) {
                                e.stopPropagation(), (0, u.openModalLazy)(async () => {
                                    let {
                                        default: e
                                    } = await s.el("823749").then(s.bind(s, "823749"));
                                    return s => (0, a.jsx)(e, {
                                        ...s,
                                        guildId: o.id,
                                        existingSound: t
                                    })
                                })
                            },
                            "aria-label": j.default.Messages.EDIT,
                            children: (0, a.jsx)(h.default, {
                                className: P.soundEditIcon
                            })
                        }), (0, a.jsx)(u.Clickable, {
                            className: P.soundRemove,
                            onClick: function(e) {
                                e.stopPropagation(), (0, u.openModal)(e => (0, a.jsx)(u.ConfirmModal, {
                                    header: j.default.Messages.GUILD_SETTINGS_SOUNDBOARD_DELETE_SOUND_TITLE.format({
                                        soundName: T
                                    }),
                                    confirmText: j.default.Messages.DELETE,
                                    cancelText: j.default.Messages.CANCEL,
                                    onConfirm: v,
                                    ...e,
                                    children: (0, a.jsx)(u.Text, {
                                        variant: "text-md/normal",
                                        children: j.default.Messages.GUILD_SETTINGS_SOUNDBOARD_DELETE_SOUND_BODY.format({
                                            soundName: T
                                        })
                                    })
                                }))
                            },
                            "aria-label": j.default.Messages.REMOVE,
                            children: (0, a.jsx)(C.default, {
                                className: P.soundEditIcon
                            })
                        })]
                    }) : null]
                })
            }
        },
        582372: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return h
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("812204"),
                r = s("685665"),
                o = s("95039"),
                d = s("345988"),
                u = s("163732"),
                c = s("364685"),
                E = s("657"),
                _ = s("993105"),
                T = s("427459"),
                I = s("701909"),
                S = s("900938"),
                N = s("49111"),
                f = s("560241"),
                g = s("782340"),
                A = s("163810");
            let L = {
                    page: N.AnalyticsPages.GUILD_SETTINGS,
                    section: N.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                    object: N.AnalyticsObjects.BOOSTING_BANNER
                },
                m = e => {
                    let {
                        guild: t
                    } = e, {
                        analyticsLocations: s
                    } = (0, r.default)(), n = (0, T.getAppliedGuildBoostsRequired)(t.id)[N.BoostedGuildTiers.TIER_1] - t.premiumSubscriberCount;
                    return (0, a.jsxs)("div", {
                        className: A.upsellContainer,
                        children: [(0, a.jsx)(l.Heading, {
                            className: A.upsellHeader,
                            variant: "heading-xl/semibold",
                            children: g.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_TITLE
                        }), (0, a.jsx)(l.Text, {
                            className: A.upsellDescription,
                            variant: "text-md/normal",
                            children: g.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_DESCRIPTION_FREE_SLOTS
                        }), (0, a.jsxs)("div", {
                            className: A.upsellButtons,
                            children: [(0, a.jsx)(l.Button, {
                                className: A.upsellButtonPrimary,
                                innerClassName: A.upsellButton,
                                color: l.Button.Colors.WHITE,
                                onClick: () => (0, u.default)({
                                    analyticsLocations: s,
                                    analyticsLocation: L,
                                    guildId: t.id,
                                    totalNumberOfSlotsToAssign: n
                                }),
                                children: g.default.Messages.GUILD_SETTINGS_STICKERS_BOOST_SERVER
                            }), (0, a.jsx)(l.Button, {
                                innerClassName: A.upsellButton,
                                color: l.Button.Colors.WHITE,
                                onClick: () => (0, o.openGuildBoostingMarketingModal)({
                                    guildId: t.id,
                                    location: {
                                        section: N.AnalyticsSections.GUILD_SETTINGS_STICKERS
                                    }
                                }),
                                children: g.default.Messages.LEARN_MORE
                            })]
                        })]
                    })
                },
                C = () => (0, a.jsxs)(l.FormSection, {
                    title: g.default.Messages.GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_HEADING,
                    children: [(0, a.jsx)(l.FormText, {
                        type: l.FormTextTypes.DESCRIPTION,
                        children: g.default.Messages.GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_INSTRUCTIONS.format({
                            fileSize: (0, _.formatKbSize)(f.MAX_STICKER_FILE_SIZE, {
                                useKibibytes: !0
                            })
                        })
                    }), (0, a.jsx)(l.FormText, {
                        type: l.FormTextTypes.DESCRIPTION,
                        children: g.default.Messages.GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_HELP.format({
                            articleUrl: I.default.getArticleURL(N.HelpdeskArticles.STICKERS_UPLOAD)
                        })
                    })]
                }),
                O = e => {
                    let t, s, n, {
                            guild: l,
                            guildStickers: i
                        } = e,
                        r = l.premiumTier,
                        o = (0, T.getAvailableStickerSlotCount)(i, r),
                        u = (0, T.getNextTier)(r, l.id),
                        c = (0, T.getTotalStickerCountForTier)(r),
                        E = i.length;
                    return null == u || r === N.BoostedGuildTiers.TIER_3 || o > 0 ? (0, a.jsx)(a.Fragment, {}) : (E > c ? (t = g.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TOO_MANY_STICKERS_HEADER.format({
                        level: u
                    }), s = g.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TOO_MANY_STICKERS_TEXT.format({
                        level: u
                    }), n = N.AnalyticsObjects.BOOST_UPSELL_BANNER_LOST_LEVEL) : (t = g.default.Messages.PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_HEADER, s = g.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TEXT.format({
                        level: u,
                        numAdditional: (0, T.getIncrementalStickerCountForTier)(u)
                    }), n = N.AnalyticsObjects.BOOST_UPSELL_BANNER_SLOTS_FULL), (0, a.jsx)(d.default, {
                        header: t,
                        text: s,
                        guild: l,
                        analyticsLocation: {
                            page: N.AnalyticsPages.GUILD_SETTINGS,
                            section: N.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                            object: n,
                            objectType: (0, T.boostedGuildTierToAnalyticsObjectType)(u)
                        }
                    }))
                };
            var h = () => {
                let e = (0, n.useStateFromStores)([S.default], () => S.default.getGuild()),
                    t = (0, n.useStateFromStores)([c.default], () => {
                        var t;
                        return null != e && null !== (t = c.default.getStickersByGuildId(e.id)) && void 0 !== t ? t : []
                    }, [e]),
                    {
                        AnalyticsLocationProvider: s
                    } = (0, r.default)(i.default.STICKERS);
                if (null == e) return null;
                let o = e.premiumTier !== N.BoostedGuildTiers.NONE || t.length > 0;
                return (0, a.jsx)(s, {
                    children: (0, a.jsxs)(l.FormSection, {
                        title: g.default.Messages.GUILD_SETTINGS_STICKERS,
                        tag: l.FormTitleTags.H1,
                        children: [o ? (0, a.jsxs)("div", {
                            children: [(0, a.jsx)(O, {
                                guild: e,
                                guildStickers: t
                            }), (0, a.jsx)(C, {})]
                        }) : (0, a.jsx)(m, {
                            guild: e
                        }), (0, a.jsx)(l.FormDivider, {
                            className: A.divider
                        }), (0, a.jsx)(E.default, {
                            guild: e
                        })]
                    })
                })
            }
        },
        789123: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsTemplateMetadataStore: function() {
                    return D
                },
                GuildSettingsTemplateNotice: function() {
                    return M
                },
                default: function() {
                    return G
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("627445"),
                o = s.n(r),
                d = s("446674"),
                u = s("669491"),
                c = s("77078"),
                E = s("913144"),
                _ = s("913801"),
                T = s("45299"),
                I = s("448993"),
                S = s("883069"),
                N = s("569808"),
                f = s("658329"),
                g = s("578706"),
                A = s("381546"),
                L = s("900938"),
                m = s("579033"),
                C = s("782340"),
                O = s("282567"),
                h = s("926622");
            class R extends d.default.Store {
                getTemplate() {
                    let e = L.default.getProps().guild;
                    if (null == e) return null;
                    let t = N.default.getForGuild(e.id);
                    return null != t && t.state !== m.GuildTemplateStates.RESOLVING ? t : null
                }
                showNotice() {
                    let e = this.getTemplate();
                    return null != e && null != this.name && "" !== this.name && (this.name.trim() !== e.name || this.description.trim() !== e.description)
                }
                constructor(...e) {
                    super(...e), this.name = "", this.description = "", this.error = null, this.reset = () => {
                        let e = this.getTemplate();
                        if (null != e) {
                            var t, s;
                            this.name = null !== (t = e.name) && void 0 !== t ? t : this.name, this.description = null !== (s = e.description) && void 0 !== s ? s : this.description
                        } else this.name = "", this.description = "";
                        this.emitChange()
                    }, this.setName = e => {
                        this.name = e, this.emitChange()
                    }, this.setDescription = e => {
                        this.description = e, this.emitChange()
                    }, this.setError = e => {
                        this.error = e, this.emitChange()
                    }, this.save = async () => {
                        await S.default.updateGuildTemplate(L.default.getProps().guild.id, this.getTemplate().code, this.name, this.description), this.emitChange()
                    }
                }
            }
            R.displayName = "GuildSettingsTemplateMetadataStore_";
            let D = new R(E.default);

            function M() {
                let [e, t] = n.useState(!1), s = async () => {
                    t(!0), await D.save(), t(!1)
                };
                return (0, a.jsx)(T.default, {
                    submitting: e,
                    onReset: D.reset,
                    onSave: s
                })
            }

            function G() {
                return (0, a.jsx)(c.FormSection, {
                    className: h.marginBottom4,
                    children: (0, a.jsxs)(c.HeadingLevel, {
                        component: (0, a.jsx)(c.FormTitle, {
                            tag: c.FormTitleTags.H1,
                            children: C.default.Messages.GUILD_TEMPLATES
                        }),
                        children: [(0, a.jsx)(c.FormText, {
                            className: h.marginBottom20,
                            type: c.FormTextTypes.DESCRIPTION,
                            children: C.default.Messages.GUILD_TEMPLATE_SETTINGS_DESCRIPTION.format()
                        }), (0, a.jsx)(p, {}), (0, a.jsx)(c.FormDivider, {
                            className: O.divider
                        }), (0, a.jsx)(x, {})]
                    })
                })
            }

            function x() {
                let {
                    guild: e
                } = L.default.getProps();
                o(null != e, "guild cannot be null");
                let t = (0, d.useStateFromStores)([D], () => D.error),
                    [s, l] = n.useState(!0),
                    {
                        loading: i,
                        guildTemplate: r
                    } = function(e) {
                        let [t, s] = n.useState(!0);
                        n.useEffect(() => {
                            (async function t() {
                                s(!0);
                                try {
                                    await S.default.loadTemplatesForGuild(e), s(!1)
                                } catch (e) {
                                    D.setError(new I.APIError(e))
                                }
                            })()
                        }, [e]);
                        let a = (0, d.useStateFromStores)([N.default], () => N.default.getForGuild(e), [e]);
                        return {
                            loading: t,
                            guildTemplate: a
                        }
                    }(e.id);
                if (n.useEffect(() => {
                        if (s && !i) {
                            if (null != r) {
                                var e, t;
                                D.setName(null !== (e = r.name) && void 0 !== e ? e : ""), D.setDescription(null !== (t = r.description) && void 0 !== t ? t : "")
                            }
                            l(!1)
                        }
                    }, [s, r, i]), n.useEffect(() => () => {
                        D.reset(), D.setError(null)
                    }, []), s) return null != t ? (0, a.jsx)(c.Text, {
                    color: "text-danger",
                    variant: "text-sm/normal",
                    children: t.message
                }) : (0, a.jsx)(c.Spinner, {
                    className: h.marginTop40
                });
                let u = null != t && null == t.getFirstFieldErrorMessage("name") && null == t.getFirstFieldErrorMessage("description");
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(v, {}), (0, a.jsx)(j, {
                        guild: e,
                        guildTemplate: r
                    }), u ? (0, a.jsx)(c.Text, {
                        className: h.marginTop8,
                        color: "text-danger",
                        variant: "text-sm/normal",
                        children: t.getAnyErrorMessage()
                    }) : null]
                })
            }

            function p() {
                return (0, a.jsxs)("div", {
                    className: O.descriptionBox,
                    children: [(0, a.jsxs)("div", {
                        className: O.descriptionSection,
                        children: [(0, a.jsx)(c.Heading, {
                            variant: "eyebrow",
                            children: C.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_WILL_COPY
                        }), (0, a.jsxs)("div", {
                            className: O.descriptionRow,
                            children: [(0, a.jsx)(g.default, {
                                className: O.descriptionIcon,
                                color: u.default.unsafe_rawColors.GREEN_360.css,
                                backgroundColor: u.default.unsafe_rawColors.WHITE_500.css
                            }), C.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_CHANNELS]
                        }), (0, a.jsxs)("div", {
                            className: O.descriptionRow,
                            children: [(0, a.jsx)(g.default, {
                                className: O.descriptionIcon,
                                color: u.default.unsafe_rawColors.GREEN_360.css,
                                backgroundColor: u.default.unsafe_rawColors.WHITE_500.css
                            }), C.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_ROLES]
                        }), (0, a.jsxs)("div", {
                            className: O.descriptionRow,
                            children: [(0, a.jsx)(g.default, {
                                className: O.descriptionIcon,
                                color: u.default.unsafe_rawColors.GREEN_360.css,
                                backgroundColor: u.default.unsafe_rawColors.WHITE_500.css
                            }), C.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_SETTINGS]
                        })]
                    }), (0, a.jsxs)("div", {
                        className: O.descriptionSection,
                        children: [(0, a.jsx)(c.Heading, {
                            variant: "eyebrow",
                            children: C.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_WONT_COPY
                        }), (0, a.jsxs)("div", {
                            className: O.descriptionRow,
                            children: [(0, a.jsx)(A.default, {
                                className: O.descriptionIcon,
                                color: u.default.unsafe_rawColors.RED_400.css,
                                backgroundColor: u.default.unsafe_rawColors.WHITE_500.css
                            }), C.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_MESSAGES]
                        }), (0, a.jsxs)("div", {
                            className: O.descriptionRow,
                            children: [(0, a.jsx)(A.default, {
                                className: O.descriptionIcon,
                                color: u.default.unsafe_rawColors.RED_400.css,
                                backgroundColor: u.default.unsafe_rawColors.WHITE_500.css
                            }), C.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_MEMBERS]
                        }), (0, a.jsxs)("div", {
                            className: O.descriptionRow,
                            children: [(0, a.jsx)(A.default, {
                                className: O.descriptionIcon,
                                color: u.default.unsafe_rawColors.RED_400.css,
                                backgroundColor: u.default.unsafe_rawColors.WHITE_500.css
                            }), C.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_PERKS]
                        })]
                    })]
                })
            }

            function U(e) {
                let {
                    cancel: t,
                    confirm: s
                } = e;
                return (0, a.jsx)(c.DeclarativeConfirmModal, {
                    dismissable: !0,
                    header: C.default.Messages.GUILD_TEMPLATES_DELETE_TEMPLATE,
                    confirmText: C.default.Messages.GUILD_TEMPLATES_DELETE_TEMPLATE,
                    cancelText: C.default.Messages.CANCEL,
                    onCancel: t,
                    onConfirm: s,
                    children: (0, a.jsx)(c.Text, {
                        variant: "text-md/normal",
                        color: "text-normal",
                        children: C.default.Messages.GUILD_TEMPLATES_DELETE_DESCRIPTION
                    })
                })
            }

            function v() {
                let e = (0, d.useStateFromStores)([D], () => D.name),
                    t = (0, d.useStateFromStores)([D], () => D.description),
                    s = (0, d.useStateFromStores)([D], () => D.error);
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(c.FormItem, {
                        className: h.marginBottom20,
                        title: C.default.Messages.GUILD_TEMPLATES_FORM_LABEL_NAME,
                        error: null == s ? void 0 : s.getFirstFieldErrorMessage("name"),
                        children: (0, a.jsx)(c.TextInput, {
                            value: e,
                            onChange: e => D.setName(e),
                            placeholder: C.default.Messages.GUILD_TEMPLATES_FORM_PLACEHOLDER_NAME,
                            maxLength: 100
                        })
                    }), (0, a.jsx)(c.FormItem, {
                        className: h.marginBottom20,
                        title: C.default.Messages.GUILD_TEMPLATES_FORM_LABEL_DESCRIPTION,
                        error: null == s ? void 0 : s.getFirstFieldErrorMessage("description"),
                        children: (0, a.jsx)(c.TextArea, {
                            value: t,
                            onChange: e => D.setDescription(e),
                            placeholder: C.default.Messages.GUILD_TEMPLATES_FORM_PLACEHOLDER_DESCRIPTION,
                            maxLength: 120
                        })
                    })]
                })
            }

            function j(e) {
                let {
                    guild: t,
                    guildTemplate: s
                } = e;
                return null == s ? (0, a.jsx)(P, {
                    guild: t
                }) : (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(c.FormItem, {
                        title: C.default.Messages.GUILD_TEMPLATES_FORM_LABEL_LINK,
                        children: (0, a.jsx)(_.default, {
                            buttonLook: c.Button.Looks.FILLED,
                            buttonColor: c.Button.Colors.BRAND,
                            value: (0, f.default)(s.code)
                        })
                    }), s.isDirty && (0, a.jsx)(c.Text, {
                        color: "text-warning",
                        className: h.marginTop8,
                        variant: "text-sm/normal",
                        children: C.default.Messages.GUILD_TEMPLATES_UNSYNCED_WARNING
                    }), (0, a.jsxs)("div", {
                        className: i(h.marginTop20, O.buttonContainer),
                        children: [s.isDirty && (0, a.jsx)(y, {
                            guild: t,
                            guildTemplate: s
                        }), (0, a.jsxs)("div", {
                            className: O.rightButtonContainer,
                            children: [(0, a.jsx)(b, {
                                guild: t,
                                guildTemplate: s
                            }), (0, a.jsx)(B, {
                                guildTemplate: s
                            })]
                        })]
                    }), s.isDirty && (0, a.jsx)("div", {
                        className: O.lastSync,
                        children: C.default.Messages.GUILD_TEMPLATES_LAST_SYNC.format({
                            timestamp: new Date(s.updatedAt)
                        })
                    })]
                })
            }

            function P(e) {
                var t;
                let {
                    guild: s
                } = e, l = (0, d.useStateFromStores)([D], () => D.name), [i, r] = n.useState(!1), o = async () => {
                    D.setError(null), r(!0);
                    try {
                        await S.default.createGuildTemplate(s.id, D.name, D.description)
                    } catch (e) {
                        D.setError(new I.APIError(e))
                    }
                    r(!1)
                };
                return (0, a.jsx)(c.Button, {
                    submitting: i,
                    disabled: !(null != (t = l) && t.trim().length >= 2),
                    color: c.Button.Colors.BRAND,
                    onClick: o,
                    children: C.default.Messages.GUILD_TEMPLATES_CREATE_LINK
                })
            }

            function y(e) {
                let {
                    guild: t,
                    guildTemplate: s
                } = e, [l, i] = n.useState(!1), r = async () => {
                    D.setError(null), i(!0);
                    try {
                        await S.default.syncGuildTemplate(t.id, s.code)
                    } catch (e) {
                        D.setError(new I.APIError(e))
                    }
                    i(!1)
                };
                return (0, a.jsx)(c.Button, {
                    submitting: l,
                    className: O.button,
                    onClick: r,
                    children: C.default.Messages.GUILD_TEMPLATES_SYNC_TEMPLATE
                })
            }

            function b(e) {
                let {
                    guild: t,
                    guildTemplate: s
                } = e, [l, i] = n.useState(!1), r = async () => {
                    D.setError(null);
                    try {
                        await S.default.deleteGuildTemplate(t.id, s.code), D.setName(""), D.setDescription("")
                    } catch (e) {
                        D.setError(new I.APIError(e))
                    }
                    i(!1)
                };
                return (0, a.jsxs)(a.Fragment, {
                    children: [(0, a.jsx)(c.Button, {
                        look: c.Button.Looks.OUTLINED,
                        className: O.button,
                        color: c.Button.Colors.RED,
                        onClick: () => i(!0),
                        children: C.default.Messages.GUILD_TEMPLATES_DELETE_TEMPLATE
                    }), l ? (0, a.jsx)(U, {
                        confirm: r,
                        cancel: () => i(!1)
                    }) : null]
                })
            }

            function B(e) {
                let {
                    guildTemplate: t
                } = e;
                return (0, a.jsx)(c.Button, {
                    color: c.Button.Colors.PRIMARY,
                    className: O.button,
                    onClick: () => (0, c.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("843456").then(s.bind(s, "843456"));
                        return s => (0, a.jsx)(e, {
                            ...s,
                            guildTemplate: t
                        })
                    }),
                    children: C.default.Messages.GUILD_TEMPLATES_PREVIEW_TEMPLATE
                })
            }
        },
        78730: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("782340"),
                l = s("134205");

            function i(e) {
                let {
                    showDirtyIndicator: t
                } = e;
                return t ? (0, a.jsxs)("div", {
                    className: l.container,
                    children: [n.default.Messages.GUILD_TEMPLATES, (0, a.jsx)("div", {
                        className: l.dot
                    })]
                }) : (0, a.jsx)(a.Fragment, {
                    children: n.default.Messages.GUILD_TEMPLATES
                })
            }
        },
        757120: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                GuildSettingsVanityURLNotice: function() {
                    return x
                },
                default: function() {
                    return U
                }
            }), s("781738"), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("642950"),
                u = s("45299"),
                c = s("812204"),
                E = s("716241"),
                _ = s("685665"),
                T = s("634544"),
                I = s("379532"),
                S = s("52393"),
                N = s("102985"),
                f = s("409633"),
                g = s("181114"),
                A = s("118503"),
                L = s("427459"),
                m = s("900938"),
                C = s("610494"),
                O = s("355665"),
                h = s("11893"),
                R = s("49111"),
                D = s("944305"),
                M = s("782340"),
                G = s("311438");
            let x = r.default.connectStores([m.default, O.default], () => {
                let e = O.default.vanityURLCode,
                    t = m.default.getGuildId();
                return {
                    vanityURLCode: e,
                    guildId: t,
                    onReset() {
                        (0, C.resetCode)()
                    },
                    onSave() {
                        null != t && (0, C.saveCode)(t, e)
                    }
                }
            })(u.default);
            class p extends n.PureComponent {
                componentWillUnmount() {
                    (0, C.close)()
                }
                renderEditCard() {
                    let {
                        isRemoving: e
                    } = this.state, {
                        hasError: t,
                        originalVanityURLCode: s,
                        vanityURLCode: n,
                        vanityURLUses: l,
                        guild: i
                    } = this.props;
                    if (null == n) return (0, a.jsx)(o.Spinner, {});
                    let r = (null == i ? void 0 : i.hasFeature(R.GuildFeatures.VANITY_URL)) === !0;
                    return (0, a.jsxs)(o.Card, {
                        editable: !0,
                        className: G.editVanityUrlCard,
                        children: [(0, a.jsxs)(o.FormTitle, {
                            className: G.formTitle,
                            children: [(0, a.jsx)("div", {
                                className: G.formTitleField,
                                children: M.default.Messages.INVITE_URL
                            }), n.length > 0 ? (0, a.jsx)("div", {
                                children: M.default.Messages.VANITY_URL_USES.format({
                                    uses: l
                                })
                            }) : null]
                        }), (0, a.jsx)(f.default, {
                            prefix: "".concat("https://discord.gg", "/"),
                            value: n,
                            onChange: this.handleInviteCodeChange,
                            maxLength: 25,
                            autoFocus: !0,
                            error: t,
                            disabled: !r
                        }), null != s && s.length > 0 ? (0, a.jsx)(o.Button, {
                            className: G.removeVanityUrlButton,
                            onClick: this.handleRemoveVanityURL,
                            submitting: e,
                            look: o.Button.Looks.LINK,
                            size: o.Button.Sizes.MIN,
                            color: o.Button.Colors.RED,
                            children: M.default.Messages.REMOVE_VANITY_URL
                        }) : null]
                    })
                }
                renderUpsellButton() {
                    return (0, a.jsxs)(g.default, {
                        color: o.Button.Colors.GREEN,
                        className: i(G.marginTop16),
                        innerClassName: G.upsellButton,
                        onClick: this.handleVanityUrlUpsellButton,
                        children: [(0, a.jsx)(A.default, {
                            height: 16,
                            width: 16,
                            className: G.premiumUpsellBadge
                        }), " ", M.default.Messages.PREMIUM_GUILD_UNLOCK_WTH_BOOSTING_CTA]
                    })
                }
                renderInfo() {
                    let {
                        hasError: e,
                        errorDetails: t,
                        originalVanityURLCode: s
                    } = this.props;
                    if (e) return (0, a.jsx)(o.Text, {
                        variant: "text-md/normal",
                        color: "text-danger",
                        className: G.marginTop20,
                        children: (0, h.getErrorMessageFromErrorCode)(null == t ? void 0 : t.code)
                    });
                    if (null != s && s.length > 0) {
                        let e = (0, S.default)(s);
                        return (0, a.jsx)(o.FormText, {
                            className: G.marginTop20,
                            type: o.FormTextTypes.LABEL_DESCRIPTOR,
                            children: M.default.Messages.VANITY_URL_HELP_EXTENDED_LINK.format({
                                urlText: e,
                                urlValue: e
                            })
                        })
                    }
                }
                handleRemoveVanityURL() {
                    (0, C.setCode)("")
                }
                handleInviteCodeChange(e) {
                    (0, C.setCode)(e.replace(/ /g, "-"))
                }
                render() {
                    let {
                        hide: e,
                        guild: t
                    } = this.props;
                    return null == t ? null : e ? (0, a.jsx)(d.default, {}) : (0, a.jsxs)(o.FormSection, {
                        children: [(0, a.jsxs)(o.FormTitle, {
                            tag: o.FormTitleTags.H1,
                            className: G.flexFormTitle,
                            children: [(0, a.jsx)("div", {
                                children: M.default.Messages.VANITY_URL
                            }), (0, a.jsx)(T.default, {
                                guild: t,
                                guildFeature: R.GuildFeatures.VANITY_URL,
                                className: G.guildFeatureAvailabilityIndicator,
                                onClick: this.handleVanityUrlUpsellIndicator
                            })]
                        }), (0, a.jsx)(o.FormText, {
                            type: o.FormTextTypes.DESCRIPTION,
                            className: G.marginBottom8,
                            children: M.default.Messages.VANITY_URL_HELP
                        }), (0, a.jsx)(o.FormText, {
                            type: o.FormTextTypes.DESCRIPTION,
                            className: G.marginBottom20,
                            children: M.default.Messages.VANITY_URL_HELP_CONFLICT
                        }), (0, a.jsx)(o.FormText, {
                            type: o.FormTextTypes.DESCRIPTION,
                            className: G.marginBottom20,
                            children: M.default.Messages.VANITY_URL_DEFAULT_CHANNEL
                        }), (0, h.canSeeVanityUrlSettings)(t) ? this.renderEditCard() : this.renderUpsellButton(), this.renderInfo()]
                    })
                }
                constructor(...e) {
                    super(...e), this.state = {
                        isRemoving: !1
                    }, this.handleShowModalUpsell = (e, t, s, a, n) => {
                        e.preventDefault(), e.stopPropagation();
                        let {
                            guild: l,
                            analyticsLocations: i
                        } = this.props;
                        null != l && ((0, E.trackWithMetadata)(R.AnalyticEvents.PREMIUM_GUILD_PROMOTION_OPENED, {
                            location: {
                                section: s,
                                object: R.AnalyticsObjects.LEARN_MORE,
                                objectType: (0, L.boostedGuildTierToAnalyticsObjectType)(t),
                                location_stack: i
                            },
                            guild_id: null == l ? void 0 : l.id
                        }), (0, I.default)({
                            analyticsLocations: i,
                            analyticsSourceLocation: {
                                section: s,
                                object: a,
                                page: R.AnalyticsPages.GUILD_SETTINGS
                            },
                            guild: l,
                            perks: n
                        }))
                    }, this.handleVanityUrlUpsellIndicator = e => {
                        this.handleShowModalUpsell(e, R.BoostedGuildTiers.TIER_3, R.AnalyticsSections.GUILD_SETTINGS_VANITY_URL, R.AnalyticsObjects.BADGE, (0, D.vanityUrlUpsellPerks)())
                    }, this.handleVanityUrlUpsellButton = e => {
                        this.handleShowModalUpsell(e, R.BoostedGuildTiers.TIER_3, R.AnalyticsSections.GUILD_SETTINGS_VANITY_URL, R.AnalyticsObjects.BUTTON_CTA, (0, D.vanityUrlUpsellPerks)())
                    }
                }
            }

            function U() {
                let e = (0, r.useStateFromStores)([m.default], () => m.default.getGuild()),
                    t = (0, r.useStateFromStoresObject)([O.default], () => ({
                        vanityURLCode: O.default.vanityURLCode,
                        vanityURLUses: O.default.vanityURLUses,
                        originalVanityURLCode: O.default.originalVanityURLCode,
                        hasError: O.default.hasError(),
                        errorDetails: O.default.errorDetails
                    })),
                    s = (0, r.useStateFromStores)([N.default], () => N.default.hideInstantInvites),
                    {
                        analyticsLocations: n,
                        AnalyticsLocationProvider: l
                    } = (0, _.default)(c.default.VANITY_URL);
                return (0, a.jsx)(l, {
                    children: (0, a.jsx)(p, {
                        guild: e,
                        ...t,
                        hide: s,
                        analyticsLocations: n
                    })
                })
            }
        },
        310490: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return R
                }
            }), s("222007"), s("843762");
            var a = s("37983"),
                n = s("884691"),
                l = s("917351"),
                i = s.n(l),
                r = s("316693"),
                o = s("446674"),
                d = s("77078"),
                u = s("642950"),
                c = s("913801"),
                E = s("679653"),
                _ = s("923959"),
                T = s("957255"),
                I = s("27618"),
                S = s("102985"),
                N = s("697218"),
                f = s("592407"),
                g = s("900938"),
                A = s("49111"),
                L = s("782340"),
                m = s("686184");
            let C = "NO_INSTANT_INVITE",
                O = r.default.combine(A.Permissions.VIEW_CHANNEL, A.Permissions.CREATE_INSTANT_INVITE);
            class h extends n.PureComponent {
                static getDerivedStateFromProps(e, t) {
                    let {
                        widgetEnabled: s
                    } = e, {
                        widgetEnabledProp: a
                    } = t;
                    return s !== a ? {
                        internalEnabled: s,
                        widgetEnabledProp: s
                    } : null
                }
                renderChannelSelect(e) {
                    let {
                        widgetChannelId: t
                    } = this.props, s = _.default.getChannels(e.id), n = i([...s[_.GUILD_SELECTABLE_CHANNELS_KEY], ...s[_.GUILD_VOCAL_CHANNELS_KEY]]).filter(t => {
                        let {
                            channel: s
                        } = t;
                        return s.guild_id === e.id
                    }).filter(e => {
                        let {
                            channel: s
                        } = e;
                        return s.id === t || T.default.can(O, s)
                    }).map(e => {
                        let {
                            channel: t
                        } = e;
                        return {
                            value: t.id,
                            label: (0, E.computeChannelName)(t, N.default, I.default, !0)
                        }
                    }).value(), l = {
                        value: C,
                        label: L.default.Messages.NO_INSTANT_INVITE
                    };
                    n.unshift(l);
                    let r = null != t ? t : l;
                    return (0, a.jsxs)(d.FormItem, {
                        title: L.default.Messages.FORM_LABEL_INSTANT_INVITE_CHANNEL,
                        children: [(0, a.jsx)(d.SingleSelect, {
                            className: m.spacing,
                            options: n,
                            value: r,
                            onChange: this.handleChannelSelect
                        }), (0, a.jsx)(d.FormText, {
                            type: d.FormTextTypes.DESCRIPTION,
                            children: L.default.Messages.FORM_HELP_INSTANT_INVITE_CHANNEL
                        })]
                    })
                }
                renderAPIInfo(e) {
                    let t = "".concat(location.protocol).concat(window.GLOBAL_ENV.API_ENDPOINT, "/guilds/").concat(e.id, "/widget.json");
                    return (0, a.jsxs)("div", {
                        className: m.infoWrapper,
                        children: [(0, a.jsx)(d.FormItem, {
                            title: L.default.Messages.FORM_LABEL_SERVER_ID,
                            className: m.infoItem,
                            children: (0, a.jsx)(c.default, {
                                value: e.id
                            })
                        }), (0, a.jsx)(d.FormItem, {
                            title: L.default.Messages.FORM_LABEL_JSON_API,
                            className: m.infoItem,
                            children: (0, a.jsx)(c.default, {
                                value: t
                            })
                        })]
                    })
                }
                renderWidget(e) {
                    let t = "".concat(location.protocol).concat(window.GLOBAL_ENV.WIDGET_ENDPOINT, "?id=").concat(e.id, "&theme=dark");
                    return (0, a.jsx)("div", {
                        children: (0, a.jsxs)("div", {
                            className: m.infoWrapper,
                            children: [(0, a.jsxs)(d.FormItem, {
                                className: m.infoItem,
                                title: L.default.Messages.FORM_LABEL_PREMADE_WIDGET,
                                children: [(0, a.jsx)(c.default, {
                                    value: '<iframe src="'.concat(t, '" width="350" height="500" allowtransparency="true" frameborder="0" sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts"></iframe>')
                                }), (0, a.jsx)(d.FormText, {
                                    type: d.FormTextTypes.DESCRIPTION,
                                    children: L.default.Messages.GUILD_SETTINGS_WIDGET_EMBED_HELP.format()
                                })]
                            }), (0, a.jsx)("img", {
                                className: m.infoItem,
                                "data-accessibility": "desaturate",
                                alt: "",
                                src: s("94944")
                            })]
                        })
                    })
                }
                render() {
                    let {
                        guild: e
                    } = this.props;
                    return null == e ? null : this.props.hide ? (0, a.jsx)(u.default, {}) : (0, a.jsxs)(d.FormSection, {
                        tag: d.FormTitleTags.H1,
                        title: L.default.Messages.GUILD_SETTINGS_TITLE_SERVER_WIDGET,
                        children: [this.renderToggle(), this.renderChannelSelect(e), (0, a.jsx)(d.FormDivider, {
                            className: m.divider
                        }), this.renderAPIInfo(e), (0, a.jsx)(d.FormDivider, {
                            className: m.divider
                        }), this.renderWidget(e)]
                    })
                }
                constructor(...e) {
                    super(...e), this.state = {
                        internalEnabled: this.props.widgetEnabled,
                        widgetEnabledProp: this.props.widgetEnabled
                    }, this.renderToggle = () => (0, a.jsx)(d.FormSwitch, {
                        className: m.spacing,
                        value: this.state.internalEnabled,
                        onChange: this.handleToggleWidget,
                        children: L.default.Messages.GUILD_SETTINGS_WIDGET_ENABLE_WIDGET
                    }), this.handleToggleWidget = e => {
                        let {
                            guild: t,
                            widgetChannelId: s
                        } = this.props;
                        null != t && (this.setState({
                            internalEnabled: e
                        }), f.default.updateEmbed(t.id, e, s))
                    }, this.handleChannelSelect = e => {
                        let {
                            guild: t,
                            widgetEnabled: s
                        } = this.props;
                        null != t && f.default.updateEmbed(t.id, s, e !== C ? e : null)
                    }
                }
            }
            var R = o.default.connectStores([g.default, S.default], () => {
                let {
                    guild: e,
                    embedChannelId: t,
                    embedEnabled: s
                } = g.default.getProps();
                return {
                    guild: e,
                    widgetChannelId: t,
                    widgetEnabled: s,
                    hide: S.default.enabled
                }
            })(h)
        },
        275252: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("998728"),
                d = s("338518");

            function u(e) {
                let {
                    action: t,
                    children: s,
                    className: l,
                    onExpandChange: u,
                    loading: c,
                    ...E
                } = e, [_, T] = n.useState(!1), I = e => {
                    T(e), null == u || u(e)
                };
                return (0, a.jsx)(r.Collapsible, {
                    className: i(d.groupContainer, l),
                    isExpanded: _,
                    collapsibleContent: (0, a.jsxs)("div", {
                        className: d.groupCollapsedContainer,
                        children: [_ && (0, a.jsx)("div", {
                            className: d.pointer
                        }), s]
                    }),
                    children: e => {
                        let {
                            onClick: s
                        } = e;
                        return (0, a.jsx)(o.default, {
                            ...E,
                            className: d.groupHeaderRow,
                            action: c ? (0, a.jsx)(r.Spinner, {
                                type: r.Spinner.Type.PULSING_ELLIPSIS
                            }) : t,
                            onClick: e => {
                                I(!_), s(e)
                            }
                        })
                    }
                })
            }
        },
        378826: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return I
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("904276"),
                d = s("875436"),
                u = s("797944"),
                c = s("275252"),
                E = s("998728"),
                _ = s("782340"),
                T = s("116891");

            function I(e) {
                var t, s, l;
                let {
                    changeTitle: I,
                    value: S,
                    options: N,
                    className: f,
                    onChange: g
                } = e, [A, L] = n.useState(S), [m, C] = n.useState(!1), [O, h] = n.useState(!1), R = n.useRef(null);
                n.useEffect(() => {
                    L(S)
                }, [S]), n.useEffect(() => () => {
                    clearTimeout(R.current)
                }, []);
                let D = N.find(e => e.value === A),
                    M = e => {
                        !e.disabled && e.value !== A && (h(!0), null == g || g(e), L(e.value), R.current = setTimeout(() => {
                            h(!1), C(!1)
                        }, 1e3))
                    };
                return (0, a.jsx)(c.default, {
                    title: m ? I : null !== (t = null == D ? void 0 : D.title) && void 0 !== t ? t : I,
                    description: m ? "(".concat(null !== (s = null == D ? void 0 : D.title) && void 0 !== s ? s : _.default.Messages.NONE, ")") : null !== (l = null == D ? void 0 : D.description) && void 0 !== l ? l : "",
                    highlightColor: m ? u.HighlightColors.NONE : null == D ? void 0 : D.highlightColor,
                    action: (0, a.jsx)(r.Button, {
                        look: r.Button.Looks.LINK,
                        size: r.Button.Sizes.MIN,
                        color: r.Button.Colors.LINK,
                        children: _.default.Messages.CHANGE
                    }),
                    loading: O,
                    className: f,
                    children: N.map((e, t) => (0, a.jsx)(E.default, {
                        title: e.title,
                        description: e.description,
                        highlightColor: e.highlightColor,
                        className: i(T.groupCollapsedRow, A === e.value && T.selected),
                        selected: A === e.value,
                        action: A === e.value ? (0, a.jsx)(d.default, {
                            className: T.radioItem
                        }) : (0, a.jsx)(o.default, {
                            className: T.radioItem
                        }),
                        onClick: () => M(e),
                        disabled: e.disabled
                    }, "".concat(e.title, "-").concat(t)))
                })
            }
        },
        998728: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("797944"),
                o = s("893407");

            function d(e) {
                let {
                    title: t,
                    description: s,
                    action: n,
                    highlightColor: d = r.HighlightColors.NONE,
                    selected: u = !1,
                    subsection: c = null,
                    onClick: E,
                    className: _,
                    disabled: T
                } = e;
                return (0, a.jsxs)("div", {
                    className: l(o.container, _),
                    children: [(0, a.jsx)(i.Clickable, {
                        className: l(o.clickableContainer, {
                            [o.noAction]: null == E,
                            [o.disabled]: T
                        }, _),
                        onClick: T ? void 0 : E,
                        children: (0, a.jsxs)("div", {
                            className: l(o.backgroundModifierContainer, o[d], {
                                [o.selected]: u,
                                [o.disabled]: T,
                                [o.noAction]: null == E
                            }),
                            children: [(0, a.jsxs)("div", {
                                className: o.settingsDescriptionContainer,
                                children: [(0, a.jsx)(i.Text, {
                                    variant: "text-sm/medium",
                                    color: "interactive-active",
                                    children: t
                                }), (0, a.jsx)(i.Text, {
                                    variant: "text-sm/normal",
                                    color: "interactive-normal",
                                    className: o.description,
                                    children: s
                                })]
                            }), (0, a.jsx)("div", {
                                className: o.action,
                                children: n
                            })]
                        })
                    }), null != c && (0, a.jsx)("div", {
                        className: o.subsectionContainer,
                        children: c
                    })]
                })
            }
        },
        26991: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("283167"),
                i = s("868246"),
                r = s("954419"),
                o = s("945330"),
                d = s("53948"),
                u = s("983153"),
                c = e => {
                    let {
                        guild: t,
                        guildMetadata: s,
                        menuPlacement: c,
                        disabled: E
                    } = e, _ = e => {
                        let {
                            secondaryCategoryIds: a
                        } = s, n = e.map(e => e.value);
                        if (e.length < a.length) {
                            let e = a.filter(e => !n.includes(e));
                            e.forEach(e => (0, l.deleteGuildCategory)(t.id, e))
                        } else {
                            if (a.length >= d.MAX_SUBCATEGORIES) return;
                            let e = n.filter(e => !a.includes(e));
                            e.forEach(e => (0, l.addGuildCategory)(t.id, e))
                        }
                    }, T = e => {
                        (0, l.deleteGuildCategory)(t.id, e)
                    }, I = e => {
                        e.preventDefault(), e.stopPropagation()
                    }, S = i.default.getAllCategories().map(e => {
                        let {
                            categoryId: t,
                            name: s
                        } = e;
                        return {
                            value: t,
                            label: s
                        }
                    });
                    return (0, a.jsx)(r.default, {
                        value: s.secondaryCategoryIds,
                        searchable: !0,
                        clearable: !1,
                        options: S,
                        onChange: e => _(e),
                        multiValueRenderer: e => {
                            let {
                                label: t,
                                value: s
                            } = e;
                            return (0, a.jsxs)("span", {
                                className: u.subcategory,
                                onMouseDown: I,
                                children: [t, (0, a.jsx)(n.Clickable, {
                                    className: u.closeWrapper,
                                    onClick: () => T(s),
                                    children: (0, a.jsx)(o.default, {
                                        width: 16,
                                        height: 16,
                                        className: u.close
                                    })
                                })]
                            })
                        },
                        menuPlacement: c,
                        disabled: E,
                        isMulti: !0
                    })
                }
        },
        84190: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return R
                }
            }), s("222007"), s("808653");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("969176"),
                o = s.n(r),
                d = s("866227"),
                u = s.n(d),
                c = s("446674"),
                E = s("669491"),
                _ = s("77078"),
                T = s("75766"),
                I = s("923959"),
                S = s("381546"),
                N = s("423487"),
                f = s("701909"),
                g = s("299039"),
                A = s("592407"),
                L = s("49111"),
                m = s("782340"),
                C = s("497934");
            let O = e => {
                let {
                    name: t,
                    failingName: s,
                    description: n,
                    checked: l,
                    pending: i,
                    pendingDescription: r,
                    failingDescription: o
                } = e, d = t, u = null, c = null;
                return i ? (u = (0, a.jsx)(N.default, {
                    color: E.default.unsafe_rawColors.YELLOW_300.css,
                    width: 20,
                    height: 20
                }), c = null != r ? r : n) : l ? (u = (0, a.jsx)(_.Checkbox, {
                    readOnly: !0,
                    shape: _.Checkbox.Shapes.ROUND,
                    size: 20,
                    type: _.Checkbox.Types.INVERTED,
                    value: !0
                }), c = n) : (u = (0, a.jsx)(S.default, {
                    color: E.default.unsafe_rawColors.RED_400.css,
                    width: 20,
                    height: 20
                }), d = null != s ? s : t, c = null != o ? o : n), (0, a.jsxs)("div", {
                    className: C.checklistItem,
                    children: [(0, a.jsx)("div", {
                        className: C.checklistIcon,
                        children: u
                    }), (0, a.jsxs)("div", {
                        className: C.checklistText,
                        children: [(0, a.jsx)(_.Heading, {
                            variant: "heading-md/semibold",
                            children: d
                        }), (0, a.jsx)(_.Text, {
                            color: "text-muted",
                            variant: "text-sm/normal",
                            children: c
                        })]
                    })]
                })
            };

            function h(e, t) {
                return o(null == e ? void 0 : e.map(e => {
                    let [t, s] = e;
                    return null == t ? void 0 : t.id
                }), null == t ? void 0 : t.map(e => {
                    let [t, s] = e;
                    return null == t ? void 0 : t.id
                }))
            }
            var R = e => {
                let {
                    guild: t,
                    guildId: l,
                    className: r,
                    noHeader: o = !1,
                    failedItemsOnly: d = !1
                } = e, [E, S] = (0, c.useStateFromStoresArray)([T.default], () => [T.default.getDiscoveryChecklist(l), T.default.isLoading()], [l]), {
                    nsfwProperties: N
                } = null != E ? E : {}, R = null == t ? void 0 : t.hasFeature(L.GuildFeatures.PARTNERED), D = null == N ? void 0 : N.channels_banned_keywords, M = (0, c.useStateFromStores)([I.default], () => {
                    var e, s, a;
                    if (null == D) return [];
                    let n = null !== (s = (null !== (e = I.default.getChannels(t.id)) && void 0 !== e ? e : {})[I.GUILD_SELECTABLE_CHANNELS_KEY]) && void 0 !== s ? s : [],
                        l = null !== (a = null == n ? void 0 : n.map(e => e.channel).reduce((e, t) => ({
                            ...e,
                            [t.id]: t
                        }), {})) && void 0 !== a ? a : {};
                    return null == D ? [] : Object.entries(D).map(e => {
                        let [t, s] = e;
                        return [l[t], s]
                    })
                }, [t.id, D], h);
                if (S || null == E) return (0, a.jsxs)("div", {
                    className: i(C.container, C.loaderContainer, r),
                    children: [(0, a.jsx)(_.Heading, {
                        className: C.loadingText,
                        variant: "heading-md/semibold",
                        color: "header-secondary",
                        children: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_LOADING
                    }), (0, a.jsx)(_.Spinner, {
                        className: C.spinner
                    })]
                });
                let G = R ? m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_DESCRIPTION_FAILING_PARTNERS : m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_DESCRIPTION_FAIL,
                    x = [{
                        name: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE,
                        failingName: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_FAILING,
                        description: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_DESCRIPTION,
                        failingDescription: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_DESCRIPTION_FAILING_GUIDELINES.format({
                            termsURL: L.MarketingURLs.TERMS,
                            guidelinesURL: f.default.getArticleURL(L.HelpdeskArticles.PUBLIC_GUILD_GUILDLINES)
                        }),
                        checked: null == E ? void 0 : E.safeEnvironment
                    }, {
                        name: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE.format({
                            minMembers: E.minimumGuildSize
                        }),
                        failingName: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_FAIL.format({
                            minMembers: E.minimumGuildSize.toLocaleString()
                        }),
                        description: null,
                        failingDescription: G.format({
                            minMembers: E.minimumGuildSize.toLocaleString()
                        }),
                        checked: null == E ? void 0 : E.size
                    }, {
                        name: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE,
                        failingName: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_FAILING,
                        description: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_DESCRIPTION.format({
                            minimumGuildAge: Math.ceil(E.minimumGuildAge / 7)
                        }),
                        failingDescription: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_DESCRIPTION_FAILING.format({
                            minimumGuildAge: Math.ceil(E.minimumGuildAge / 7),
                            passDate: u(g.default.extractTimestamp(l)).add(E.minimumGuildAge, "days").format("LL")
                        }),
                        checked: null == E ? void 0 : E.age
                    }, {
                        name: (null == E ? void 0 : E.healthScorePending) ? m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_PENDING : m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY,
                        failingName: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_FAILING,
                        description: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION,
                        failingDescription: (0, a.jsxs)(a.Fragment, {
                            children: [(0, a.jsx)(_.Text, {
                                color: "text-muted",
                                className: C.healthFailingDescription,
                                variant: "text-sm/normal",
                                children: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_FAILING
                            }), (null == E ? void 0 : E.engagementHealthy) ? null : (0, a.jsx)(_.Text, {
                                color: "text-danger",
                                variant: "text-sm/normal",
                                children: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_ENGAGEMENT_FAILING
                            }), (null == E ? void 0 : E.retentionHealthy) ? null : (0, a.jsx)(_.Text, {
                                color: "text-danger",
                                variant: "text-sm/normal",
                                children: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_RETENTION_FAILING
                            }), (() => {
                                if (null == E || null == E.healthScore) return !1;
                                let {
                                    retentionHealthy: e,
                                    engagementHealthy: t,
                                    healthScore: s
                                } = E, {
                                    avg_nonnew_participators: a,
                                    avg_nonnew_communicators: n,
                                    perc_ret_w1_intentful: l
                                } = s;
                                return !e && null != l || !t && null != a && null != n
                            })() && (0, a.jsx)(_.Button, {
                                className: C.detailsButton,
                                look: _.Button.Looks.LINK,
                                size: _.Button.Sizes.NONE,
                                color: _.Button.Colors.LINK,
                                onClick: () => (0, _.openModalLazy)(async () => {
                                    let {
                                        default: e
                                    } = await s.el("127407").then(s.bind(s, "127407"));
                                    return t => (0, a.jsx)(e, {
                                        ...t,
                                        guildChecklist: E
                                    })
                                }),
                                children: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTH_VIEW_DETAILS
                            })]
                        }),
                        pendingDescription: (null == E ? void 0 : E.size) ? m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_PENDING.format({
                            checkBackHook: (e, t) => (0, a.jsx)("strong", {
                                className: C.healthPending,
                                children: e
                            }, t)
                        }) : m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_PENDING_SIZE.format({
                            minMembers: 200
                        }),
                        checked: null == E ? void 0 : E.healthy,
                        pending: null == E ? void 0 : E.healthScorePending
                    }, {
                        name: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW,
                        failingName: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW_FAILING,
                        description: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW_DESCRIPTION,
                        failingDescription: (0, a.jsxs)(a.Fragment, {
                            children: [(null == N ? void 0 : N.channels) != null ? (0, a.jsx)(_.Text, {
                                color: "text-muted",
                                variant: "text-sm/normal",
                                children: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_CHANNEL_NAMES_2.format({
                                    channelHook: (e, t) => (0, a.jsx)("span", {
                                        className: C.doesNot,
                                        children: e
                                    }, t)
                                })
                            }) : null, M.length > 0 ? (0, a.jsx)("div", {
                                className: C.indent,
                                children: M.map(e => {
                                    let [t, s] = e;
                                    return null != t ? (0, a.jsxs)(_.Text, {
                                        color: "text-muted",
                                        variant: "text-sm/normal",
                                        children: ["#", t.name, ": ", s.join(", ")]
                                    }, t.id) : null
                                })
                            }) : null, (null == N ? void 0 : N.name) != null ? (0, a.jsx)(_.Text, {
                                color: "text-muted",
                                variant: "text-sm/normal",
                                children: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_NAME.format({
                                    nameHook: (e, t) => (0, a.jsx)("span", {
                                        className: C.doesNot,
                                        children: e
                                    }, t)
                                })
                            }) : null, (null == N ? void 0 : N.description) != null ? (0, a.jsx)(_.Text, {
                                color: "text-muted",
                                variant: "text-sm/normal",
                                children: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_DESCRIPTION.format({
                                    descriptionHook: (e, t) => (0, a.jsx)("span", {
                                        className: C.doesNot,
                                        children: e
                                    }, t)
                                })
                            }) : null]
                        }),
                        checked: null == N || 0 === Object.keys(N).length
                    }, {
                        name: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA,
                        failingName: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_FAILING,
                        description: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_DESCRIPTION,
                        failingDescription: m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_DESCRIPTION_FAILING.format({
                            onClick: () => A.default.setSection(L.GuildSettingsSections.SAFETY, L.GuildSettingsSubsections.SAFETY_PERMISSIONS)
                        }),
                        checked: null == E ? void 0 : E.protected
                    }];
                return (0, a.jsxs)("div", {
                    className: i(C.container, r),
                    children: [(() => {
                        let e = m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_DOES_NOT_PASS,
                            t = (null == E ? void 0 : E.sufficient) ? s("624563") : s("487663"),
                            n = o ? null : (0, a.jsxs)("div", {
                                className: C.header,
                                children: [(0, a.jsx)("img", {
                                    alt: "",
                                    src: t,
                                    className: C.headerIcon,
                                    width: 40
                                }), (0, a.jsx)(_.Heading, {
                                    variant: "heading-md/semibold",
                                    children: (null == E ? void 0 : E.sufficient) ? m.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_GOOD_STANDING : e.format({
                                        doesNotHook: (e, t) => (0, a.jsx)("strong", {
                                            className: C.doesNot,
                                            children: e
                                        }, t)
                                    })
                                })]
                            });
                        return n
                    })(), x.filter(e => !d || null == e.checked || !e.checked).map((e, t) => (0, a.jsxs)(n.Fragment, {
                        children: [(0, a.jsx)(O, {
                            ...e
                        }), t < x.length - 1 ? (0, a.jsx)("hr", {
                            className: C.separator
                        }) : null]
                    }, e.name))]
                })
            }
        },
        796178: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("84190"),
                i = s("782340"),
                r = s("469735"),
                o = e => {
                    let {
                        guild: t
                    } = e;
                    return (0, a.jsxs)(n.FormSection, {
                        title: i.default.Messages.DISCOVERY,
                        tag: "h2",
                        children: [(0, a.jsx)("div", {
                            className: r.background
                        }), (0, a.jsxs)("div", {
                            className: r.discoverySettings,
                            children: [(0, a.jsx)("div", {
                                className: r.image
                            }), (0, a.jsx)(n.Heading, {
                                className: r.header,
                                variant: "heading-xl/semibold",
                                children: i.default.Messages.GUILD_SETTINGS_DISCOVERY_DISQUALIFIED
                            }), (0, a.jsx)(n.Text, {
                                className: r.description,
                                variant: "text-md/normal",
                                children: i.default.Messages.GUILD_SETTINGS_DISCOVERY_DISQUALIFIED_DESCRIPTION.format()
                            }), (0, a.jsx)(l.default, {
                                className: r.checklist,
                                guild: t,
                                guildId: t.id,
                                noHeader: !0,
                                failedItemsOnly: !0
                            })]
                        })]
                    })
                }
        },
        237938: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return O
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("917351"),
                i = s.n(l),
                r = s("775560"),
                o = s("446674"),
                d = s("77078"),
                u = s("75766"),
                c = s("758276"),
                E = s("132664"),
                _ = s("213307"),
                T = s("324105"),
                I = s("149632"),
                S = s("525065"),
                N = s("84190"),
                f = s("49111"),
                g = s("782340"),
                A = s("667395"),
                L = s("319765");
            let m = ["322850917248663552", "172018499005317120", "414234792121597953", "228406572756369408"],
                C = ["620723483965653003", "662246299369734154", "181970867549503489", "102860784329052160"];
            var O = e => {
                let {
                    guild: t,
                    onEnableDiscovery: s,
                    isGuildAdmin: l
                } = e, [O, h] = (0, r.useStableMemo)(() => [i.sample(m), i.sample(C)], []);
                n.useEffect(() => {
                    E.fetchDiscoverableGuilds([O, h])
                }, [O, h]);
                let [R, D] = (0, o.useStateFromStoresArray)([_.default], () => [_.default.getGuild(O), _.default.getGuild(h)], [O, h]), {
                    canEnableDiscovery: M,
                    isPendingSuccess: G
                } = (0, o.useStateFromStoresObject)([u.default], () => ({
                    canEnableDiscovery: u.default.passesChecklist(t.id),
                    isPendingSuccess: u.default.isPendingSuccess(t.id)
                }), [t.id]), [x, p] = (0, o.useStateFromStoresArray)([S.default], () => [null, S.default.getMemberCount(t.id)], [t.id]), U = n.useCallback(() => {
                    null != s && s()
                }, [s]), v = null;
                return l ? G ? v = g.default.Messages.GUILD_SETTINGS_DISCOVERY_PENDING_HEALTHY : !M && (v = g.default.Messages.GUILD_SETTINGS_DISCOVERY_REQUIREMENTS_NOT_MET) : v = g.default.Messages.GUILD_SETTINGS_DISCOVERY_ADMIN_ONLY, (0, a.jsxs)("div", {
                    className: A.container,
                    children: [(0, a.jsx)("img", {
                        alt: "",
                        src: L,
                        className: A.sparkles
                    }), (0, a.jsxs)("div", {
                        className: A.discoverPreview,
                        children: [(0, a.jsx)(T.default, {
                            className: A.placeholderCard,
                            disabled: !0,
                            small: !0,
                            loading: null == R,
                            guild: R
                        }), (0, a.jsx)(T.default, {
                            className: A.previewCard,
                            guild: t,
                            description: g.default.Messages.GUILD_SETTINGS_DISCOVERY_PREVIEW_DESCRIPTION,
                            presenceCount: x,
                            memberCount: p
                        }), (0, a.jsx)(T.default, {
                            className: A.placeholderCard,
                            disabled: !0,
                            small: !0,
                            loading: null == D,
                            guild: D
                        })]
                    }), (0, a.jsx)(d.Heading, {
                        className: A.header,
                        variant: "heading-xl/semibold",
                        children: g.default.Messages.GUILD_SETTINGS_DISCOVERY_HEADER
                    }), (0, a.jsx)(d.Text, {
                        variant: "text-md/normal",
                        className: A.valueProp,
                        color: "header-secondary",
                        children: g.default.Messages.GUILD_SETTINGS_DISCOVERY_PAGE_DESCRIPTION.format({
                            onLinkClick: () => (0, I.navigateToAndTrackHelpCenterClick)({
                                articleId: f.HelpdeskArticles.SERVER_DISCOVERY,
                                guildId: t.id,
                                pageView: c.DiscoverySettingsViews.INTRO
                            })
                        })
                    }), (0, a.jsx)(d.Text, {
                        variant: "text-md/normal",
                        className: A.byline,
                        color: "header-secondary",
                        children: g.default.Messages.GUILD_SETTINGS_DISCOVERY_PAGE_DESCRIPTION_SUBHEADING.format({
                            onGuidelinesClick: () => (0, I.navigateToAndTrackHelpCenterClick)({
                                articleId: f.HelpdeskArticles.SERVER_DISCOVERY_GUIDELINES,
                                guildId: t.id,
                                pageView: c.DiscoverySettingsViews.INTRO
                            })
                        })
                    }), (0, a.jsx)(d.Tooltip, {
                        text: v,
                        children: e => (0, a.jsx)(d.Button, {
                            ...e,
                            className: A.enableButton,
                            color: d.Button.Colors.BRAND,
                            size: d.Button.Sizes.LARGE,
                            disabled: !M || !l,
                            onClick: U,
                            children: g.default.Messages.GUILD_SETTINGS_SET_UP_DISCOVERY
                        })
                    }), (0, a.jsx)(N.default, {
                        className: A.checklist,
                        guild: t,
                        guildId: t.id
                    })]
                })
            }
        },
        744421: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return g
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("77078"),
                d = s("430568"),
                u = s("283167"),
                c = s("86678"),
                E = s("882641"),
                _ = s("381546"),
                T = s("900938"),
                I = s("958706"),
                S = s("782340"),
                N = s("311352");
            let f = e => {
                var t;
                let {
                    reason: s = "",
                    emoji_name: l,
                    onSetReason: u,
                    onSelectEmoji: S,
                    onClearPressed: f,
                    reasonMinLength: g,
                    reasonMaxLength: A,
                    placeholder: L,
                    position: m
                } = e, [C, O] = n.useState(!1), h = (0, r.useStateFromStores)([T.default], () => T.default.isGuildMetadataLoaded());
                return (0, a.jsxs)("div", {
                    className: i(N.reasonContainer),
                    children: [(0, a.jsx)(o.Popout, {
                        onRequestClose: () => {
                            O(!1)
                        },
                        shouldShow: C,
                        position: "right",
                        align: "top",
                        animation: o.Popout.Animation.NONE,
                        renderPopout: e => {
                            let {
                                closePopout: t
                            } = e;
                            return (0, a.jsx)(c.default, {
                                pickerIntention: I.EmojiIntention.COMMUNITY_CONTENT,
                                closePopout: t,
                                onSelectEmoji: (e, s) => {
                                    null != e && S(e), s && t()
                                }
                            })
                        },
                        children: () => (0, a.jsx)("div", {
                            className: N.background,
                            children: (0, a.jsx)(E.default, {
                                active: !1,
                                onClick: () => {
                                    O(!0)
                                },
                                tabIndex: 0,
                                renderButtonContents: null != l ? () => (0, a.jsx)(d.default, {
                                    emojiName: l,
                                    animated: !1
                                }) : null
                            })
                        })
                    }), (0, a.jsxs)("div", {
                        className: N.inputContainer,
                        children: [(0, a.jsx)(o.TextInput, {
                            inputClassName: N.reason,
                            placeholder: L,
                            value: s,
                            minLength: g,
                            maxLength: A,
                            onChange: e => {
                                u(e)
                            },
                            defaultDirty: (null == s ? void 0 : s.length) > 0
                        }, "text-input-".concat(m, "-").concat(h)), (null !== (t = null == s ? void 0 : s.length) && void 0 !== t ? t : 0) > 0 || null != l ? (0, a.jsx)(o.Button, {
                            className: N.clearStatusButton,
                            onClick: f,
                            look: o.Button.Looks.BLANK,
                            size: o.Button.Sizes.NONE,
                            tabIndex: -1,
                            "aria-hidden": !0,
                            children: (0, a.jsx)(_.default, {
                                className: N.clearStatusIcon
                            })
                        }) : null]
                    })]
                })
            };
            var g = e => {
                let {
                    reasonMinLength: t,
                    reasonMaxLength: s,
                    guildId: n,
                    reasons: l
                } = e, i = [S.default.Messages.DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_ONE, S.default.Messages.DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_TWO, S.default.Messages.DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_THREE, S.default.Messages.DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_FOUR], r = [];
                for (let e = 0; e < 4; e++) r.push((0, a.jsx)(f, {
                    position: e,
                    placeholder: i[e],
                    ...l[e],
                    onSetReason: t => {
                        let s = [...l],
                            a = Object.assign({}, l[e], {
                                reason: t
                            });
                        s[e] = a, (0, u.updateGuildDiscoveryMetadataReasonsToJoin)(n, s)
                    },
                    onSelectEmoji: t => {
                        let s = [...l],
                            a = Object.assign({}, l[e], {
                                emoji_name: t.optionallyDiverseSequence
                            });
                        s[e] = a, (0, u.updateGuildDiscoveryMetadataReasonsToJoin)(n, s)
                    },
                    onClearPressed: () => {
                        let t = [...l],
                            s = {
                                reason: "",
                                emoji_name: null
                            };
                        t[e] = s, (0, u.updateGuildDiscoveryMetadataReasonsToJoin)(n, t)
                    },
                    reasonMinLength: t,
                    reasonMaxLength: s
                }, "reasonListItem-" + e));
                return (0, a.jsx)("div", {
                    children: r
                })
            }
        },
        826485: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("345988"),
                i = s("427459"),
                r = s("49111"),
                o = s("646718"),
                d = s("782340"),
                u = s("849877");

            function c(e) {
                let {
                    guild: t,
                    numSounds: s,
                    isOutOfSlots: c
                } = e, E = t.premiumTier, _ = (0, i.getNextTier)(E, t.id), T = o.TotalSoundboardSoundCountsByTier[E] - 2;
                if (null == _ || E === r.BoostedGuildTiers.TIER_3 || s < T) return null;
                let I = c ? {
                    color: n.ButtonColors.GREEN,
                    look: n.ButtonLooks.FILLED,
                    text: d.default.Messages.GUILD_SETTINGS_SOUNDBOARD_CTA
                } : void 0;
                return (0, a.jsx)(l.default, {
                    header: d.default.Messages.PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_HEADER,
                    text: d.default.Messages.GUILD_SETTINGS_SOUNDBOARD_UPSELL_BANNER_TEXT.format({
                        level: _,
                        numAdditional: (0, i.getIncrementalSoundboardSoundCountForTier)(_)
                    }),
                    headerColor: "header-primary",
                    textColor: "text-normal",
                    buttonProps: I,
                    guild: t,
                    analyticsLocation: {
                        page: r.AnalyticsPages.GUILD_SETTINGS,
                        section: r.AnalyticsSections.GUILD_SETTINGS_SOUNDBOARD,
                        object: r.AnalyticsObjects.BOOST_UPSELL_BANNER_SLOTS_FULL,
                        objectType: (0, i.boostedGuildTierToAnalyticsObjectType)(_)
                    },
                    className: u.container
                })
            }
        },
        658329: function(e, t, s) {
            "use strict";

            function a() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                    t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
                    s = window.GLOBAL_ENV.GUILD_TEMPLATE_HOST;
                return "".concat(t ? "".concat(location.protocol) : "", "//").concat(s).concat("/".concat(e))
            }
            s.r(t), s.d(t, {
                default: function() {
                    return a
                }
            })
        },
        8731: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                cropGIF: function() {
                    return i
                },
                cropStaticImage: function() {
                    return r
                },
                getBoundedCoordinates: function() {
                    return o
                },
                adjustImageDimensionsForAspectRatio: function() {
                    return u
                },
                calculateDragBoundaries: function() {
                    return c
                },
                calculateOverlaySize: function() {
                    return E
                },
                downsizeImage: function() {
                    return _
                }
            }), s("511434"), s("313619"), s("654714"), s("287168"), s("956660"), s("222007"), s("70102"), s("311790"), s("477657"), s("811875"), s("90301"), s("652153"), s("28797"), s("817884"), s("597349"), s("667536"), s("690341");
            var a = s("917351"),
                n = s("75015");

            function l(e, t, s, a) {
                let n = e.naturalWidth / e.width,
                    l = t.width / 2,
                    i = t.height / 2,
                    r = (e.width / 2 - l - s.x) * n,
                    o = (e.height / 2 - i - s.y) * n,
                    d = t.width * n,
                    u = t.height * n,
                    c = Math.min(d, a.width),
                    E = Math.min(u, a.height);
                return {
                    x: r,
                    y: o,
                    scaledCropWidth: d,
                    scaledCropHeight: u,
                    canvasWidth: c,
                    canvasHeight: E
                }
            }
            async function i(e, t, a, i, r) {
                let {
                    x: o,
                    y: d,
                    scaledCropWidth: u,
                    scaledCropHeight: c
                } = l(t, a, i, r), E = await e.arrayBuffer(), _ = new Worker(new URL(s.p + s.u("39703"), s.b)), T = new Promise((e, t) => {
                    _.onmessage = s => {
                        let {
                            data: a
                        } = s;
                        if (a.type === n.MessageTypes.CROP_GIF_COMPLETE) {
                            var l;
                            e((l = new Blob([a.result]), new Promise(e => {
                                let t = new FileReader;
                                t.onload = t => {
                                    var s;
                                    let a = null === (s = t.target) || void 0 === s ? void 0 : s.result;
                                    "string" == typeof a ? e(a) : e("")
                                }, t.readAsDataURL(l)
                            }))), _.terminate()
                        } else a.type === n.MessageTypes.CROP_GIF_ERROR && (t(Error("Error cropping GIF")), _.terminate())
                    }
                });
                return _.postMessage({
                    type: n.MessageTypes.CROP_GIF_START,
                    gif: new Uint8Array(E),
                    x: 0 | o,
                    y: 0 | d,
                    width: 0 | u,
                    height: 0 | c
                }), {
                    result: T,
                    cancelFn: () => _.terminate()
                }
            }

            function r(e, t, s, a) {
                let {
                    x: n,
                    y: i,
                    scaledCropWidth: r,
                    scaledCropHeight: o,
                    canvasWidth: d,
                    canvasHeight: u
                } = l(e, t, s, a), c = document.createElement("canvas");
                c.width = d, c.height = u;
                let E = c.getContext("2d");
                return null != E && E.drawImage(e, n, i, r, o, 0, 0, c.width, c.height), c.toDataURL("image/png")
            }

            function o(e, t, s) {
                return {
                    x: (0, a.clamp)(e, s.left, s.right),
                    y: (0, a.clamp)(t, s.bottom, s.top)
                }
            }

            function d(e, t, s, a) {
                let l = s,
                    i = a;
                s > n.EDITING_CONTAINER_WIDTH && (l = n.EDITING_CONTAINER_WIDTH, i = a * (n.EDITING_CONTAINER_WIDTH / s));
                if (s / a < e) return {
                    width: l,
                    height: i
                };
                let r = t / i,
                    o = l * r;
                return {
                    width: o,
                    height: t
                }
            }

            function u(e, t, s) {
                switch (e) {
                    case n.UploadTypes.AVATAR:
                    case n.UploadTypes.AVATAR_DECORATION:
                        return {
                            width: t, height: s
                        };
                    case n.UploadTypes.BANNER:
                        return d(n.BANNER_ASPECT_RATIO, n.MAX_BANNER_OVERLAY_HEIGHT, t, s);
                    case n.UploadTypes.GUILD_BANNER:
                        return d(n.GUILD_BANNER_ASPECT_RATIO, n.MAX_GUILD_BANNER_OVERLAY_HEIGHT, t, s);
                    case n.UploadTypes.VIDEO_BACKGROUND:
                        return d(n.VIDEO_BACKGROUND_ASPECT_RATIO, n.MAX_VIDEO_OVERLAY_HEIGHT, t, s);
                    case n.UploadTypes.SCHEDULED_EVENT_IMAGE:
                        return d(n.SCHEDULED_EVENT_IMAGE_ASPECT_RATIO, n.MAX_SCHEDULED_EVENT_IMAGE_OVERLAY_HEIGHT, t, s);
                    case n.UploadTypes.HOME_HEADER:
                        return d(n.HOME_HEADER_ASPECT_RATIO, n.MAX_HOME_HEADER_OVERLAY_HEIGHT, t, s)
                }
            }

            function c(e, t, s) {
                let a = {
                        top: 0,
                        bottom: 0,
                        left: 0,
                        right: 0
                    },
                    n = e - s.width,
                    l = t - s.height;
                return 0 !== n && (a.left = -Math.abs(n / 2), a.right = n / 2), 0 !== l && (a.bottom = -Math.abs(l / 2), a.top = l / 2), a
            }

            function E(e, t, s, a) {
                switch (e) {
                    case n.UploadTypes.AVATAR:
                    case n.UploadTypes.AVATAR_DECORATION:
                        let l = Math.min(t, s);
                        return {
                            width: l, height: l
                        };
                    case n.UploadTypes.BANNER:
                        let i = Math.min(t, n.EDITING_CONTAINER_WIDTH);
                        return {
                            width: i, height: i * (1 / n.BANNER_ASPECT_RATIO)
                        };
                    case n.UploadTypes.GUILD_BANNER:
                        let r = Math.min(t, n.EDITING_CONTAINER_WIDTH);
                        return {
                            width: r, height: Math.min(r * (9 / 16), a)
                        };
                    case n.UploadTypes.VIDEO_BACKGROUND:
                        let o = Math.min(t, n.EDITING_CONTAINER_WIDTH);
                        return {
                            width: o, height: o * (9 / 16)
                        };
                    case n.UploadTypes.SCHEDULED_EVENT_IMAGE:
                        let d = Math.min(t, n.EDITING_CONTAINER_WIDTH);
                        return {
                            width: d, height: .4 * d
                        };
                    case n.UploadTypes.HOME_HEADER:
                        let u = Math.min(t, n.EDITING_CONTAINER_WIDTH);
                        return {
                            width: u, height: u * (1 / n.HOME_HEADER_ASPECT_RATIO)
                        }
                }
            }

            function _(e, t, s) {
                let a = e.naturalWidth / e.naturalHeight,
                    n = t,
                    l = s;
                e.naturalWidth > e.naturalHeight ? n /= a : l *= a;
                let i = {
                    height: n,
                    width: l
                };
                return r(e, {
                    width: e.width,
                    height: e.height
                }, {
                    x: 0,
                    y: 0
                }, i)
            }
        },
        424960: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            });
            var a = s("336522"),
                n = s("254490"),
                l = s("782340");

            function i(e) {
                (0, a.openUploadError)({
                    title: l.default.Messages.UPLOAD_AREA_TOO_LARGE_TITLE,
                    help: l.default.Messages.UPLOAD_AREA_TOO_LARGE_HELP.format({
                        maxSize: (0, n.sizeString)(e)
                    })
                })
            }
        },
        656913: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return S
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("819855"),
                r = s("841098"),
                o = s("449918"),
                d = s("832132"),
                u = s("818643"),
                c = s("608684"),
                E = s("49111"),
                _ = s("575282");
            let T = E.Color.PRIMARY_400,
                I = E.Color.PRIMARY_500;

            function S(e) {
                let {
                    enabled: t,
                    imageClassName: s,
                    iconWrapperClassName: n,
                    ...E
                } = e, S = (0, r.default)(), N = (0, i.isThemeDark)(S) ? T : I, f = {
                    height: 18,
                    width: 18,
                    color: (0, o.getColor)(N)
                };
                return (0, a.jsx)(c.default, {
                    className: l({
                        [_.avatarUploader]: t,
                        [_.avatarUploaderDisabled]: !t
                    }),
                    imageClassName: l(s, _.avatarUploaderInnerSquare, {
                        [_.avatarUploaderInnerSquareDisabled]: !t
                    }),
                    icon: null != E.image && "" !== E.image ? (0, a.jsx)(d.default, {
                        ...f
                    }) : (0, a.jsx)(u.default, {
                        ...f
                    }),
                    iconClassName: l(_.avatarUploadIcon, _.hideDefaultIcon),
                    iconWrapperClassName: n,
                    showIcon: !0,
                    showIconDisabled: !0,
                    hideSize: !0,
                    ...E
                })
            }
        },
        166382: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                ImageInputUploadErrors: function() {
                    return n
                },
                default: function() {
                    return S
                }
            });
            var a, n, l = s("37983");
            s("884691");
            var i = s("669491"),
                r = s("77078"),
                o = s("447353"),
                d = s("40119"),
                u = s("266926"),
                c = s("235692"),
                E = s("444456"),
                _ = s("423487"),
                T = s("782340"),
                I = s("535978");
            (a = n || (n = {}))[a.TOO_BIG = 0] = "TOO_BIG", a[a.RATE_LIMIT = 1] = "RATE_LIMIT", a[a.TOO_MANY_EMOJI = 2] = "TOO_MANY_EMOJI", a[a.TOO_MANY_ANIMATED_EMOJI = 3] = "TOO_MANY_ANIMATED_EMOJI", a[a.WRONG_TYPE = 4] = "WRONG_TYPE", a[a.RESIZE_GIF = 5] = "RESIZE_GIF";
            var S = e => {
                let {
                    error: t
                } = e, {
                    type: s,
                    filename: a
                } = t, n = {
                    0: {
                        icon: o.default,
                        description: T.default.Messages.UPLOAD_ERROR_TOO_LARGE,
                        color: i.default.unsafe_rawColors.RED_400.css,
                        tooltip: T.default.Messages.UPLOAD_ERROR_TITLE
                    },
                    4: {
                        icon: d.default,
                        description: T.default.Messages.UPLOAD_ERROR_WRONG_TYPE,
                        color: i.default.unsafe_rawColors.RED_400.css,
                        tooltip: T.default.Messages.UPLOAD_ERROR_TITLE
                    },
                    5: {
                        icon: c.default,
                        description: T.default.Messages.UPLOAD_ERROR_RESIZE_GIF,
                        color: i.default.unsafe_rawColors.RED_400.css,
                        tooltip: T.default.Messages.UPLOAD_ERROR_TITLE
                    },
                    1: {
                        icon: E.default,
                        description: T.default.Messages.UPLOAD_ERROR_RATE_LIMIT,
                        color: i.default.unsafe_rawColors.ORANGE_345.css,
                        tooltip: T.default.Messages.UPLOAD_ERROR_RETRY
                    },
                    2: {
                        icon: u.default,
                        description: T.default.Messages.UPLOAD_ERROR_TOO_MANY_EMOJI,
                        color: i.default.unsafe_rawColors.RED_400.css,
                        tooltip: T.default.Messages.UPLOAD_ERROR_TITLE
                    },
                    3: {
                        icon: u.default,
                        description: T.default.Messages.UPLOAD_ERROR_TOO_MANY_ANIMATED_EMOJI,
                        color: i.default.unsafe_rawColors.RED_400.css,
                        tooltip: T.default.Messages.UPLOAD_ERROR_TITLE
                    }
                }, {
                    icon: S,
                    description: N,
                    color: f,
                    tooltip: g
                } = n[s];
                return (0, l.jsxs)("div", {
                    className: I.emojiErrorItem,
                    children: [(0, l.jsx)(S, {
                        className: I.fileIcon,
                        color: i.default.unsafe_rawColors.PRIMARY_300.css
                    }), (0, l.jsxs)(r.FormSection, {
                        className: I.fileInfo,
                        children: [(0, l.jsx)(r.FormTitle, {
                            className: I.fileName,
                            children: a
                        }), (0, l.jsx)(r.FormText, {
                            type: r.FormTextTypes.DESCRIPTION,
                            children: N
                        })]
                    }), (0, l.jsx)(r.TooltipContainer, {
                        position: "right",
                        text: g,
                        children: (0, l.jsx)(_.default, {
                            color: f
                        })
                    })]
                })
            }
        },
        426733: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                processImages: function() {
                    return c
                },
                default: function() {
                    return _
                }
            }), s("70102"), s("424973"), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("77078"),
                i = s("371642"),
                r = s("694187"),
                o = s("166382"),
                d = s("991207");
            async function u(e) {
                try {
                    var t;
                    let s = await (t = e, new Promise((e, s) => {
                            if (null != t) {
                                let a = new FileReader;
                                a.onload = t => {
                                    var a;
                                    "string" == typeof(null === (a = t.target) || void 0 === a ? void 0 : a.result) ? e(t.target.result): s(Error("Failed to read file"))
                                }, a.readAsDataURL(t)
                            }
                        })),
                        a = new Image;
                    return a.src = s, await a.decode(), {
                        image: a,
                        dataURI: s
                    }
                } catch {
                    throw o.ImageInputUploadErrors.WRONG_TYPE
                }
            }
            async function c(e, t) {
                let s = [];
                for (let a = 0; a < e.length; a++) {
                    let n = e[a];
                    try {
                        let {
                            image: e,
                            dataURI: a
                        } = await u(n), l = n.type === d.FileTypes.MP4 ? await t(a, n) : await t(a, n, e);
                        null != l && s.push({
                            type: l,
                            filename: n.name
                        })
                    } catch (e) {
                        s.push({
                            type: e,
                            filename: n.name
                        })
                    }
                }
                s.length > 0 && E(s)
            }
            let E = e => {
                (0, l.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await s.el("299052").then(s.bind(s, "299052"));
                    return s => (0, a.jsx)(t, {
                        errors: e,
                        ...s
                    })
                })
            };
            var _ = e => {
                let {
                    onChange: t,
                    multiple: o = !0,
                    disabled: d,
                    className: u,
                    tabIndex: E = -1,
                    "aria-label": _,
                    filters: T,
                    setLoading: I
                } = e, S = n.createRef(), N = n.useRef(null), [f, g] = n.useState(!1);
                n.useEffect(() => {
                    f && A()
                }, [f]);
                let A = () => {
                        null !== N.current && ((0, l.closeModal)(N.current), N.current = null)
                    },
                    L = async e => {
                        null == I || I(!0), await c(e, t), g(!0), null == I || I(!1)
                    }, m = async e => {
                        var t, n, i;
                        if (e.stopPropagation(), e.preventDefault(), (null === (t = e.currentTarget) || void 0 === t ? void 0 : t.files) == null || (null === (i = e.currentTarget) || void 0 === i ? void 0 : null === (n = i.files) || void 0 === n ? void 0 : n.length) === 0) return;
                        let r = e.currentTarget.files;
                        N.current = await (0, l.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("7476").then(s.bind(s, "7476"));
                            return t => (0, a.jsx)(e, {
                                processFiles: () => L(r),
                                ...t
                            })
                        })
                    };
                return (0, a.jsx)(i.default, {
                    onChange: m,
                    filters: null != T ? T : (0, r.getFilters)(),
                    multiple: o,
                    disabled: d,
                    className: u,
                    tabIndex: E,
                    "aria-label": _,
                    ref: S
                })
            }
        },
        330893: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                },
                openInventoryDisablePublishEmojiModal: function() {
                    return u
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("577776"),
                i = s("77078"),
                r = s("782340"),
                o = s("687387");

            function d(e) {
                let {
                    collectedCount: t,
                    transitionState: s,
                    onClose: d,
                    onConfirm: u
                } = e, c = n.useId();
                return (0, a.jsxs)(i.ModalRoot, {
                    transitionState: s,
                    "aria-labelledby": c,
                    children: [(0, a.jsxs)(i.ModalHeader, {
                        separator: !1,
                        className: o.header,
                        children: [(0, a.jsx)(l.Text, {
                            id: c,
                            variant: "text-md/semibold",
                            children: r.default.Messages.INVENTORY_DISABLE_SETTING_TITLE_V2
                        }), (0, a.jsx)(i.ModalCloseButton, {
                            className: o.closeButton,
                            onClick: d
                        })]
                    }), (0, a.jsx)(i.ModalContent, {
                        children: (0, a.jsx)(l.Text, {
                            className: o.description,
                            variant: "text-sm/medium",
                            children: r.default.Messages.INVENTORY_DISABLE_SETTING_DESCRIPTION.format({
                                collectedCount: t
                            })
                        })
                    }), (0, a.jsx)(i.ModalFooter, {
                        children: (0, a.jsxs)("div", {
                            className: o.buttons,
                            children: [(0, a.jsx)(i.Button, {
                                color: i.Button.Colors.PRIMARY,
                                look: i.Button.Looks.LINK,
                                onClick: d,
                                children: r.default.Messages.CANCEL
                            }), (0, a.jsx)(i.Button, {
                                color: i.Button.Colors.RED,
                                onClick: function() {
                                    u(), d()
                                },
                                children: r.default.Messages.CONFIRM
                            })]
                        })
                    })]
                })
            }

            function u(e) {
                let {
                    collectedCount: t,
                    onConfirm: n
                } = e;
                (0, i.openModalLazy)(async () => {
                    let {
                        default: e
                    } = await s.el("330893").then(s.bind(s, "330893"));
                    return s => (0, a.jsx)(e, {
                        ...s,
                        onConfirm: n,
                        collectedCount: t
                    })
                })
            }
        },
        672630: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return i
                }
            }), s("70102");
            var a = s("748820"),
                n = s("872717"),
                l = s("49111"),
                i = {
                    generateNonce: function() {
                        return (0, a.v4)()
                    },
                    createHandoffToken: async function e(e) {
                        let {
                            body: {
                                handoff_token: t
                            }
                        } = await n.default.post({
                            url: l.Endpoints.HANDOFF,
                            body: {
                                key: e
                            },
                            oldFormErrors: !0,
                            retries: 1
                        });
                        if (null != t) return t;
                        throw Error("Missing handoff token!")
                    }
                }
        },
        988724: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                fetchTopReadChannels: function() {
                    return i
                }
            });
            var a = s("872717"),
                n = s("913144"),
                l = s("49111");

            function i(e) {
                return a.default.get({
                    url: l.Endpoints.GUILD_TOP_READ_CHANNELS(e),
                    oldFormErrors: !0
                }).then(t => {
                    let {
                        body: s
                    } = t;
                    n.default.dispatch({
                        type: "GUILD_TOP_READ_CHANNELS_FETCH_SUCCESS",
                        guildId: e,
                        topChannelIds: s
                    })
                })
            }
        },
        161188: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("446674"),
                n = s("913144");
            let l = {};
            class i extends a.default.Store {
                hasFetched(e) {
                    return null != l[e]
                }
                getTopChannelIds(e) {
                    return "874345844743213126" === e ? ["1041887225819955252", "985996080107892776", "1035280727610241166"] : l[e]
                }
            }
            var r = new i(n.default, {
                GUILD_TOP_READ_CHANNELS_FETCH_SUCCESS: function(e) {
                    let {
                        guildId: t,
                        topChannelIds: s
                    } = e;
                    l[t] = s
                }
            })
        },
        167627: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getPaymentPayoutGroups: function() {
                    return l
                }
            });
            var a = s("872717"),
                n = s("49111");
            let l = async (e, t) => {
                let s = await a.default.get({
                    url: n.Endpoints.PAYMENT_PAYOUT_GROUPS(e),
                    query: t
                });
                return s.body
            }
        },
        397056: function(e, t, s) {
            "use strict";
            var a, n, l, i, r, o, d, u;
            s.r(t), s.d(t, {
                PaymentPayoutGroupStatuses: function() {
                    return a
                },
                PaymentPayoutGroupTypes: function() {
                    return n
                },
                PayoutStatuses: function() {
                    return l
                },
                PaymentPayoutGroupDeferralReasons: function() {
                    return i
                }
            }), (r = a || (a = {}))[r.OPEN = 1] = "OPEN", r[r.PAYOUT_CREATED = 2] = "PAYOUT_CREATED", r[r.CANCELED = 3] = "CANCELED", r[r.PAYOUT_DEFERRED = 4] = "PAYOUT_DEFERRED", (o = n || (n = {})).MARKETPLACE = "marketplace", o.STAGE_EVENT_SKU = "stage_event_sku", o.SERVER_ROLE_SUBSCRIPTION = "server_role_subscription", o.GUILD_PRODUCT = "guild_product", (d = l || (l = {}))[d.OPEN = 1] = "OPEN", d[d.PAID = 2] = "PAID", d[d.PENDING = 3] = "PENDING", d[d.MANUAL = 4] = "MANUAL", d[d.CANCELED = 5] = "CANCELED", d[d.DEFERRED = 6] = "DEFERRED", d[d.DEFERRED_INTERNAL = 7] = "DEFERRED_INTERNAL", d[d.PROCESSING = 8] = "PROCESSING", d[d.ERROR = 9] = "ERROR", d[d.REJECTED = 10] = "REJECTED", d[d.RISK_REVIEW = 11] = "RISK_REVIEW", d[d.SUBMITTED = 12] = "SUBMITTED", d[d.PENDING_FUNDS = 13] = "PENDING_FUNDS", (u = i || (i = {}))[u.MINIMUM_NOT_REACHED = 1] = "MINIMUM_NOT_REACHED", u[u.BILLING_PROFILE_INACTIVE = 2] = "BILLING_PROFILE_INACTIVE", u[u.PAYOUT_FAILED = 3] = "PAYOUT_FAILED", u[u.APPLICATION_NOT_APPROVED = 4] = "APPLICATION_NOT_APPROVED", u[u.PAYOUT_SEIZED = 5] = "PAYOUT_SEIZED"
        },
        45395: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = {
                    open() {
                        (0, n.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("79536").then(s.bind(s, "79536"));
                            return t => (0, a.jsx)(e, {
                                ...t
                            })
                        })
                    }
                }
        },
        169105: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                useHasFreeStickerSlotsDesignUpdatesExperiment: function() {
                    return l
                }
            });
            var a = s("862205");
            let n = (0, a.createExperiment)({
                    kind: "guild",
                    id: "2022-06_free_sticker_slots_design_updates",
                    label: "Free Sticker Slots Design Updates",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Enabled",
                        config: {
                            enabled: !0
                        }
                    }]
                }),
                l = e => n.useExperiment({
                    guildId: e,
                    location: "53f8ff_1"
                }, {
                    autoTrackExposure: !0
                }).enabled
        },
        566171: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return M
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("917351"),
                o = s.n(r),
                d = s("446674"),
                u = s("769846"),
                c = s("77078"),
                E = s("583367"),
                _ = s("145079"),
                T = s("900938"),
                I = s("735201"),
                S = s("26989"),
                N = s("697218"),
                f = s("773309"),
                g = s("533403"),
                A = s("427459"),
                L = s("159885"),
                m = s("49111"),
                C = s("782340"),
                O = s("765565");
            let h = (0, L.cssValueToNumber)(u.default.GUILD_SETTINGS_PREMIUM_TIER_STATUS_PROGRESS_WITH_SUBSCRIPTIONS_MARGIN_TOP);
            class R extends n.Component {
                componentDidMount() {
                    this.measure();
                    let {
                        guildId: e
                    } = this.props;
                    null != e && (0, E.fetchAppliedGuildBoostsForGuild)(e), window.addEventListener("resize", this.measure)
                }
                componentWillUnmount() {
                    window.removeEventListener("resize", this.measure)
                }
                componentDidUpdate() {
                    if (null == this.state.tierPositions) !Object.values(this.tierRefs).some(e => null == e) && this.measure()
                }
                getSubscriptionCount() {
                    let {
                        subscriptions: e
                    } = this.props;
                    return null != e ? e.length : 0
                }
                renderProgressBar(e) {
                    let {
                        tierPositions: t
                    } = this.state, {
                        guildId: s
                    } = this.props, n = this.getSubscriptionCount();
                    if (null == t || null == s) return null;
                    let l = {
                            numRequired: 0,
                            y: 0,
                            key: f.FIRST_TIER_KEY
                        },
                        i = (0, A.getAppliedGuildBoostsRequired)(s),
                        r = e.map(e => {
                            var s;
                            return {
                                numRequired: i[e.tier],
                                name: (0, A.getTierName)(e.tier),
                                y: null !== (s = t[e.tier]) && void 0 !== s ? s : 0,
                                key: e.tier
                            }
                        });
                    return (0, a.jsx)(f.default, {
                        className: n > 0 ? O.progressWithSubscriptions : O.progress,
                        progress: n,
                        tiers: [l, ...r],
                        initialAnimationDelay: 500,
                        onAnimatedTierMaker: this.handleAnimatedTier
                    })
                }
                renderTierNone() {
                    return (0, a.jsxs)("div", {
                        className: O.tierDefaultUnlocked,
                        ref: this.defaultTierRef,
                        children: [(0, a.jsx)(c.FormText, {
                            type: c.FormText.Types.LABEL_BOLD,
                            children: C.default.Messages.GUILD_SETTINGS_GUILD_PREMIUM_PERKS_TITLE_NONE
                        }), (0, a.jsx)(c.FormText, {
                            type: c.FormText.Types.DESCRIPTION,
                            className: O.tierDefaultUnlockedDescription,
                            children: C.default.Messages.GUILD_SETTINGS_GUILD_PREMIUM_PERKS_DESCRIPTION_NONE
                        })]
                    })
                }
                renderSubscribers() {
                    let {
                        subscribers: e,
                        subscriberCount: t,
                        guildId: s
                    } = this.props;
                    return (0, a.jsxs)("div", {
                        ref: this.defaultTierRef,
                        className: O.subscribers,
                        children: [(0, a.jsx)(g.default, {
                            guildId: null != s ? s : void 0,
                            users: e,
                            renderUser: this.renderSubscriber,
                            renderMoreUsers: this.renderMoreSubscribers,
                            max: 5
                        }), (0, a.jsx)("div", {
                            className: O.subscriberCount,
                            children: C.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_COUNT_SUBSCRIBERS.format({
                                count: t
                            })
                        })]
                    })
                }
                render() {
                    let {
                        guildId: e,
                        renderTier: t,
                        subscriptions: s,
                        subscriberCount: n,
                        tiers: l
                    } = this.props;
                    if (null == s) return (0, a.jsx)(c.Spinner, {
                        type: c.Spinner.Type.SPINNING_CIRCLE
                    });
                    if (null == e) return null;
                    let i = (0, A.getAppliedGuildBoostsRequired)(e);
                    return (0, a.jsx)("div", {
                        children: (0, a.jsxs)("div", {
                            className: O.content,
                            children: [this.renderProgressBar(l), (0, a.jsxs)("div", {
                                className: O.tiers,
                                children: [0 === n ? this.renderTierNone() : this.renderSubscribers(), l.map((s, a, n) => t({
                                    tier: s,
                                    tiers: n,
                                    tierIndex: a,
                                    onSetRef: this.setTierRef,
                                    isAnimatedTo: i[this.state.animatedTier] >= i[s.tier],
                                    subscriptionCount: this.getSubscriptionCount(),
                                    guildId: e
                                }))]
                            })]
                        })
                    })
                }
                constructor(...e) {
                    super(...e), this.tierRefs = {}, this.defaultTierRef = n.createRef(), this.state = {
                        tierPositions: null,
                        animatedTier: m.BoostedGuildTiers.NONE
                    }, this.measure = () => {
                        let {
                            subscriberCount: e
                        } = this.props, t = this.defaultTierRef.current;
                        if (null == t) return;
                        let {
                            top: s
                        } = t.getBoundingClientRect(), a = {};
                        for (let [t, n] of Object.entries(this.tierRefs)) {
                            if (null == n) return;
                            let {
                                top: l
                            } = n.getBoundingClientRect(), i = e > 0 ? h : 0;
                            a[t] = l - s + 32 - i
                        }
                        this.setState({
                            tierPositions: a
                        })
                    }, this.setTierRef = (e, t) => {
                        this.tierRefs[t.tier] = e
                    }, this.handleAnimatedTier = e => {
                        this.setState({
                            animatedTier: e.key
                        })
                    }, this.renderSubscriber = (e, t, s) => {
                        var n;
                        return null == e ? null : (0, a.jsx)(c.Tooltip, {
                            text: (0, a.jsx)(_.default, {
                                user: e.user,
                                nick: e.nick
                            }),
                            "aria-label": null !== (n = e.nick) && void 0 !== n ? n : e.user.tag,
                            children: s => (0, a.jsx)(c.Avatar, {
                                ...s,
                                tabIndex: -1,
                                src: null != e ? e.user.getAvatarURL(this.props.guildId, 32) : null,
                                className: i(O.avatar, t, null != t ? O.subscriberMask : null),
                                size: c.AvatarSizes.SIZE_32
                            })
                        }, s)
                    }, this.renderSubscribersPopout = () => (0, a.jsx)(c.Scroller, {
                        className: O.subscribersPopout,
                        children: this.props.subscribers.map(e => (0, a.jsxs)("div", {
                            className: O.subscribersPopoutUser,
                            children: [(0, a.jsx)(c.Avatar, {
                                src: e.user.getAvatarURL(this.props.guildId, 32),
                                "aria-label": e.user.username,
                                size: c.AvatarSizes.SIZE_32,
                                className: O.avatar
                            }), (0, a.jsx)("div", {
                                className: O.subscribersPopoutUsername,
                                children: (0, a.jsx)(_.default, {
                                    user: e.user,
                                    nick: e.nick
                                })
                            })]
                        }, e.user.id))
                    }), this.renderMoreSubscribers = (e, t, s) => (0, a.jsx)(c.Popout, {
                        renderPopout: this.renderSubscribersPopout,
                        position: "bottom",
                        autoInvert: !1,
                        children: t => (0, a.jsx)("div", {
                            className: O.moreSubscribers,
                            ...t,
                            children: e
                        })
                    }, s)
                }
            }
            let D = d.default.connectStores([T.default, N.default, I.default, S.default], () => {
                let e = T.default.getGuildId(),
                    t = null != e ? I.default.getAppliedGuildBoostsForGuild(e) : null,
                    s = o(null != t ? t : []).uniqBy(e => e.userId),
                    a = s.map(t => ({
                        user: N.default.getUser(t.userId),
                        nick: S.default.getNick(e, t.userId)
                    })).filter(e => null != e.user).value();
                return {
                    guildId: e,
                    subscriptions: t,
                    subscribers: a,
                    subscriberCount: s.size()
                }
            })(R);
            var M = D
        },
        417385: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return M
                }
            }), s("222007");
            var a, n, l, i, r = s("37983"),
                o = s("884691"),
                d = s("414456"),
                u = s.n(d),
                c = s("301165"),
                E = s("77078"),
                _ = s("983065"),
                T = s("160604"),
                I = s("879473"),
                S = s("912702"),
                N = s("381546"),
                f = s("45029"),
                g = s("956089"),
                A = s("427459"),
                L = s("49111"),
                m = s("782340"),
                C = s("765565");
            let O = {
                    tension: 200,
                    friction: 20
                },
                h = {
                    ...O,
                    clamp: !0
                };

            function R(e) {
                let [t, s] = o.useState(0), {
                    numUnlocked: a,
                    numRequired: n
                } = e, l = () => {
                    s(1)
                }, i = () => {
                    s(2)
                }, d = 2 === t, _ = 1 === t;
                if (!(!(a >= n) && a / n >= .8) || d) return null;
                let T = _ || d ? C.hidden : null,
                    S = _ ? I.default.Stages.FLYING : I.default.Stages.HOVERING;
                return (0, r.jsx)(c.Spring, {
                    from: {
                        opacity: 0
                    },
                    to: {
                        opacity: 1
                    },
                    config: h,
                    children: e => (0, r.jsxs)(c.animated.div, {
                        className: C.tierClose,
                        style: e,
                        children: [(0, r.jsx)(I.default, {
                            className: C.tierCloseMechaWumpus,
                            stage: S,
                            onFlyingComplete: i
                        }), (0, r.jsx)("div", {
                            className: u(C.tierCloseHint, T),
                            children: m.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_CLOSE_HINT.format({
                                numLeft: n - a
                            })
                        }), (0, r.jsx)(E.Clickable, {
                            onClick: l,
                            className: u(C.tierCloseClose, T),
                            children: (0, r.jsx)(N.default, {
                                className: C.tierCloseCloseIcon
                            })
                        })]
                    })
                })
            }

            function D(e) {
                let {
                    withCardBody: t,
                    isAnimatedTo: s,
                    hasAnimatedUnlocked: a,
                    onSetRef: n,
                    tier: l,
                    showHeaderLockStatus: i,
                    headerButton: d = null,
                    subscriptionsRequired: E,
                    subscriptionCount: _,
                    className: T
                } = e, I = e => {
                    null == n || n(e)
                }, [N, f] = o.useState(0);
                return o.useLayoutEffect(() => {
                    s && f(1)
                }, [s]), (0, r.jsx)(c.Spring, {
                    from: {
                        unlockedTranslateY: 50
                    },
                    to: {
                        unlockedTranslateY: 0 === N ? 50 : 0
                    },
                    config: O,
                    children: e => (0, r.jsx)("div", {
                        className: u({
                            [C.tierHeaderWithoutCardBody]: !t,
                            [C.tierHeaderUnlocked]: a,
                            [C.tierHeaderLocked]: !a
                        }, T),
                        ref: I,
                        children: (0, r.jsxs)("div", {
                            className: C.tierHeaderContent,
                            children: [(0, r.jsx)(S.default, {
                                tier: l.tier,
                                className: u(C.tierIcon, {
                                    [C.tierIconLocked]: !a
                                })
                            }), (0, r.jsx)("div", {
                                className: u(C.tierTitle, {
                                    [C.tierTitleActive]: a
                                }),
                                children: l.title
                            }), i ? (0, r.jsx)(G, {
                                transform: null == e ? void 0 : e.unlockedTranslateY.to(e => "translate3d(0, ".concat(e, "px, 0)")),
                                headerButton: d,
                                subscriptionsRequired: E,
                                hasAnimatedUnlocked: a
                            }) : null, (0, r.jsx)(R, {
                                numUnlocked: _,
                                numRequired: E
                            })]
                        })
                    })
                })
            }

            function M(e) {
                let {
                    children: t,
                    subscriptionCount: s,
                    onSetRef: a,
                    tier: n,
                    isAnimatedTo: l,
                    hasBottomMargin: i,
                    headerButton: o = null,
                    withCardBody: d = !0,
                    guildId: c,
                    showHeaderLockStatus: E = !0
                } = e, I = (0, A.getAppliedGuildBoostsRequired)(c)[n.tier], S = l && s >= I, N = n.tier !== L.BoostedGuildTiers.NONE && n.tier !== L.BoostedGuildTiers.TIER_1, f = (e, t) => {
                    let {
                        icon: s,
                        className: a
                    } = (0, _.getPerkIcon)(e.icon, t);
                    return (0, r.jsxs)("div", {
                        className: C.perk,
                        children: [(0, r.jsx)(T.default, {
                            name: String(e.icon),
                            icon: s,
                            className: C.perkIcon,
                            iconClassName: a
                        }), (0, r.jsxs)("div", {
                            className: C.perkText,
                            children: [(0, r.jsxs)("div", {
                                className: C.perkTitle,
                                children: [e.title, e.isNew ? (0, r.jsx)(g.TextBadge, {
                                    className: C.newBadge,
                                    text: m.default.Messages.NEW
                                }) : null]
                            }), (0, r.jsx)("div", {
                                className: C.perkDescription,
                                children: e.description
                            })]
                        })]
                    }, e.title)
                };
                return (0, r.jsxs)("div", {
                    className: u(C.tier, {
                        [C.tierBottomMargin]: i
                    }),
                    children: [(0, r.jsx)(D, {
                        subscriptionCount: s,
                        tier: n,
                        headerButton: o,
                        showHeaderLockStatus: E,
                        onSetRef: e => {
                            null != a && a(e, n)
                        },
                        withCardBody: d,
                        guildId: c,
                        hasBottomMargin: i,
                        subscriptionsRequired: I,
                        hasAnimatedUnlocked: S,
                        isAnimatedTo: l
                    }), (0, r.jsx)("div", {
                        className: u({
                            [C.tierBody]: d
                        }),
                        children: null != t ? t : (0, r.jsxs)(r.Fragment, {
                            children: [N ? (0, r.jsx)("div", {
                                className: C.previousPerks,
                                children: m.default.Messages.GUILD_SETTINGS_GUILD_PREMIUM_PERKS_PREVIOUS_PERKS
                            }) : null, null != n.perks && (0, r.jsx)("div", {
                                className: C.perks,
                                children: n.perks.map(e => f(e, S))
                            })]
                        })
                    })]
                }, n.tier)
            }(l = a || (a = {}))[l.OPEN = 0] = "OPEN", l[l.CLOSING = 1] = "CLOSING", l[l.CLOSED = 2] = "CLOSED", (i = n || (n = {}))[i.NONE = 0] = "NONE", i[i.UNLOCKED_SLIDE = 1] = "UNLOCKED_SLIDE";
            let G = e => {
                    let {
                        transform: t,
                        hasAnimatedUnlocked: s,
                        headerButton: a,
                        subscriptionsRequired: n
                    } = e;
                    return null !== a ? a : s ? (0, r.jsx)(x, {
                        transform: t
                    }) : (0, r.jsx)(p, {
                        subscriptionsRequired: n
                    })
                },
                x = e => {
                    let {
                        transform: t
                    } = e;
                    return (0, r.jsx)(c.animated.div, {
                        style: {
                            transform: t
                        },
                        className: C.tierUnlocked,
                        children: m.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_UNLOCKED
                    })
                },
                p = e => {
                    let {
                        subscriptionsRequired: t
                    } = e;
                    return (0, r.jsxs)(r.Fragment, {
                        children: [(0, r.jsx)("div", {
                            className: C.tierRequirement,
                            children: m.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_TIER_REQUIREMENT.format({
                                required: t
                            })
                        }), (0, r.jsx)(f.default, {
                            className: C.tierLock
                        })]
                    })
                }
        },
        910687: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return S
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("87657"),
                d = s("612039"),
                u = s("945330"),
                c = s("987772"),
                E = s("467094"),
                _ = s("41170"),
                T = s("782340"),
                I = s("9278"),
                S = e => {
                    let {
                        className: t,
                        isDisabled: l,
                        sticker: S,
                        canManageSticker: N
                    } = e, [f, g] = n.useState(!1), [A, L] = (0, d.default)(null, 4e3), m = () => {
                        (0, r.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await s.el("54666").then(s.bind(s, "54666"));
                            return t => (0, a.jsx)(e, {
                                sticker: S,
                                guildId: S.guild_id,
                                ...t
                            })
                        })
                    }, C = async () => {
                        L(null), g(!0);
                        try {
                            await (0, E.deleteGuildSticker)(S)
                        } catch (e) {
                            L(e.body.message), g(!1)
                        }
                    };
                    return (0, a.jsx)(r.Tooltip, {
                        color: r.Tooltip.Colors.RED,
                        forceOpen: null != A,
                        text: A,
                        children: () => (0, a.jsxs)("div", {
                            className: i(I.wrapper, t, {
                                [I.wrapperDisabled]: l
                            }),
                            children: [(0, a.jsxs)("div", {
                                className: i(I.content, {
                                    [I.contentRemoving]: f
                                }),
                                children: [(0, a.jsx)(_.default, {
                                    className: I.sticker,
                                    size: 72,
                                    sticker: S
                                }), (0, a.jsxs)("div", {
                                    children: [(0, a.jsx)(r.Text, {
                                        color: "header-primary",
                                        variant: "text-xs/semibold",
                                        className: I.stickerName,
                                        children: S.name
                                    }), null != S.user && (0, a.jsxs)("div", {
                                        className: I.user,
                                        children: [(0, a.jsx)(o.default, {
                                            className: I.userAvatar,
                                            size: r.AvatarSizes.SIZE_16,
                                            user: S.user
                                        }), (0, a.jsx)(r.Text, {
                                            color: "header-secondary",
                                            variant: "text-xs/normal",
                                            children: S.user.username
                                        })]
                                    })]
                                }), N ? (0, a.jsxs)("div", {
                                    className: I.actions,
                                    children: [(0, a.jsx)(r.Clickable, {
                                        className: i(I.action, I.actionEdit),
                                        onClick: m,
                                        "aria-label": T.default.Messages.EDIT,
                                        children: (0, a.jsx)(c.default, {
                                            className: I.icon
                                        })
                                    }), (0, a.jsx)(r.Clickable, {
                                        className: i(I.action, I.actionRemove),
                                        onClick: C,
                                        "aria-label": T.default.Messages.REMOVE,
                                        children: (0, a.jsx)(u.default, {
                                            className: I.icon
                                        })
                                    })]
                                }) : null]
                            }), f && (0, a.jsx)(r.Spinner, {
                                className: I.spinner
                            })]
                        })
                    })
                }
        },
        657: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return P
                }
            }), s("222007"), s("424973");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("446674"),
                o = s("819855"),
                d = s("77078"),
                u = s("997289"),
                c = s("841098"),
                E = s("685665"),
                _ = s("617917"),
                T = s("163732"),
                I = s("817963"),
                S = s("151185"),
                N = s("599110"),
                f = s("427459"),
                g = s("169105"),
                A = s("467094"),
                L = s("364685"),
                m = s("566171"),
                C = s("417385"),
                O = s("910687"),
                h = s("49111"),
                R = s("782340"),
                D = s("9278"),
                M = s("116407");
            let G = e => e < (0, f.getTotalStickerCountForTier)(h.BoostedGuildTiers.NONE) ? h.BoostedGuildTiers.NONE : e < (0, f.getTotalStickerCountForTier)(h.BoostedGuildTiers.TIER_1) ? h.BoostedGuildTiers.TIER_1 : e < (0, f.getTotalStickerCountForTier)(h.BoostedGuildTiers.TIER_2) ? h.BoostedGuildTiers.TIER_2 : e < (0, f.getTotalStickerCountForTier)(h.BoostedGuildTiers.TIER_3) ? h.BoostedGuildTiers.TIER_3 : h.BoostedGuildTiers.NONE,
                x = e => {
                    let {
                        children: t,
                        currentGuildTier: s,
                        guildStickers: n,
                        tier: l
                    } = e, i = s < l, r = (0, f.getIncrementalStickerCountForTier)(l);
                    return (0, a.jsxs)(a.Fragment, {
                        children: [(0, a.jsx)(d.Heading, {
                            color: "header-primary",
                            variant: "heading-md/semibold",
                            children: t
                        }), !i && (0, a.jsx)(d.Text, {
                            variant: "text-xs/normal",
                            children: R.default.Messages.GUILD_STICKER_SETTINGS_REMAINING_SLOTS_AVAILABLE.format({
                                numTotal: r,
                                numAvailable: (0, f.getAvailableStickerSlotCount)(n, l)
                            })
                        })]
                    })
                },
                p = e => {
                    let {
                        guildId: t
                    } = e;
                    (0, d.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await s.el("54666").then(s.bind(s, "54666"));
                        return s => (0, a.jsx)(e, {
                            guildId: t,
                            ...s
                        })
                    })
                },
                U = e => {
                    let {
                        guild: t
                    } = e, {
                        location: s
                    } = (0, u.useAnalyticsContext)();
                    return (0, a.jsxs)(d.Clickable, {
                        className: i(D.wrapper, M.uploadCard),
                        onClick: () => {
                            N.default.track(h.AnalyticEvents.OPEN_MODAL, {
                                type: h.AnalyticsSections.CREATE_STICKER_MODAL,
                                location: s
                            }), p({
                                guildId: t.id
                            })
                        },
                        children: [(0, a.jsx)("div", {
                            className: M.iconWrapper,
                            children: (0, a.jsx)(S.default, {
                                className: M.icon
                            })
                        }), (0, a.jsx)(d.Text, {
                            variant: "text-xs/medium",
                            color: "interactive-active",
                            children: R.default.Messages.GUILD_STICKER_GRID_UPLOAD_LABEL
                        })]
                    })
                },
                v = () => (0, a.jsx)("div", {
                    className: M.placeholderCard,
                    children: (0, a.jsx)("img", {
                        className: M.placeholderImg,
                        alt: R.default.Messages.GUILD_STICKER_SETTINGS_PLACEHOLDER_ALT_TEXT,
                        src: s("89734")
                    })
                }),
                j = e => {
                    let {
                        guild: t
                    } = e, {
                        location: s
                    } = (0, u.useAnalyticsContext)(), {
                        canCreateExpressions: n
                    } = (0, I.useManageResourcePermissions)(t);
                    return (0, a.jsx)(d.Button, {
                        size: d.Button.Sizes.SMALL,
                        color: d.Button.Colors.BRAND,
                        onClick: () => {
                            N.default.track(h.AnalyticEvents.OPEN_MODAL, {
                                type: h.AnalyticsSections.CREATE_STICKER_MODAL,
                                location: s
                            }), p({
                                guildId: t.id
                            })
                        },
                        disabled: !n,
                        children: R.default.Messages.GUILD_STICKER_GRID_UPLOAD_LABEL
                    })
                };
            var P = e => {
                let {
                    guild: t
                } = e, l = (0, c.default)(), [u, S] = n.useState(!0), N = (0, r.useStateFromStores)([L.default], () => {
                    var e;
                    return null !== (e = L.default.getStickersByGuildId(t.id)) && void 0 !== e ? e : []
                }, [t]), D = (0, g.useHasFreeStickerSlotsDesignUpdatesExperiment)(t.id), {
                    analyticsLocations: p
                } = (0, E.default)(), P = t.hasFeature(h.GuildFeatures.MORE_STICKERS) ? h.BoostedGuildTiers.TIER_3 : t.premiumTier, y = t.hasFeature(h.GuildFeatures.MORE_STICKERS) ? (0, f.getAppliedGuildBoostsRequired)(t.id)[h.BoostedGuildTiers.TIER_3] : t.premiumSubscriberCount;
                if (n.useEffect(() => {
                        let e = !1,
                            s = async () => {
                                S(!0), await (0, A.fetchGuildStickers)(t.id), !e && S(!1)
                            };
                        return s(), () => {
                            e = !0
                        }
                    }, [t]), n.useEffect(() => {
                        window.dispatchEvent(new Event("resize"))
                    }, [N]), u) return (0, a.jsx)(d.Spinner, {});
                let b = (e, s) => {
                        let a = null;
                        s === h.BoostedGuildTiers.TIER_1 ? a = h.AnalyticsObjectTypes.TIER_1 : s === h.BoostedGuildTiers.TIER_2 ? a = h.AnalyticsObjectTypes.TIER_2 : s === h.BoostedGuildTiers.TIER_3 && (a = h.AnalyticsObjectTypes.TIER_3), (0, T.default)({
                            analyticsLocations: p,
                            analyticsLocation: {
                                page: h.AnalyticsPages.GUILD_SETTINGS,
                                section: h.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                                object: h.AnalyticsObjects.BOOST_LEVEL_UPSELL_BUTTON,
                                objectType: a
                            },
                            guildId: t.id,
                            totalNumberOfSlotsToAssign: e
                        })
                    },
                    B = [{
                        tier: h.BoostedGuildTiers.NONE,
                        title: (0, a.jsx)(x, {
                            guildStickers: N,
                            currentGuildTier: P,
                            tier: h.BoostedGuildTiers.NONE,
                            children: R.default.Messages.GUILD_SETTINGS_STICKERS_FREE_SLOTS_HEADER
                        })
                    }, {
                        tier: h.BoostedGuildTiers.TIER_1,
                        title: (0, a.jsx)(x, {
                            guildStickers: N,
                            currentGuildTier: P,
                            tier: h.BoostedGuildTiers.TIER_1,
                            children: R.default.Messages.PREMIUM_GUILD_TIER_1
                        })
                    }, {
                        tier: h.BoostedGuildTiers.TIER_2,
                        title: (0, a.jsx)(x, {
                            guildStickers: N,
                            currentGuildTier: P,
                            tier: h.BoostedGuildTiers.TIER_2,
                            children: R.default.Messages.PREMIUM_GUILD_TIER_2
                        })
                    }, {
                        tier: h.BoostedGuildTiers.TIER_3,
                        title: (0, a.jsx)(x, {
                            guildStickers: N,
                            currentGuildTier: P,
                            tier: h.BoostedGuildTiers.TIER_3,
                            children: R.default.Messages.PREMIUM_GUILD_TIER_3
                        })
                    }];
                return (0, a.jsx)(m.default, {
                    tiers: B,
                    renderTier: e => {
                        let n, {
                                isAnimatedTo: r,
                                onSetRef: u,
                                tier: c,
                                tiers: E,
                                tierIndex: T
                            } = e,
                            {
                                canCreateExpressions: S,
                                canManageGuildExpression: g
                            } = (0, I.getManageResourcePermissions)(t),
                            A = E[T - 1],
                            L = null != A ? (0, f.getTotalStickerCountForTier)(A.tier) : 0,
                            m = (0, f.getTotalStickerCountForTier)(c.tier),
                            x = (0, f.getIncrementalStickerCountForTier)(c.tier),
                            p = N.slice(L, m),
                            B = p.length > 0,
                            F = P < c.tier,
                            H = G(N.length),
                            V = !D,
                            k = S && !F && H === c.tier && m !== p.length,
                            w = k || p.length > 0,
                            Y = m - L,
                            K = (0, o.isThemeDark)(l) ? s("697786") : s("672194"),
                            W = s("89734"),
                            z = x - p.length,
                            X = V ? 1 : 0,
                            Z = k ? Math.min(5 - (p.length + X) % 5, z) : 0,
                            J = [];
                        for (let e = 0; e < Z; e++) J.push((0, a.jsx)(v, {}, "placeholder-".concat(e)));
                        let Q = !D && F && p.length > 0,
                            q = D && k,
                            $ = D && H === T + 1 && H > P,
                            ee = D ? k || $ || T > P : c.tier !== h.BoostedGuildTiers.NONE;
                        return Q ? n = (0, a.jsx)(_.default, {
                            guild: t,
                            buttonText: R.default.Messages.GUILD_STICKER_SETTINGS_BUY_LEVEL,
                            targetBoostedGuildTier: c.tier,
                            analyticsLocation: {
                                page: h.AnalyticsPages.GUILD_SETTINGS,
                                section: h.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                                object: h.AnalyticsObjects.BOOST_UPSELL_LOST_LEVEL_HEADER,
                                objectType: (0, f.boostedGuildTierToAnalyticsObjectType)(c.tier)
                            }
                        }) : $ ? n = (0, a.jsx)(_.default, {
                            guild: t,
                            size: d.Button.Sizes.SMALL,
                            color: d.Button.Colors.GREEN,
                            buttonText: R.default.Messages.GUILD_STICKER_SETTINGS_UNLOCK_SLOTS,
                            targetBoostedGuildTier: P + 1,
                            analyticsLocation: {
                                page: h.AnalyticsPages.GUILD_SETTINGS,
                                section: h.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                                object: h.AnalyticsObjects.BOOST_UPSELL_NEXT_LEVEL_HEADER,
                                objectType: (0, f.boostedGuildTierToAnalyticsObjectType)(c.tier)
                            }
                        }) : q && (n = (0, a.jsx)(j, {
                            guild: t
                        })), (0, a.jsxs)(C.default, {
                            subscriptionCount: y,
                            tier: c,
                            onSetRef: u,
                            isAnimatedTo: r,
                            hasBottomMargin: T !== E.length - 1,
                            withCardBody: !w,
                            headerButton: n,
                            showHeaderLockStatus: ee,
                            guildId: t.id,
                            children: [w && (0, a.jsxs)("div", {
                                className: M.grid,
                                children: [V && k && (0, a.jsx)(U, {
                                    guild: t
                                }), p.map(e => (0, a.jsx)(O.default, {
                                    isDisabled: F,
                                    sticker: e,
                                    canManageSticker: g(e)
                                }, e.id)), J]
                            }), !F && !k && 0 === p.length && (0, a.jsx)("div", {
                                className: i(M.emptyTierWrapper, M.unusedTierWrapper),
                                children: (0, a.jsx)(d.Text, {
                                    variant: "text-md/normal",
                                    color: "header-secondary",
                                    children: R.default.Messages.GUILD_STICKER_UNUSED_TIER
                                })
                            }), F && !B && (0, a.jsxs)("div", {
                                className: M.emptyTierWrapper,
                                children: [(0, a.jsx)("img", {
                                    alt: R.default.Messages.GUILD_STICKER_SETTINGS_ICON_ALT_TEXT,
                                    className: M.emptyTierImage,
                                    src: D ? W : K
                                }), (0, a.jsx)(d.Text, {
                                    className: M.unlockTierCtaHeading,
                                    variant: "text-md/normal",
                                    color: "header-secondary",
                                    children: c.tier === h.BoostedGuildTiers.TIER_1 ? R.default.Messages.GUILD_STICKER_SETTINGS_ADDITIONAL_SLOTS_WITHOUT_TOTAL.format({
                                        numAdditional: Y
                                    }) : R.default.Messages.GUILD_STICKER_SETTINGS_ADDITIONAL_SLOTS.format({
                                        numAdditional: Y,
                                        numTotal: m
                                    })
                                }), (0, a.jsx)(d.Button, {
                                    color: D ? d.Button.Colors.GREEN : d.Button.Colors.BRAND,
                                    onClick: () => b((0, f.getAppliedGuildBoostsRequired)(t.id)[c.tier] - t.premiumSubscriberCount, c.tier),
                                    children: R.default.Messages.GUILD_STICKER_SETTINGS_BUY_LEVEL
                                })]
                            })]
                        }, c.tier)
                    }
                })
            }
        },
        3245: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("872717"),
                n = s("49111"),
                l = {
                    fetchTeams() {
                        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                        return a.default.get({
                            url: n.Endpoints.TEAMS,
                            query: {
                                include_payout_account_status: e
                            }
                        })
                    }
                }
        },
        810367: function(e, t, s) {
            "use strict";
            var a, n;
            s.r(t), s.d(t, {
                PayoutAccountStatuses: function() {
                    return a
                }
            }), (n = a || (a = {}))[n.UNSUBMITTED = 1] = "UNSUBMITTED", n[n.PENDING = 2] = "PENDING", n[n.ACTION_REQUIRED = 3] = "ACTION_REQUIRED", n[n.ACTIVE = 4] = "ACTIVE", n[n.BLOCKED = 5] = "BLOCKED", n[n.SUSPENDED = 6] = "SUSPENDED"
        },
        963393: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                isUserTeamAdministrator: function() {
                    return n
                }
            });
            var a = s("162948");

            function n(e, t) {
                var s, n, l;
                if (t.owner_user_id === e) return !0;
                return (null === (n = t, l = e, s = n.members.find(e => e.user.id === l)) || void 0 === s ? void 0 : s.role) === a.TeamMemberRoles.ADMIN
            }
        },
        719887: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            }), s("222007");
            var a = s("884691"),
                n = s("3245"),
                l = function() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        {
                            refreshOnDepChange: t
                        } = e,
                        [s, l] = a.useState([]),
                        [i, r] = a.useState(!0),
                        o = async () => {
                            r(!0);
                            try {
                                let e = await n.default.fetchTeams(!0);
                                l(e.body)
                            } catch (e) {}
                            r(!1)
                        }, d = a.useRef(!0);
                    return a.useEffect(() => {
                        (d.current || t) && (d.current = !1, o())
                    }, [t]), {
                        teams: s,
                        loading: i,
                        refresh: o
                    }
                }
        },
        478964: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return T
                }
            });
            var a = s("446674"),
                n = s("913144"),
                l = s("305961"),
                i = s("49111");
            let r = {
                    description: "",
                    channels: [],
                    enabled: !1
                },
                o = r,
                d = !1,
                u = !1,
                c = r;

            function E(e) {
                let {
                    welcomeScreen: t,
                    guildId: s
                } = e, a = l.default.getGuild(s);
                if (null != t) {
                    var n, d;
                    c = o = {
                        description: null !== (n = t.description) && void 0 !== n ? n : "",
                        channels: null !== (d = t.welcome_channels) && void 0 !== d ? d : [],
                        enabled: null == a ? void 0 : a.hasFeature(i.GuildFeatures.WELCOME_SCREEN_ENABLED)
                    }
                } else c = o = r;
                u = !1
            }
            class _ extends a.default.Store {
                initialize() {
                    this.waitFor(l.default)
                }
                get() {
                    return c
                }
                showNotice() {
                    return u
                }
                getSettingsProps() {
                    return {
                        submitting: d,
                        hasErrors: u,
                        welcomeSettings: c,
                        originalWelcomeSettings: o
                    }
                }
            }
            _.displayName = "WelcomeScreenSettingsStore";
            var T = new _(n.default, {
                WELCOME_SCREEN_FETCH_SUCCESS: E,
                WELCOME_SCREEN_UPDATE: E,
                WELCOME_SCREEN_SETTINGS_RESET: function() {
                    c = o, u = !1
                },
                WELCOME_SCREEN_SETTINGS_CLEAR: function() {
                    c = r, o = r
                },
                WELCOME_SCREEN_SETTINGS_UPDATE: function(e) {
                    let {
                        settings: t
                    } = e;
                    c = {
                        ...c,
                        ...t
                    }
                },
                WELCOME_SCREEN_SUBMIT: function() {
                    d = !0
                },
                WELCOME_SCREEN_SUBMIT_SUCCESS: function(e) {
                    E(e), d = !1
                },
                WELCOME_SCREEN_SUBMIT_FAILURE: function() {
                    u = !0, d = !1
                }
            })
        },
        628624: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return u
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("45299"),
                i = s("900938"),
                r = s("223170"),
                o = s("478964"),
                d = s("782340"),
                u = () => {
                    let {
                        guild: e
                    } = (0, n.useStateFromStores)([i.default], () => i.default.getProps()), {
                        submitting: t,
                        welcomeSettings: s
                    } = (0, n.useStateFromStores)([o.default], () => o.default.getSettingsProps());
                    return null == e ? null : (0, a.jsx)(l.default, {
                        onSave: () => (0, r.saveWelcomeScreen)(e.id, s),
                        onReset: r.resetWelcomeScreen,
                        submitting: t,
                        onSaveText: d.default.Messages.TRY_AGAIN,
                        message: d.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_UPDATE_FAILURE
                    })
                }
        },
        310457: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return d
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("446674"),
                l = s("77078"),
                i = s("679653"),
                r = s("42203"),
                o = s("782340");

            function d(e) {
                let {
                    onConfirm: t,
                    onCancel: s,
                    channelId: d
                } = e, u = (0, n.useStateFromStores)([r.default], () => null != d ? r.default.getChannel(d) : null), c = (0, i.default)(u, !0);
                return (0, a.jsx)(l.DeclarativeConfirmModal, {
                    dismissable: !0,
                    header: o.default.Messages.WELCOME_CHANNEL_DELETE_CONFIRM_TITLE,
                    confirmText: o.default.Messages.REMOVE,
                    cancelText: o.default.Messages.CANCEL,
                    onConfirm: t,
                    onCancel: s,
                    children: (0, a.jsx)(l.Text, {
                        variant: "text-sm/normal",
                        children: null != u ? o.default.Messages.WELCOME_CHANNEL_DELETE_CONFIRM_BODY.format({
                            channelName: c
                        }) : o.default.Messages.WELCOME_CHANNEL_DELETE_CONFIRM_BODY_GENERIC
                    })
                })
            }
        },
        242020: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                getTargetType: function() {
                    return d
                },
                getActionType: function() {
                    return u
                },
                AuditLogChange: function() {
                    return c
                },
                default: function() {
                    return _
                }
            });
            var a = s("866227"),
                n = s.n(a),
                l = s("666038"),
                i = s("286235"),
                r = s("299039"),
                o = s("49111");

            function d(e) {
                if (e === o.AuditLogActions.ALL) return o.AuditLogTargetTypes.ALL;
                if (e <= o.AuditLogActions.GUILD_UPDATE) return o.AuditLogTargetTypes.GUILD;
                if (e <= o.AuditLogActions.CHANNEL_DELETE || e === o.AuditLogActions.MESSAGE_BULK_DELETE) return o.AuditLogTargetTypes.CHANNEL;
                else if (e <= o.AuditLogActions.CHANNEL_OVERWRITE_DELETE) return o.AuditLogTargetTypes.CHANNEL_OVERWRITE;
                else if (e <= o.AuditLogActions.BOT_ADD || e === o.AuditLogActions.MESSAGE_DELETE || e === o.AuditLogActions.MESSAGE_PIN || e === o.AuditLogActions.MESSAGE_UNPIN) return o.AuditLogTargetTypes.USER;
                else if (e <= o.AuditLogActions.ROLE_DELETE) return o.AuditLogTargetTypes.ROLE;
                else if (e <= o.AuditLogActions.INVITE_DELETE) return o.AuditLogTargetTypes.INVITE;
                else if (e <= o.AuditLogActions.WEBHOOK_DELETE) return o.AuditLogTargetTypes.WEBHOOK;
                else if (e <= o.AuditLogActions.EMOJI_DELETE) return o.AuditLogTargetTypes.EMOJI;
                else if (e <= o.AuditLogActions.INTEGRATION_DELETE) return o.AuditLogTargetTypes.INTEGRATION;
                else if (e <= o.AuditLogActions.STAGE_INSTANCE_DELETE) return o.AuditLogTargetTypes.STAGE_INSTANCE;
                else if (e <= o.AuditLogActions.STICKER_DELETE) return o.AuditLogTargetTypes.STICKER;
                else if (e <= o.AuditLogActions.GUILD_SCHEDULED_EVENT_DELETE) return o.AuditLogTargetTypes.GUILD_SCHEDULED_EVENT;
                else if (e <= o.AuditLogActions.THREAD_DELETE) return o.AuditLogTargetTypes.THREAD;
                else if (e === o.AuditLogActions.APPLICATION_COMMAND_PERMISSION_UPDATE) return o.AuditLogTargetTypes.APPLICATION_COMMAND;
                else if (e <= o.AuditLogActions.SOUNDBOARD_SOUND_DELETE) return o.AuditLogTargetTypes.GUILD_SOUNDBOARD;
                else if (e < o.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE) return o.AuditLogTargetTypes.AUTO_MODERATION_RULE;
                else if (e === o.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE) return o.AuditLogTargetTypes.USER;
                else if (e === o.AuditLogActions.AUTO_MODERATION_FLAG_TO_CHANNEL) return o.AuditLogTargetTypes.USER;
                else if (e === o.AuditLogActions.AUTO_MODERATION_USER_COMMUNICATION_DISABLED) return o.AuditLogTargetTypes.USER;
                else if (e === o.AuditLogActions.AUTO_MODERATION_QUARANTINE_USER) return o.AuditLogTargetTypes.USER;
                else if (e <= o.AuditLogActions.CREATOR_MONETIZATION_TERMS_ACCEPTED) return o.AuditLogTargetTypes.GUILD;
                else if (e <= o.AuditLogActions.ONBOARDING_PROMPT_DELETE) return o.AuditLogTargetTypes.ONBOARDING_PROMPT;
                else if (e <= o.AuditLogActions.ONBOARDING_UPDATE) return o.AuditLogTargetTypes.GUILD_ONBOARDING;
                else if (e <= o.AuditLogActions.GUILD_HOME_REMOVE_ITEM) return o.AuditLogTargetTypes.GUILD_HOME;
                else if (e <= o.AuditLogActions.HARMFUL_LINKS_BLOCKED_MESSAGE) return o.AuditLogTargetTypes.GUILD;
                else if (e <= o.AuditLogActions.HOME_SETTINGS_UPDATE) return o.AuditLogTargetTypes.HOME_SETTINGS;
                else if (e <= o.AuditLogActions.VOICE_CHANNEL_STATUS_DELETE) return o.AuditLogTargetTypes.VOICE_CHANNEL_STATUS;
                else if (e === o.AuditLogActions.CLYDE_AI_PROFILE_UPDATE) return o.AuditLogTargetTypes.CLYDE_AI;
                return i.default.captureMessage("Unknown target type for: ".concat(e)), o.AuditLogTargetTypes.UNKNOWN
            }

            function u(e) {
                switch (e) {
                    case o.AuditLogActions.CHANNEL_CREATE:
                    case o.AuditLogActions.CHANNEL_OVERWRITE_CREATE:
                    case o.AuditLogActions.MEMBER_BAN_REMOVE:
                    case o.AuditLogActions.ROLE_CREATE:
                    case o.AuditLogActions.INVITE_CREATE:
                    case o.AuditLogActions.WEBHOOK_CREATE:
                    case o.AuditLogActions.EMOJI_CREATE:
                    case o.AuditLogActions.STICKER_CREATE:
                    case o.AuditLogActions.MESSAGE_PIN:
                    case o.AuditLogActions.BOT_ADD:
                    case o.AuditLogActions.INTEGRATION_CREATE:
                    case o.AuditLogActions.STAGE_INSTANCE_CREATE:
                    case o.AuditLogActions.GUILD_SCHEDULED_EVENT_CREATE:
                    case o.AuditLogActions.THREAD_CREATE:
                    case o.AuditLogActions.AUTO_MODERATION_RULE_CREATE:
                    case o.AuditLogActions.CREATOR_MONETIZATION_REQUEST_CREATED:
                    case o.AuditLogActions.ONBOARDING_PROMPT_CREATE:
                    case o.AuditLogActions.ONBOARDING_CREATE:
                    case o.AuditLogActions.GUILD_HOME_FEATURE_ITEM:
                    case o.AuditLogActions.SOUNDBOARD_SOUND_CREATE:
                    case o.AuditLogActions.HOME_SETTINGS_CREATE:
                    case o.AuditLogActions.VOICE_CHANNEL_STATUS_CREATE:
                        return o.AuditLogActionTypes.CREATE;
                    case o.AuditLogActions.CHANNEL_DELETE:
                    case o.AuditLogActions.CHANNEL_OVERWRITE_DELETE:
                    case o.AuditLogActions.MEMBER_KICK:
                    case o.AuditLogActions.MEMBER_PRUNE:
                    case o.AuditLogActions.MEMBER_BAN_ADD:
                    case o.AuditLogActions.ROLE_DELETE:
                    case o.AuditLogActions.INVITE_DELETE:
                    case o.AuditLogActions.WEBHOOK_DELETE:
                    case o.AuditLogActions.EMOJI_DELETE:
                    case o.AuditLogActions.STICKER_DELETE:
                    case o.AuditLogActions.MESSAGE_DELETE:
                    case o.AuditLogActions.MESSAGE_BULK_DELETE:
                    case o.AuditLogActions.MESSAGE_UNPIN:
                    case o.AuditLogActions.INTEGRATION_DELETE:
                    case o.AuditLogActions.MEMBER_DISCONNECT:
                    case o.AuditLogActions.STAGE_INSTANCE_DELETE:
                    case o.AuditLogActions.GUILD_SCHEDULED_EVENT_DELETE:
                    case o.AuditLogActions.THREAD_DELETE:
                    case o.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE:
                    case o.AuditLogActions.AUTO_MODERATION_RULE_DELETE:
                    case o.AuditLogActions.ONBOARDING_PROMPT_DELETE:
                    case o.AuditLogActions.GUILD_HOME_REMOVE_ITEM:
                    case o.AuditLogActions.SOUNDBOARD_SOUND_DELETE:
                    case o.AuditLogActions.VOICE_CHANNEL_STATUS_DELETE:
                        return o.AuditLogActionTypes.DELETE;
                    case o.AuditLogActions.GUILD_UPDATE:
                    case o.AuditLogActions.CHANNEL_UPDATE:
                    case o.AuditLogActions.CHANNEL_OVERWRITE_UPDATE:
                    case o.AuditLogActions.MEMBER_UPDATE:
                    case o.AuditLogActions.MEMBER_ROLE_UPDATE:
                    case o.AuditLogActions.ROLE_UPDATE:
                    case o.AuditLogActions.INVITE_UPDATE:
                    case o.AuditLogActions.WEBHOOK_UPDATE:
                    case o.AuditLogActions.EMOJI_UPDATE:
                    case o.AuditLogActions.STICKER_UPDATE:
                    case o.AuditLogActions.INTEGRATION_UPDATE:
                    case o.AuditLogActions.MEMBER_MOVE:
                    case o.AuditLogActions.STAGE_INSTANCE_UPDATE:
                    case o.AuditLogActions.GUILD_SCHEDULED_EVENT_UPDATE:
                    case o.AuditLogActions.THREAD_UPDATE:
                    case o.AuditLogActions.APPLICATION_COMMAND_PERMISSION_UPDATE:
                    case o.AuditLogActions.CREATOR_MONETIZATION_TERMS_ACCEPTED:
                    case o.AuditLogActions.AUTO_MODERATION_RULE_UPDATE:
                    case o.AuditLogActions.AUTO_MODERATION_FLAG_TO_CHANNEL:
                    case o.AuditLogActions.AUTO_MODERATION_USER_COMMUNICATION_DISABLED:
                    case o.AuditLogActions.AUTO_MODERATION_QUARANTINE_USER:
                    case o.AuditLogActions.ONBOARDING_PROMPT_UPDATE:
                    case o.AuditLogActions.ONBOARDING_UPDATE:
                    case o.AuditLogActions.SOUNDBOARD_SOUND_UPDATE:
                    case o.AuditLogActions.HOME_SETTINGS_UPDATE:
                    case o.AuditLogActions.CLYDE_AI_PROFILE_UPDATE:
                        return o.AuditLogActionTypes.UPDATE
                }
                return o.AuditLogActionTypes.ALL
            }
            class c {
                constructor(e, t, s) {
                    this.key = e, this.oldValue = t, this.newValue = s
                }
            }
            class E extends l.default {
                constructor(e) {
                    var t, s, a, l, i, o;
                    super(), this.id = e.id, this.action = e.action, this.actionType = u(this.action), this.targetId = e.targetId, this.timestampStart = null !== (t = e.timestampStart) && void 0 !== t ? t : n(r.default.extractTimestamp(this.id)), this.timestampEnd = null !== (s = e.timestampEnd) && void 0 !== s ? s : this.timestampStart, this.userId = e.userId, this.changes = null !== (a = e.changes) && void 0 !== a ? a : [], this.targetType = d(this.action), this.options = null !== (l = e.options) && void 0 !== l ? l : {}, this.target = null !== (i = e.target) && void 0 !== i ? i : e.id, this.user = null !== (o = e.user) && void 0 !== o ? o : null
                }
            }
            var _ = E
        },
        159794: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return a
                }
            });
            var a, n = s("666038"),
                l = s("766274");
            a = class extends n.default {
                constructor(e) {
                    super(), this.id = e.id, this.name = e.name, this.managed = e.managed, this.roles = e.roles, this.requiredColons = e.requiredColons, this.user = new l.default(e.user), this.animated = e.animated, this.available = e.available
                }
            }
        },
        93581: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return S
                }
            }), s("222007"), s("881410");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("301165"),
                o = s("446674"),
                d = s("669491"),
                u = s("77078"),
                c = s("206230"),
                E = s("461380"),
                _ = s("578706"),
                T = s("110569");

            function I(e) {
                let {
                    checked: t,
                    children: s
                } = e;
                return (0, a.jsxs)("div", {
                    className: T.row,
                    children: [(0, a.jsx)(u.Text, {
                        variant: "text-md/normal",
                        color: "interactive-active",
                        className: T.rowText,
                        children: s
                    }), t ? (0, a.jsx)(_.default, {
                        backgroundColor: d.default.unsafe_rawColors.WHITE_500.css,
                        className: i(T.rowIcon, T.rowIconChecked)
                    }) : (0, a.jsx)("div", {
                        className: i(T.rowIcon, T.rowIconEmpty)
                    })]
                })
            }

            function S(e) {
                let {
                    title: t,
                    children: s,
                    buttonLabel: l,
                    buttonCallback: i,
                    disabled: d
                } = e, [_, S] = n.useState(!1), N = (0, o.useStateFromStores)([c.default], () => c.default.useReducedMotion), f = s.flatMap(e => e.items.map(e => e.completed)), g = f.filter(e => e).length / f.length, A = (0, r.useSpring)({
                    width: "".concat(100 * g, "%"),
                    immediate: N
                });
                return (0, a.jsxs)("div", {
                    className: T.container,
                    children: [(0, a.jsxs)(u.Clickable, {
                        className: T.headerBar,
                        onClick: () => S(e => !e),
                        children: [(0, a.jsx)(u.Heading, {
                            variant: "heading-md/semibold",
                            className: T.headerText,
                            children: t
                        }), (0, a.jsx)(E.default, {
                            direction: _ ? E.default.Directions.DOWN : E.default.Directions.UP,
                            className: T.headerCaret
                        })]
                    }), (0, a.jsx)("div", {
                        className: T.progressBarOuter,
                        children: (0, a.jsx)(r.animated.div, {
                            className: T.progressBarInner,
                            style: A
                        })
                    }), !_ && s.map((e, t) => {
                        let {
                            title: s,
                            items: l
                        } = e;
                        return (0, a.jsxs)(n.Fragment, {
                            children: [t > 0 && (0, a.jsx)(u.FormDivider, {
                                className: T.divider
                            }), (0, a.jsx)(u.FormTitle, {
                                className: T.categoryTitle,
                                children: s
                            }), l.map((e, t) => (0, a.jsx)(I, {
                                children: e.description,
                                checked: e.completed
                            }, t))]
                        }, t)
                    }), null !== l && "" !== l && null !== i && (0, a.jsxs)("div", {
                        children: [(0, a.jsx)(u.FormDivider, {
                            className: T.divider
                        }), (0, a.jsx)(u.Button, {
                            className: T.button,
                            size: u.Button.Sizes.SMALL,
                            color: u.Button.Colors.BRAND_NEW,
                            hover: u.Button.Colors.BRAND_NEW,
                            onClick: i,
                            disabled: 1 !== g || d,
                            children: l
                        })]
                    })]
                })
            }
        },
        160604: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("301165"),
                o = s("837403");
            class d extends n.Component {
                render() {
                    let {
                        icon: e,
                        ...t
                    } = this.props;
                    return (0, a.jsx)(e, {
                        ...t
                    })
                }
            }
            let u = (0, r.animated)(d);
            var c = function(e) {
                let {
                    className: t,
                    name: s,
                    icon: n,
                    iconClassName: l
                } = e, d = (0, r.useTransition)({
                    name: s,
                    icon: n,
                    iconClassName: l
                }, {
                    key: e => e.name,
                    initial: null,
                    from: {
                        opacity: 0
                    },
                    enter: {
                        opacity: 1
                    },
                    leave: {
                        opacity: 0
                    }
                });
                return (0, a.jsx)("div", {
                    className: i(o.crossfade, t),
                    children: d((e, t) => {
                        let {
                            icon: s,
                            iconClassName: n
                        } = t;
                        return (0, a.jsx)(u, {
                            icon: s,
                            className: i(o.icon, n),
                            style: e
                        })
                    })
                })
            }
        },
        879473: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return S
                }
            }), s("222007");
            var a, n, l = s("37983"),
                i = s("884691"),
                r = s("414456"),
                o = s.n(r),
                d = s("917351"),
                u = s.n(d),
                c = s("661486"),
                E = s("663785");
            (n = a || (a = {}))[n.HOVERING = 0] = "HOVERING", n[n.FLYING = 1] = "FLYING";
            let _ = Object.freeze({
                HOVERING: {
                    Y_DURATION: 1500,
                    Y_VALUE: -5,
                    Y_VALUE_MODIFIER: -1,
                    FIRE_COUNT: 10,
                    FIRE_MIN_INTENSITY_FALLING: .8,
                    FIRE_MAX_INTENSITY_FALLING: 1,
                    FIRE_MIN_INTENSITY_RISING: 1,
                    FIRE_MAX_INTENSITY_RISING: 1.2
                },
                FALLING: {
                    Y_VALUE: 10,
                    FIRE_COUNT: 10,
                    FIRE_VALUE: .2
                },
                STAGING: {
                    DURATION: 500,
                    Y_VALUE: 22,
                    SHAKE_COUNT: 10,
                    SHAKE_INTENSITY: 2,
                    FIRE_COUNT: 4,
                    FIRE_MIN_INTENSITY: .6,
                    FIRE_MAX_INTENSITY: 1
                },
                FLYING: {
                    DURATION: 500,
                    Y_VALUE: -1e3,
                    Y_EASING: c.default.Easing.bezier(.46, .01, 1, -.3),
                    X_VALUE: 200,
                    X_EASING: c.default.Easing.bezier(.65, .05, 1, .25),
                    FIRE_COUNT: 10,
                    FIRE_MIN_INTENSITY: 1.2,
                    FIRE_MAX_INTENSITY: 1.4,
                    OPACITY_VALUE: 0,
                    OPACITY_DURATION_DIVIDEND: 2
                }
            });

            function T(e, t, s, a) {
                return c.default.sequence(u.times(t, n => c.default.timing(e, {
                    toValue: a(n),
                    duration: s / t
                })))
            }
            class I extends i.Component {
                componentDidMount() {
                    this.startAnimation()
                }
                componentWillUnmount() {
                    this.isUnmounted = !0
                }
                componentDidUpdate(e) {
                    this.props.stage !== e.stage && this.startAnimation()
                }
                startAnimation() {
                    switch (null != this.currentAnimation && this.currentAnimation.stop(), this.props.stage) {
                        case 0:
                            return this.startHoverAnimate();
                        case 1:
                            return this.flyAnimate()
                    }
                }
                resetAnimation() {
                    this.y.setValue(0), this.x.setValue(0), this.opacity.setValue(1), this.fireScale.setValue(1)
                }
                startHoverAnimate() {
                    this.resetAnimation(), this.hoverAnimate(_.HOVERING.Y_VALUE)
                }
                createFireAnimation(e, t, s, a) {
                    return T(this.fireScale, e, t, () => u.random(s, a))
                }
                async hoverAnimate(e) {
                    if (0 !== this.props.stage || this.isUnmounted) return;
                    let t = e > 1,
                        s = t ? _.HOVERING.FIRE_MIN_INTENSITY_FALLING : _.HOVERING.FIRE_MIN_INTENSITY_RISING,
                        a = t ? _.HOVERING.FIRE_MAX_INTENSITY_FALLING : _.HOVERING.FIRE_MAX_INTENSITY_RISING,
                        n = this.createFireAnimation(_.HOVERING.FIRE_COUNT, _.HOVERING.Y_DURATION, s, a),
                        l = c.default.timing(this.y, {
                            toValue: e,
                            duration: _.HOVERING.Y_DURATION,
                            easing: c.default.Easing.inOut(c.default.Easing.ease)
                        });
                    this.currentAnimation = c.default.parallel([l, n]), await this.currentAnimation.start(), this.hoverAnimate(e * _.HOVERING.Y_VALUE_MODIFIER)
                }
                createShakeAnimation(e, t, s) {
                    return T(this.x, e, t, e => u.random(1, s) * (e % 2 == 0 ? 1 : -1))
                }
                async flyAnimate() {
                    let e = c.default.spring(this.y, {
                            toValue: _.FALLING.Y_VALUE,
                            overshootClamping: !0
                        }),
                        t = c.default.spring(this.fireScale, {
                            toValue: _.FALLING.FIRE_VALUE,
                            overshootClamping: !0
                        }),
                        s = c.default.parallel([e, t]),
                        a = c.default.timing(this.y, {
                            toValue: _.STAGING.Y_VALUE,
                            duration: _.STAGING.DURATION
                        }),
                        n = this.createShakeAnimation(_.STAGING.SHAKE_COUNT, _.STAGING.DURATION, _.STAGING.SHAKE_INTENSITY),
                        l = this.createFireAnimation(_.STAGING.FIRE_COUNT, _.STAGING.DURATION, _.STAGING.FIRE_MIN_INTENSITY, _.STAGING.FIRE_MAX_INTENSITY),
                        i = c.default.parallel([a, n, l]),
                        r = c.default.timing(this.y, {
                            toValue: _.FLYING.Y_VALUE,
                            duration: _.FLYING.DURATION,
                            easing: _.FLYING.Y_EASING
                        }),
                        o = c.default.timing(this.x, {
                            toValue: _.FLYING.X_VALUE,
                            duration: _.FLYING.DURATION,
                            easing: _.FLYING.X_EASING
                        }),
                        d = c.default.timing(this.opacity, {
                            toValue: _.FLYING.OPACITY_VALUE,
                            duration: _.FLYING.DURATION / _.FLYING.OPACITY_DURATION_DIVIDEND,
                            delay: _.FLYING.DURATION / _.FLYING.OPACITY_DURATION_DIVIDEND
                        }),
                        u = this.createFireAnimation(_.FLYING.FIRE_COUNT, _.FLYING.DURATION, _.FLYING.FIRE_MIN_INTENSITY, _.FLYING.FIRE_MAX_INTENSITY),
                        E = c.default.parallel([r, o, d, u]);
                    if (this.currentAnimation = c.default.sequence([s, i, E]), await this.currentAnimation.start(), !this.isUnmounted) {
                        let {
                            onFlyingComplete: e
                        } = this.props;
                        null != e && e()
                    }
                }
                getWumpusStyle() {
                    return {
                        transform: [{
                            translateY: this.y.interpolate({
                                inputRange: [0, 1],
                                outputRange: ["0px", "1px"]
                            })
                        }, {
                            translateX: this.x.interpolate({
                                inputRange: [0, 1],
                                outputRange: ["0px", "1px"]
                            })
                        }],
                        opacity: this.opacity
                    }
                }
                getFireStyle() {
                    return {
                        transform: [{
                            scale: this.fireScale
                        }]
                    }
                }
                render() {
                    let {
                        className: e,
                        style: t
                    } = this.props;
                    return (0, l.jsxs)(c.default.div, {
                        className: o(E.animation, e),
                        style: {
                            ...t,
                            ...this.getWumpusStyle()
                        },
                        children: [(0, l.jsx)("div", {
                            className: E.fireTopWrapper,
                            children: (0, l.jsx)(c.default.div, {
                                className: E.fire,
                                style: this.getFireStyle()
                            })
                        }), (0, l.jsx)("div", {
                            className: E.fireBottomWrapper,
                            children: (0, l.jsx)(c.default.div, {
                                className: E.fire,
                                style: this.getFireStyle()
                            })
                        }), (0, l.jsx)("div", {
                            className: E.wumpus
                        })]
                    })
                }
                constructor(...e) {
                    super(...e), this.x = new c.default.Value(0), this.y = new c.default.Value(0), this.opacity = new c.default.Value(1), this.fireScale = new c.default.Value(1), this.currentAnimation = null, this.isUnmounted = !1
                }
            }
            I.Stages = a;
            var S = I
        },
        751433: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return E
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("77078"),
                o = s("151185"),
                d = s("342169"),
                u = s("250501");

            function c(e) {
                return "" === e || "-" === e
            }
            var E = e => {
                let {
                    value: t,
                    onChange: s,
                    className: l,
                    minValue: E,
                    maxValue: _
                } = e, [T, I] = n.useState(t), S = c(T) || null != E && T <= E, N = c(T) || null != _ && T >= _, f = e => {
                    s(c(e) ? null != E ? E : 0 : e), I(e)
                };
                return (0, a.jsx)(r.FocusRing, {
                    within: !0,
                    children: (0, a.jsxs)("div", {
                        className: i(u.actions, l),
                        children: [(0, a.jsx)(r.Clickable, {
                            onClick: e => {
                                e.stopPropagation(), !S && f(T - 1)
                            },
                            tabIndex: -1,
                            className: i(u.iconWrapper, u.subtract, {
                                [u.disabled]: S
                            }),
                            children: (0, a.jsx)(d.default, {
                                className: i(u.icon, {
                                    [u.disabled]: S
                                })
                            })
                        }), (0, a.jsx)(r.TextInput, {
                            value: "".concat(T),
                            onChange: e => {
                                if (c(e)) return f(e);
                                let t = parseInt(e);
                                if (!isNaN(t)) return null != _ && t >= _ ? f(_) : null != E && t <= E ? f(E) : f(t)
                            },
                            inputClassName: u.value
                        }), (0, a.jsx)(r.Clickable, {
                            onClick: e => {
                                e.stopPropagation(), !N && f(T + 1)
                            },
                            tabIndex: -1,
                            className: i(u.iconWrapper, u.add, {
                                [u.disabled]: N
                            }),
                            children: (0, a.jsx)(o.default, {
                                className: i(u.icon, {
                                    [u.disabled]: N
                                })
                            })
                        })]
                    })
                })
            }
        },
        409633: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return c
                }
            });
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("145131"),
                o = s("166499"),
                d = s("926622");
            class u extends n.PureComponent {
                render() {
                    let {
                        focused: e
                    } = this.state, {
                        value: t,
                        placeholder: s,
                        error: n,
                        className: l,
                        maxLength: u,
                        autoFocus: c,
                        prefix: E,
                        disabled: _
                    } = this.props;
                    return (0, a.jsxs)(r.default, {
                        align: r.default.Align.CENTER,
                        justify: r.default.Justify.START,
                        className: i(o.prefixInput, l, {
                            [o.focused]: e,
                            [o.error]: n
                        }),
                        onClick: this.handleFocusInput,
                        children: [(0, a.jsx)(r.default.Child, {
                            grow: 0,
                            className: o.prefixInputPrefix,
                            children: E
                        }), (0, a.jsx)(r.default.Child, {
                            className: d.marginReset,
                            children: (0, a.jsx)("input", {
                                ref: this.setInputRef,
                                className: o.prefixInputInput,
                                value: t,
                                placeholder: s,
                                maxLength: u,
                                onChange: this.handleChange,
                                onFocus: this.handleFocus,
                                onBlur: this.handleBlur,
                                autoFocus: c,
                                disabled: _
                            })
                        })]
                    })
                }
                constructor(e) {
                    super(e), this.setInputRef = e => {
                        this._inputRef = e
                    }, this.handleChange = e => {
                        let {
                            onChange: t
                        } = this.props;
                        t(e.currentTarget.value)
                    }, this.handleFocus = () => {
                        this.setState({
                            focused: !0
                        })
                    }, this.handleBlur = () => {
                        this.setState({
                            focused: !1
                        })
                    }, this.handleFocusInput = () => {
                        null != this._inputRef && this._inputRef.focus()
                    };
                    let {
                        autoFocus: t
                    } = this.props;
                    this.state = {
                        focused: null != t && t
                    }
                }
            }
            var c = u
        },
        773309: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                FIRST_TIER_KEY: function() {
                    return N
                },
                default: function() {
                    return C
                }
            }), s("222007");
            var a = s("37983"),
                n = s("884691"),
                l = s("414456"),
                i = s.n(l),
                r = s("301165"),
                o = s("748820"),
                d = s("118810"),
                u = s("769846"),
                c = s("77078"),
                E = s("159885"),
                _ = s("36694"),
                T = s("49111"),
                I = s("782340"),
                S = s("688541");
            let N = -1,
                f = (0, E.cssValueToNumber)(u.default.PREMIUM_GUILD_PROGRESS_BAR_PROGRESS_BAR_WIDTH),
                g = (0, E.cssValueToNumber)(u.default.PREMIUM_GUILD_PROGRESS_BAR_TIER_MARKER_SIZE),
                A = {
                    tension: 140,
                    friction: 30
                },
                L = {
                    tension: 800,
                    friction: 20
                };
            class m extends n.Component {
                getTotalHeight() {
                    let {
                        tiers: e
                    } = this.props;
                    return e[e.length - 1].y + g / 2
                }
                getProgressHeight(e) {
                    let {
                        tiers: t,
                        progress: s
                    } = this.props, a = t[e], n = t[e + 1];
                    if (null == n || s === a.numRequired) return a.y;
                    let l = n.y - a.y,
                        i = n.numRequired - a.numRequired,
                        r = s - a.numRequired;
                    return a.y + r / i * l
                }
                getCurrentTierIndex() {
                    let {
                        tiers: e,
                        progress: t
                    } = this.props;
                    for (let s = e.length - 1; s > 0; s--)
                        if (t >= e[s].numRequired) return s;
                    return 0
                }
                renderForegroundTooltip() {
                    let {
                        progress: e,
                        tiers: t
                    } = this.props, {
                        showForegroundTooltip: s,
                        foregroundTooltipY: n
                    } = this.state;
                    if (!s || null == this.foregroundTooltipElementRef.current) return null;
                    let l = this.getCurrentTierIndex(),
                        i = t[l + 1],
                        r = null != i ? i.numRequired : null,
                        o = null != r ? r - e : null;
                    return (0, a.jsxs)(c.TooltipLayer, {
                        targetElementRef: this.foregroundTooltipElementRef,
                        position: "right",
                        color: c.Tooltip.Colors.BLACK,
                        tooltipClassName: S.foregroundTooltip,
                        children: [(0, a.jsx)("div", {
                            children: I.default.Messages.PREMIUM_GUILD_SUBSCRIPTION_NUM_SUBSCRIPTIONS.format({
                                numSubscriptions: e
                            })
                        }), null != o && null != i ? (0, a.jsx)("div", {
                            className: S.tooltipMuted,
                            children: I.default.Messages.PREMIUM_GUILD_SETTINGS_MEMBERS_SUBSCRIBED_NEEDED.format({
                                number: o,
                                tier: i.name
                            })
                        }) : null]
                    }, n)
                }
                renderTierMarkerTooltip(e) {
                    let {
                        progress: t
                    } = this.props;
                    if (null == e.name || e.key === T.BoostedGuildTiers.NONE) return null;
                    let s = Math.min(t, e.numRequired);
                    return (0, a.jsxs)("div", {
                        className: S.tierTooltip,
                        children: [(0, a.jsx)("div", {
                            children: e.name
                        }), (0, a.jsx)("div", {
                            children: I.default.Messages.PREMIUM_GUILD_SETTINGS_X_OF_Y_SUBSCRIPTIONS.format({
                                subscribers: s,
                                numRequired: e.numRequired
                            })
                        })]
                    })
                }
                renderTierMarker(e, t, s) {
                    var n;
                    let l;
                    let {
                        progress: i,
                        tiers: o
                    } = this.props, d = o[s], u = i >= e.numRequired, E = null != d && e.key === d.key, T = e.key === o[0].key;
                    l = T ? S.tierFirst : E ? S.tierCurrent : u ? S.tierAccomplished : S.tierInProgress;
                    let I = e.y - (T ? 0 : g / 2),
                        N = this.state.tierMarkerActive === t,
                        f = !T && E && N;
                    return (0, a.jsx)(c.Tooltip, {
                        text: this.renderTierMarkerTooltip(e),
                        position: "right",
                        "aria-label": null !== (n = e.name) && void 0 !== n ? n : "",
                        children: e => (0, a.jsx)(r.Spring, {
                            from: {
                                scale: 1
                            },
                            to: {
                                scale: f ? 1.625 : 1
                            },
                            config: L,
                            children: t => (0, a.jsx)(r.animated.div, {
                                ...e,
                                className: l,
                                style: {
                                    top: I,
                                    transform: t.scale.interpolate(e => "scale(".concat(e, ")"))
                                },
                                children: f && (0, a.jsx)(_.default, {
                                    className: S.currentTierIcon
                                })
                            })
                        })
                    }, e.key)
                }
                renderProgressMask(e) {
                    let {
                        tiers: t
                    } = this.props;
                    return (0, a.jsxs)("mask", {
                        id: "".concat(this.tierMarkerMaskId),
                        children: [(0, a.jsx)("rect", {
                            x: "0",
                            y: "0",
                            width: f,
                            height: e,
                            fill: "white"
                        }), t.map(e => (0, a.jsx)("circle", {
                            cx: f / 2,
                            cy: e.y,
                            r: f / 2,
                            fill: "black"
                        }, e.key))]
                    })
                }
                renderProgressBar(e, t) {
                    let s = this.getProgressHeight(t),
                        {
                            finishedInitialAnimation: n,
                            showForegroundTooltip: l
                        } = this.state;
                    return (0, a.jsxs)("g", {
                        mask: "url(#".concat(this.tierMarkerMaskId, ")"),
                        children: [(0, a.jsx)("rect", {
                            className: S.background,
                            height: e,
                            fill: "currentColor"
                        }), (0, a.jsx)(r.Spring, {
                            from: {
                                height: 0
                            },
                            to: {
                                height: s
                            },
                            config: A,
                            delay: n ? 0 : this.props.initialAnimationDelay,
                            onChange: this.handleForegroundFrame,
                            onRest: n ? void 0 : this.handleFinishedInitialAnimation,
                            children: e => (0, a.jsx)(r.animated.rect, {
                                className: S.foreground,
                                height: e.height.interpolate(e => Math.max(0, e)),
                                onMouseEnter: this.handleForegroundMouseEnter,
                                onMouseLeave: this.handleForegroundMouseLeave,
                                onMouseMove: l ? this.handleForegroundMouseMove : void 0,
                                fill: "currentColor"
                            })
                        })]
                    })
                }
                render() {
                    let {
                        className: e,
                        tiers: t
                    } = this.props, s = this.getCurrentTierIndex(), n = this.getTotalHeight();
                    return (0, a.jsxs)("div", {
                        className: i(e, S.progressBar),
                        style: {
                            height: n
                        },
                        children: [(0, a.jsxs)("svg", {
                            viewBox: "0 0 ".concat(f, " ").concat(n),
                            width: f,
                            height: n,
                            children: [this.renderProgressMask(n), this.renderProgressBar(n, s)]
                        }), (0, a.jsx)("div", {
                            ref: this.foregroundTooltipElementRef,
                            style: {
                                top: this.state.foregroundTooltipY
                            },
                            className: S.foregroundTooltipPosition
                        }), t.map((e, t) => this.renderTierMarker(e, t, s)), this.renderForegroundTooltip()]
                    })
                }
                constructor(...e) {
                    super(...e), this.state = {
                        showForegroundTooltip: !1,
                        foregroundTooltipY: 0,
                        tierMarkerActive: 0,
                        finishedInitialAnimation: !1
                    }, this.foregroundTooltipElementRef = n.createRef(), this.tierMarkerMaskId = (0, o.v4)(), this.handleForegroundMouseEnter = e => {
                        this.setState({
                            showForegroundTooltip: !0
                        }), this.handleForegroundMouseMove(e)
                    }, this.handleForegroundMouseMove = e => {
                        if (!(0, d.isElement)(e.target)) return;
                        let t = e.target.getBoundingClientRect(),
                            s = e.clientY - t.top;
                        s !== this.state.foregroundTooltipY && this.setState({
                            foregroundTooltipY: s
                        })
                    }, this.handleForegroundMouseLeave = () => {
                        this.setState({
                            showForegroundTooltip: !1
                        })
                    }, this.handleForegroundFrame = e => {
                        let {
                            height: t
                        } = e, {
                            tiers: s,
                            progress: a,
                            onAnimatedTierMaker: n
                        } = this.props, {
                            tierMarkerActive: l
                        } = this.state;
                        for (let e = s.length - 1; e > 0; e--) {
                            let i = s[e],
                                r = l === e;
                            if (t + 20 >= i.y && a >= i.numRequired) {
                                !r && (this.setState({
                                    tierMarkerActive: e
                                }), null != n && n(i));
                                return
                            }
                        }
                    }, this.handleFinishedInitialAnimation = () => {
                        this.setState({
                            finishedInitialAnimation: !0
                        })
                    }
                }
            }
            m.defaultProps = {
                initialAnimationDelay: 0
            };
            var C = m
        },
        950603: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return o
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("414456"),
                l = s.n(n),
                i = s("77078"),
                r = s("694187");

            function o(e) {
                let {
                    buttonCTA: t,
                    onChange: s,
                    "aria-label": n,
                    multiple: o = !1,
                    disabled: d = !1,
                    submitting: u = !1,
                    ...c
                } = e;
                return (0, a.jsx)(i.FocusRing, {
                    within: !0,
                    children: (0, a.jsxs)("div", {
                        className: l((0, i.getButtonStyle)({
                            ...c,
                            submitting: u,
                            disabled: d
                        })),
                        style: {
                            width: "max-content"
                        },
                        "aria-disabled": d,
                        children: [(0, a.jsx)("span", {
                            "aria-hidden": !0,
                            children: t
                        }), (0, a.jsx)(r.default, {
                            tabIndex: 0,
                            onChange: s,
                            multiple: o,
                            "aria-label": null != n ? n : t,
                            disabled: d
                        })]
                    })
                })
            }
        },
        612434: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("77078"),
                l = s("145131"),
                i = s("997324"),
                r = e => {
                    let {
                        title: t,
                        subtitle: s,
                        icon: r
                    } = e;
                    return (0, a.jsxs)(l.default, {
                        className: i.wrapper,
                        align: l.default.Align.BASELINE,
                        children: [null != r && (0, a.jsx)(r, {
                            width: 16,
                            height: 16,
                            className: i.icon
                        }), (0, a.jsx)(n.Text, {
                            variant: "text-md/normal",
                            className: i.title,
                            children: t
                        }), null != s && "" !== s ? (0, a.jsx)(n.Text, {
                            variant: "text-xs/semibold",
                            className: i.subtitle,
                            children: s
                        }) : null]
                    })
                }
        },
        756609: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("308472"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 18,
                        height: s = 18,
                        color: n = "currentColor",
                        foreground: l,
                        ...r
                    } = e;
                    return (0, a.jsxs)("svg", {
                        ...(0, i.default)(r),
                        width: t,
                        height: s,
                        viewBox: "0 0 18 18",
                        children: [(0, a.jsx)("path", {
                            fill: n,
                            className: l,
                            d: "M4.5,16.5v-3H3A1.5,1.5,0,0,1,1.5,12V3A1.5,1.5,0,0,1,3,1.5H15A1.5,1.5,0,0,1,16.5,3v9A1.5,1.5,0,0,1,15,13.5H8.5ZM3,3v9H6v1.5L8,12h7V3Z"
                        }), (0, a.jsx)("path", {
                            fill: n,
                            className: l,
                            d: "M6.75,4.5H5.25v6h1.5Z"
                        }), (0, a.jsx)("path", {
                            fill: n,
                            className: l,
                            d: "M9.75,7.5H8.25v3h1.5Z"
                        }), (0, a.jsx)("path", {
                            fill: n,
                            className: l,
                            d: "M12.75,6h-1.5v4.5h1.5Z"
                        })]
                    })
                }, l.AnalyticsIcon, void 0, {
                    size: 18
                })
        },
        217928: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("472612"),
                i = s("246053"),
                r = (0, n.replaceIcon)(function(e) {
                    return (0, a.jsx)(i.default, {
                        ...e,
                        direction: i.default.Directions.DOWN
                    })
                }, l.ArrowSmallDownIcon)
        },
        944441: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("269096"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 24,
                        height: s = 24,
                        color: n = "currentColor",
                        foreground: l,
                        ...r
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(r),
                        width: t,
                        height: s,
                        viewBox: "0 0 24 24",
                        children: (0, a.jsx)("path", {
                            className: l,
                            fill: n,
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M9.00043 14.0491L19.5904 3.46912L23.1212 6.99994L8.99993 21.1213L1.28485 13.4062L4.83367 9.88236L9.00043 14.0491Z"
                        })
                    })
                }, l.CheckmarkLargeIcon, void 0, {
                    size: 24
                })
        },
        673220: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("436984"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 16,
                        height: s = 16,
                        color: n = "currentColor",
                        ...l
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(l),
                        width: t,
                        height: s,
                        viewBox: "0 0 4 14",
                        children: (0, a.jsxs)("g", {
                            fill: "none",
                            fillRule: "evenodd",
                            children: [(0, a.jsx)("ellipse", {
                                fill: n,
                                cx: "3.75",
                                cy: "1",
                                rx: "1.125",
                                ry: "1.08333333"
                            }), (0, a.jsx)("ellipse", {
                                fill: n,
                                cx: "3.75",
                                cy: "4.61111107",
                                rx: "1.125",
                                ry: "1.08333333"
                            }), (0, a.jsx)("ellipse", {
                                fill: n,
                                cx: "0",
                                cy: "4.61111107",
                                rx: "1.125",
                                ry: "1.08333333"
                            }), (0, a.jsx)("ellipse", {
                                fill: n,
                                cx: "3.75",
                                cy: "8.22222227",
                                rx: "1.125",
                                ry: "1.08333333"
                            }), (0, a.jsx)("ellipse", {
                                fill: n,
                                cx: "0",
                                cy: "8.22222227",
                                rx: "1.125",
                                ry: "1.08333333"
                            }), (0, a.jsx)("ellipse", {
                                fill: n,
                                cx: "3.75",
                                cy: "11.83333337",
                                rx: "1.125",
                                ry: "1.08333333"
                            }), (0, a.jsx)("ellipse", {
                                fill: n,
                                cx: "0",
                                cy: "11.83333337",
                                rx: "1.125",
                                ry: "1.08333333"
                            }), (0, a.jsx)("ellipse", {
                                fill: n,
                                cx: "0",
                                cy: "1",
                                rx: "1.125",
                                ry: "1.08333333"
                            })]
                        })
                    })
                }, l.DragIcon, void 0, {
                    size: 16
                })
        },
        117300: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 16,
                    height: s = 16,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsxs)("svg", {
                    ...(0, n.default)(i),
                    width: t,
                    height: s,
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [(0, a.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M0 10C0 4.47716 4.47716 0 10 0C15.5229 0 20 4.47716 20 10C20 15.5229 15.5229 20 10 20C4.47716 20 0 15.5229 0 10ZM10 2C5.58172 2 2 5.58172 2 10C2 14.4183 5.58172 18 10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2Z",
                        fill: l
                    }), (0, a.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M7 11.25C7.30378 11.25 7.5911 11.3881 7.78087 11.6253L8.5 12.5242L9.21913 11.6253C9.4089 11.3881 9.69622 11.25 10 11.25C10.3038 11.25 10.5911 11.3881 10.7809 11.6253L11.5 12.5242L12.2191 11.6253C12.4089 11.3881 12.6962 11.25 13 11.25C13.3038 11.25 13.5911 11.3881 13.7809 11.6253L15.2809 13.5003C15.6259 13.9316 15.556 14.5609 15.1247 14.9059C14.6934 15.2509 14.0641 15.181 13.7191 14.7497L13 13.8508L12.2809 14.7497C12.0911 14.9869 11.8038 15.125 11.5 15.125C11.1962 15.125 10.9089 14.9869 10.7191 14.7497L10 13.8508L9.28087 14.7497C9.0911 14.9869 8.80378 15.125 8.5 15.125C8.19622 15.125 7.9089 14.9869 7.71913 14.7497L7 13.8508L6.28087 14.7497C5.93586 15.181 5.30657 15.2509 4.87531 14.9059C4.44404 14.5609 4.37412 13.9316 4.71913 13.5003L6.21913 11.6253C6.4089 11.3881 6.69622 11.25 7 11.25Z",
                        fill: l
                    }), (0, a.jsx)("path", {
                        d: "M6.625 9.25C7.24632 9.25 7.75 8.7463 7.75 8.125C7.75 7.50368 7.24632 7 6.625 7C6.00368 7 5.5 7.50368 5.5 8.125C5.5 8.7463 6.00368 9.25 6.625 9.25Z",
                        fill: l
                    }), (0, a.jsx)("path", {
                        d: "M13.375 9.25C13.9963 9.25 14.5 8.7463 14.5 8.125C14.5 7.50368 13.9963 7 13.375 7C12.7537 7 12.25 7.50368 12.25 8.125C12.25 8.7463 12.7537 9.25 13.375 9.25Z",
                        fill: l
                    })]
                })
            }
        },
        447353: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("454882"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 18,
                        height: s = 22,
                        color: n = "currentColor",
                        foreground: l,
                        ...r
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(r),
                        width: t,
                        height: s,
                        viewBox: "0 0 18 22",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: (0, a.jsx)("path", {
                            className: l,
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M13.414 0H2C0.897 0 0 0.898 0 2V20C0 21.103 0.897 22 2 22H16C17.103 22 18 21.103 18 20V4.586L13.414 0ZM9 19C8.448 19 8 18.552 8 18C8 17.448 8.448 17 9 17C9.552 17 10 17.448 10 18C10 18.552 9.552 19 9 19ZM10 15H8V9H10V15ZM12 6V1L17 6H12Z",
                            fill: n
                        })
                    })
                }, l.FileWarningIcon, void 0, {
                    size: 22
                })
        },
        40119: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("862099"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 18,
                        height: s = 22,
                        color: n = "currentColor",
                        ...l
                    } = e;
                    return (0, a.jsxs)("svg", {
                        ...(0, i.default)(l),
                        width: t,
                        height: s,
                        viewBox: "0 0 18 22",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [(0, a.jsx)("path", {
                            d: "M7.302 16.758C7.798 17.064 8.376 17.25 9 17.25C10.792 17.25 12.25 15.792 12.25 14C12.25 13.376 12.064 12.798 11.758 12.303L7.302 16.758Z",
                            fill: n
                        }), (0, a.jsx)("path", {
                            d: "M10.698 11.242C10.202 10.936 9.624 10.75 9 10.75C7.208 10.75 5.75 12.208 5.75 14C5.75 14.623 5.936 15.202 6.242 15.698L10.698 11.242Z",
                            fill: n
                        }), (0, a.jsx)("path", {
                            d: "M13.414 0H2C0.897 0 0 0.898 0 2V20C0 21.103 0.897 22 2 22H16C17.103 22 18 21.103 18 20V4.586L13.414 0ZM9 18.75C6.381 18.75 4.25 16.619 4.25 14C4.25 11.381 6.381 9.25 9 9.25C11.619 9.25 13.75 11.381 13.75 14C13.75 16.619 11.619 18.75 9 18.75ZM12 6V1L17 6H12Z",
                            fill: n
                        })]
                    })
                }, l.FileDenyIcon, void 0, {
                    size: 22
                })
        },
        139011: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("305861"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 20,
                        height: s = 20,
                        color: n = "currentColor",
                        ...l
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(l),
                        width: t,
                        height: s,
                        fill: n,
                        viewBox: "0 0 20 20",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: (0, a.jsx)("path", {
                            fill: "#DCDDDE",
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M15.8333 4.99125C12.9667 4.99125 10.6883 2.02042 10.6658 1.98959C10.3508 1.57292 9.64916 1.57292 9.33416 1.98959C9.31166 2.02042 7.03333 4.99125 4.16666 4.99125C3.70583 4.99125 3.33333 5.36459 3.33333 5.82459V11.6579C3.33333 14.8304 8.97 17.8896 9.61166 18.2279C9.73333 18.2921 9.86666 18.3229 9.99999 18.3229C10.1333 18.3229 10.2667 18.2913 10.3883 18.2279C11.03 17.8896 16.6667 14.8304 16.6667 11.6579V5.82459C16.6667 5.36459 16.2942 4.99125 15.8333 4.99125ZM14.6177 7.52947H13.4425V6.35433H12.6591V7.52947H11.484V8.31289H12.6591V9.48802H13.4425V8.31289H14.6177V7.52947ZM10.7006 9.48802C10.7006 10.3517 9.99743 11.0549 9.13371 11.0549C8.26998 11.0549 7.56686 10.3517 7.56686 9.48802C7.56686 8.6243 8.26998 7.92118 9.13371 7.92118C9.99743 7.92118 10.7006 8.6243 10.7006 9.48802ZM6.00002 13.7968C6.00002 12.4129 7.28835 11.4466 9.13371 11.4466C10.9791 11.4466 12.2674 12.4129 12.2674 13.7968V14.1886H6.00002V13.7968Z"
                        })
                    })
                }, l.ShieldUserIcon, void 0, {
                    size: 20
                })
        },
        178837: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("704822"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 24,
                        height: s = 24,
                        color: n = "currentColor",
                        foreground: l,
                        ...r
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(r),
                        width: t,
                        height: s,
                        viewBox: "0 0 24 24",
                        children: (0, a.jsx)("path", {
                            fill: n,
                            className: l,
                            d: "M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"
                        })
                    })
                }, l.KeyIcon, void 0, {
                    size: 24
                })
        },
        350932: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("396680"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 24,
                        height: s = 24,
                        color: n = "currentColor",
                        ...l
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(l),
                        width: t,
                        height: s,
                        fill: "none",
                        viewBox: "0 0 24 24",
                        children: (0, a.jsx)("path", {
                            d: "M3 6H19.5M3 12H19.5M3 18H12.75M16.5 18H21M18.75 15.75V20.25",
                            stroke: n,
                            strokeWidth: "2",
                            strokeLinecap: "round",
                            strokeLinejoin: "round"
                        })
                    })
                }, l.ChannelListPlusIcon, void 0, {
                    size: 24
                })
        },
        375352: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("396680"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 24,
                        height: s = 24,
                        color: n = "currentColor",
                        foreground: l,
                        ...r
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(r),
                        width: t,
                        height: s,
                        viewBox: "0 0 24 24",
                        children: (0, a.jsx)("path", {
                            className: l,
                            fill: n,
                            d: "M22 9H10V7H22V9ZM22 12H2V14H22V12ZM22 17H2V19H22V17ZM9 5.41L7.59 4L4 7.59L2.41 6L1 7.41L4 10.41L9 5.41Z"
                        })
                    })
                }, l.ChannelListPlusIcon, void 0, {
                    size: 24
                })
        },
        412131: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("872036"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 20,
                        height: s = 20,
                        color: n = "currentColor",
                        ...l
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(l),
                        width: t,
                        height: s,
                        fill: n,
                        viewBox: "0 0 20 20",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: (0, a.jsx)("path", {
                            fill: "#DCDDDE",
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M15.8333 4.99123C12.9666 4.99123 10.6883 2.0204 10.6658 1.98956C10.3508 1.5729 9.64909 1.5729 9.33409 1.98956C9.31159 2.0204 7.03325 4.99123 4.16659 4.99123C3.70575 4.99123 3.33325 5.36456 3.33325 5.82456V11.6579C3.33325 14.8304 8.96992 17.8896 9.61159 18.2279C9.73325 18.2921 9.86659 18.3229 9.99992 18.3229C10.1333 18.3229 10.2666 18.2912 10.3883 18.2279C11.0299 17.8896 16.6666 14.8304 16.6666 11.6579V5.82456C16.6666 5.36456 16.2941 4.99123 15.8333 4.99123ZM5.99994 10.0001C5.99994 7.79446 7.79434 6.00006 9.99994 6.00006C12.2055 6.00006 13.9999 7.79446 13.9999 10.0001V10.3129C13.9999 11.3225 13.4207 12.0001 12.5599 12.0001H12.4779C12.4515 12.0001 12.4255 11.9977 12.4007 11.9925L12.3999 12.0001C11.9719 12.0001 11.5303 11.7077 11.2707 11.3253C10.9399 11.6425 10.4935 11.8401 9.99994 11.8401C8.98514 11.8401 8.15994 11.0149 8.15994 10.0001C8.15994 8.98526 8.98514 8.16006 9.99994 8.16006C11.0147 8.16006 11.8399 8.98566 11.8399 10.0001V10.6525C11.8399 10.8729 12.1747 11.2001 12.3999 11.2001H12.4835C12.5091 11.2001 12.5351 11.2021 12.5591 11.2073L12.5599 11.2001C12.9607 11.2001 13.1999 10.8681 13.1999 10.3129V10.0001C13.1999 8.23566 11.7643 6.80006 9.99994 6.80006C8.23554 6.80006 6.79994 8.23566 6.79994 10.0001C6.79994 11.7645 8.23554 13.2001 9.99994 13.2001C10.6531 13.2001 11.2779 13.0077 11.8083 12.6445L12.2607 13.3037C11.5971 13.7593 10.8155 14.0001 9.99994 14.0001C7.79434 14.0001 5.99994 12.2061 5.99994 10.0001ZM8.95994 9.99966C8.95994 10.5733 9.42634 11.0397 9.99994 11.0397C10.5735 11.0397 11.0399 10.5733 11.0399 9.99966C11.0399 9.42606 10.5735 8.95966 9.99994 8.95966C9.42634 8.95966 8.95994 9.42606 8.95994 9.99966Z"
                        })
                    })
                }, l.ShieldAtIcon, void 0, {
                    size: 20
                })
        },
        879478: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("571423"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 16,
                        height: s = 16,
                        color: n = "currentColor",
                        foreground: l,
                        ...r
                    } = e;
                    return (0, a.jsxs)("svg", {
                        ...(0, i.default)(r),
                        width: t,
                        height: s,
                        viewBox: "0 0 16 16",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [(0, a.jsx)("rect", {
                            className: l,
                            y: "3",
                            width: "16",
                            height: "2",
                            rx: "1",
                            fill: n
                        }), (0, a.jsx)("rect", {
                            className: l,
                            y: "11",
                            width: "8",
                            height: "2",
                            rx: "1",
                            fill: n
                        }), (0, a.jsx)("rect", {
                            className: l,
                            y: "7",
                            width: "16",
                            height: "2",
                            rx: "1",
                            fill: n
                        })]
                    })
                }, l.ChannelListIcon, void 0, {
                    size: 16
                })
        },
        160237: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("141495"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 16,
                        height: s = 16,
                        color: n = "currentColor",
                        ...l
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(l),
                        width: t,
                        height: s,
                        viewBox: "0 0 24 24",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: (0, a.jsx)("path", {
                            d: "M4 6H20M4 12H20M4.24242 18H19.7576",
                            stroke: n,
                            strokeWidth: "2",
                            strokeLinecap: "round",
                            strokeLinejoin: "round"
                        })
                    })
                }, l.MenuIcon, void 0, {
                    size: 16
                })
        },
        235692: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 18,
                    height: s = 22,
                    color: l = "currentColor",
                    ...i
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(i),
                    width: t,
                    height: s,
                    viewBox: "0 0 18 22",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: (0, a.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M2 0H13.414L18 4.586V20C18 21.103 17.103 22 16 22H2C0.897 22 0 21.103 0 20V2C0 0.898 0.897 0 2 0ZM12 1V6H17L12 1ZM11.9444 10.2778L10.6667 9H14V12.3333L12.7222 11.0556L11.1278 12.6611L10.3389 11.8722L11.9444 10.2778ZM5.27778 11.0556L4 12.3333V9H7.33333L6.05556 10.2778L7.66111 11.8722L6.87222 12.6611L5.27778 11.0556ZM6.05556 17.7222L7.33333 19H4V15.6667L5.27778 16.9444L6.87222 15.3389L7.66111 16.1278L6.05556 17.7222ZM12.7222 16.9444L14 15.6667V19H10.6667L11.9444 17.7222L10.3389 16.1278L11.1278 15.3389L12.7222 16.9444Z",
                        fill: l
                    })
                })
            }
        },
        179016: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 17,
                    height: s = 16,
                    color: l = "currentColor",
                    foreground: i,
                    ...r
                } = e;
                return (0, a.jsxs)("svg", {
                    ...(0, n.default)(r),
                    width: t,
                    height: s,
                    viewBox: "0 0 17 16",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [(0, a.jsx)("rect", {
                        className: i,
                        y: "5",
                        width: "16",
                        height: "2",
                        rx: "1",
                        fill: l
                    }), (0, a.jsx)("rect", {
                        className: i,
                        y: "9",
                        width: "8",
                        height: "2",
                        rx: "1",
                        fill: l
                    })]
                })
            }
        },
        172483: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("410507"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        height: t = 24,
                        width: s = 24,
                        ...n
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(n),
                        width: s,
                        height: t,
                        viewBox: "0 0 24 24",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: (0, a.jsx)("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M6 2C5.44772 2 5 2.44772 5 3V15H3C2.44772 15 2 15.4477 2 16V17C2 17.5523 2.44772 18 3 18H5V21C5 21.5523 5.44772 22 6 22H7C7.55228 22 8 21.5523 8 21V18H10C10.5523 18 11 17.5523 11 17V16C11 15.4477 10.5523 15 10 15H8V3C8 2.44772 7.55228 2 7 2H6ZM16 3C16 2.44772 16.4477 2 17 2H18C18.5523 2 19 2.44772 19 3V6H21C21.5523 6 22 6.44772 22 7V8C22 8.55228 21.5523 9 21 9H19V21C19 21.5523 18.5523 22 18 22H17C16.4477 22 16 21.5523 16 21V9H14C13.4477 9 13 8.55228 13 8V7C13 6.44772 13.4477 6 14 6H16V3Z",
                            fill: "#B9BBBE"
                        })
                    })
                }, l.FiltersHorizontalIcon, void 0, {
                    size: 24
                })
        },
        891152: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("620000"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 16,
                        height: s = 16,
                        color: n = "currentColor",
                        foreground: l,
                        ...r
                    } = e;
                    return (0, a.jsxs)("svg", {
                        ...(0, i.default)(r),
                        width: t,
                        height: s,
                        viewBox: "0 0 16 16",
                        fill: "none",
                        children: [(0, a.jsx)("path", {
                            className: l,
                            fill: n,
                            d: "M12.1803 4.66659L12.1803 14.6666H10.4701L10.4701 4.66659L8.53289 6.63325L7.33329 5.40825L11.3292 1.33325L15.3333 5.40825L14.1337 6.65825L12.1803 4.66659Z"
                        }), (0, a.jsx)("path", {
                            className: l,
                            fill: n,
                            d: "M3.81962 11.3333L3.81962 1.33325L5.52983 1.33325L5.52985 11.3333L7.46703 9.36658L8.66663 10.5916L4.67068 14.6666L0.666626 10.5916L1.86622 9.34158L3.81962 11.3333Z"
                        })]
                    })
                }, l.ArrowsUpDownIcon, void 0, {
                    size: 16
                })
        },
        444456: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("836155"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 24,
                        height: s = 24,
                        color: n = "currentColor",
                        ...l
                    } = e;
                    return (0, a.jsxs)("svg", {
                        ...(0, i.default)(l),
                        width: t,
                        height: s,
                        viewBox: "0 0 24 24",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [(0, a.jsx)("path", {
                            d: "M11.525 15.019L12.257 9.893L13.742 10.105L13.037 15.041C15.661 15.218 18.146 16.065 20.326 17.526C21.382 15.943 22 14.043 22 12C22 6.486 17.514 2 12 2C6.486 2 2 6.486 2 12C2 14.042 2.618 15.942 3.673 17.526C6.008 15.96 8.693 15.106 11.525 15.019ZM18 11C18.552 11 19 11.447 19 12C19 12.553 18.552 13 18 13C17.448 13 17 12.553 17 12C17 11.447 17.448 11 18 11ZM16 7C16.552 7 17 7.447 17 8C17 8.553 16.552 9 16 9C15.448 9 15 8.553 15 8C15 7.447 15.448 7 16 7ZM12 5C12.552 5 13 5.447 13 6C13 6.553 12.552 7 12 7C11.448 7 11 6.553 11 6C11 5.447 11.448 5 12 5ZM8 7C8.552 7 9 7.447 9 8C9 8.553 8.552 9 8 9C7.448 9 7 8.553 7 8C7 7.447 7.448 7 8 7ZM6 11C6.552 11 7 11.447 7 12C7 12.553 6.552 13 6 13C5.448 13 5 12.553 5 12C5 11.447 5.448 11 6 11Z",
                            fill: n
                        }), (0, a.jsx)("path", {
                            d: "M11.9998 17C9.4598 17 7.0448 17.718 4.9458 19.081C6.7558 20.885 9.2498 22 11.9998 22C14.7508 22 17.2448 20.883 19.0548 19.08C16.9558 17.717 14.5388 17 11.9998 17Z",
                            fill: n
                        })]
                    })
                }, l.OdometerIcon, void 0, {
                    size: 24
                })
        },
        935351: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return r
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("469563"),
                l = s("354087"),
                i = s("75196"),
                r = (0, n.replaceIcon)(function(e) {
                    let {
                        width: t = 24,
                        height: s = 24,
                        color: n = "currentColor",
                        foreground: l,
                        ...r
                    } = e;
                    return (0, a.jsx)("svg", {
                        ...(0, i.default)(r),
                        width: t,
                        height: s,
                        viewBox: "0 0 24 24",
                        children: (0, a.jsx)("path", {
                            className: l,
                            fill: n,
                            d: "M13.5605 11L11.2646 8.706L12.6842 7.294L17.4023 12.009L12.6822 16.708L11.2656 15.292L13.5685 13H2C2.50429 18.045 6.7842 22 11.9744 22C17.5025 22 22 17.513 22 12C22 6.487 17.5025 2 11.9744 2C6.7842 2 2.50429 5.954 2 11H13.5605Z"
                        })
                    })
                }, l.DoorExitIcon, void 0, {
                    size: 24
                })
        },
        69080: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return n
                }
            });
            var a = s("37983");
            s("884691");
            var n = e => {
                let {
                    width: t = 24,
                    height: s = 24,
                    color: n = "currentColor",
                    className: l
                } = e;
                return (0, a.jsx)("svg", {
                    className: l,
                    width: t,
                    height: s,
                    viewBox: "0 0 14 12",
                    children: (0, a.jsx)("path", {
                        d: "M7 0L13.9282 12H0.0717969L7 0Z",
                        fill: n
                    })
                })
            }
        },
        315585: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                default: function() {
                    return l
                }
            });
            var a = s("37983");
            s("884691");
            var n = s("75196");

            function l(e) {
                let {
                    width: t = 14,
                    height: s = 14,
                    color: l = "currentColor",
                    foreground: i,
                    ...r
                } = e;
                return (0, a.jsx)("svg", {
                    ...(0, n.default)(r),
                    width: t,
                    height: s,
                    viewBox: "0 0 14 14",
                    children: (0, a.jsx)("path", {
                        className: i,
                        fill: l,
                        d: "M12,0 C12.8284271,0 14,1.17157288 14,2 L14,12 C14,12.8284271 12.8284271,14 12,14 L2,14 C1.17157288,14 0,12.8284271 0,12 L0,2 C0,1.17157288 1.17157288,0 2,0 L12,0 Z M8,3 L6,3 L6,8 L8,8 L8,3 Z M8,11 L8,9 L6,9 L6,11 L8,11 Z"
                    })
                })
            }
        },
        987663: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                DEFAULT_FOR_STRINGS_KEY: function() {
                    return j
                },
                GuildChangeStrings: function() {
                    return y
                },
                ChannelChangeStrings: function() {
                    return b
                },
                UserChangeStrings: function() {
                    return B
                },
                RoleChangeStrings: function() {
                    return F
                },
                OnboardingPromptChangeStrings: function() {
                    return H
                },
                OnboardingChangeStrings: function() {
                    return V
                },
                HomeSettingsChangeStrings: function() {
                    return k
                },
                InviteChangeStrings: function() {
                    return w
                },
                WebhookChangeStrings: function() {
                    return Y
                },
                EmojiChangeStrings: function() {
                    return K
                },
                StickerChangeStrings: function() {
                    return W
                },
                IntegrationChangeStrings: function() {
                    return z
                },
                StageInstanceChangeStrings: function() {
                    return X
                },
                GuildScheduledEventChangeStrings: function() {
                    return Z
                },
                ThreadChangeStrings: function() {
                    return J
                },
                CommandPermissionChangeStrings: function() {
                    return Q
                },
                AutoModerationRuleChangeStrings: function() {
                    return q
                },
                GuildSoundboardChangeStrings: function() {
                    return $
                },
                VoiceChannelStatusStrings: function() {
                    return ee
                },
                ClydeAiChangeStrings: function() {
                    return et
                },
                NotRenderedChanges: function() {
                    return es
                },
                ACTION_FILTER_ITEMS: function() {
                    return ea
                },
                getChangeTitle: function() {
                    return en
                },
                getStringForAddedChannelFlag: function() {
                    return el
                },
                getStringForRemovedChannelFlag: function() {
                    return ei
                },
                getStringForPermission: function() {
                    return er
                },
                transformLogs: function() {
                    return eo
                }
            }), s("70102"), s("424973");
            var a = s("552442"),
                n = s.n(a),
                l = s("611221"),
                i = s("498574"),
                r = s("316693"),
                o = s("509043"),
                d = s("798609"),
                u = s("679653"),
                c = s("605250"),
                E = s("385976"),
                _ = s("454686"),
                T = s("863636"),
                I = s("698882"),
                S = s("287103"),
                N = s("834052"),
                f = s("364685"),
                g = s("242020"),
                A = s("42203"),
                L = s("26989"),
                m = s("27618"),
                C = s("697218"),
                O = s("568734"),
                h = s("449008"),
                R = s("354023"),
                D = s("49111"),
                M = s("724210"),
                G = s("680894"),
                x = s("143460"),
                p = s("745049"),
                U = s("782340");
            let v = new c.default("AuditLogUtils"),
                j = -1,
                P = () => ({
                    [D.AuditLogChangeKeys.REASON]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON
                }),
                y = () => ({
                    [D.AuditLogChangeKeys.NAME]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_NAME_CHANGE,
                    [D.AuditLogChangeKeys.DESCRIPTION]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DESCRIPTION_CLEAR, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DESCRIPTION_CHANGE),
                    [D.AuditLogChangeKeys.ICON_HASH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_ICON_HASH_CHANGE,
                    [D.AuditLogChangeKeys.SPLASH_HASH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SPLASH_HASH_CHANGE,
                    [D.AuditLogChangeKeys.DISCOVERY_SPLASH_HASH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DISCOVERY_SPLASH_HASH_CHANGE,
                    [D.AuditLogChangeKeys.BANNER_HASH]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_BANNER_HASH_REMOVE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_BANNER_HASH_CHANGE),
                    [D.AuditLogChangeKeys.OWNER_ID]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_OWNER_ID_CHANGE,
                    [D.AuditLogChangeKeys.REGION]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_REGION_CHANGE,
                    [D.AuditLogChangeKeys.PREFERRED_LOCALE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREFERRED_LOCALE_CHANGE,
                    [D.AuditLogChangeKeys.AFK_CHANNEL_ID]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_CHANNEL_ID_CLEAR, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_CHANNEL_ID_CHANGE),
                    [D.AuditLogChangeKeys.AFK_TIMEOUT]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_TIMEOUT_CHANGE,
                    [D.AuditLogChangeKeys.SYSTEM_CHANNEL_ID]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_ID_DISABLE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_ID_CHANGE),
                    [D.AuditLogChangeKeys.RULES_CHANNEL_ID]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_RULES_CHANNEL_ID_CLEAR, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_RULES_CHANNEL_ID_CHANGE),
                    [D.AuditLogChangeKeys.PUBLIC_UPDATES_CHANNEL_ID]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATES_CHANNEL_ID_CLEAR, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATES_CHANNEL_ID_CHANGE),
                    [D.AuditLogChangeKeys.MFA_LEVEL]: {
                        [D.MFALevels.NONE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_MFA_LEVEL_DISABLED,
                        [D.MFALevels.ELEVATED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_MFA_LEVEL_ENABLED
                    },
                    [D.AuditLogChangeKeys.WIDGET_ENABLED]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_ENABLED,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_DISABLED
                    },
                    [D.AuditLogChangeKeys.WIDGET_CHANNEL_ID]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_CHANNEL_ID_DELETE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_CHANNEL_ID_CHANGE),
                    [D.AuditLogChangeKeys.VERIFICATION_LEVEL]: {
                        [D.VerificationLevels.NONE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_NONE,
                        [D.VerificationLevels.LOW]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_LOW,
                        [D.VerificationLevels.MEDIUM]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_MEDIUM,
                        [D.VerificationLevels.HIGH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_HIGH,
                        [D.VerificationLevels.VERY_HIGH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_VERY_HIGH
                    },
                    [D.AuditLogChangeKeys.DEFAULT_MESSAGE_NOTIFICATIONS]: {
                        [D.UserNotificationSettings.ALL_MESSAGES]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DEFAULT_MESSAGE_NOTIFICATIONS_CHANGE_ALL_MESSAGES,
                        [D.UserNotificationSettings.ONLY_MENTIONS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DEFAULT_MESSAGE_NOTIFICATIONS_CHANGE_ONLY_MENTIONS
                    },
                    [D.AuditLogChangeKeys.VANITY_URL_CODE]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VANITY_URL_CODE_DELETE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VANITY_URL_CODE_CHANGE),
                    [D.AuditLogChangeKeys.EXPLICIT_CONTENT_FILTER]: {
                        [D.GuildExplicitContentFilterTypes.DISABLED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_DISABLE,
                        [D.GuildExplicitContentFilterTypes.MEMBERS_WITHOUT_ROLES]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_MEMBERS_WITHOUT_ROLES,
                        [D.GuildExplicitContentFilterTypes.ALL_MEMBERS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_ALL_MEMBERS
                    },
                    [D.AuditLogChangeKeys.PREMIUM_PROGRESS_BAR_ENABLED]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREMIUM_PROGRESS_BAR_ENABLED_ENABLED,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREMIUM_PROGRESS_BAR_ENABLED_DISABLED
                    },
                    [D.AuditLogChangeKeys.AUTO_MODERATION_TRIGGERED_RULE_NAME]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_TRIGGERED_RULE_NAME_CHANGE,
                    [D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATIONS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_JOIN_NOTIFICATIONS,
                    [D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_PREMIUM_SUBSCRIPTIONS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_PREMIUM_SUBSCRIPTIONS,
                    [D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_REMINDER_NOTIFICATIONS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_REMINDER_NOTIFICATIONS,
                    [D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATION_REPLIES]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_JOIN_NOTIFICATION_REPLIES,
                    ...P()
                }),
                b = () => ({
                    [D.AuditLogChangeKeys.NAME]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NAME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NAME_CHANGE),
                    [D.AuditLogChangeKeys.POSITION]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_POSITION_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_POSITION_CHANGE),
                    [D.AuditLogChangeKeys.TOPIC]: eS(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CHANGE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CLEAR),
                    [D.AuditLogChangeKeys.BITRATE]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_BITRATE_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_BITRATE_CHANGE),
                    [D.AuditLogChangeKeys.RTC_REGION_OVERRIDE]: eS(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_CHANGE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_DELETE),
                    [D.AuditLogChangeKeys.USER_LIMIT]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_USER_LIMIT_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_USER_LIMIT_CHANGE),
                    [D.AuditLogChangeKeys.RATE_LIMIT_PER_USER]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CHANGE),
                    [D.AuditLogChangeKeys.PERMISSIONS_RESET]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_RESET,
                    [D.AuditLogChangeKeys.PERMISSIONS_GRANTED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_GRANTED,
                    [D.AuditLogChangeKeys.PERMISSIONS_DENIED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_DENIED,
                    [D.AuditLogChangeKeys.REASON]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON,
                    [D.AuditLogChangeKeys.NSFW]: {
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NSFW_DISABLED,
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NSFW_ENABLED
                    },
                    [D.AuditLogChangeKeys.TYPE]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TYPE_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TYPE_CHANGE),
                    [D.AuditLogChangeKeys.VIDEO_QUALITY_MODE]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VIDEO_QUALITY_MODE_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VIDEO_QUALITY_MODE_CHANGE),
                    [D.AuditLogChangeKeys.DEFAULT_AUTO_ARCHIVE_DURATION]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DEFAULT_AUTO_ARCHIVE_DURATION_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DEFAULT_AUTO_ARCHIVE_DURATION_CHANGE),
                    [D.AuditLogChangeKeys.FLAGS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_FLAGS_CHANGE,
                    [D.AuditLogChangeKeys.AVAILABLE_TAG_ADD]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_ADD,
                    [D.AuditLogChangeKeys.AVAILABLE_TAG_EDIT]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_UPDATE,
                    [D.AuditLogChangeKeys.AVAILABLE_TAG_DELETE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_DELETE
                }),
                B = () => ({
                    [D.AuditLogChangeKeys.NICK]: eS(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_CHANGE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_DELETE),
                    [D.AuditLogChangeKeys.DEAF]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DEAF_ON,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DEAF_OFF
                    },
                    [D.AuditLogChangeKeys.MUTE]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MUTE_ON,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MUTE_OFF
                    },
                    [D.AuditLogChangeKeys.ROLES_REMOVE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLES_REMOVE,
                    [D.AuditLogChangeKeys.ROLES_ADD]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLES_ADD,
                    [D.AuditLogChangeKeys.PRUNE_DELETE_DAYS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_PRUNE_DELETE_DAYS,
                    [D.AuditLogChangeKeys.COMMUNICATION_DISABLED_UNTIL]: eS(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL_REMOVED),
                    [D.AuditLogChangeKeys.BYPASSES_VERIFICATION]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BYPASSES_VERIFICATION_ON,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BYPASSES_VERIFICATION_OFF
                    },
                    [D.AuditLogChangeKeys.AUTO_MODERATION_TRIGGERED_RULE_NAME]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_TRIGGERED_RULE_NAME_CHANGE,
                    ...P()
                }),
                F = () => ({
                    [D.AuditLogChangeKeys.NAME]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_NAME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_NAME_CHANGE),
                    [D.AuditLogChangeKeys.DESCRIPTION]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CHANGE),
                    [D.AuditLogChangeKeys.PERMISSIONS_GRANTED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PERMISSIONS_GRANTED,
                    [D.AuditLogChangeKeys.PERMISSIONS_DENIED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PERMISSIONS_DENIED,
                    [D.AuditLogChangeKeys.COLOR]: {
                        "#000000": U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR_NONE,
                        [j]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR_IOS
                    },
                    [D.AuditLogChangeKeys.HOIST]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_HOIST_ON,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_HOIST_OFF
                    },
                    [D.AuditLogChangeKeys.MENTIONABLE]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_MENTIONABLE_ON,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_MENTIONABLE_OFF
                    },
                    [D.AuditLogChangeKeys.ICON_HASH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_ICON_HASH_CHANGE,
                    [D.AuditLogChangeKeys.UNICODE_EMOJI]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_UNICODE_EMOJI_CHANGE,
                    ...P()
                }),
                H = () => ({
                    ...P(),
                    [D.AuditLogChangeKeys.TITLE]: e => {
                        let {
                            oldValue: t,
                            newValue: s
                        } = e;
                        return null != t ? (0 === t.length && (t = U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_EMPTY_VALUE), U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_TITLE_CHANGE.format({
                            oldValue: t,
                            newValue: s
                        })) : U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_TITLE_CREATE
                    },
                    [D.AuditLogChangeKeys.DESCRIPTION]: e => {
                        let {
                            oldValue: t,
                            newValue: s
                        } = e;
                        return null != t ? (0 === t.length && (t = U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_EMPTY_VALUE), U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DESCRIPTION_CHANGE.format({
                            oldValue: t,
                            newValue: s
                        })) : U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DESCRIPTION_CREATE.format({
                            newValue: s
                        })
                    },
                    [D.AuditLogChangeKeys.OPTIONS]: () => U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_CHANGED_OPTIONS,
                    [D.AuditLogChangeKeys.SINGLE_SELECT]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_SINGLE_SELECT,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_MULTI_SELECT
                    },
                    [D.AuditLogChangeKeys.REQUIRED]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_REQUIRED,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_OPTIONAL
                    }
                }),
                V = () => ({
                    ...P(),
                    [D.AuditLogChangeKeys.DEFAULT_CHANNEL_IDS]: e => {
                        let {
                            newValue: t
                        } = e;
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DEFAULT_CHANNEL_IDS.format({
                            count: t.length
                        })
                    },
                    [D.AuditLogChangeKeys.ENABLE_DEFAULT_CHANNELS]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE_DEFAULT_CHANNELS,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE_DEFAULT_CHANNELS
                    },
                    [D.AuditLogChangeKeys.ENABLE_ONBOARDING_PROMPTS]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE_PROMPTS,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE_PROMPTS
                    },
                    [D.AuditLogChangeKeys.ENABLED]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE
                    }
                }),
                k = () => ({
                    ...P(),
                    [D.AuditLogChangeKeys.WELCOME_MESSAGE]: () => U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_WELCOME_MESSAGE,
                    [D.AuditLogChangeKeys.NEW_MEMBER_ACTIONS]: () => U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_NEW_MEMBER_ACTIONS,
                    [D.AuditLogChangeKeys.RESOURCE_CHANNELS]: () => U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_RESOURCE_CHANNELS
                }),
                w = () => ({
                    [D.AuditLogChangeKeys.CODE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CODE_CREATE,
                    [D.AuditLogChangeKeys.CHANNEL_ID]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CHANNEL_CREATE,
                    [D.AuditLogChangeKeys.MAX_USES]: {
                        0: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_USES_CREATE_INFINITE,
                        [j]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_USES_CREATE
                    },
                    [D.AuditLogChangeKeys.MAX_AGE]: {
                        0: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_AGE_CREATE_INFINITE,
                        [j]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_AGE_CREATE
                    },
                    [D.AuditLogChangeKeys.TEMPORARY]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_TEMPORARY_ON,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_TEMPORARY_OFF
                    },
                    [D.AuditLogChangeKeys.FLAGS]: e => {
                        let {
                            newValue: t
                        } = e;
                        return function(e) {
                            let {
                                newValue: t
                            } = e;
                            return t.map(e => (function(e) {
                                if (e === i.GuildInviteFlags.IS_GUEST_INVITE) return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_INVITE_GUEST_INVITE;
                                return null
                            })(e)).filter(h.isNotNullish)
                        }({
                            newValue: t
                        })
                    },
                    ...P()
                }),
                Y = () => ({
                    [D.AuditLogChangeKeys.CHANNEL_ID]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CHANNEL_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CHANNEL_CHANGE),
                    [D.AuditLogChangeKeys.NAME]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_NAME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_NAME_CHANGE),
                    [D.AuditLogChangeKeys.AVATAR_HASH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_AVATAR,
                    [D.AuditLogChangeKeys.REASON]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON
                }),
                K = () => ({
                    [D.AuditLogChangeKeys.NAME]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_NAME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_NAME_CHANGE),
                    ...P()
                }),
                W = () => ({
                    [D.AuditLogChangeKeys.NAME]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_NAME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_NAME_CHANGE),
                    [D.AuditLogChangeKeys.TAGS]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_TAGS_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_TAGS_CHANGE),
                    [D.AuditLogChangeKeys.DESCRIPTION]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CHANGE),
                    ...P()
                }),
                z = () => ({
                    [D.AuditLogChangeKeys.ENABLE_EMOTICONS]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_ENABLE_EMOTICONS_ON,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_ENABLE_EMOTICONS_OFF
                    },
                    [D.AuditLogChangeKeys.EXPIRE_BEHAVIOR]: {
                        0: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_BEHAVIOR_REMOVE_SYNCED_ROLE,
                        1: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_BEHAVIOR_KICK_FROM_SERVER
                    },
                    [D.AuditLogChangeKeys.EXPIRE_GRACE_PERIOD]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_GRACE_PERIOD,
                    ...P()
                }),
                X = () => ({
                    [D.AuditLogChangeKeys.TOPIC]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CHANGE),
                    [D.AuditLogChangeKeys.PRIVACY_LEVEL]: {
                        [p.GuildScheduledEventPrivacyLevel.GUILD_ONLY]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_GUILD_ONLY,
                        [p.GuildScheduledEventPrivacyLevel.PUBLIC]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_PUBLIC
                    },
                    ...P()
                }),
                Z = () => ({
                    [D.AuditLogChangeKeys.NAME]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_NAME_CREATE,
                    [D.AuditLogChangeKeys.DESCRIPTION]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_DESCRIPTION_CREATE,
                    [D.AuditLogChangeKeys.PRIVACY_LEVEL]: {
                        [p.GuildScheduledEventPrivacyLevel.GUILD_ONLY]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_GUILD_ONLY,
                        [p.GuildScheduledEventPrivacyLevel.PUBLIC]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_PUBLIC
                    },
                    [D.AuditLogChangeKeys.STATUS]: {
                        [p.GuildScheduledEventStatus.SCHEDULED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_SCHEDULED,
                        [p.GuildScheduledEventStatus.ACTIVE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_ACTIVE,
                        [p.GuildScheduledEventStatus.COMPLETED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_COMPLETED,
                        [p.GuildScheduledEventStatus.CANCELED]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_CANCELED
                    },
                    [D.AuditLogChangeKeys.ENTITY_TYPE]: {
                        [p.GuildScheduledEventEntityTypes.NONE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_NONE,
                        [p.GuildScheduledEventEntityTypes.STAGE_INSTANCE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_STAGE_INSTANCE,
                        [p.GuildScheduledEventEntityTypes.VOICE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_VOICE,
                        [p.GuildScheduledEventEntityTypes.EXTERNAL]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_EXTERNAL
                    },
                    [D.AuditLogChangeKeys.CHANNEL_ID]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CHANNEL_CLEAR, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CHANNEL),
                    [D.AuditLogChangeKeys.LOCATION]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_LOCATION_CLEAR, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_LOCATION),
                    [D.AuditLogChangeKeys.IMAGE_HASH]: eI(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_IMAGE_HASH_REMOVE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_IMAGE_HASH_CHANGE),
                    ...P()
                }),
                J = () => ({
                    [D.AuditLogChangeKeys.NAME]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_NAME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_NAME_CHANGE),
                    [D.AuditLogChangeKeys.ARCHIVED]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_ARCHIVED,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_UNARCHIVED
                    },
                    [D.AuditLogChangeKeys.LOCKED]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_LOCKED,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_UNLOCKED
                    },
                    [D.AuditLogChangeKeys.INVITABLE]: {
                        true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_INVITABLE_ENABLED,
                        false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_INVITABLE_DISABLED
                    },
                    [D.AuditLogChangeKeys.AUTO_ARCHIVE_DURATION]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_AUTO_ARCHIVE_DURATION_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_AUTO_ARCHIVE_DURATION_CHANGE),
                    [D.AuditLogChangeKeys.RATE_LIMIT_PER_USER]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CHANGE),
                    [D.AuditLogChangeKeys.FLAGS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_FLAGS_CHANGE,
                    ...P()
                }),
                Q = e => {
                    let t = {
                        ...P()
                    };
                    return null == e || e.forEach(e => {
                        e.newValue ? e.newValue.permission ? t[e.key] = U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_GRANTED : t[e.key] = U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_DENIED : t[e.key] = U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_REMOVED
                    }), t
                },
                q = () => {
                    let e = {
                        [D.AuditLogChangeKeys.NAME]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_NAME_UPDATE,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_TRIGGER_TYPE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_TYPE_UPDATE,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_EVENT_TYPE]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EVENT_TYPE_UPDATE,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_ACTIONS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ACTIONS_UPDATE,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_ENABLED]: {
                            true: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ENABLED_UPDATE,
                            false: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_DISABLED_UPDATE
                        },
                        [D.AuditLogChangeKeys.AUTO_MODERATION_EXEMPT_ROLES]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EXEMPT_ROLES_UPDATE,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_EXEMPT_CHANNELS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EXEMPT_CHANNELS_UPDATE,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_TRIGGER_METADATA]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_METADATA_UPDATE,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_ADD_KEYWORDS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_KEYWORDS,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_REMOVE_KEYWORDS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_KEYWORDS,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_ADD_REGEX_PATTERNS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_REGEX_PATTERNS,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_REMOVE_REGEX_PATTERNS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_REGEX_PATTERNS,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_ADD_ALLOW_LIST]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_ALLOW_LIST,
                        [D.AuditLogChangeKeys.AUTO_MODERATION_REMOVE_ALLOW_LIST]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_ALLOW_LIST,
                        ...P()
                    };
                    return e
                },
                $ = () => ({
                    [D.AuditLogChangeKeys.NAME]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_NAME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_NAME_CHANGE),
                    [D.AuditLogChangeKeys.VOLUME]: eT(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_VOLUME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_VOLUME_CHANGE),
                    [D.AuditLogChangeKeys.EMOJI_NAME]: eS(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_REPLACE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_REMOVE),
                    [D.AuditLogChangeKeys.EMOJI_ID]: eS(U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_REPLACE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_CREATE, U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_REMOVE),
                    ...P()
                }),
                ee = () => ({
                    [D.AuditLogChangeKeys.STATUS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_STATUS_CREATE,
                    ...P()
                }),
                et = () => ({
                    [D.AuditLogChangeKeys.NAME]: e => {
                        let {
                            newValue: t
                        } = e;
                        return "" === t || null == t ? U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_NAME_RESET : U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_NAME_UPDATED
                    },
                    [D.AuditLogChangeKeys.AVATAR_HASH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_AVATAR_UPDATED,
                    [D.AuditLogChangeKeys.BANNER_HASH]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_BANNER_UPDATED,
                    [D.AuditLogChangeKeys.THEME_COLORS]: U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_THEME_COLORS_UPDATED,
                    [D.AuditLogChangeKeys.PERSONALITY]: e => {
                        let {
                            newValue: t
                        } = e;
                        return "" === t ? U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_PERSONALITY_RESET : U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_PERSONALITY_UPDATED
                    },
                    ...P()
                }),
                es = {
                    [D.AuditLogTargetTypes.CHANNEL]: {
                        [D.AuditLogChangeKeys.ID]: !0,
                        [D.AuditLogChangeKeys.PERMISSION_OVERWRITES]: !0
                    },
                    [D.AuditLogTargetTypes.CHANNEL_OVERWRITE]: {
                        [D.AuditLogChangeKeys.TYPE]: !0,
                        [D.AuditLogChangeKeys.ID]: !0,
                        [D.AuditLogChangeKeys.PERMISSION_OVERWRITES]: !0
                    },
                    [D.AuditLogTargetTypes.INVITE]: {
                        [D.AuditLogChangeKeys.INVITER_ID]: !0,
                        [D.AuditLogChangeKeys.USES]: !0
                    },
                    [D.AuditLogTargetTypes.WEBHOOK]: {
                        [D.AuditLogChangeKeys.TYPE]: !0,
                        [D.AuditLogChangeKeys.APPLICATION_ID]: !0
                    },
                    [D.AuditLogTargetTypes.INTEGRATION]: {
                        [D.AuditLogChangeKeys.TYPE]: !0
                    },
                    [D.AuditLogTargetTypes.THREAD]: {
                        [D.AuditLogChangeKeys.ID]: !0,
                        [D.AuditLogChangeKeys.TYPE]: !0
                    },
                    [D.AuditLogTargetTypes.STICKER]: {
                        [D.AuditLogChangeKeys.ID]: !0,
                        [D.AuditLogChangeKeys.TYPE]: !0,
                        [D.AuditLogChangeKeys.ASSET]: !0,
                        [D.AuditLogChangeKeys.FORMAT_TYPE]: !0,
                        [D.AuditLogChangeKeys.AVAILABLE]: !0,
                        [D.AuditLogChangeKeys.GUILD_ID]: !0
                    },
                    [D.AuditLogTargetTypes.GUILD_HOME]: {
                        [D.AuditLogChangeKeys.ENTITY_TYPE]: !0
                    },
                    [D.AuditLogTargetTypes.GUILD_ONBOARDING]: {
                        [D.AuditLogChangeKeys.PROMPTS]: !0
                    },
                    [D.AuditLogTargetTypes.GUILD_SOUNDBOARD]: {
                        [D.AuditLogChangeKeys.ID]: !0,
                        [D.AuditLogChangeKeys.SOUND_ID]: !0
                    },
                    [D.AuditLogTargetTypes.CLYDE_AI]: {
                        [D.AuditLogChangeKeys.CLYDE_PROFILE_ID]: !0,
                        [D.AuditLogChangeKeys.AUTHOR_ID]: !0
                    }
                },
                ea = () => [{
                    value: D.AuditLogActions.ALL,
                    label: U.default.Messages.GUILD_SETTINGS_FILTER_ALL_ACTIONS,
                    valueLabel: U.default.Messages.GUILD_SETTINGS_FILTER_ALL
                }, {
                    value: D.AuditLogActions.GUILD_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_UPDATE
                }, {
                    value: D.AuditLogActions.CHANNEL_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_CREATE
                }, {
                    value: D.AuditLogActions.CHANNEL_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_UPDATE
                }, {
                    value: D.AuditLogActions.CHANNEL_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_DELETE
                }, {
                    value: D.AuditLogActions.CHANNEL_OVERWRITE_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_CREATE
                }, {
                    value: D.AuditLogActions.CHANNEL_OVERWRITE_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_UPDATE
                }, {
                    value: D.AuditLogActions.CHANNEL_OVERWRITE_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_DELETE
                }, {
                    value: D.AuditLogActions.MEMBER_KICK,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_KICK
                }, {
                    value: D.AuditLogActions.MEMBER_PRUNE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_PRUNE
                }, {
                    value: D.AuditLogActions.MEMBER_BAN_ADD,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_BAN_ADD
                }, {
                    value: D.AuditLogActions.MEMBER_BAN_REMOVE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_BAN_REMOVE
                }, {
                    value: D.AuditLogActions.MEMBER_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_UPDATE
                }, {
                    value: D.AuditLogActions.MEMBER_ROLE_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_ROLE_UPDATE
                }, {
                    value: D.AuditLogActions.MEMBER_MOVE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_MOVE
                }, {
                    value: D.AuditLogActions.MEMBER_DISCONNECT,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_DISCONNECT
                }, {
                    value: D.AuditLogActions.BOT_ADD,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_BOT_ADD
                }, {
                    value: D.AuditLogActions.THREAD_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_THREAD_CREATE
                }, {
                    value: D.AuditLogActions.THREAD_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_THREAD_UPDATE
                }, {
                    value: D.AuditLogActions.THREAD_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_THREAD_DELETE
                }, {
                    value: D.AuditLogActions.ROLE_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_CREATE
                }, {
                    value: D.AuditLogActions.ROLE_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_UPDATE
                }, {
                    value: D.AuditLogActions.ROLE_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_DELETE
                }, {
                    value: D.AuditLogActions.ONBOARDING_PROMPT_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_CREATE
                }, {
                    value: D.AuditLogActions.ONBOARDING_PROMPT_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_UPDATE
                }, {
                    value: D.AuditLogActions.ONBOARDING_PROMPT_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_DELETE
                }, {
                    value: D.AuditLogActions.ONBOARDING_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ONBOARDING_CREATE
                }, {
                    value: D.AuditLogActions.ONBOARDING_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_ONBOARDING_UPDATE
                }, {
                    value: D.AuditLogActions.HOME_SETTINGS_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_HOME_SETTINGS_CREATE
                }, {
                    value: D.AuditLogActions.HOME_SETTINGS_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_HOME_SETTINGS_UPDATE
                }, {
                    value: D.AuditLogActions.INVITE_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_INVITE_CREATE
                }, {
                    value: D.AuditLogActions.INVITE_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_INVITE_UPDATE
                }, {
                    value: D.AuditLogActions.INVITE_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_INVITE_DELETE
                }, {
                    value: D.AuditLogActions.WEBHOOK_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_CREATE
                }, {
                    value: D.AuditLogActions.WEBHOOK_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_UPDATE
                }, {
                    value: D.AuditLogActions.WEBHOOK_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_DELETE
                }, {
                    value: D.AuditLogActions.EMOJI_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_EMOJI_CREATE
                }, {
                    value: D.AuditLogActions.EMOJI_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_EMOJI_UPDATE
                }, {
                    value: D.AuditLogActions.EMOJI_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_EMOJI_DELETE
                }, {
                    value: D.AuditLogActions.MESSAGE_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MESSAGE_DELETE
                }, {
                    value: D.AuditLogActions.MESSAGE_BULK_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MESSAGE_BULK_DELETE
                }, {
                    value: D.AuditLogActions.MESSAGE_PIN,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MESSAGE_PIN
                }, {
                    value: D.AuditLogActions.MESSAGE_UNPIN,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_MESSAGE_UNPIN
                }, {
                    value: D.AuditLogActions.INTEGRATION_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_CREATE
                }, {
                    value: D.AuditLogActions.INTEGRATION_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_UPDATE
                }, {
                    value: D.AuditLogActions.INTEGRATION_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_DELETE
                }, {
                    value: D.AuditLogActions.STICKER_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_STICKER_CREATE
                }, {
                    value: D.AuditLogActions.STICKER_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_STICKER_UPDATE
                }, {
                    value: D.AuditLogActions.STICKER_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_STICKER_DELETE
                }, {
                    value: D.AuditLogActions.STAGE_INSTANCE_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_CREATE
                }, {
                    value: D.AuditLogActions.STAGE_INSTANCE_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_UPDATE
                }, {
                    value: D.AuditLogActions.STAGE_INSTANCE_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_DELETE
                }, {
                    value: D.AuditLogActions.GUILD_SCHEDULED_EVENT_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_CREATE
                }, {
                    value: D.AuditLogActions.GUILD_SCHEDULED_EVENT_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_UPDATE
                }, {
                    value: D.AuditLogActions.GUILD_SCHEDULED_EVENT_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_DELETE
                }, {
                    value: D.AuditLogActions.APPLICATION_COMMAND_PERMISSION_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_APPLICATION_COMMAND_PERMISSION_UPDATE
                }, {
                    value: D.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_AUTO_MODERATION_BLOCK_MESSAGE
                }, {
                    value: D.AuditLogActions.AUTO_MODERATION_RULE_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_CREATE
                }, {
                    value: D.AuditLogActions.AUTO_MODERATION_RULE_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_UPDATE
                }, {
                    value: D.AuditLogActions.AUTO_MODERATION_RULE_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_DELETE
                }, {
                    value: D.AuditLogActions.GUILD_HOME_FEATURE_ITEM,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_HOME_FEATURE_ITEM
                }, {
                    value: D.AuditLogActions.GUILD_HOME_REMOVE_ITEM,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_HOME_REMOVE_ITEM
                }, {
                    value: D.AuditLogActions.SOUNDBOARD_SOUND_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_CREATE
                }, {
                    value: D.AuditLogActions.SOUNDBOARD_SOUND_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_UPDATE
                }, {
                    value: D.AuditLogActions.SOUNDBOARD_SOUND_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_DELETE
                }, {
                    value: D.AuditLogActions.CLYDE_AI_PROFILE_UPDATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_CLYDE_AI_PROFIE_UPDATE
                }, {
                    value: D.AuditLogActions.VOICE_CHANNEL_STATUS_CREATE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_VOICE_CHANNEL_STATUS_CREATE
                }, {
                    value: D.AuditLogActions.VOICE_CHANNEL_STATUS_DELETE,
                    label: U.default.Messages.GUILD_SETTINGS_ACTION_FILTER_VOICE_CHANNEL_STATUS_DELETE
                }];

            function en(e) {
                switch (e.action) {
                    case D.AuditLogActions.GUILD_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATE;
                    case D.AuditLogActions.CHANNEL_CREATE:
                        let t = null != e.changes ? e.changes.find(e => e.key === D.AuditLogChangeKeys.TYPE) : null;
                        if (null == t) throw Error("[AuditLog] Could not find type change for channel create");
                        switch (t.newValue) {
                            case D.ChannelTypes.GUILD_STAGE_VOICE:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_STAGE_CREATE;
                            case D.ChannelTypes.GUILD_VOICE:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VOICE_CREATE;
                            case D.ChannelTypes.GUILD_CATEGORY:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_CATEGORY_CREATE;
                            default:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TEXT_CREATE
                        }
                    case D.AuditLogActions.CHANNEL_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_UPDATE;
                    case D.AuditLogActions.CHANNEL_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DELETE;
                    case D.AuditLogActions.CHANNEL_OVERWRITE_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_CREATE;
                    case D.AuditLogActions.CHANNEL_OVERWRITE_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_UPDATE;
                    case D.AuditLogActions.CHANNEL_OVERWRITE_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_DELETE;
                    case D.AuditLogActions.MEMBER_KICK:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_KICK;
                    case D.AuditLogActions.MEMBER_PRUNE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_PRUNE;
                    case D.AuditLogActions.MEMBER_BAN_ADD:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BAN_ADD;
                    case D.AuditLogActions.MEMBER_BAN_REMOVE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BAN_REMOVE;
                    case D.AuditLogActions.MEMBER_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_UPDATE;
                    case D.AuditLogActions.MEMBER_ROLE_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLE_UPDATE;
                    case D.AuditLogActions.MEMBER_MOVE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MOVE;
                    case D.AuditLogActions.MEMBER_DISCONNECT:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DISCONNECT;
                    case D.AuditLogActions.BOT_ADD:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_BOT_ADD;
                    case D.AuditLogActions.ROLE_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_CREATE;
                    case D.AuditLogActions.ROLE_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_UPDATE;
                    case D.AuditLogActions.ROLE_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_DELETE;
                    case D.AuditLogActions.INVITE_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CREATE;
                    case D.AuditLogActions.INVITE_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_UPDATE;
                    case D.AuditLogActions.INVITE_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_DELETE;
                    case D.AuditLogActions.WEBHOOK_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CREATE;
                    case D.AuditLogActions.WEBHOOK_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_UPDATE;
                    case D.AuditLogActions.WEBHOOK_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_DELETE;
                    case D.AuditLogActions.EMOJI_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_CREATE;
                    case D.AuditLogActions.EMOJI_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_UPDATE;
                    case D.AuditLogActions.EMOJI_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_DELETE;
                    case D.AuditLogActions.STICKER_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_CREATE;
                    case D.AuditLogActions.STICKER_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_UPDATE;
                    case D.AuditLogActions.STICKER_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_DELETE;
                    case D.AuditLogActions.MESSAGE_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_DELETE;
                    case D.AuditLogActions.MESSAGE_BULK_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_BULK_DELETE;
                    case D.AuditLogActions.MESSAGE_PIN:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_PIN;
                    case D.AuditLogActions.MESSAGE_UNPIN:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_UNPIN;
                    case D.AuditLogActions.INTEGRATION_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_CREATE;
                    case D.AuditLogActions.INTEGRATION_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_UPDATE;
                    case D.AuditLogActions.INTEGRATION_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_DELETE;
                    case D.AuditLogActions.STAGE_INSTANCE_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_CREATE;
                    case D.AuditLogActions.STAGE_INSTANCE_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_UPDATE;
                    case D.AuditLogActions.STAGE_INSTANCE_DELETE:
                        if (null != e.userId) return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_DELETE;
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_DELETE_NO_USER;
                    case D.AuditLogActions.GUILD_SCHEDULED_EVENT_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CREATE;
                    case D.AuditLogActions.GUILD_SCHEDULED_EVENT_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_UPDATE;
                    case D.AuditLogActions.GUILD_SCHEDULED_EVENT_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_DELETE;
                    case D.AuditLogActions.THREAD_CREATE:
                        let s = null != e.changes ? e.changes.find(e => e.key === D.AuditLogChangeKeys.TYPE) : null;
                        if (null == s) throw Error("[AuditLog] Could not find type change for thread create");
                        switch (s.newValue) {
                            case D.ChannelTypes.PRIVATE_THREAD:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_PRIVATE_THREAD_CREATE;
                            case D.ChannelTypes.ANNOUNCEMENT_THREAD:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ANNOUNCEMENT_THREAD_CREATE;
                            default:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_CREATE
                        }
                    case D.AuditLogActions.THREAD_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_UPDATE;
                    case D.AuditLogActions.THREAD_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_DELETE;
                    case D.AuditLogActions.APPLICATION_COMMAND_PERMISSION_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_UPDATE;
                    case D.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_BLOCK_MESSAGE;
                    case D.AuditLogActions.AUTO_MODERATION_FLAG_TO_CHANNEL:
                        var a;
                        if ((null === (a = e.options) || void 0 === a ? void 0 : a.auto_moderation_rule_trigger_type) === x.AutomodTriggerType.USER_PROFILE.toString()) return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_FLAGGED_USER_PROFILE;
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_FLAG_TO_CHANNEL_MESSAGE;
                    case D.AuditLogActions.AUTO_MODERATION_USER_COMMUNICATION_DISABLED:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_USER_COMMUNICATION_DISABLED_MESSAGE;
                    case D.AuditLogActions.AUTO_MODERATION_QUARANTINE_USER:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_QUARANTINE_USER;
                    case D.AuditLogActions.CREATOR_MONETIZATION_REQUEST_CREATED:
                        return U.default.Messages.CREATOR_MONETIZATION_APPLIED_AUDIT_LOG_TITLE;
                    case D.AuditLogActions.CREATOR_MONETIZATION_TERMS_ACCEPTED:
                        return U.default.Messages.CREATOR_MONETIZATION_TERMS_ACCEPTED_AUDIT_LOG_TITLE;
                    case D.AuditLogActions.AUTO_MODERATION_RULE_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_CREATE;
                    case D.AuditLogActions.AUTO_MODERATION_RULE_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_UPDATE;
                    case D.AuditLogActions.AUTO_MODERATION_RULE_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_DELETE;
                    case D.AuditLogActions.ONBOARDING_PROMPT_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_CREATE;
                    case D.AuditLogActions.ONBOARDING_PROMPT_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_UPDATE;
                    case D.AuditLogActions.ONBOARDING_PROMPT_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DELETE;
                    case D.AuditLogActions.ONBOARDING_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_CREATE;
                    case D.AuditLogActions.ONBOARDING_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_UPDATE;
                    case D.AuditLogActions.HOME_SETTINGS_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CREATE;
                    case D.AuditLogActions.HOME_SETTINGS_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_UPDATE;
                    case D.AuditLogActions.GUILD_HOME_FEATURE_ITEM:
                        let n = null != e.changes ? e.changes.find(e => e.key === D.AuditLogChangeKeys.ENTITY_TYPE) : null;
                        if (null == n) return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_ITEM;
                        switch (n.newValue) {
                            case l.GuildFeedItemTypes.MESSAGE:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_MESSAGE;
                            case l.GuildFeedItemTypes.FORUM_POST:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_FORUM_POST;
                            default:
                                return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_ITEM
                        }
                    case D.AuditLogActions.GUILD_HOME_REMOVE_ITEM:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_REMOVE_ITEM;
                    case D.AuditLogActions.SOUNDBOARD_SOUND_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_CREATED;
                    case D.AuditLogActions.SOUNDBOARD_SOUND_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_UPDATED;
                    case D.AuditLogActions.SOUNDBOARD_SOUND_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_DELETED;
                    case D.AuditLogActions.VOICE_CHANNEL_STATUS_CREATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_CREATED;
                    case D.AuditLogActions.VOICE_CHANNEL_STATUS_DELETE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_DELETED;
                    case D.AuditLogActions.CLYDE_AI_PROFILE_UPDATE:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_PROFILE_UPDATE;
                    default:
                        return null
                }
            }

            function el(e) {
                switch (e) {
                    case M.ChannelFlags.GUILD_FEED_REMOVED:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_REMOVE_CHANNEL;
                    case M.ChannelFlags.ACTIVE_CHANNELS_REMOVED:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ACTIVE_CHANNELS_REMOVE_CHANNEL;
                    case M.ChannelFlags.PINNED:
                        return U.default.Messages.PINNED_POST
                }
                return null
            }

            function ei(e) {
                switch (e) {
                    case M.ChannelFlags.GUILD_FEED_REMOVED:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_UNREMOVE_CHANNEL;
                    case M.ChannelFlags.ACTIVE_CHANNELS_REMOVED:
                        return U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ACTIVE_CHANNELS_UNREMOVE_CHANNEL;
                    case M.ChannelFlags.PINNED:
                        return U.default.Messages.UNPINNED_POST
                }
                return null
            }

            function er(e, t) {
                switch (e) {
                    case D.Permissions.CREATE_INSTANT_INVITE:
                        return U.default.Messages.CREATE_INSTANT_INVITE;
                    case D.Permissions.KICK_MEMBERS:
                        return U.default.Messages.KICK_MEMBERS;
                    case D.Permissions.BAN_MEMBERS:
                        return U.default.Messages.BAN_MEMBERS;
                    case D.Permissions.ADMINISTRATOR:
                        return U.default.Messages.ADMINISTRATOR;
                    case D.Permissions.MANAGE_CHANNELS:
                        if (t.targetType === D.AuditLogTargetTypes.CHANNEL || t.targetType === D.AuditLogTargetTypes.CHANNEL_OVERWRITE) return U.default.Messages.MANAGE_CHANNEL;
                        return U.default.Messages.MANAGE_CHANNELS;
                    case D.Permissions.MANAGE_GUILD:
                        return U.default.Messages.MANAGE_SERVER;
                    case D.Permissions.VIEW_GUILD_ANALYTICS:
                        return U.default.Messages.VIEW_GUILD_ANALYTICS;
                    case D.Permissions.CHANGE_NICKNAME:
                        return U.default.Messages.CHANGE_NICKNAME;
                    case D.Permissions.MANAGE_NICKNAMES:
                        return U.default.Messages.MANAGE_NICKNAMES;
                    case D.Permissions.MANAGE_ROLES:
                        return U.default.Messages.MANAGE_ROLES;
                    case D.Permissions.MANAGE_WEBHOOKS:
                        return U.default.Messages.MANAGE_WEBHOOKS;
                    case D.Permissions.CREATE_GUILD_EXPRESSIONS:
                        return U.default.Messages.CREATE_EXPRESSIONS;
                    case D.Permissions.MANAGE_GUILD_EXPRESSIONS:
                        return U.default.Messages.MANAGE_EXPRESSIONS;
                    case D.Permissions.VIEW_AUDIT_LOG:
                        return U.default.Messages.VIEW_AUDIT_LOG;
                    case D.Permissions.VIEW_CHANNEL:
                        return U.default.Messages.READ_MESSAGES;
                    case D.Permissions.SEND_MESSAGES:
                        return U.default.Messages.SEND_MESSAGES;
                    case D.Permissions.SEND_TTS_MESSAGES:
                        return U.default.Messages.SEND_TTS_MESSAGES;
                    case D.Permissions.USE_APPLICATION_COMMANDS:
                        return U.default.Messages.USE_APPLICATION_COMMANDS;
                    case D.Permissions.MANAGE_MESSAGES:
                        return U.default.Messages.MANAGE_MESSAGES;
                    case D.Permissions.EMBED_LINKS:
                        return U.default.Messages.EMBED_LINKS;
                    case D.Permissions.ATTACH_FILES:
                        return U.default.Messages.ATTACH_FILES;
                    case D.Permissions.READ_MESSAGE_HISTORY:
                        return U.default.Messages.READ_MESSAGE_HISTORY;
                    case D.Permissions.MENTION_EVERYONE:
                        return U.default.Messages.MENTION_EVERYONE;
                    case D.Permissions.USE_EXTERNAL_EMOJIS:
                        return U.default.Messages.USE_EXTERNAL_EMOJIS;
                    case D.Permissions.USE_EXTERNAL_STICKERS:
                        return U.default.Messages.USE_EXTERNAL_STICKERS;
                    case D.Permissions.ADD_REACTIONS:
                        return U.default.Messages.ADD_REACTIONS;
                    case D.Permissions.CONNECT:
                        return U.default.Messages.CONNECT;
                    case D.Permissions.SPEAK:
                        return U.default.Messages.SPEAK;
                    case D.Permissions.MUTE_MEMBERS:
                        return U.default.Messages.MUTE_MEMBERS;
                    case D.Permissions.DEAFEN_MEMBERS:
                        return U.default.Messages.DEAFEN_MEMBERS;
                    case D.Permissions.MOVE_MEMBERS:
                        return U.default.Messages.MOVE_MEMBERS;
                    case D.Permissions.USE_VAD:
                        return U.default.Messages.USE_VAD;
                    case D.Permissions.PRIORITY_SPEAKER:
                        return U.default.Messages.PRIORITY_SPEAKER;
                    case D.Permissions.STREAM:
                        return U.default.Messages.VIDEO;
                    case D.Permissions.REQUEST_TO_SPEAK:
                        return U.default.Messages.REQUEST_TO_SPEAK;
                    case D.Permissions.CREATE_EVENTS:
                        return U.default.Messages.CREATE_EVENTS;
                    case D.Permissions.MANAGE_EVENTS:
                        return U.default.Messages.MANAGE_EVENTS;
                    case D.Permissions.CREATE_PUBLIC_THREADS:
                        return U.default.Messages.CREATE_PUBLIC_THREADS;
                    case D.Permissions.CREATE_PRIVATE_THREADS:
                        return U.default.Messages.CREATE_PRIVATE_THREADS;
                    case D.Permissions.SEND_MESSAGES_IN_THREADS:
                        return U.default.Messages.SEND_MESSAGES_IN_THREADS;
                    case D.Permissions.MANAGE_THREADS:
                        return U.default.Messages.MANAGE_THREADS;
                    case D.Permissions.MODERATE_MEMBERS:
                        return U.default.Messages.MODERATE_MEMBER;
                    case D.Permissions.USE_CLYDE_AI:
                        return U.default.Messages.ROLE_PERMISSIONS_USE_CLYDE_AI;
                    case D.Permissions.SET_VOICE_CHANNEL_STATUS:
                        return U.default.Messages.VOICE_CHANNEL_STATUS_PERMISSION_TITLE
                }
                return null
            }

            function eo(e, t) {
                let s = [];
                return e.forEach(e => {
                    let a = function(e, t) {
                            switch (e.targetType) {
                                case D.AuditLogTargetTypes.GUILD:
                                case D.AuditLogTargetTypes.GUILD_HOME:
                                    return t;
                                case D.AuditLogTargetTypes.CHANNEL:
                                case D.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => A.default.getChannel(e), e => (0, u.computeChannelName)(e, C.default, m.default, !0));
                                case D.AuditLogTargetTypes.USER:
                                    return eE(e, D.AuditLogChangeKeys.NICK, e => C.default.getUser(e), e => e);
                                case D.AuditLogTargetTypes.ROLE:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => t.getRole(e), e => e.name);
                                case D.AuditLogTargetTypes.ONBOARDING_PROMPT:
                                    let s = eE(e, D.AuditLogChangeKeys.ID, e => T.default.getOnboardingPrompt(e), e => e.title);
                                    return null != s ? s : U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_EMPTY_VALUE;
                                case D.AuditLogTargetTypes.GUILD_ONBOARDING:
                                    return t;
                                case D.AuditLogTargetTypes.INVITE:
                                    return eE(e, D.AuditLogChangeKeys.CODE, D.NOOP_NULL);
                                case D.AuditLogTargetTypes.INTEGRATION:
                                    return eE(e, D.AuditLogChangeKeys.TYPE, e => S.default.integrations.find(t => t.id === e), e => e.name);
                                case D.AuditLogTargetTypes.WEBHOOK:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => S.default.webhooks.find(t => t.id === e), e => e.name);
                                case D.AuditLogTargetTypes.EMOJI:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => E.default.getGuildEmoji(t.id).find(t => t.id === e), e => e.name);
                                case D.AuditLogTargetTypes.STICKER:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => f.default.getStickerById(e), e => e.name);
                                case D.AuditLogTargetTypes.STAGE_INSTANCE:
                                    return eE(e, D.AuditLogChangeKeys.TOPIC, e => {
                                        var s;
                                        return null === (s = Object.values(N.default.getStageInstancesByGuild(t.id))) || void 0 === s ? void 0 : s.find(t => t.id === e)
                                    }, e => e.topic);
                                case D.AuditLogTargetTypes.GUILD_SCHEDULED_EVENT:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => S.default.guildScheduledEvents.find(t => t.id === e), e => e.name);
                                case D.AuditLogTargetTypes.THREAD:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => S.default.threads.find(t => t.id === e), e => e.name);
                                case D.AuditLogTargetTypes.APPLICATION_COMMAND:
                                    if (e.targetId === e.options.application_id) {
                                        let t = S.default.integrations.find(t => t.application_id === e.targetId);
                                        if (null != t) return t.name;
                                        return e.targetId
                                    }
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => S.default.applicationCommands.find(t => t.id === e), e => {
                                        let t = null != e.name_localized && "" !== e.name_localized ? e.name_localized : e.name;
                                        return e.type === d.ApplicationCommandType.CHAT ? "/⁠".concat(t) : t
                                    });
                                case D.AuditLogTargetTypes.AUTO_MODERATION_RULE:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => S.default.automodRules.find(t => t.id === e), e => e.name);
                                case D.AuditLogTargetTypes.GUILD_SOUNDBOARD:
                                    return eE(e, D.AuditLogChangeKeys.NAME, D.NOOP_NULL);
                                case D.AuditLogTargetTypes.HOME_SETTINGS:
                                    return eE(e, D.AuditLogChangeKeys.GUILD_ID, e => I.default.getSettings(e), () => U.default.Messages.SERVER_GUIDE, t.id);
                                case D.AuditLogTargetTypes.VOICE_CHANNEL_STATUS:
                                    return eE(e, D.AuditLogChangeKeys.STATUS, e => A.default.getChannel(e), e => (0, u.computeChannelName)(e, C.default, m.default, !0));
                                case D.AuditLogTargetTypes.CLYDE_AI:
                                    return eE(e, D.AuditLogChangeKeys.NAME, e => L.default.getMember(t.id, G.CLYDE_AI_USER_ID), e => U.default.Messages.CLYDE_NAME);
                                default:
                                    return v.warn("Unknown targetType for log", e), null
                            }
                        }(e, t),
                        l = C.default.getUser(e.userId);
                    if (null != a || [D.AuditLogActions.MEMBER_PRUNE, D.AuditLogActions.MEMBER_DISCONNECT, D.AuditLogActions.MEMBER_MOVE, D.AuditLogActions.CREATOR_MONETIZATION_REQUEST_CREATED, D.AuditLogActions.CREATOR_MONETIZATION_TERMS_ACCEPTED].includes(e.action)) {
                        if (null != (e = (e = (e = e.set("user", l)).set("target", a)).set("options", function(e) {
                                if (null != e.options) {
                                    let t = {
                                        ...e.options
                                    };
                                    switch (e.options.type) {
                                        case D.AuditLogSubtargetTypes.USER:
                                            t.subtarget = e_(e.options.id, e => C.default.getUser(e), e => e.tag);
                                            break;
                                        case D.AuditLogSubtargetTypes.ROLE:
                                            t.subtarget = e_(e.options.role_name, D.NOOP_NULL)
                                    }
                                    return null != e.options.channel_id && (t.channel = eE(e, "", e => A.default.getChannel(e), e => e, e.options.channel_id)), null != e.options.members_removed && 0 !== e.options.members_removed && (t.count = e.options.members_removed), t
                                }
                                return e.options
                            }(e))).changes) {
                            let s = [];
                            e.changes.forEach(a => {
                                let l = function(e, t, s) {
                                    if (t.action === D.AuditLogActions.APPLICATION_COMMAND_PERMISSION_UPDATE) {
                                        let t = e.newValue || e.oldValue;
                                        switch (t.type) {
                                            case D.ApplicationCommandPermissionTypes.ROLE:
                                                e.subtarget = e_(t.id, e => s.getRole(e), e => e.name);
                                                break;
                                            case D.ApplicationCommandPermissionTypes.USER:
                                                e.subtarget = e_(t.id, e => C.default.getUser(e), e => e.tag);
                                                break;
                                            case D.ApplicationCommandPermissionTypes.CHANNEL:
                                                t.id === n(s.id).subtract(1).toString() ? e.subtarget = U.default.Messages.ALL_CHANNELS : e.subtarget = e_(t.id, e => A.default.getChannel(e), e => (0, u.computeChannelName)(e, C.default, m.default, !0))
                                        }
                                        return e
                                    }
                                    switch (e.key) {
                                        case D.AuditLogChangeKeys.OWNER_ID:
                                            return ec(e, e => C.default.getUser(e));
                                        case D.AuditLogChangeKeys.CHANNEL_ID:
                                        case D.AuditLogChangeKeys.AFK_CHANNEL_ID:
                                        case D.AuditLogChangeKeys.SYSTEM_CHANNEL_ID:
                                        case D.AuditLogChangeKeys.RULES_CHANNEL_ID:
                                        case D.AuditLogChangeKeys.PUBLIC_UPDATES_CHANNEL_ID:
                                            return ec(e, e => A.default.getChannel(e), e => (0, u.computeChannelName)(e, C.default, m.default, !0));
                                        case D.AuditLogChangeKeys.AFK_TIMEOUT:
                                            return ec(e, e => e / 60);
                                        case D.AuditLogChangeKeys.BITRATE:
                                            return ec(e, e => e / 1e3);
                                        case D.AuditLogChangeKeys.COLOR:
                                            return ec(e, e => (0, o.int2hex)(e).toUpperCase());
                                        case D.AuditLogChangeKeys.THEME_COLORS:
                                            return ec(e, e => "".concat((0, o.int2hex)(e[0]).toUpperCase(), ", ").concat((0, o.int2hex)(e[1]).toUpperCase()));
                                        case D.AuditLogChangeKeys.MAX_AGE:
                                            return ec(e, e => {
                                                let t = R.default.getMaxAgeOptions.find(t => {
                                                    let {
                                                        value: s
                                                    } = t;
                                                    return e === s
                                                });
                                                return t ? t.label : e
                                            });
                                        case D.AuditLogChangeKeys.PERMISSIONS: {
                                            let t = [],
                                                {
                                                    added: s,
                                                    removed: a
                                                } = ed(e.oldValue, e.newValue);
                                            if (s.length > 0) {
                                                let e = new g.AuditLogChange(D.AuditLogChangeKeys.PERMISSIONS_GRANTED, null, s);
                                                t.push(e)
                                            }
                                            if (a.length > 0) {
                                                let e = new g.AuditLogChange(D.AuditLogChangeKeys.PERMISSIONS_DENIED, null, a);
                                                t.push(e)
                                            }
                                            return t
                                        }
                                        case D.AuditLogChangeKeys.PERMISSIONS_GRANTED:
                                        case D.AuditLogChangeKeys.PERMISSIONS_DENIED: {
                                            let t = [],
                                                {
                                                    added: s,
                                                    removed: a
                                                } = ed(e.oldValue, e.newValue);
                                            if (s.length > 0) {
                                                let a = new g.AuditLogChange(e.key, null, s);
                                                t.push(a)
                                            }
                                            if (a.length > 0) {
                                                let e = new g.AuditLogChange(D.AuditLogChangeKeys.PERMISSIONS_RESET, a, a);
                                                t.push(e)
                                            }
                                            return t
                                        }
                                        case D.AuditLogChangeKeys.FLAGS: {
                                            let t = [],
                                                {
                                                    added: s,
                                                    removed: a
                                                } = function(e, t) {
                                                    let s = "number" == typeof e ? e : 0,
                                                        a = "number" == typeof t ? t : 0,
                                                        n = O.removeFlag(a, s),
                                                        l = O.removeFlag(s, a),
                                                        i = [],
                                                        r = [];
                                                    for (let e in M.ChannelFlags) {
                                                        let t = M.ChannelFlags[e];
                                                        O.hasFlag(n, t) && i.push(t), O.hasFlag(l, t) && r.push(t)
                                                    }
                                                    return {
                                                        added: i,
                                                        removed: r
                                                    }
                                                }(e.oldValue, e.newValue);
                                            if (s.length > 0) {
                                                let a = new g.AuditLogChange(e.key, null, s);
                                                t.push(a)
                                            }
                                            if (a.length > 0) {
                                                let s = new g.AuditLogChange(e.key, a, null);
                                                t.push(s)
                                            }
                                            return t
                                        }
                                        case D.AuditLogChangeKeys.PREFERRED_LOCALE:
                                            return ec(e, e => {
                                                let t = U.default.getAvailableLocales().find(t => t.value === e);
                                                return null != t ? t.name : null
                                            });
                                        case D.AuditLogChangeKeys.VIDEO_QUALITY_MODE:
                                            return ec(e, e => e === D.VideoQualityMode.FULL ? U.default.Messages.VIDEO_QUALITY_MODE_FULL : U.default.Messages.VIDEO_QUALITY_MODE_AUTO);
                                        case D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAGS:
                                            return function(e) {
                                                let t = {
                                                        [D.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATIONS]: D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATIONS,
                                                        [D.SystemChannelFlags.SUPPRESS_PREMIUM_SUBSCRIPTIONS]: D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_PREMIUM_SUBSCRIPTIONS,
                                                        [D.SystemChannelFlags.SUPPRESS_GUILD_REMINDER_NOTIFICATIONS]: D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_REMINDER_NOTIFICATIONS,
                                                        [D.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATION_REPLIES]: D.AuditLogChangeKeys.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATION_REPLIES
                                                    },
                                                    s = [];
                                                return Object.values(D.SystemChannelFlags).forEach(a => {
                                                    let n = (e.oldValue & a) === a,
                                                        l = (e.newValue & a) === a;
                                                    if (n === l) return;
                                                    let i = new g.AuditLogChange(t[a], !n, !l);
                                                    s.push(i)
                                                }), s
                                            }(e);
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_ACTIONS:
                                            if (t.targetType === D.AuditLogTargetTypes.AUTO_MODERATION_RULE) return ec(e, e => e.map(e => e.type), e => e.map(_.actionTypeToName).join(","));
                                            break;
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_EVENT_TYPE:
                                            if (t.targetType === D.AuditLogTargetTypes.AUTO_MODERATION_RULE) return ec(e, _.eventTypeToName);
                                            break;
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_TRIGGER_TYPE:
                                            if (t.targetType === D.AuditLogTargetTypes.AUTO_MODERATION_RULE) return ec(e, _.triggerTypeToName);
                                            break;
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_TRIGGER_METADATA:
                                            if (t.targetType === D.AuditLogTargetTypes.AUTO_MODERATION_RULE) return ec(e, e => {
                                                if (null != e && "object" == typeof e) return null != e.keyword_filter && Array.isArray(e.keyword_filter) ? U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_METADATA_KEYWORDS_UPDATE.plainFormat({
                                                    newValue: e.keyword_filter.map(e => "'".concat(e, "'")).join(", ")
                                                }) : JSON.stringify(e);
                                                return e
                                            });
                                            break;
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_ADD_KEYWORDS:
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_REMOVE_KEYWORDS:
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_ADD_REGEX_PATTERNS:
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_REMOVE_REGEX_PATTERNS:
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_ADD_ALLOW_LIST:
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_REMOVE_ALLOW_LIST:
                                            if (t.targetType === D.AuditLogTargetTypes.AUTO_MODERATION_RULE) return ec(e, e => null != e && Array.isArray(e) ? e.map(e => "'".concat(e, "'")).join(", ") : JSON.stringify(e));
                                            break;
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_EXEMPT_CHANNELS:
                                            if (t.targetType === D.AuditLogTargetTypes.AUTO_MODERATION_RULE) return ec(e, e => e.map(A.default.getChannel).filter(e => null != e).map(e => (0, u.computeChannelName)(e, C.default, m.default, !0)), e => null != e && e.length > 0 ? e.join(", ") : U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_NONE);
                                            break;
                                        case D.AuditLogChangeKeys.AUTO_MODERATION_EXEMPT_ROLES:
                                            if (t.targetType === D.AuditLogTargetTypes.AUTO_MODERATION_RULE) return ec(e, e => e.map(e => s.getRole(e)).filter(e => null != e).map(e => e.name), e => null != e && e.length > 0 ? e.join(", ") : U.default.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_NONE);
                                            break;
                                        case D.AuditLogChangeKeys.AVAILABLE_TAGS:
                                            return function(e) {
                                                let {
                                                    oldValue: t,
                                                    newValue: s
                                                } = e, a = Array.isArray(t) ? t : [], n = Array.isArray(s) ? s : [];
                                                if (0 === a.length && 0 === n.length) return e;
                                                let l = {},
                                                    i = {};
                                                if (a.forEach(e => {
                                                        l[e.id] = e
                                                    }), n.forEach(e => {
                                                        i[e.id] = e
                                                    }), a.length < n.length) {
                                                    for (let e in i)
                                                        if (null == l[e]) return new g.AuditLogChange(D.AuditLogChangeKeys.AVAILABLE_TAG_ADD, null, eu(i[e]))
                                                }
                                                if (a.length > n.length) {
                                                    for (let e in l)
                                                        if (null == i[e]) return new g.AuditLogChange(D.AuditLogChangeKeys.AVAILABLE_TAG_DELETE, null, eu(l[e]))
                                                }
                                                for (let e in l) {
                                                    let t = l[e],
                                                        s = i[e];
                                                    if ((null == s ? void 0 : s.name) !== t.name || (null == s ? void 0 : s.emoji_id) !== t.emoji_id || (null == s ? void 0 : s.emoji_name) !== t.emoji_name) return new g.AuditLogChange(D.AuditLogChangeKeys.AVAILABLE_TAG_EDIT, eu(t), eu(s))
                                                }
                                                return e
                                            }(e)
                                    }
                                    return e
                                }(a, e, t);
                                Array.isArray(l) ? l.forEach(e => s.push(e)) : s.push(l)
                            }), e = e.set("changes", s)
                        }
                        s.push(e)
                    }
                }), s
            }

            function ed(e, t) {
                let s = r.default.deserialize("string" == typeof e ? e : 0),
                    a = r.default.deserialize("string" == typeof t ? t : 0),
                    n = r.default.remove(a, s),
                    l = r.default.remove(s, a),
                    i = [],
                    o = [];
                for (let e in D.Permissions) {
                    let t = D.Permissions[e];
                    r.default.has(n, t) && i.push(t), r.default.has(l, t) && o.push(t)
                }
                return {
                    added: i,
                    removed: o
                }
            }

            function eu(e) {
                return null == e ? null : {
                    id: e.id,
                    name: e.name,
                    emojiId: 0 !== e.emoji_id ? e.emoji_id : void 0,
                    emojiName: e.emoji_name,
                    moderated: e.moderated
                }
            }

            function ec(e, t, s) {
                let a = e.newValue,
                    n = e.oldValue;
                return null != e.newValue && (a = t(e.newValue), null != s && null != a && (a = s(a))), null != e.oldValue && (n = t(e.oldValue), null != s && null != n && (n = s(n))), new g.AuditLogChange(e.key, n || e.oldValue, a || e.newValue)
            }

            function eE(e, t, s, a, n) {
                let l = null;
                n = null != n ? n : e.targetId;
                let i = s(n);
                if (null != i && null != a && (l = a(i)), null == l) {
                    let t = S.default.deletedTargets[e.targetType];
                    null != t && null != t[n] && (l = t[n])
                }
                if (null == l && null != e.changes) {
                    let s = e.changes.find(e => e.key === t);
                    null != s && (l = s.newValue || s.oldValue)
                }
                return null != l ? l : n
            }

            function e_(e, t, s) {
                let a = e,
                    n = t(e);
                return null != n && null != s && (a = s(n)), a
            }

            function eT(e, t) {
                return s => null == s.oldValue ? e : t
            }

            function eI(e, t) {
                return s => null == s.newValue ? e : t
            }

            function eS(e, t, s, a) {
                return n => {
                    if (null != n.newValue && null != n.oldValue) return e;
                    if (null != n.newValue) return t;
                    if (null != n.oldValue) return s;
                    return a
                }
            }
        },
        354023: function(e, t, s) {
            "use strict";
            let a;
            s.r(t), s.d(t, {
                RowTypes: function() {
                    return n
                },
                generateRowsForQuery: function() {
                    return R
                },
                getMostRecentDMedUser: function() {
                    return D
                },
                getUsersAlreadyJoined: function() {
                    return M
                },
                maxAgeString: function() {
                    return p
                },
                default: function() {
                    return U
                }
            }), s("424973"), s("222007");
            var n, l, i = s("191225"),
                r = s("42203"),
                o = s("26989"),
                d = s("660478"),
                u = s("27618"),
                c = s("697218"),
                E = s("287850"),
                _ = s("25292"),
                T = s("49111"),
                I = s("91366"),
                S = s("782340");
            a = s("591205"), (l = n || (n = {})).GROUP_DM = "GROUP_DM", l.DM = "DM", l.FRIEND = "FRIEND", l.CHANNEL = "CHANNEL";
            let N = (e, t) => null != e && o.default.isMember(e, t),
                f = e => {
                    let {
                        omitUserIds: t,
                        suggestedUserIds: s,
                        maxRowsWithoutQuery: a,
                        omitGuildId: n,
                        shownUserIds: l,
                        rows: i,
                        counts: r
                    } = e;
                    if (null != s)
                        for (let e of s) {
                            if (null != a && a > 0 && i.length >= a) break;
                            if (t.has(e) || l.has(e)) continue;
                            let s = c.default.getUser(e);
                            !(null == s || N(n, s.id)) && (l.add(s.id), i.push({
                                type: "FRIEND",
                                item: s,
                                isSuggested: !0
                            }), r.numFriends++)
                        }
                },
                g = e => {
                    let {
                        suggestedChannelIds: t,
                        maxRowsWithoutQuery: s,
                        rows: a,
                        counts: n
                    } = e;
                    if (null != t)
                        for (let e of t) {
                            if (null != s && s > 0 && a.length >= s) break;
                            let t = r.default.getChannel(e);
                            null != t && (a.push({
                                type: "CHANNEL",
                                item: t,
                                isSuggested: !0
                            }), n.numChannels++)
                        }
                },
                A = e => {
                    let {
                        omitUserIds: t,
                        maxRowsWithoutQuery: s,
                        omitGuildId: a,
                        shownUserIds: n,
                        rows: l,
                        counts: i,
                        includeGroupDms: o,
                        limit: u
                    } = e, _ = 0;
                    for (let e of E.default.getPrivateChannelIds()) {
                        if (null != s && s > 0 && l.length >= s || null != u && _ >= u) break;
                        let E = r.default.getChannel(e);
                        if (null == E || !E.isPrivate()) continue;
                        if (o && E.type === T.ChannelTypes.GROUP_DM) {
                            l.push({
                                type: "GROUP_DM",
                                item: E,
                                isSuggested: !1
                            }), i.numGroupDms++, _++;
                            continue
                        }
                        let I = d.default.lastMessageId(E.id);
                        if (null == I) continue;
                        let S = E.getRecipientId();
                        if (null != S && !t.has(S) && !n.has(S)) {
                            let e = c.default.getUser(S);
                            if (null == e || e.bot || N(a, e.id)) continue;
                            n.add(e.id), l.push({
                                type: "DM",
                                item: e,
                                isSuggested: !1
                            }), i.numDms++, _++
                        }
                    }
                },
                L = e => {
                    let {
                        omitUserIds: t,
                        maxRowsWithoutQuery: s,
                        omitGuildId: a,
                        shownUserIds: n,
                        rows: l,
                        counts: i
                    } = e;
                    for (let e of u.default.getFriendIDs()) {
                        if (null != s && s > 0 && l.length >= s) break;
                        if (t.has(e) || n.has(e)) continue;
                        let r = c.default.getUser(e);
                        !(null == r || N(a, r.id)) && (l.push({
                            type: "FRIEND",
                            item: r,
                            isSuggested: !1
                        }), i.numFriends++)
                    }
                },
                m = e => {
                    let {
                        query: t,
                        rows: s,
                        counts: a,
                        inviteTargetType: n
                    } = e;
                    n === I.InviteTargetTypes.EMBEDDED_APPLICATION && _.default.queryChannels({
                        query: t,
                        limit: 3,
                        guildId: void 0
                    }).forEach(e => {
                        let {
                            record: t
                        } = e;
                        s.push({
                            type: "CHANNEL",
                            item: t,
                            isSuggested: !1
                        }), a.numChannels++
                    })
                },
                C = e => {
                    let {
                        query: t,
                        omitUserIds: s,
                        shownUserIds: a,
                        rows: n,
                        counts: l
                    } = e;
                    _.default.queryDMUsers({
                        query: t,
                        limit: 50
                    }).forEach(e => {
                        let {
                            record: t
                        } = e;
                        if (s.has(t.id)) return;
                        let i = r.default.getDMFromUserId(t.id);
                        if (null == i) return;
                        let o = d.default.lastMessageId(i);
                        null != o && (a.add(t.id), n.push({
                            type: "DM",
                            item: t,
                            isSuggested: !1
                        }), l.numDms++)
                    })
                },
                O = e => {
                    let {
                        query: t,
                        rows: s,
                        counts: a
                    } = e;
                    _.default.queryGroupDMs({
                        query: t,
                        limit: 50,
                        fuzzy: !1
                    }).forEach(e => {
                        let {
                            record: t
                        } = e;
                        s.push({
                            type: "GROUP_DM",
                            item: t,
                            isSuggested: !1
                        }), a.numGroupDms++
                    })
                },
                h = e => {
                    let {
                        query: t,
                        rows: s,
                        counts: a,
                        omitUserIds: n,
                        shownUserIds: l
                    } = e;
                    _.default.queryFriends({
                        query: t,
                        limit: 500,
                        _fuzzy: !1
                    }).forEach(e => {
                        let {
                            record: t
                        } = e;
                        !(n.has(t.id) || l.has(t.id)) && (l.add(t.id), s.push({
                            type: "FRIEND",
                            item: t,
                            isSuggested: !1
                        }), a.numFriends++)
                    })
                };

            function R(e) {
                let {
                    query: t,
                    inviteTargetType: s,
                    omitUserIds: a,
                    suggestedUserIds: n,
                    suggestedChannelIds: l,
                    maxRowsWithoutQuery: i,
                    omitGuildId: r
                } = e, o = new Set, d = [], u = {
                    numFriends: 0,
                    numDms: 0,
                    numGroupDms: 0,
                    numGuildMembers: 0,
                    numChannels: 0
                };
                if ("" === t) {
                    let e = {
                        omitUserIds: a,
                        maxRowsWithoutQuery: i,
                        omitGuildId: r,
                        shownUserIds: o,
                        rows: d,
                        counts: u
                    };
                    s === I.InviteTargetTypes.EMBEDDED_APPLICATION && (A({
                        ...e,
                        includeGroupDms: !1,
                        limit: 1
                    }), g({
                        ...e,
                        suggestedChannelIds: l
                    })), f({
                        ...e,
                        suggestedUserIds: n
                    }), A({
                        ...e,
                        includeGroupDms: !0
                    }), L(e)
                } else {
                    let e = {
                        query: t,
                        rows: d,
                        counts: u
                    };
                    s === I.InviteTargetTypes.EMBEDDED_APPLICATION && m({
                        ...e,
                        inviteTargetType: s
                    }), C({
                        ...e,
                        omitUserIds: a,
                        shownUserIds: o
                    }), O(e), h({
                        ...e,
                        omitUserIds: a,
                        shownUserIds: o
                    })
                }
                return {
                    rows: d,
                    counts: u
                }
            }

            function D(e, t) {
                for (let s of E.default.getPrivateChannelIds()) {
                    let a = r.default.getChannel(s);
                    if (null == a || !a.isDM() || null == d.default.lastMessageId(a.id)) continue;
                    let n = a.getRecipientId();
                    if (null != n && !e.has(n)) {
                        let e = c.default.getUser(n);
                        if (null == e || e.bot || N(t, e.id)) continue;
                        return e
                    }
                }
                return null
            }

            function M(e) {
                let {
                    channel: t,
                    inviteTargetType: s,
                    applicationId: a
                } = e;
                if (s === I.InviteTargetTypes.EMBEDDED_APPLICATION) {
                    if (null != t) {
                        for (let e of i.default.getEmbeddedActivitiesForChannel(t.id))
                            if (e.application_id === a) return new Set(e.connections.keys())
                    }
                }
                return new Set
            }
            let G = {
                    MINUTES: "minutes",
                    HOURS: "hours",
                    DAYS: "days",
                    NEVER: "never"
                },
                x = {
                    [a.INVITE_OPTIONS_30_MINUTES.value]: {
                        value: 30,
                        type: G.MINUTES
                    },
                    [a.INVITE_OPTIONS_1_HOUR.value]: {
                        value: 1,
                        type: G.HOURS
                    },
                    [a.INVITE_OPTIONS_6_HOURS.value]: {
                        value: 6,
                        type: G.HOURS
                    },
                    [a.INVITE_OPTIONS_12_HOURS.value]: {
                        value: 12,
                        type: G.HOURS
                    },
                    [a.INVITE_OPTIONS_1_DAY.value]: {
                        value: 1,
                        type: G.DAYS
                    },
                    [a.INVITE_OPTIONS_7_DAYS.value]: {
                        value: 7,
                        type: G.DAYS
                    },
                    [a.INVITE_OPTIONS_30_DAYS.value]: {
                        value: 30,
                        type: G.DAYS
                    },
                    [a.INVITE_OPTIONS_FOREVER.value]: {
                        value: 0,
                        type: G.NEVER
                    }
                };

            function p(e, t) {
                let s = parseInt(t, 10),
                    a = 0 === s,
                    n = x[e].value,
                    l = x[e].type;
                switch (l) {
                    case G.MINUTES:
                        if (a) return S.default.Messages.INVITE_EXPIRES_MINUTES;
                        return S.default.Messages.INVITE_EXPIRES_MINUTES_OR_USES.format({
                            numUses: s
                        });
                    case G.HOURS:
                        if (a) return S.default.Messages.INVITE_EXPIRES_HOURS.format({
                            numHours: n
                        });
                        return S.default.Messages.INVITE_EXPIRES_HOURS_OR_USES.format({
                            numHours: n,
                            numUses: s
                        });
                    case G.DAYS:
                        if (a) return S.default.Messages.INVITE_EXPIRES_DAYS_PLURAL.format({
                            numDays: n
                        });
                        return S.default.Messages.INVITE_EXPIRES_DAYS_OR_USES_PLURAL.format({
                            numDays: n,
                            numUses: s
                        });
                    case G.NEVER:
                        if (a) return S.default.Messages.INVITE_EXPIRES_NEVER;
                        return S.default.Messages.INVITE_EXPIRES_USES.format({
                            numUses: s
                        });
                    default:
                        return ""
                }
            }
            var U = {
                getMaxAgeOptions: a.MAX_AGE_OPTIONS,
                getMaxUsesOptions: a.MAX_USES_OPTIONS,
                INVITE_OPTIONS_FOREVER: a.INVITE_OPTIONS_FOREVER,
                INVITE_OPTIONS_1_DAY: a.INVITE_OPTIONS_1_DAY,
                INVITE_OPTIONS_7_DAYS: a.INVITE_OPTIONS_7_DAYS,
                INVITE_OPTIONS_30_DAYS: a.INVITE_OPTIONS_30_DAYS,
                INVITE_OPTIONS_12_HOURS: a.INVITE_OPTIONS_12_HOURS,
                INVITE_OPTIONS_6_HOURS: a.INVITE_OPTIONS_6_HOURS,
                INVITE_OPTIONS_1_HOUR: a.INVITE_OPTIONS_1_HOUR,
                INVITE_OPTIONS_30_MINUTES: a.INVITE_OPTIONS_30_MINUTES,
                INVITE_OPTIONS_UNLIMITED: a.INVITE_OPTIONS_UNLIMITED,
                INVITE_OPTIONS_ONCE: a.INVITE_OPTIONS_ONCE,
                INVITE_OPTIONS_5_TIMES: a.INVITE_OPTIONS_5_TIMES,
                INVITE_OPTIONS_10_TIMES: a.INVITE_OPTIONS_10_TIMES,
                INVITE_OPTIONS_25_TIMES: a.INVITE_OPTIONS_25_TIMES,
                INVITE_OPTIONS_50_TIMES: a.INVITE_OPTIONS_50_TIMES,
                INVITE_OPTIONS_100_TIMES: a.INVITE_OPTIONS_100_TIMES
            }
        },
        591205: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                INVITE_OPTIONS_UNLIMITED: function() {
                    return l
                },
                INVITE_OPTIONS_ONCE: function() {
                    return i
                },
                INVITE_OPTIONS_5_TIMES: function() {
                    return r
                },
                INVITE_OPTIONS_10_TIMES: function() {
                    return o
                },
                INVITE_OPTIONS_25_TIMES: function() {
                    return d
                },
                INVITE_OPTIONS_50_TIMES: function() {
                    return u
                },
                INVITE_OPTIONS_100_TIMES: function() {
                    return c
                },
                MAX_USES_OPTIONS: function() {
                    return E
                },
                INVITE_OPTIONS_30_MINUTES: function() {
                    return _
                },
                INVITE_OPTIONS_1_HOUR: function() {
                    return T
                },
                INVITE_OPTIONS_6_HOURS: function() {
                    return I
                },
                INVITE_OPTIONS_12_HOURS: function() {
                    return S
                },
                INVITE_OPTIONS_1_DAY: function() {
                    return N
                },
                INVITE_OPTIONS_7_DAYS: function() {
                    return f
                },
                INVITE_OPTIONS_30_DAYS: function() {
                    return g
                },
                INVITE_OPTIONS_FOREVER: function() {
                    return A
                },
                MAX_AGE_OPTIONS: function() {
                    return L
                }
            });
            var a = s("782340");

            function n(e, t) {
                return {
                    value: e,
                    get label() {
                        return t()
                    }
                }
            }
            let l = n(0, () => a.default.Messages.MAX_USES.format({
                    maxUses: 0
                })),
                i = n(1, () => a.default.Messages.MAX_USES.format({
                    maxUses: 1
                })),
                r = n(5, () => a.default.Messages.MAX_USES.format({
                    maxUses: 5
                })),
                o = n(10, () => a.default.Messages.MAX_USES.format({
                    maxUses: 10
                })),
                d = n(25, () => a.default.Messages.MAX_USES.format({
                    maxUses: 25
                })),
                u = n(50, () => a.default.Messages.MAX_USES.format({
                    maxUses: 50
                })),
                c = n(100, () => a.default.Messages.MAX_USES.format({
                    maxUses: 100
                })),
                E = [l, i, r, o, d, u, c],
                _ = n(1800, () => a.default.Messages.DURATION_MINUTES.format({
                    minutes: 30
                })),
                T = n(3600, () => a.default.Messages.DURATION_HOURS.format({
                    hours: 1
                })),
                I = n(21600, () => a.default.Messages.DURATION_HOURS.format({
                    hours: 6
                })),
                S = n(43200, () => a.default.Messages.DURATION_HOURS.format({
                    hours: 12
                })),
                N = n(86400, () => a.default.Messages.DURATION_DAYS.format({
                    days: 1
                })),
                f = n(604800, () => a.default.Messages.DURATION_DAYS.format({
                    days: 7
                })),
                g = n(2592e3, () => a.default.Messages.DURATION_DAYS.format({
                    days: 30
                })),
                A = n(0, () => a.default.Messages.MAX_AGE_NEVER),
                L = [_, T, I, S, N, f, g, A]
        },
        162948: function(e, t, s) {
            "use strict";
            var a, n;
            s.r(t), s.d(t, {
                TeamMemberRoles: function() {
                    return a
                }
            }), (n = a || (a = {})).ADMIN = "admin", n.DEVELOPER = "developer", n.READ_ONLY = "read_only"
        },
        86758: function(e, t, s) {
            "use strict";
            s.r(t), s.d(t, {
                truncateAndLocalizeNumber: function() {
                    return n
                }
            });
            var a = s("792788");
            let n = (e, t) => {
                let s = Math.round(10 * e) / 10;
                if (e < 1e6) return new Intl.NumberFormat(t, {
                    maximumFractionDigits: s % 1 == 0 ? 0 : 1
                }).format(e);
                let n = Math.round(e / 1e6 * 10) / 10,
                    l = new Intl.NumberFormat(t, {
                        maximumFractionDigits: n % 1 == 0 ? 0 : 1
                    }).format(e / 1e6);
                return a.default.Messages.NumberAbbreviations.MILLION.format({
                    num: l
                })
            }
        }
    }
]);