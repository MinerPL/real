(this.webpackChunkdiscord_app = this.webpackChunkdiscord_app || []).push([
    ["20795"], {
        273215: function(e, t, n) {
            "use strict";
            e.exports = n.p + "63900a1ba1f23d305c53.png"
        },
        719933: function(e, t, n) {
            "use strict";
            e.exports = n.p + "2d8d31d0ce7c0e673266.png"
        },
        90026: function(e, t, n) {
            "use strict";
            e.exports = n.p + "a5bb35518e19a27b57be.png"
        },
        824839: function(e, t, n) {
            "use strict";
            e.exports = n.p + "16b667dc5539a47aa346.svg"
        },
        935119: function(e, t, n) {
            "use strict";
            e.exports = n.p + "b0efcdc15f8bd689c89f.svg"
        },
        1890: function(e, t, n) {
            "use strict";
            e.exports = n.p + "6d387ec5eedee450a1c6.svg"
        },
        898085: function(e, t, n) {},
        495873: function(e, t, n) {},
        778583: function(e, t, n) {},
        482803: function(e, t, n) {},
        503745: function(e, t, n) {},
        555919: function(e, t, n) {
            "use strict";
            e.exports = ["7z", "ade", "adp", "arj", "apk", "application", "appx", "appxbundle", "asx", "bas", "bat", "cab", "cer", "chm", "cmd", "cnt", "cpl", "crt", "csh", "deb", "der", "diagcab", "dll", "dmg", "docm", "dotm", "ex", "ex_", "exe", "fxp", "gadget", "grp", "gz", "hlp", "hpj", "hta", "htc", "inf", "ins", "ipa", "iso", "isp", "its", "jar", "jnlp", "jse", "ksh", "lib", "lnk", "mad", "maf", "mag", "mam", "maq", "mar", "mas", "mat", "mau", "mav", "maw", "mcf", "mda", "mdb", "mde", "mdt", "mdw", "mdz", "msc", "msh", "msh1", "msh1xml", "msh2", "msh2xml", "mshxml", "msi", "msix", "msixbundle", "msp", "mst", "msu", "nsh", "ops", "osd", "pcd", "pif", "pkg", "pl", "plg", "potm", "ppam", "ppsm", "pptm", "prf", "prg", "printerexport", "ps1", "ps1xml", "ps2", "ps2xml", "psc1", "psc2", "psd1", "psdm1", "pst", "py", "pyc", "pyo", "pyw", "pyz", "pyzw", "rar", "reg", "rpm", "scf", "scr", "sct", "shb", "shs", "sldm", "sys", "theme", "tmp", "url", "vb", "vbe", "vbp", "vbs", "vhd", "vhdx", "vsmacros", "vsw", "vxd", "webpnp", "ws", "wsc", "wsf", "wsh", "xbap", "xlam", "xll", "xlsm", "xltm", "xnk", "z", "zip"]
        },
        561288: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return f
                }
            });
            var i = n("872717"),
                a = n("913144"),
                l = n("950104"),
                s = n("27618"),
                r = n("697218"),
                u = n("599110"),
                o = n("404118"),
                d = n("736964"),
                c = n("987317"),
                _ = n("49111"),
                E = n("782340"),
                f = {
                    call(e, t, n, a, l) {
                        let f = n => {
                            c.default.selectVoiceChannel(e, t), n && this.ring(e), null == l || l(e)
                        };
                        if (null != a) {
                            let t = s.default.isBlocked(a);
                            if (t) return;
                            let l = r.default.getUser(a);
                            i.default.get({
                                url: _.Endpoints.CALL(e),
                                oldFormErrors: !0
                            }).then(e => {
                                f(n && e.body.ringable)
                            }, () => {
                                u.default.track(_.AnalyticEvents.OPEN_POPOUT, {
                                    type: "Not Friend",
                                    source: "Call"
                                }), o.default.show({
                                    title: E.default.Messages.START_CALL,
                                    body: E.default.Messages.CALL_INVITE_NOT_FRIENDS.format({
                                        username: null != l ? l.username : ""
                                    }),
                                    confirmText: E.default.Messages.ADD_FRIEND_BUTTON,
                                    cancelText: E.default.Messages.OKAY,
                                    onConfirm() {
                                        d.default.addRelationship({
                                            userId: a,
                                            context: {
                                                location: "Call"
                                            }
                                        })
                                    }
                                })
                            })
                        } else f(n)
                    },
                    ring(e, t) {
                        let n = l.default.getCall(e);
                        if (null != n && null != n.messageId && !l.default.isCallUnavailable(e)) {
                            i.default.post({
                                url: _.Endpoints.CALL_RING(e),
                                body: {
                                    recipients: t
                                },
                                oldFormErrors: !0
                            });
                            return
                        }
                        a.default.dispatch({
                            type: "CALL_ENQUEUE_RING",
                            channelId: e,
                            recipients: t
                        })
                    },
                    stopRinging: (e, t) => i.default.post({
                        url: _.Endpoints.CALL_STOP_RINGING(e),
                        body: {
                            recipients: t
                        },
                        oldFormErrors: !0
                    })
                }
        },
        450911: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return p
                }
            });
            var i = n("872717"),
                a = n("819855"),
                l = n("913144"),
                s = n("81732"),
                r = n("21121"),
                u = n("258158"),
                o = n("393414"),
                d = n("233069"),
                c = n("42203"),
                _ = n("271560"),
                E = n("561288"),
                f = n("987317"),
                h = n("49111"),
                T = n("782340"),
                p = {
                    async openPrivateChannel(e) {
                        var t;
                        let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                            a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                            l = arguments.length > 3 ? arguments[3] : void 0,
                            s = arguments.length > 4 ? arguments[4] : void 0,
                            r = this._getRecipients(e),
                            o = e => {
                                n && E.default.call(e.id, a, !0, e.isDM() ? e.getRecipientId() : null)
                            };
                        if (1 === r.length) {
                            let [e] = r, t = this._openCachedDMChannel(e, s);
                            if (null != t) return o(t), Promise.resolve(t.id)
                        }
                        try {
                            let e = await i.default.post({
                                url: h.Endpoints.USER_CHANNELS,
                                body: {
                                    recipients: r
                                },
                                context: {
                                    location: l
                                },
                                oldFormErrors: !0
                            });
                            null == s || s();
                            let t = this._openPrivateChannel(e.body);
                            return o(t), e.body.id
                        } catch (e) {
                            throw (null == e ? void 0 : null === (t = e.body) || void 0 === t ? void 0 : t.code) === h.AbortCodes.QUARANTINED && (0, u.default)(), e
                        }
                    },
                    async createBroadcastPrivateChannel() {
                        try {
                            let e = await i.default.post({
                                    url: h.Endpoints.BROADCAST_PRIVATE_CHANNEL
                                }),
                                t = (0, d.createChannelRecordFromServer)(e.body);
                            return E.default.call(t.id, !1, !1, null), e.body.id
                        } catch (t) {
                            var e;
                            throw (null == t ? void 0 : null === (e = t.body) || void 0 === e ? void 0 : e.code) === h.AbortCodes.QUARANTINED && (0, u.default)(), t
                        }
                    },
                    _openCachedDMChannel(e, t) {
                        let n = c.default.getDMFromUserId(e),
                            i = null != n ? c.default.getChannel(n) : null;
                        if (null != i) return null == t || t(), null != (0, r.getRootNavigationRefIfInExperiment)() ? (0, o.transitionTo)(h.Routes.CHANNEL(h.ME, i.id), {
                            navigationReplace: !0
                        }) : f.default.selectPrivateChannel(i.id), i;
                        return null
                    },
                    async ensurePrivateChannel(e) {
                        let t = this._getRecipients(e),
                            n = await i.default.post({
                                url: h.Endpoints.USER_CHANNELS,
                                body: {
                                    recipients: t
                                },
                                oldFormErrors: !0
                            }),
                            a = (0, d.createChannelRecordFromServer)(n.body);
                        return l.default.dispatch({
                            type: "CHANNEL_CREATE",
                            channel: a
                        }), a.id
                    },
                    async getOrEnsurePrivateChannel(e) {
                        let t = c.default.getDMFromUserId(e);
                        return null != t ? t : await this.ensurePrivateChannel(e)
                    },
                    async getDMChannel(e) {
                        let t = await i.default.get(h.Endpoints.DM_CHANNEL(e)),
                            n = (0, d.createChannelRecordFromServer)(t.body);
                        return l.default.dispatch({
                            type: "CHANNEL_CREATE",
                            channel: n
                        }), n.id
                    },
                    _getRecipients: e => null != e ? Array.isArray(e) ? e : [e] : [],
                    _openPrivateChannel(e) {
                        let t = (0, d.createChannelRecordFromServer)(e);
                        return l.default.dispatch({
                            type: "CHANNEL_CREATE",
                            channel: t
                        }), null != (0, r.getRootNavigationRefIfInExperiment)() ? (0, o.transitionTo)(h.Routes.CHANNEL(h.ME, t.id), {
                            navigationReplace: !0
                        }) : f.default.selectPrivateChannel(t.id), t
                    },
                    closePrivateChannel(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                            n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                        return l.default.dispatch({
                            type: "CHANNEL_DELETE",
                            channel: {
                                id: e,
                                guild_id: void 0,
                                parent_id: void 0
                            },
                            silent: n
                        }), t && !__OVERLAY__ && (0, o.transitionTo)(h.Routes.FRIENDS), i.default.delete({
                            url: h.Endpoints.CHANNEL(e),
                            query: {
                                silent: n
                            },
                            oldFormErrors: !0
                        }).then(() => {
                            a.AccessibilityAnnouncer.announce(T.default.Messages.A11Y_ANNOUNCEMENT_DM_CLOSED)
                        }).catch(() => {
                            a.AccessibilityAnnouncer.announce(T.default.Messages.A11Y_ANNOUNCEMENT_DM_CLOSED_FAILED)
                        })
                    },
                    updatePermissionOverwrite: (e, t) => i.default.put({
                        url: h.Endpoints.CHANNEL_PERMISSIONS_OVERWRITE(e, t.id),
                        body: t,
                        oldFormErrors: !0
                    }),
                    clearPermissionOverwrite: (e, t) => i.default.delete({
                        url: h.Endpoints.CHANNEL_PERMISSIONS_OVERWRITE(e, t),
                        oldFormErrors: !0
                    }),
                    addRecipient(e, t, n, l) {
                        return i.default.put({
                            url: h.Endpoints.CHANNEL_RECIPIENT(e, t),
                            context: {
                                location: n
                            },
                            oldFormErrors: !0
                        }).then(t => (a.AccessibilityAnnouncer.announce(T.default.Messages.A11Y_ANNOUNCEMENT_USER_ADDED_TO_GROUP_DM), null == l || l(), 201 === t.status) ? this._openPrivateChannel(t.body).id : e).catch(() => (a.AccessibilityAnnouncer.announce(T.default.Messages.A11Y_ANNOUNCEMENT_USER_ADDED_TO_GROUP_DM_FAILED), e))
                    },
                    addRecipients(e, t, n, i) {
                        return this.addRecipient(e, t[0], n, i).then(e => Promise.all(t.slice(1).map(t => this.addRecipient(e, t, n))).then(() => e))
                    },
                    removeRecipient: (e, t) => i.default.delete({
                        url: h.Endpoints.CHANNEL_RECIPIENT(e, t),
                        oldFormErrors: !0
                    }),
                    setDMOwner: (e, t) => i.default.patch({
                        url: h.Endpoints.CHANNEL(e),
                        body: {
                            owner: t
                        },
                        oldFormErrors: !0
                    }),
                    async setName(e, t) {
                        let n = c.default.getChannel(e),
                            a = await i.default.patch({
                                url: h.Endpoints.CHANNEL(e),
                                body: {
                                    name: t
                                },
                                oldFormErrors: !0
                            }),
                            l = null == n ? void 0 : n.getGuildId();
                        return null != l && !(null == n ? void 0 : n.isThread()) && s.default.checkGuildTemplateDirty(l), a
                    },
                    setIcon(e, t) {
                        let n = c.default.getChannel(e);
                        i.default.patch({
                            url: h.Endpoints.CHANNEL(e),
                            body: {
                                icon: t
                            },
                            oldFormErrors: !0
                        }).then(() => {
                            let e = null == n ? void 0 : n.getGuildId();
                            null != e && !(null == n ? void 0 : n.isThread()) && s.default.checkGuildTemplateDirty(e)
                        })
                    },
                    convertToGuild: e => i.default.post({
                        url: h.Endpoints.CHANNEL_CONVERT(e),
                        oldFormErrors: !0
                    }),
                    preload(e, t, n) {
                        l.default.dispatch({
                            type: "CHANNEL_PRELOAD",
                            guildId: e === h.ME ? null : e,
                            channelId: t,
                            isHighlight: n,
                            context: h.CURRENT_APP_CONTEXT
                        })
                    },
                    fetchChannelStoreListing(e, t) {
                        let n = null != t ? h.Endpoints.CHANNEL_STORE_LISTING_SKU(e, t) : h.Endpoints.CHANNEL_STORE_LISTING(e);
                        return (0, _.httpGetWithCountryCodeQuery)(n).then(t => {
                            l.default.dispatch({
                                type: "STORE_LISTING_FETCH_SUCCESS",
                                channelId: e,
                                storeListing: t.body
                            })
                        })
                    },
                    async createTextChannel(e, t, n, a) {
                        let l = {
                            type: h.ChannelTypes.GUILD_TEXT,
                            name: t,
                            permission_overwrites: []
                        };
                        null != n && (l.parent_id = n), null != a && (l.topic = a);
                        let r = await i.default.post({
                            url: h.Endpoints.GUILD_CHANNELS(e),
                            body: l,
                            oldFormErrors: !0
                        });
                        return s.default.checkGuildTemplateDirty(e), r
                    }
                }
        },
        255397: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return u
                }
            });
            var i = n("913144"),
                a = n("716241"),
                l = n("599110"),
                s = n("659500"),
                r = n("49111"),
                u = {
                    rebuildRTCActiveChannels() {
                        i.default.dispatch({
                            type: "CHANNEL_RTC_ACTIVE_CHANNELS"
                        })
                    },
                    selectParticipant(e, t) {
                        i.default.dispatch({
                            type: "CHANNEL_RTC_SELECT_PARTICIPANT",
                            channelId: e,
                            id: t
                        })
                    },
                    updateLayout(e, t) {
                        let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : r.AppContext.APP;
                        l.default.track(r.AnalyticEvents.VIDEO_LAYOUT_TOGGLED, {
                            video_layout: t,
                            ...(0, a.collectVoiceAnalyticsMetadata)(e)
                        }), i.default.dispatch({
                            type: "CHANNEL_RTC_UPDATE_LAYOUT",
                            channelId: e,
                            layout: t,
                            appContext: n
                        })
                    },
                    toggleParticipants(e, t) {
                        i.default.dispatch({
                            type: "CHANNEL_RTC_UPDATE_PARTICIPANTS_OPEN",
                            channelId: e,
                            participantsOpen: t
                        })
                    },
                    toggleVoiceParticipantsHidden(e, t) {
                        i.default.dispatch({
                            type: "CHANNEL_RTC_UPDATE_VOICE_PARTICIPANTS_HIDDEN",
                            channelId: e,
                            voiceParticipantsHidden: t
                        })
                    },
                    updateStageStreamSize(e, t) {
                        i.default.dispatch({
                            type: "CHANNEL_RTC_UPDATE_STAGE_STREAM_SIZE",
                            channelId: e,
                            large: t
                        })
                    },
                    updateStageVideoLimitBoostUpsellDismissed(e, t) {
                        i.default.dispatch({
                            type: "CHANNEL_RTC_UPDATE_STAGE_VIDEO_LIMIT_BOOST_UPSELL_DISMISSED",
                            channelId: e,
                            dismissed: t
                        })
                    },
                    updateChatOpen(e, t) {
                        i.default.dispatch({
                            type: "CHANNEL_RTC_UPDATE_CHAT_OPEN",
                            channelId: e,
                            chatOpen: t
                        }), t ? setTimeout(() => {
                            s.ComponentDispatch.dispatch(r.ComponentActions.FOCUS_CHANNEL_TEXT_AREA, {
                                channelId: e
                            })
                        }, 0) : s.ComponentDispatch.dispatch(r.ComponentActions.FOCUS_CHAT_BUTTON)
                    }
                }
        },
        619340: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return f
                }
            });
            var i = n("759843"),
                a = n("382825"),
                l = n("872717"),
                s = n("913144"),
                r = n("535013"),
                u = n("605250"),
                o = n("599110"),
                d = n("840707"),
                c = n("49111");
            let _ = new u.default("ConnectedAccounts");

            function E(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                return l.default.post({
                    url: c.Endpoints.CONNECTIONS_CALLBACK(e),
                    body: {
                        ...t,
                        insecure: n,
                        friend_sync: c.FRIEND_SYNC_PLATFORM_TYPES.has(e)
                    },
                    oldFormErrors: !0
                })
            }
            var f = {
                fetch: () => l.default.get({
                    url: c.Endpoints.CONNECTIONS,
                    oldFormErrors: !0
                }).then(e => s.default.dispatch({
                    type: "USER_CONNECTIONS_UPDATE",
                    local: !0,
                    accounts: e.body
                }), () => s.default.dispatch({
                    type: "USER_CONNECTIONS_UPDATE",
                    local: !0,
                    accounts: []
                })),
                authorize(e) {
                    let t, {
                        location: n,
                        twoWayLinkType: i,
                        userCode: s
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    return o.default.track(c.AnalyticEvents.CONNECTED_ACCOUNT_INITIATED, {
                        platform_type: e,
                        location: n
                    }), t = i === a.TwoWayLinkType.DEVICE_CODE && null != s ? c.Endpoints.CONNECTIONS_AUTHORIZE_LINK_DEVICE(e, s) : null != i ? c.Endpoints.CONNECTIONS_AUTHORIZE_LINK(e, i) : c.Endpoints.CONNECTIONS_AUTHORIZE(e), l.default.get({
                        url: t,
                        oldFormErrors: !0
                    })
                },
                callback: E,
                connect(e, t, n, a, l) {
                    var s;
                    return d.default.put({
                        url: c.Endpoints.CONNECTION(e, t),
                        body: {
                            name: n,
                            friend_sync: null !== (s = null == l ? void 0 : l.friend_sync) && void 0 !== s ? s : c.FRIEND_SYNC_PLATFORM_TYPES.has(e)
                        },
                        context: {
                            location: a
                        },
                        oldFormErrors: !0,
                        trackedActionData: {
                            event: i.NetworkActionNames.USER_CONNECTIONS_UPDATE,
                            properties: {
                                name: n,
                                friend_sync: c.FRIEND_SYNC_PLATFORM_TYPES.has(e)
                            }
                        }
                    })
                },
                disconnect: (e, t) => l.default.delete({
                    url: c.Endpoints.CONNECTION(e, t),
                    oldFormErrors: !0
                }),
                refresh: (e, t) => l.default.post({
                    url: c.Endpoints.CONNECTION_REFRESH(e, t),
                    oldFormErrors: !0
                }),
                submitPinCode: (e, t) => l.default.get({
                    url: c.Endpoints.CONNECTIONS_CALLBACK_CONTINUATION(t, e),
                    oldFormErrors: !0
                }).then(e => {
                    let {
                        body: n
                    } = e;
                    return o.default.track(c.AnalyticEvents.ACCOUNT_LINK_STEP, {
                        previous_step: "PIN code entry",
                        current_step: "PIN success",
                        session_id: n.state,
                        platform_type: t
                    }), E(t, {
                        ...n,
                        from_continuation: !0
                    }, !0)
                }),
                setVisibility(e, t, n) {
                    return this.update(e, t, {
                        visibility: 1 === n
                    })
                },
                setMetadataVisibility(e, t, n) {
                    return this.update(e, t, {
                        metadata_visibility: 1 === n
                    })
                },
                setFriendSync(e, t, n) {
                    return this.update(e, t, {
                        friend_sync: n
                    })
                },
                setShowActivity(e, t, n) {
                    return this.update(e, t, {
                        show_activity: n
                    })
                },
                update: (e, t, n) => d.default.patch({
                    url: c.Endpoints.CONNECTION(e, t),
                    body: n,
                    oldFormErrors: !0,
                    trackedActionData: {
                        event: i.NetworkActionNames.USER_CONNECTIONS_UPDATE,
                        properties: {
                            ...n
                        }
                    }
                }),
                joinServer(e, t) {
                    s.default.dispatch({
                        type: "USER_CONNECTIONS_INTEGRATION_JOINING",
                        integrationId: e,
                        joining: !0
                    }), l.default.post({
                        url: c.Endpoints.INTEGRATION_JOIN(e),
                        oldFormErrors: !0
                    }, n => {
                        if (s.default.dispatch({
                                type: "USER_CONNECTIONS_INTEGRATION_JOINING",
                                integrationId: e,
                                joining: !1
                            }), !n.ok) null == t || t()
                    })
                },
                async refreshAccessToken(e, t) {
                    try {
                        let {
                            body: {
                                access_token: n
                            }
                        } = await l.default.get({
                            url: c.Endpoints.CONNECTION_ACCESS_TOKEN(e, t),
                            oldFormErrors: !0
                        });
                        return s.default.dispatch({
                            type: "USER_CONNECTION_UPDATE",
                            platformType: e,
                            id: t,
                            accessToken: n
                        }), n
                    } catch (n) {
                        throw n.body.code === c.AbortCodes.CONNECTION_REVOKED && s.default.dispatch({
                            type: "USER_CONNECTION_UPDATE",
                            platformType: e,
                            id: t,
                            revoked: !0
                        }), n
                    }
                },
                linkDispatchAuthCallback: (e, t) => l.default.post({
                    url: c.Endpoints.CONNECTIONS_LINK_DISPATCH_AUTH_CALLBACK(e),
                    body: {
                        ...t
                    },
                    oldFormErrors: !0
                }),
                async completeTwoWayLink(e, t, n, i, a) {
                    if (null == t) {
                        _.error("Two-way link: missing authorize location");
                        return
                    }
                    let {
                        code: l,
                        error: s,
                        errorDescription: u
                    } = (0, r.getCallbackParamsFromURL)(t);
                    if (null != s) {
                        _.error("Two-way link: missing authorize code", {
                            error: s,
                            errorDescription: u
                        });
                        return
                    }
                    return await E(e, {
                        code: n,
                        state: i,
                        two_way_link_code: l,
                        token_redirect_uri: a
                    })
                }
            }
        },
        970728: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                transitionToGuildFromEventInvite: function() {
                    return ee
                },
                default: function() {
                    return et
                }
            });
            var i = n("597755"),
                a = n.n(i),
                l = n("759843"),
                s = n("742270"),
                r = n("815157"),
                u = n("391679"),
                o = n("872717"),
                d = n("913144"),
                c = n("599417"),
                _ = n("333805"),
                E = n("644223"),
                f = n("523086"),
                h = n("263901"),
                T = n("677315"),
                p = n("233322"),
                S = n("157186"),
                I = n("290886"),
                A = n("374021"),
                m = n("398604"),
                g = n("704341"),
                C = n("9294"),
                N = n("487946"),
                O = n("258158"),
                R = n("877275"),
                v = n("393414"),
                M = n("716214"),
                y = n("233069"),
                D = n("271938"),
                L = n("42203"),
                U = n("923959"),
                P = n("26989"),
                b = n("305961"),
                G = n("88093"),
                k = n("330154"),
                F = n("957255"),
                w = n("697218"),
                H = n("599110"),
                V = n("840707"),
                B = n("65300"),
                x = n("851387"),
                Y = n("990766"),
                K = n("49111"),
                j = n("724210"),
                z = n("706530"),
                W = n("91366"),
                q = n("837979");
            let Q = "invite",
                X = null;

            function Z(e) {
                var t, n, i;
                let a = {};
                switch (e.target_type) {
                    case W.InviteTargetTypes.STREAM:
                        a.targetType = e.target_type, a.targetUserId = null === (n = e.target_user) || void 0 === n ? void 0 : n.id;
                        break;
                    case W.InviteTargetTypes.EMBEDDED_APPLICATION:
                        a.targetType = e.target_type, a.targetApplicationId = null === (i = e.target_application) || void 0 === i ? void 0 : i.id;
                        break;
                    case W.InviteTargetTypes.ROLE_SUBSCRIPTIONS_PURCHASE:
                        a.targetType = e.target_type
                }
                let l = null != b.default.getGuild(null === (t = e.guild) || void 0 === t ? void 0 : t.id),
                    s = !l || e.new_member;
                return s && null != e.channel && (0, y.isGuildTextChannelType)(e.channel.type) && (a.welcomeModalChannelId = e.channel.id), null != e.guild_scheduled_event && (a.guildScheduledEvent = e.guild_scheduled_event), a
            }

            function J(e) {
                let {
                    guildId: t,
                    channel: i,
                    options: a,
                    analyticsLocations: l = []
                } = e, {
                    type: s
                } = i, r = function(e, t, n) {
                    var i, a;
                    if ((null == n ? void 0 : n.targetType) === W.InviteTargetTypes.ROLE_SUBSCRIPTIONS_PURCHASE) return j.StaticChannelRoute.ROLE_SUBSCRIPTIONS;
                    if ((null == n ? void 0 : n.targetType) == null && !y.GUILD_VOCAL_CHANNEL_TYPES.has(t.type) && ((0, T.canSeeGuildHome)(e) || (0, I.canSeeOnboardingHome)(e))) return j.StaticChannelRoute.GUILD_HOME;
                    let l = L.default.getChannel(t.id);
                    return F.default.can(K.Permissions.VIEW_CHANNEL, l) ? t.id : null !== (a = null === (i = U.default.getDefaultChannel(e)) || void 0 === i ? void 0 : i.id) && void 0 !== a ? a : t.id
                }(t, i, a), {
                    targetUserId: u,
                    targetType: o,
                    targetApplicationId: d
                } = null != a ? a : {}, c = s === K.ChannelTypes.GUILD_STAGE_VOICE, _ = K.Routes.CHANNEL(t, r);
                y.GUILD_VOCAL_CHANNEL_TYPES.has(s) && (0, h.addPostConnectionCallback)(() => {
                    n.el("987317").then(n.bind(n, "987317")).then(e => {
                        let {
                            default: n
                        } = e, s = () => {
                            if (c) {
                                (0, M.connectAndOpen)(i instanceof y.ChannelRecordBase ? i : (0, y.createChannelRecord)(i)), (0, v.transitionTo)(_);
                                return
                            }
                            if (n.selectVoiceChannel(r), o === W.InviteTargetTypes.STREAM && null != u && Y.watchStreamAndTransitionToStream({
                                    streamType: z.StreamTypes.GUILD,
                                    ownerId: u,
                                    guildId: t,
                                    channelId: r
                                }), o === W.InviteTargetTypes.EMBEDDED_APPLICATION && null != d)(0, v.transitionTo)(K.Routes.CHANNEL(null != t ? t : K.ME, r)), (0, E.default)(r, d, l, null == a ? void 0 : a.intent)
                        };
                        (0, S.shouldShowMembershipVerificationGate)(t, [b.default, G.default, w.default, P.default]) ? (0, p.openMemberVerificationModal)(t, s) : s()
                    })
                }), (function(e, t) {
                    let {
                        type: n
                    } = e, {
                        transitionTo: i,
                        welcomeModalChannelId: a,
                        guildScheduledEvent: l
                    } = null != t ? t : {}, s = n === K.ChannelTypes.GUILD_STAGE_VOICE, r = {
                        navigationReplace: !0
                    };
                    return null != a && (r.welcomeModalChannelId = a), s && (r.state = q.STAGE_INVITE_STATE_KEY), null != l && (r.guildScheduledEventId = l.id), e => null != i ? i(e, r, R.default.INVITE_ACCEPT) : (0, v.transitionTo)(e, r, R.default.INVITE_ACCEPT)
                })(i, a)(_)
            }
            let $ = function(e, t) {
                    let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
                    L.default.addConditionalChangeListener(() => {
                        var i;
                        let a = L.default.getChannel(e),
                            l = w.default.getCurrentUser();
                        return null == a || null == l || (!a.nsfw || !!l.nsfwAllowed) && ((null == t ? void 0 : t.guildScheduledEvent) != null ? (! function(e) {
                            let {
                                guildScheduledEvent: t,
                                welcomeModalChannelId: n
                            } = e;
                            null != t && (0, h.addPostConnectionCallback)(() => {
                                let e = {
                                    guildScheduledEventId: t.id
                                };
                                null != n && (e.welcomeModalChannelId = n), (0, A.transitionToEventDetailsFromInvite)(t, e)
                            })
                        }(t), !1) : (J({
                            guildId: null !== (i = a.getGuildId()) && void 0 !== i ? i : K.ME,
                            channel: a,
                            options: t,
                            analyticsLocations: n
                        }), !1))
                    })
                },
                ee = async e => {
                    let {
                        guild_id: t,
                        channel_id: n
                    } = e;
                    (0, m.isGuildScheduledEventActive)(e) && null != n ? $(n) : await x.default.transitionToGuildSync(t)
                };
            var et = {
                resolveInvite: function e(t, n, i) {
                    return d.default.isDispatching() ? Promise.resolve().then(() => e(t, n, i)) : (d.default.dispatch({
                        type: "INVITE_RESOLVE",
                        code: t
                    }), (0, N.default)(t, n, i).then(e => {
                        let {
                            invite: t,
                            code: n,
                            banned: i
                        } = e;
                        return null != t ? d.default.dispatch({
                            type: "INVITE_RESOLVE_SUCCESS",
                            invite: t,
                            code: n
                        }) : d.default.dispatch({
                            type: "INVITE_RESOLVE_FAILURE",
                            code: n,
                            banned: i
                        }), {
                            invite: t,
                            code: n
                        }
                    }))
                },
                getInviteContext: (e, t) => ({
                    location: e,
                    location_guild_id: null != t.guild ? t.guild.id : void 0,
                    location_channel_id: null != t.channel ? t.channel.id : void 0,
                    location_channel_type: null != t.channel ? t.channel.type : void 0
                }),
                async createInvite(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                        n = arguments.length > 2 ? arguments[2] : void 0;
                    try {
                        let {
                            body: i
                        } = await o.default.post({
                            url: K.Endpoints.INSTANT_INVITES(e),
                            body: t,
                            context: {
                                location: n
                            }
                        });
                        return d.default.dispatch({
                            type: "INSTANT_INVITE_CREATE_SUCCESS",
                            channelId: e,
                            invite: i
                        }), i
                    } catch (t) {
                        throw d.default.dispatch({
                            type: "INSTANT_INVITE_CREATE_FAILURE",
                            channelId: e
                        }), new c.default(t)
                    }
                },
                async mobileCreateInvite(e, t) {
                    let n = k.default.getInvite(e.id);
                    if (null != n && !n.isExpired()) return n.code;
                    let i = {
                            max_age: K.Durations.DAY
                        },
                        a = await this.createInvite(e.id, i, t).catch(() => d.default.dispatch({
                            type: "NATIVE_APP_INSTANT_INVITE_GDM_SHARE_FAILED"
                        }));
                    return null == a ? void 0 : a.code
                },
                async getAllFriendInvites(e) {
                    await new Promise(e => d.default.wait(() => e(null)));
                    let t = k.default.getFriendInvitesFetching();
                    if (t) return null != X ? X.then(e => e.body) : Promise.reject(Error("Invalid friend invite fetch request"));
                    X = o.default.get({
                        url: K.Endpoints.FRIEND_INVITES,
                        context: {
                            location: e
                        }
                    }), d.default.dispatch({
                        type: "FRIEND_INVITES_FETCH_REQUEST",
                        requestedAt: new Date
                    });
                    let {
                        body: n
                    } = await X;
                    return X = null, d.default.dispatch({
                        type: "FRIEND_INVITES_FETCH_RESPONSE",
                        receivedAt: new Date,
                        invites: n
                    }), n
                },
                createFriendInvite: (e, t) => (d.default.dispatch({
                    type: "FRIEND_INVITE_CREATE_REQUEST"
                }), o.default.post({
                    url: K.Endpoints.FRIEND_INVITES,
                    body: null != e ? e : {},
                    context: {
                        location: t
                    }
                }).then(e => {
                    let {
                        body: t
                    } = e;
                    return d.default.dispatch({
                        type: "FRIEND_INVITE_CREATE_SUCCESS",
                        invite: t
                    }), t
                }, e => {
                    throw d.default.dispatch({
                        type: "FRIEND_INVITE_CREATE_FAILURE",
                        error: e
                    }), e
                })),
                revokeFriendInvites: () => (d.default.dispatch({
                    type: "FRIEND_INVITE_REVOKE_REQUEST"
                }), o.default.delete({
                    url: K.Endpoints.FRIEND_INVITES,
                    context: {
                        location
                    }
                }).then(e => {
                    let {
                        body: t
                    } = e;
                    d.default.dispatch({
                        type: "FRIEND_INVITE_REVOKE_SUCCESS",
                        invites: t
                    })
                })),
                revokeFriendInvite: e => o.default.delete({
                    url: K.Endpoints.INVITE(e)
                }),
                clearInviteFromStore(e) {
                    d.default.dispatch({
                        type: "INSTANT_INVITE_CLEAR",
                        channelId: e
                    })
                },
                revokeInvite(e) {
                    let {
                        code: t,
                        channel: n
                    } = e;
                    return V.default.delete({
                        url: K.Endpoints.INVITE(t),
                        oldFormErrors: !0,
                        trackedActionData: {
                            event: l.NetworkActionNames.INVITE_REVOKE,
                            properties: {
                                uses: e.uses,
                                max_uses: e.maxUses,
                                max_age: e.maxAge,
                                invite_type: e.type
                            }
                        }
                    }).then(() => {
                        d.default.dispatch({
                            type: "INSTANT_INVITE_REVOKE_SUCCESS",
                            code: t,
                            channelId: n.id
                        })
                    })
                },
                acceptInvite(e) {
                    var t, i, a;
                    let {
                        inviteKey: l,
                        context: s,
                        callback: r,
                        skipOnboarding: u
                    } = e, c = (0, C.parseExtraDataFromInviteKey)(l), E = c.baseCode, f = D.default.getSessionId();
                    let h = (i = s, a = c, {
                            ...i,
                            invite_guild_scheduled_event_id: a.guildScheduledEventId
                        }),
                        T = w.default.getCurrentUser();
                    return null !== (t = null == T ? void 0 : T.hasFlag(K.UserFlags.QUARANTINED)) && void 0 !== t && t ? ((0, O.default)(), new Promise((e, t) => t(Error()))) : (d.default.dispatch({
                        type: "INVITE_ACCEPT",
                        code: E
                    }), o.default.post({
                        url: K.Endpoints.INVITE(E),
                        context: h,
                        oldFormErrors: !0,
                        body: {
                            session_id: f
                        }
                    }).then(async e => {
                        var t, i;
                        d.default.dispatch({
                            type: "INVITE_ACCEPT_SUCCESS",
                            invite: e.body,
                            code: E
                        });
                        let a = m.default.getGuildScheduledEvent(c.guildScheduledEventId),
                            l = {
                                ...e.body,
                                guild_scheduled_event: a
                            },
                            s = null !== (i = null == l ? void 0 : l.guild_id) && void 0 !== i ? i : null == l ? void 0 : null === (t = l.guild) || void 0 === t ? void 0 : t.id;
                        if (!u && null != s && l.new_member) {
                            let {
                                default: e
                            } = await n.el("937692").then(n.bind(n, "937692"));
                            await e({
                                guildId: s
                            })
                        }
                        return null == r || r(l), e.body
                    }, e => {
                        var t, n;
                        throw d.default.dispatch({
                            type: "INVITE_ACCEPT_FAILURE",
                            code: E,
                            error: {
                                message: null === (t = e.body) || void 0 === t ? void 0 : t.message,
                                code: null === (n = e.body) || void 0 === n ? void 0 : n.code
                            }
                        }), new _.default(e)
                    }))
                },
                acceptInviteAndTransitionToInviteChannel(e) {
                    let {
                        inviteKey: t,
                        context: n,
                        analyticsLocations: i,
                        callback: a,
                        skipOnboarding: l
                    } = e;
                    return this.acceptInvite({
                        inviteKey: t,
                        context: n,
                        skipOnboarding: l,
                        callback: e => {
                            if (null != e.channel) {
                                let t = Z(e);
                                $(e.channel.id, t, null != i ? i : [])
                            }
                            null != a && a(e)
                        }
                    })
                },
                transitionToInvite(e, t) {
                    var n, i, a;
                    let {
                        channel: l,
                        guild: s
                    } = e;
                    if (null != s && (null === (n = s.features) || void 0 === n ? void 0 : n.includes(K.GuildFeatures.HUB))) {
                        g.default.onOpenHubInvite(e);
                        return
                    }
                    if (null != s && (null === (i = s.features) || void 0 === i ? void 0 : i.includes(K.GuildFeatures.COMMUNITY)) && (null === (a = s.features) || void 0 === a ? void 0 : a.includes(K.GuildFeatures.MEMBER_VERIFICATION_GATE_ENABLED)) && !s.features.includes(K.GuildFeatures.PREVIEW_ENABLED)) {
                        (0, v.transitionTo)(K.Routes.GUILD_MEMBER_VERIFICATION(s.id, e.code));
                        return
                    }
                    if (null == l) return;
                    let r = Z(e);
                    null != t && (r.transitionTo = t);
                    let u = null != s ? s.id : K.ME;
                    J({
                        guildId: u,
                        channel: l,
                        options: r
                    })
                },
                transitionToInviteSync(e, t, n) {
                    if (null != e.channel) {
                        let i = Z(e);
                        this.transitionToInviteChannelSync(e.channel.id, {
                            ...i,
                            intent: n,
                            transitionTo: t
                        })
                    }
                },
                openNativeAppModal(e) {
                    f.default.openNativeAppModal(e, K.RPCCommands.INVITE_BROWSER)
                },
                openApp(e, t, n, i, l) {
                    var o, c;
                    let _;
                    let E = null != e ? (0, C.parseExtraDataFromInviteKey)(e) : null,
                        f = null == E ? void 0 : E.baseCode;
                    if (d.default.dispatch({
                            type: "INVITE_APP_OPENING",
                            code: e
                        }), null != a.ua && a.ua.toLowerCase().indexOf("googlebot") > -1) {
                        d.default.dispatch({
                            type: "INVITE_APP_NOT_OPENED",
                            code: e
                        });
                        return
                    }
                    if ((null === (o = a.os) || void 0 === o ? void 0 : o.family) === "Android" || (null === (c = a.os) || void 0 === c ? void 0 : c.family) === "iOS") {
                        let e = null != f ? (0, s.getInviteDynamicLinkTemplate)(f) : (0, s.getDefaultDynamicLinkTemplate)(),
                            t = (0, r.generateAttemptId)();
                        _ = (0, r.default)(e, {
                            utmSource: 2 === l ? "friend_invite" : Q,
                            fingerprint: n,
                            username: i,
                            attemptId: t,
                            event: null == E ? void 0 : E.guildScheduledEventId,
                            iosFallbackLink: "https://discord.com/api/download/mobile?invite_code=".concat(f)
                        }), H.default.track(K.AnalyticEvents.DEEP_LINK_CLICKED, {
                            fingerprint: (0, u.maybeExtractId)(n),
                            attempt_id: t,
                            source: Q,
                            invite_code: f
                        })
                    } else "#" === (_ = null != t ? K.Routes.INVITE_PROXY(t) : "")[0] && (_ = _.slice(1)), _ = "discord://".concat(_);
                    B.default.launch(_, t => {
                        d.default.dispatch(t ? {
                            type: "INVITE_APP_OPENED",
                            code: e
                        } : {
                            type: "INVITE_APP_NOT_OPENED",
                            code: e
                        })
                    })
                },
                transitionToInviteChannelSync: $
            }
        },
        145292: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                trustDomain: function() {
                    return a
                },
                trustProtocol: function() {
                    return l
                }
            });
            var i = n("913144");

            function a(e) {
                i.default.dispatch({
                    type: "MASKED_LINK_ADD_TRUSTED_DOMAIN",
                    url: e
                })
            }

            function l(e) {
                i.default.dispatch({
                    type: "MASKED_LINK_ADD_TRUSTED_PROTOCOL",
                    url: e
                })
            }
        },
        736964: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return g
                }
            });
            var i, a, l = n("872717"),
                s = n("819855"),
                r = n("913144"),
                u = n("774146"),
                o = n("132774"),
                d = n("258158"),
                c = n("823348"),
                _ = n("697218"),
                E = n("284609"),
                f = n("158998"),
                h = n("404118"),
                T = n("272030"),
                p = n("49111"),
                S = n("782340");

            function I(e) {
                (0, T.closeContextMenu)(), h.default.show(e)
            }

            function A(e, t, n) {
                let {
                    status: i,
                    body: l
                } = e, s = l && l.code;
                switch (i) {
                    case 429:
                        t === a.SHOW_ALWAYS && I({
                            title: S.default.Messages.FRIEND_REQUEST_RATE_LIMITED_HEADER,
                            body: S.default.Messages.FRIEND_REQUEST_RATE_LIMITED_BODY,
                            confirmText: S.default.Messages.FRIEND_REQUEST_RATE_LIMITED_BUTTON
                        });
                        break;
                    case 403:
                        if (s === p.AbortCodes.EMAIL_VERIFICATION_REQUIRED) {
                            I({
                                title: S.default.Messages.FRIEND_REQUEST_REQUIRES_EMAIL_VALIDATION_HEADER,
                                body: S.default.Messages.FRIEND_REQUEST_REQUIRES_EMAIL_VALIDATION_BODY,
                                confirmText: S.default.Messages.FRIEND_REQUEST_REQUIRES_EMAIL_VALIDATION_BUTTON,
                                onConfirm: () => {
                                    u.openClaimAccountModal()
                                }
                            });
                            break
                        }
                    default:
                        if (s === p.AbortCodes.USER_QUARANTINED)(0, T.closeContextMenu)(), (0, d.default)();
                        else if ((0, c.isLimitedAccessErrorCode)(i, s)) break;
                        else if (t === a.SHOW_ALWAYS) {
                            let e = null != n ? (0, E.humanizeAbortCode)(s || 0, n) : S.default.Messages.POMELO_ADD_FRIEND_ERROR;
                            I({
                                title: S.default.Messages.FRIEND_REQUEST_FAILED_HEADER,
                                body: e,
                                confirmText: S.default.Messages.OKAY
                            })
                        }
                }
                throw e
            }(i = a || (a = {}))[i.SHOW_ALWAYS = 0] = "SHOW_ALWAYS", i[i.SHOW_ONLY_IF_ACTION_NEEDED = 1] = "SHOW_ONLY_IF_ACTION_NEEDED";
            let m = {
                sendRequest(e) {
                    let {
                        discordTag: t,
                        context: n,
                        captchaPayload: i,
                        errorUxConfig: s = a.SHOW_ALWAYS
                    } = e, [r, u] = t.split("#");
                    return l.default.post({
                        url: p.Endpoints.USER_RELATIONSHIPS(),
                        body: {
                            username: r,
                            discriminator: parseInt(u),
                            ...i
                        },
                        context: n,
                        oldFormErrors: !0
                    }).catch(e => {
                        A(e, s, t)
                    })
                },
                addRelationship(e, t) {
                    let {
                        userId: n,
                        context: i,
                        type: s,
                        friendToken: r,
                        fromFriendSuggestion: u,
                        captchaPayload: o
                    } = e, d = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : a.SHOW_ALWAYS, c = _.default.getUser(n);
                    return l.default.put({
                        url: p.Endpoints.USER_RELATIONSHIP(n),
                        body: {
                            type: s,
                            friend_token: r,
                            from_friend_suggestion: u,
                            ...o
                        },
                        context: i,
                        oldFormErrors: !0
                    }).then(() => {
                        null == t || t()
                    }).catch(e => {
                        A(e, d, f.default.getUserTag(c))
                    })
                },
                acceptFriendRequest: e => m.addRelationship(e, function() {
                    s.AccessibilityAnnouncer.announce(S.default.Messages.A11Y_ANNOUNCEMENT_FRIEND_ACCEPT_REQUEST)
                }),
                cancelFriendRequest: (e, t) => m.removeRelationship(e, t, function() {
                    s.AccessibilityAnnouncer.announce(S.default.Messages.A11Y_ANNOUNCEMENT_FRIEND_CANCEL_REQUEST)
                }),
                removeFriend(e, t) {
                    m.removeRelationship(e, t, function() {
                        s.AccessibilityAnnouncer.announce(S.default.Messages.A11Y_ANNOUNCEMENT_FRIEND_REMOVED)
                    })
                },
                unblockUser(e, t) {
                    m.removeRelationship(e, t, function() {
                        s.AccessibilityAnnouncer.announce(S.default.Messages.A11Y_ANNOUNCEMENT_USER_UNBLOCKED)
                    })
                },
                removeRelationship: (e, t, n) => l.default.delete({
                    url: p.Endpoints.USER_RELATIONSHIP(e),
                    context: t,
                    oldFormErrors: !0
                }).then(() => {
                    null == n || n()
                }).catch(() => {
                    s.AccessibilityAnnouncer.announce(S.default.Messages.A11Y_ANNOUNCEMENT_GENERIC_FAIL)
                }),
                updateRelationship: (e, t) => l.default.patch({
                    url: p.Endpoints.USER_RELATIONSHIP(e),
                    body: {
                        nickname: t
                    }
                }),
                fetchRelationships() {
                    l.default.get({
                        url: p.Endpoints.USER_RELATIONSHIPS(),
                        oldFormErrors: !0
                    }).then(e => r.default.dispatch({
                        type: "LOAD_RELATIONSHIPS_SUCCESS",
                        relationships: e.body
                    }), () => r.default.dispatch({
                        type: "LOAD_RELATIONSHIPS_FAILURE"
                    }))
                },
                confirmClearPendingRelationships(e) {
                    (0, o.default)(e)
                },
                clearPendingRelationships: () => l.default.delete({
                    url: p.Endpoints.USER_RELATIONSHIPS(),
                    query: {
                        relationship_type: p.RelationshipTypes.PENDING_INCOMING
                    }
                }).then(() => {
                    r.default.dispatch({
                        type: "RELATIONSHIP_PENDING_INCOMING_REMOVED"
                    })
                }).catch(() => {
                    s.AccessibilityAnnouncer.announce(S.default.Messages.A11Y_ANNOUNCEMENT_GENERIC_FAIL)
                })
            };
            var g = m
        },
        987317: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return S
                }
            });
            var i = n("913144"),
                a = n("700507"),
                l = n("76393"),
                s = n("383294"),
                r = n("393414"),
                u = n("742171"),
                o = n("42203"),
                d = n("247013"),
                c = n("42887"),
                _ = n("18494"),
                E = n("162771"),
                f = n("697218"),
                h = n("404008"),
                T = n("450481"),
                p = n("49111"),
                S = {
                    selectChannel(e) {
                        let {
                            guildId: t,
                            channelId: n,
                            messageId: a,
                            jumpType: l,
                            preserveDrawerState: s,
                            source: r
                        } = e;
                        i.default.dispatch({
                            type: "CHANNEL_SELECT",
                            guildId: t === p.ME ? null : t,
                            channelId: n,
                            messageId: a,
                            jumpType: l,
                            preserveDrawerState: s,
                            source: r
                        })
                    },
                    selectPrivateChannel(e) {
                        (0, r.transitionTo)(p.Routes.CHANNEL(p.ME, e))
                    },
                    selectVoiceChannel(e) {
                        var t;
                        let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                            i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                            a = o.default.getChannel(e),
                            l = null == a ? void 0 : a.getGuildId();
                        if ((null == a ? void 0 : a.isGuildVocal()) && (null == a ? void 0 : a.isNSFW()) && (!(null === (t = f.default.getCurrentUser()) || void 0 === t ? void 0 : t.nsfwAllowed) || !d.default.didAgree(l))) {
                            (0, r.transitionTo)(p.Routes.CHANNEL(l, e));
                            return
                        }
                        c.default.isSupported() && (null != e && c.default.getMediaEngine().interact(), (0, T.selectVoiceChannelAdditional)(e, l, n, i))
                    },
                    disconnect() {
                        let e = l.default.getRemoteSessionId();
                        if (null != e && a.remoteDisconnect(e), (0, u.isVoicePanelEnabled)()) this.selectVoiceChannel(null);
                        else {
                            let e = o.default.getChannel(_.default.getChannelId()),
                                t = _.default.getChannelId() === _.default.getVoiceChannelId() && (null == e ? void 0 : e.isThread()) === !0;
                            if (this.selectVoiceChannel(null), s.close(p.PopoutWindowKeys.CHANNEL_CALL_POPOUT), t) {
                                let e = E.default.getGuildId();
                                null != e && (0, r.transitionTo)((0, h.previousTextChannelRouteForGuild)(e))
                            }
                        }
                    }
                }
        },
        450481: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                selectVoiceChannelAdditional: function() {
                    return T
                }
            });
            var i = n("551042"),
                a = n("913144"),
                l = n("157186"),
                s = n("619395"),
                r = n("819450"),
                u = n("439141"),
                o = n("172538"),
                d = n("42203"),
                c = n("305961"),
                _ = n("88093"),
                E = n("18494"),
                f = n("800762"),
                h = n("404008");
            let T = function(e, t) {
                let T = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                    p = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
                    S = d.default.getChannel(e),
                    I = f.default.getCurrentClientVoiceChannelId(null != t ? t : null) === e,
                    A = null != S ? _.default.getCheck(S.guild_id) : null,
                    m = null != t && (0, l.shouldShowMembershipVerificationGate)(t);
                if (!m) {
                    if (null == A || A.canChat || (0, s.canLurkerListen)(S)) {
                        if (null != S && !I) {
                            let e = (0, h.isChannelFull)(S, f.default, c.default);
                            if (e && S.isGuildStageVoice() && (0, r.getStageHasMedia)(S.id)) {
                                (0, i.openModalLazy)(async () => {
                                    let {
                                        default: e
                                    } = await n.el("374278").then(n.bind(n, "374278"));
                                    return t => e({
                                        channel: S,
                                        ...t
                                    })
                                });
                                return
                            }
                            if (e) {
                                (0, i.openModalLazy)(async () => {
                                    let {
                                        default: e
                                    } = await n.el("440224").then(n.bind(n, "440224"));
                                    return t => e(t)
                                });
                                return
                            }
                        }
                        T && (0, u.applyInitialVideoBackgroundOption)(), (0, o.default)(function() {
                            a.default.dispatch({
                                type: "VOICE_CHANNEL_SELECT",
                                guildId: t,
                                channelId: e,
                                currentVoiceChannelId: E.default.getVoiceChannelId(),
                                video: T,
                                stream: p
                            })
                        }, e, p, T)
                    }
                }
            }
        },
        990766: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                startStream: function() {
                    return v
                },
                setStreamPaused: function() {
                    return M
                },
                watchStream: function() {
                    return D
                },
                toggleSelfStreamHidden: function() {
                    return L
                },
                watchStreamAndTransitionToStream: function() {
                    return U
                },
                stopStream: function() {
                    return P
                },
                closeStream: function() {
                    return b
                },
                fetchStreamPreview: function() {
                    return G
                },
                notifyStreamStart: function() {
                    return k
                },
                updateStreamSettings: function() {
                    return F
                },
                changeStreamRegion: function() {
                    return w
                },
                stopOwnStream: function() {
                    return H
                },
                createBroadcastChannelOrStartStream: function() {
                    return V
                },
                joinPrivateChannelAndWatchStream: function() {
                    return B
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("759843"),
                s = n("872717"),
                r = n("913144"),
                u = n("76393"),
                o = n("374014"),
                d = n("709463"),
                c = n("870346"),
                _ = n("373469"),
                E = n("271938"),
                f = n("42203"),
                h = n("305961"),
                T = n("18494"),
                p = n("800762"),
                S = n("404008"),
                I = n("12307"),
                A = n("840707"),
                m = n("561288"),
                g = n("450911"),
                C = n("255397"),
                N = n("987317"),
                O = n("49111"),
                R = n("706530");

            function v(e, t, n) {
                r.default.dispatch({
                    type: "STREAM_START",
                    streamType: null != e ? R.StreamTypes.GUILD : R.StreamTypes.CALL,
                    guildId: e,
                    channelId: t,
                    appContext: __OVERLAY__ ? O.AppContext.OVERLAY : O.AppContext.APP,
                    ...n
                })
            }

            function M(e, t) {
                let n = (0, o.encodeStreamKey)(e);
                r.default.dispatch({
                    type: "STREAM_SET_PAUSED",
                    streamKey: n,
                    paused: t
                })
            }

            function y(e, t) {
                let n = f.default.getChannel(t);
                a(null != n, "Cannot join a null voice channel");
                let i = p.default.isInChannel(t);
                return !i && (0, S.isChannelFull)(n, p.default, h.default)
            }

            function D(e, t) {
                let n = null != u.default.getRemoteSessionId();
                if (n) return;
                let {
                    guildId: i,
                    channelId: a
                } = e;
                if (null != i && y(i, a)) return;
                let l = (0, o.encodeStreamKey)(e),
                    s = (null == t ? void 0 : t.forceMultiple) || _.default.getAllActiveStreamsForChannel(a).filter(e => {
                        let {
                            ownerId: t
                        } = e;
                        return t !== E.default.getId()
                    }).length >= 2;
                r.default.dispatch({
                    type: "STREAM_WATCH",
                    streamKey: l,
                    allowMultiple: s
                }), !s && (null == t || !t.noFocus) && C.default.selectParticipant(e.channelId, l)
            }

            function L(e, t) {
                r.default.dispatch({
                    type: "STREAM_UPDATE_SELF_HIDDEN",
                    channelId: e,
                    selfStreamHidden: t
                })
            }

            function U(e, t) {
                let {
                    guildId: n,
                    channelId: i
                } = e;
                if (null != n && y(n, i)) return;
                D(e, t);
                let a = c.default.getWindowOpen(O.PopoutWindowKeys.CHANNEL_CALL_POPOUT),
                    l = T.default.getVoiceChannelId();
                (!a || l !== i) && (0, d.default)(e)
            }

            function P(e) {
                let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                b(e, t), r.default.dispatch({
                    type: "STREAM_STOP",
                    streamKey: e,
                    appContext: __OVERLAY__ ? O.AppContext.OVERLAY : O.AppContext.APP
                })
            }

            function b(e) {
                let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                r.default.dispatch({
                    type: "STREAM_CLOSE",
                    streamKey: e,
                    canShowFeedback: t
                })
            }
            async function G(e, t, n) {
                let i = (0, o.encodeStreamKey)({
                    streamType: null != e ? R.StreamTypes.GUILD : R.StreamTypes.CALL,
                    guildId: e,
                    channelId: t,
                    ownerId: n
                });
                r.default.dispatch({
                    type: "STREAM_PREVIEW_FETCH_START",
                    streamKey: i
                });
                try {
                    let e = await s.default.get({
                        url: O.Endpoints.STREAM_PREVIEW(i),
                        query: {
                            version: Date.now()
                        },
                        oldFormErrors: !0
                    });
                    r.default.dispatch({
                        type: "STREAM_PREVIEW_FETCH_SUCCESS",
                        streamKey: i,
                        previewURL: e.body.url
                    })
                } catch (t) {
                    let e;
                    429 === t.status && (e = 1e3 * t.body.retry_after), r.default.dispatch({
                        type: "STREAM_PREVIEW_FETCH_FAIL",
                        streamKey: i,
                        retryAfter: e
                    })
                }
            }
            async function k(e) {
                try {
                    await A.default.post({
                        url: O.Endpoints.STREAM_NOTIFY(e),
                        oldFormErrors: !0,
                        trackedActionData: {
                            event: l.NetworkActionNames.STREAM_NOTIFY
                        }
                    })
                } catch (e) {}
            }

            function F(e) {
                (0, I.trackStreamSettingsUpdate)(e.preset, e.resolution, e.frameRate), r.default.dispatch({
                    type: "STREAM_UPDATE_SETTINGS",
                    ...e
                })
            }

            function w(e, t) {
                s.default.patch({
                    url: O.Endpoints.STREAM(e),
                    body: {
                        region: t
                    },
                    oldFormErrors: !0
                })
            }

            function H() {
                let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0],
                    t = _.default.getCurrentUserActiveStream();
                null != t && P((0, o.encodeStreamKey)(t), e)
            }

            function V(e) {
                let {
                    channelId: t,
                    pid: n,
                    sourceId: i,
                    sourceName: a
                } = e;
                (null != n || null != i || null != a) && (r.default.dispatch({
                    type: "START_BROADCAST_STREAM",
                    options: {
                        pid: n,
                        sourceId: i,
                        sourceName: a
                    }
                }), null == t ? g.default.createBroadcastPrivateChannel() : v(null, t, {
                    pid: n,
                    sourceId: i,
                    sourceName: a
                }))
            }

            function B(e, t) {
                let n = E.default.getId(),
                    i = (0, o.decodeStreamKey)(t),
                    a = T.default.getVoiceChannelId();
                null != a && a !== e && N.default.disconnect(), g.default.addRecipient(e, n, void 0, () => {
                    m.default.call(e, !1, !1, null, () => {
                        U(i)
                    })
                })
            }
        },
        327037: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                fetchCurrentUser: function() {
                    return _
                },
                acceptAgreements: function() {
                    return E
                },
                setFlag: function() {
                    return f
                },
                getUser: function() {
                    return h
                },
                fetchProfile: function() {
                    return T
                },
                fetchMutualFriends: function() {
                    return p
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("811022"),
                s = n("872717"),
                r = n("913144"),
                u = n("766274"),
                o = n("697218"),
                d = n("49111");
            let c = new l.default("UserProfileModalActionCreators");

            function _() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    {
                        withAnalyticsToken: t = !1
                    } = e;
                return s.default.get({
                    url: d.Endpoints.ME,
                    query: {
                        with_analytics_token: t
                    },
                    oldFormErrors: !0
                }).then(e => (r.default.dispatch({
                    type: "CURRENT_USER_UPDATE",
                    user: e.body,
                    analyticsToken: t ? e.body.analytics_token : void 0
                }), new u.default(e.body)))
            }

            function E() {
                let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0],
                    t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                return s.default.patch({
                    url: d.Endpoints.USER_AGREEMENTS,
                    body: {
                        terms: e,
                        privacy: t
                    },
                    oldFormErrors: !0
                }).then(() => !0, () => !1)
            }

            function f(e, t) {
                let n = o.default.getCurrentUser();
                a(null != n, "setFlag: user cannot be undefined");
                let i = t ? n.flags | e : n.flags & ~e;
                return s.default.patch({
                    url: d.Endpoints.ME,
                    oldFormErrors: !0,
                    body: {
                        flags: i
                    }
                })
            }

            function h(e) {
                let t = o.default.getUser(e);
                return null != t ? Promise.resolve(t) : s.default.get({
                    url: d.Endpoints.USER(e),
                    oldFormErrors: !0
                }).then(t => (r.default.dispatch({
                    type: "USER_UPDATE",
                    user: t.body
                }), o.default.getUser(e)))
            }
            async function T(e) {
                let {
                    friendToken: t,
                    withMutualGuilds: n,
                    withMutualFriendsCount: i,
                    guildId: a,
                    connectionsRoleId: l
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, u = arguments.length > 2 ? arguments[2] : void 0;
                r.default.dispatch({
                    type: "USER_PROFILE_FETCH_START",
                    userId: e
                });
                try {
                    let o = await s.default.get({
                        url: d.Endpoints.USER_PROFILE(e),
                        query: {
                            friend_token: t,
                            with_mutual_guilds: n,
                            with_mutual_friends_count: i,
                            guild_id: a,
                            connections_role_id: l
                        },
                        oldFormErrors: !0
                    });
                    return null == u || u(o.body, a), r.default.dispatch({
                        type: "USER_UPDATE",
                        user: o.body.user
                    }), r.default.dispatch({
                        type: "USER_PROFILE_FETCH_SUCCESS",
                        ...o.body
                    }), null != a && null != o.body.guild_member && r.default.dispatch({
                        type: "GUILD_MEMBER_PROFILE_UPDATE",
                        guildId: a,
                        guildMember: o.body.guild_member
                    }), o.body
                } catch (t) {
                    throw null != t && (null == t ? void 0 : t.body) != null && c.warn("fetchProfile error: ".concat(t.body.code, " - ").concat(t.body.message)), r.default.dispatch({
                        type: "USER_PROFILE_FETCH_FAILURE",
                        userId: e
                    }), t
                }
            }
            async function p(e) {
                r.default.dispatch({
                    type: "MUTUAL_FRIENDS_FETCH_START",
                    userId: e
                });
                try {
                    let t = await s.default.get({
                        url: d.Endpoints.USER_RELATIONSHIPS(e),
                        oldFormErrors: !0
                    });
                    r.default.dispatch({
                        type: "MUTUAL_FRIENDS_FETCH_SUCCESS",
                        userId: e,
                        mutualFriends: t.body
                    })
                } catch (t) {
                    throw (null == t ? void 0 : t.body) != null && c.warn("fetchMutualFriends error: ".concat(t.body.code, " - ").concat(t.body.message)), r.default.dispatch({
                        type: "MUTUAL_FRIENDS_FETCH_FAILURE",
                        userId: e
                    }), t
                }
            }
        },
        225664: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                },
                useBurstReactionsExperiment: function() {
                    return r
                },
                BurstReactionsUserExperiment: function() {
                    return u
                },
                useBurstReactionsUserExperiment: function() {
                    return o
                }
            });
            var i = n("862205"),
                a = n("162771");
            let l = (0, i.createExperiment)({
                kind: "guild",
                id: "2023-02_burst_reaction_guild_experiment",
                label: "Burst Reactions",
                defaultConfig: {
                    enabled: !1,
                    hasTabUI: !1,
                    hasInfinite: !1,
                    hasFreeBursts: !1
                },
                treatments: [{
                    id: 1,
                    label: "Enabled",
                    config: {
                        enabled: !0,
                        hasTabUI: !1,
                        hasInfinite: !1,
                        hasFreeBursts: !0
                    }
                }, {
                    id: 2,
                    label: "Tab UI",
                    config: {
                        enabled: !0,
                        hasTabUI: !0,
                        hasInfinite: !1,
                        hasFreeBursts: !1
                    }
                }, {
                    id: 4,
                    label: "Free Bursts",
                    config: {
                        enabled: !0,
                        hasTabUI: !0,
                        hasInfinite: !1,
                        hasFreeBursts: !0
                    }
                }]
            });
            var s = l;
            let r = function(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
                        n = null != e ? e : a.default.getGuildId(),
                        i = l.useExperiment({
                            guildId: null != n ? n : "",
                            location: "169958_1"
                        }, {
                            autoTrackExposure: t
                        }),
                        s = u.useExperiment({
                            location: "169958_2"
                        }, {
                            autoTrackExposure: !0
                        });
                    return {
                        enabled: i.enabled || s.enabled,
                        guildEnabled: i.enabled,
                        userEnabled: s.enabled,
                        hasTwoButtonEntryPoint: !!s.enabled && s.hasTwoButtonEntryPoint,
                        hasTabUI: s.enabled ? s.hasTabUI : i.hasTabUI,
                        hasFreeBursts: s.enabled ? s.hasFreeBursts : i.hasFreeBursts,
                        hasBurstShake: s.hasBurstShake,
                        hasPlayRandomAnimations: s.hasPlayRandomAnimations,
                        hasBurstGlow: s.hasBurstGlow,
                        hasSendAnimation: s.hasSendAnimation,
                        hasUnlimited: s.hasUnlimited,
                        hasBurstToggle: s.hasBurstToggle
                    }
                },
                u = (0, i.createExperiment)({
                    kind: "user",
                    id: "2022-09_burst_reactions",
                    label: "Burst Reactions User Experiment",
                    defaultConfig: {
                        enabled: !1,
                        hasTabUI: !1,
                        hasTwoButtonEntryPoint: !1,
                        hasFreeBursts: !1,
                        hasUnlimited: !1,
                        hasBurstToggle: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "User two entry points",
                        config: {
                            enabled: !0,
                            hasTabUI: !1,
                            hasTwoButtonEntryPoint: !0,
                            hasFreeBursts: !0
                        }
                    }, {
                        id: 2,
                        label: "User Tab UI",
                        config: {
                            enabled: !0,
                            hasTabUI: !0,
                            hasTwoButtonEntryPoint: !1,
                            hasFreeBursts: !1
                        }
                    }, {
                        id: 4,
                        label: "User Free Bursts",
                        config: {
                            enabled: !0,
                            hasTabUI: !0,
                            hasTwoButtonEntryPoint: !1,
                            hasFreeBursts: !0
                        }
                    }, {
                        id: 5,
                        label: "User Free Bursts",
                        config: {
                            enabled: !0,
                            hasTabUI: !0,
                            hasTwoButtonEntryPoint: !1,
                            hasFreeBursts: !0
                        }
                    }, {
                        id: 6,
                        label: "Combined entry point and tabs",
                        config: {
                            enabled: !0,
                            hasTabUI: !0,
                            hasTwoButtonEntryPoint: !0,
                            hasFreeBursts: !0
                        }
                    }, {
                        id: 7,
                        label: "Combined entry point and tabs + double weekly refills",
                        config: {
                            enabled: !0,
                            hasTabUI: !0,
                            hasTwoButtonEntryPoint: !0,
                            hasFreeBursts: !0
                        }
                    }, {
                        id: 8,
                        label: "All additional polish",
                        config: {
                            enabled: !0,
                            hasTabUI: !0,
                            hasTwoButtonEntryPoint: !0,
                            hasFreeBursts: !0,
                            hasBurstShake: !0,
                            hasDesktopNotifications: !0,
                            hasPlayRandomAnimations: !0,
                            hasBurstGlow: !0,
                            hasSendAnimation: !0
                        }
                    }, {
                        id: 9,
                        label: "All additional polish except notifications",
                        config: {
                            enabled: !0,
                            hasTabUI: !0,
                            hasTwoButtonEntryPoint: !0,
                            hasFreeBursts: !0,
                            hasBurstShake: !0,
                            hasDesktopNotifications: !1,
                            hasPlayRandomAnimations: !0,
                            hasBurstGlow: !0,
                            hasSendAnimation: !0
                        }
                    }, {
                        id: 10,
                        label: "The exact same as bucket six, just with a different label",
                        config: {
                            enabled: !0,
                            hasTabUI: !0,
                            hasTwoButtonEntryPoint: !0,
                            hasFreeBursts: !0
                        }
                    }, {
                        id: 11,
                        label: "New send experience",
                        config: {
                            enabled: !0,
                            hasTabUI: !1,
                            hasTwoButtonEntryPoint: !1,
                            hasFreeBursts: !1,
                            hasBurstShake: !0,
                            hasDesktopNotifications: !1,
                            hasPlayRandomAnimations: !0,
                            hasBurstGlow: !0,
                            hasSendAnimation: !0,
                            hasUnlimited: !0,
                            hasBurstToggle: !0
                        }
                    }]
                }),
                o = () => {
                    let e = u.useExperiment({
                        location: "169958_3"
                    }, {
                        autoTrackExposure: !0
                    }).enabled;
                    return e
                }
        },
        57999: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            });
            var i = (0, n("862205").createExperiment)({
                kind: "user",
                id: "2022-10_context_menu_and_new_media_picker",
                label: "Context Menu and New Media Picker",
                defaultConfig: {
                    enabled: !1,
                    persistentGiftButton: !0
                },
                treatments: [{
                    id: 1,
                    label: "New media picker is enabled. Gift button is visible alongside Create Chread",
                    config: {
                        enabled: !0,
                        persistentGiftButton: !0
                    }
                }, {
                    id: 2,
                    label: "New media picker is enabled. Gift button is NOT visible alongside Create Chread",
                    config: {
                        enabled: !0,
                        persistentGiftButton: !1
                    }
                }]
            })
        },
        389806: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                kind: "user",
                id: "2023-03_store_latest_message_data",
                label: "Store latest message data",
                defaultConfig: {
                    enabled: !1
                },
                treatments: [{
                    id: 1,
                    label: "Use latest data from api/gateway",
                    config: {
                        enabled: !0
                    }
                }]
            });
            var l = a
        },
        899633: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return o
                },
                getIsSpeaking: function() {
                    return d
                }
            });
            var i = n("446674"),
                a = n("235004"),
                l = n("18494"),
                s = n("280168"),
                r = n("800762");

            function u(e, t, n) {
                return e || t || n
            }

            function o(e) {
                var t, n, u;
                let {
                    userId: o,
                    checkSoundSharing: d = !1,
                    checkSoundboardSounds: c = !0,
                    checkIsMuted: _ = !1,
                    context: E
                } = e, f = (0, i.useStateFromStores)([r.default, l.default], () => {
                    let e = l.default.getVoiceChannelId();
                    return null != e ? r.default.getVoiceStateForChannel(e, o) : null
                }), h = _ && ((null == f ? void 0 : f.mute) || (null == f ? void 0 : f.selfMute)), T = (0, i.useStateFromStores)([s.default], () => s.default.isSpeaking(o, E) && !h), p = (0, i.useStateFromStores)([s.default], () => s.default.isSoundSharing(o) && d), S = (0, i.useStateFromStores)([a.default], () => a.default.isUserPlayingSounds(o) && c);
                return t = T, n = S, u = p, t || n || u
            }

            function d(e) {
                var t, n, i;
                let {
                    userId: u,
                    checkSoundSharing: o = !1,
                    checkSoundboardSounds: d = !0,
                    checkIsMuted: c = !1,
                    context: _
                } = e, E = l.default.getVoiceChannelId(), f = null != E ? r.default.getVoiceStateForChannel(E, u) : null, h = c && ((null == f ? void 0 : f.mute) || (null == f ? void 0 : f.selfMute)), T = s.default.isSpeaking(u, _) && !h, p = s.default.isSoundSharing(u) && o, S = a.default.isUserPlayingSounds(u) && d;
                return t = T, n = S, i = p, t || n || i
            }
        },
        763898: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("884691");

            function a() {
                let e = i.useRef(null);
                return null === e.current && (e.current = new AbortController), i.useEffect(() => () => {
                    var t;
                    null === (t = e.current) || void 0 === t || t.abort()
                }, []), e.current.signal
            }
        },
        408062: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return h
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("389806"),
                s = n("115718"),
                r = n("280468"),
                u = n("692038"),
                o = n("299039"),
                d = n("35013"),
                c = n("49111");

            function _(e, t) {
                let n = e.get(t.id);
                return null == n || function(e, t) {
                    var n, i;
                    let a = null != e.editedTimestamp ? +e.editedTimestamp.toDate() : 0,
                        l = null != t.edited_timestamp ? +new Date(t.edited_timestamp) : 0;
                    return !!(l > a) || !!(e.embeds.length < (null !== (i = null === (n = t.embeds) || void 0 === n ? void 0 : n.length) && void 0 !== i ? i : 0)) || e.content !== t.content
                }(n, t) || e.cached ? (0, u.createMessageRecord)(t) : n
            }
            class E {
                clone() {
                    let e = new E(this._isCacheBefore);
                    return e._map = {
                        ...this._map
                    }, e._messages = [...this._messages], e._wasAtEdge = this._wasAtEdge, e
                }
                get wasAtEdge() {
                    return this._wasAtEdge
                }
                set wasAtEdge(e) {
                    this._wasAtEdge = e
                }
                get length() {
                    return this._messages.length
                }
                clear() {
                    this._map = {}, this._messages = [], this._wasAtEdge = !1
                }
                remove(e) {
                    this._messages = a.filter(this._messages, t => {
                        let {
                            id: n
                        } = t;
                        return n !== e
                    }), delete this._map[e]
                }
                removeMany(e) {
                    a.each(e, e => {
                        delete this._map[e]
                    }), this._messages = this._messages.filter(t => -1 === e.indexOf(t.id))
                }
                replace(e, t) {
                    let n = this._map[e];
                    null != n && (delete this._map[e], this._map[t.id] = t, this._messages[this._messages.indexOf(n)] = t)
                }
                update(e, t) {
                    let n = this._map[e];
                    if (null == n) return;
                    let i = t(n);
                    this._map[n.id] = i, this._messages[this._messages.indexOf(n)] = i
                }
                has(e) {
                    return null != this._map[e]
                }
                get(e) {
                    return this._map[e]
                }
                forEach(e, t) {
                    this._messages.forEach(e, t)
                }
                cache(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    0 === this.length && (this._wasAtEdge = t);
                    let n = this._messages.length + e.length;
                    if (n > c.MAX_MESSAGE_CACHE_SIZE) {
                        if (this._wasAtEdge = !1, e.length > c.MAX_MESSAGE_CACHE_SIZE) {
                            this._isCacheBefore ? this._messages = e.slice(e.length - c.MAX_MESSAGE_CACHE_SIZE) : this._messages = e.slice(0, c.MAX_MESSAGE_CACHE_SIZE), this._map = {}, this._messages.forEach(e => this._map[e.id] = e);
                            return
                        }
                        let t = c.MAX_MESSAGE_CACHE_SIZE - e.length;
                        this._isCacheBefore ? this._messages = this._messages.slice(Math.max(this._messages.length - t, 0)) : this._messages = this._messages.slice(0, t)
                    }
                    this._messages = this._isCacheBefore ? [...this._messages, ...e] : [...e, ...this._messages], this._map = {}, this._messages.forEach(e => this._map[e.id] = e)
                }
                extractAll() {
                    let e = this._messages;
                    return this._messages = [], this._map = {}, e
                }
                extract(e) {
                    let t;
                    if (this._isCacheBefore) {
                        let n = Math.max(this.length - e, 0),
                            i = this.length;
                        t = this._messages.slice(n, i), this._messages.splice(n)
                    } else {
                        let n = Math.min(e, this.length);
                        t = this._messages.slice(0, n), this._messages.splice(0, e)
                    }
                    return t.forEach(e => delete this._map[e.id]), t
                }
                constructor(e) {
                    this._messages = [], this._map = {}, this._wasAtEdge = !1, this._isCacheBefore = e
                }
            }
            class f {
                static forEach(e) {
                    a.forEach(f._channelMessages, e)
                }
                static get(e) {
                    return f._channelMessages[e]
                }
                static hasPresent(e) {
                    let t = f.get(e);
                    return null != t && t.hasPresent()
                }
                static getOrCreate(e) {
                    let t = f._channelMessages[e];
                    return null == t && (t = new f(e), f._channelMessages[e] = t), t
                }
                static clear(e) {
                    delete f._channelMessages[e]
                }
                static clearCache(e) {
                    let t = f._channelMessages[e];
                    null != t && (t._before.clear(), t._after.clear(), this.commit(t))
                }
                static commit(e) {
                    f._channelMessages[e.channelId] = e
                }
                mutate(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        n = new f(this.channelId);
                    return n._array = t ? [...this._array] : this._array, n._map = t ? {
                        ...this._map
                    } : this._map, n._after = t ? this._after.clone() : this._after, n._before = t ? this._before.clone() : this._before, e instanceof Function ? (n.ready = this.ready, n.jumpType = this.jumpType, n.jumpTargetId = this.jumpTargetId, n.jumpTargetOffset = this.jumpTargetOffset, n.jumpSequenceId = this.jumpSequenceId, n.jumped = this.jumped, n.jumpedToPresent = this.jumpedToPresent, n.jumpFlash = this.jumpFlash, n.jumpReturnTargetId = this.jumpReturnTargetId, n.focusTargetId = this.focusTargetId, n.hasMoreBefore = this.hasMoreBefore, n.hasMoreAfter = this.hasMoreAfter, n.loadingMore = this.loadingMore, n.revealedMessageId = this.revealedMessageId, n.cached = this.cached, n.hasFetched = this.hasFetched, n.error = this.error, e(n)) : "object" == typeof e && (n.ready = void 0 !== e.ready ? !0 === e.ready : this.ready, n.jumpType = void 0 !== e.jumpType ? e.jumpType : this.jumpType, n.jumpTargetId = void 0 !== e.jumpTargetId ? e.jumpTargetId : this.jumpTargetId, n.jumpTargetOffset = void 0 !== e.jumpTargetOffset ? e.jumpTargetOffset : this.jumpTargetOffset, n.jumpSequenceId = void 0 !== e.jumpSequenceId ? e.jumpSequenceId : this.jumpSequenceId, n.jumped = void 0 !== e.jumped ? !0 === e.jumped : this.jumped, n.jumpedToPresent = void 0 !== e.jumpedToPresent ? !0 === e.jumpedToPresent : this.jumpedToPresent, n.jumpFlash = void 0 !== e.jumpFlash ? !0 === e.jumpFlash : this.jumpFlash, n.jumpReturnTargetId = void 0 !== e.jumpReturnTargetId ? e.jumpReturnTargetId : this.jumpReturnTargetId, n.focusTargetId = void 0 !== e.focusTargetId ? e.focusTargetId : this.focusTargetId, n.hasMoreBefore = void 0 !== e.hasMoreBefore ? !0 === e.hasMoreBefore : this.hasMoreBefore, n.hasMoreAfter = void 0 !== e.hasMoreAfter ? !0 === e.hasMoreAfter : this.hasMoreAfter, n.loadingMore = void 0 !== e.loadingMore ? e.loadingMore : this.loadingMore, n.revealedMessageId = void 0 !== e.revealedMessageId ? e.revealedMessageId : this.revealedMessageId, n.cached = void 0 !== e.cached ? e.cached : this.cached, n.hasFetched = void 0 !== e.hasFetched ? e.hasFetched : this.hasFetched, n.error = void 0 !== e.error ? e.error : this.error), n
                }
                get length() {
                    return this._array.length
                }
                toArray() {
                    return [...this._array]
                }
                forEach(e, t) {
                    let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    if (n) {
                        let n = this._array;
                        for (let i = n.length - 1; i >= 0 && !1 !== e.call(t, n[i], i); i--);
                    } else this._array.forEach(e, t)
                }
                reduce(e, t) {
                    return this._array.reduce(e, t)
                }
                some(e, t) {
                    return this._array.some(e, t)
                }
                forAll(e, t) {
                    this._before.forEach(e, t), this._array.forEach(e, t), this._after.forEach(e, t)
                }
                findOldest(e) {
                    var t, n;
                    return null !== (n = null !== (t = a.find(this._before._messages, e)) && void 0 !== t ? t : a.find(this._array, e)) && void 0 !== n ? n : a.find(this._after._messages, e)
                }
                findNewest(e) {
                    var t, n;
                    return null !== (n = null !== (t = a.findLast(this._after._messages, e)) && void 0 !== t ? t : a.findLast(this._array, e)) && void 0 !== n ? n : a.findLast(this._before._messages, e)
                }
                map(e, t) {
                    return this._array.map(e, t)
                }
                first() {
                    return this._array[0]
                }
                last() {
                    return this._array[this._array.length - 1]
                }
                get(e) {
                    var t;
                    let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        i = this._map[e];
                    return null == i && n ? null !== (t = this._before.get(e)) && void 0 !== t ? t : this._after.get(e) : i
                }
                getByIndex(e) {
                    return this._array[e]
                }
                getAfter(e) {
                    let t = this.get(e);
                    if (null == t) return null;
                    let n = this._array.indexOf(t);
                    return -1 === n || n === this.length - 1 ? null : this._array[n + 1]
                }
                getManyAfter(e, t, n) {
                    let i = this.get(e);
                    if (null == i) return null;
                    let a = this._array.indexOf(i);
                    if (-1 === a) return null;
                    let l = [];
                    for (let e = a + 1; e < this.length && (-1 === t || l.length < t); e++)(null == n || n(this._array[e])) && l.push(this._array[e]);
                    return l
                }
                getManyBefore(e, t, n) {
                    let i = this.get(e);
                    if (null == i) return null;
                    let a = this._array.indexOf(i);
                    if (-1 === a) return null;
                    let l = [];
                    for (let e = a - 1; e >= 0 && (-1 === t || l.length < t); e--)(null == n || n(this._array[e])) && l.unshift(this._array[e]);
                    return l
                }
                has(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                    return null != this._map[e] || t && (this._before.has(e) || this._after.has(e))
                }
                indexOf(e) {
                    let t = -1;
                    return this._array.find((n, i) => n.id === e && (t = i, !0)), t
                }
                hasPresent() {
                    return this._after.length > 0 && this._after.wasAtEdge || !this.hasMoreAfter
                }
                hasBeforeCached(e) {
                    if (this.length > 0 && this._before.length > 0) {
                        let t = this.first();
                        return null != t && t.id === e
                    }
                    return !1
                }
                hasAfterCached(e) {
                    if (this.length > 0 && this._after.length > 0) {
                        let t = this.last();
                        return null != t && t.id === e
                    }
                    return !1
                }
                update(e, t) {
                    let n = this._map[e];
                    if (null == n) return this._before.has(e) ? this.mutate(n => n._before.update(e, t), !0) : this._after.has(e) ? this.mutate(n => n._after.update(e, t), !0) : this;
                    let i = t(n);
                    return this.mutate(e => {
                        e._map[n.id] = i, e._array[e._array.indexOf(n)] = i
                    }, !0)
                }
                replace(e, t) {
                    let n = this._map[e];
                    if (null == n) return this._before.has(e) ? this.mutate(n => n._before.replace(e, t), !0) : this._after.has(e) ? this.mutate(n => n._after.replace(e, t), !0) : this;
                    return this.mutate(i => {
                        delete i._map[e], i._map[t.id] = t, i._array[i._array.indexOf(n)] = t
                    }, !0)
                }
                remove(e) {
                    return this.mutate(t => {
                        delete t._map[e], t._array = t._array.filter(t => t.id !== e), t._before.remove(e), t._after.remove(e)
                    }, !0)
                }
                removeMany(e) {
                    return e.some(e => this.has(e)) ? this.mutate(t => {
                        a.each(e, e => {
                            delete t._map[e]
                        }), t._array = t._array.filter(t => -1 === e.indexOf(t.id)), t._before.removeMany(e), t._after.removeMany(e)
                    }, !0) : this
                }
                merge(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    return this.mutate(i => {
                        i._merge(e, t, n)
                    }, !0)
                }
                _merge(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    if (e = e.filter(e => {
                            let t = this._map[e.id];
                            return this._map[e.id] = e, null == t || (this._array[this._array.indexOf(t)] = e, !1)
                        }), n) {
                        let e = t ? this._before : this._after;
                        e.clear()
                    }
                    this._array = t ? [...e, ...this._array] : [...this._array, ...e]
                }
                mergeDelta() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
                        n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
                    return this.mutate(i => {
                        i._before.clear(), i._after.clear();
                        let a = new Set(n);
                        e.forEach(e => a.add(e.id)), t.forEach(e => a.add(e.id)), i._array = i._array.filter(e => !a.has(e.id)).concat(e.map(e => (0, u.createMessageRecord)(e)), t.map(e => (0, u.createMessageRecord)(e))).sort((e, t) => o.default.compare(e.id, t.id))
                    })
                }
                _clearMessages() {
                    this._array = [], this._map = {}
                }
                reset(e) {
                    return this.mutate(t => {
                        t._array = e, t._map = {}, e.forEach(e => t._map[e.id] = e), t._before.clear(), t._after.clear()
                    })
                }
                truncateTop(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
                        n = this._array.length - e;
                    return n <= 0 ? this : this.mutate(e => {
                        for (let t = 0; t < n; t++) delete e._map[e._array[t].id];
                        e._before.cache(e._array.slice(0, n), !e.hasMoreBefore), e._array = e._array.slice(n), e.hasMoreBefore = !0
                    }, t)
                }
                truncateBottom(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                    return this._array.length <= e ? this : this.mutate(t => {
                        for (let n = e; n < this._array.length; n++) delete t._map[t._array[n].id];
                        t._after.cache(t._array.slice(e, this._array.length), !t.hasMoreAfter), t._array = t._array.slice(0, e), t.hasMoreAfter = !0
                    }, t)
                }
                jumpToPresent(e) {
                    return this.mutate(t => {
                        let n = t._after.extractAll();
                        t.hasMoreAfter = !1;
                        let i = Math.max(n.length - e, 0),
                            a = n.slice(i);
                        n.splice(i), t._before.cache(t._array), t._before.cache(n), t._clearMessages(), t._merge(a), t.hasMoreBefore = t._before.length > 0, t.jumped = !0, t.jumpTargetId = null, t.jumpTargetOffset = 0, t.jumpedToPresent = !0, t.jumpFlash = !1, t.jumpReturnTargetId = null, t.jumpSequenceId = t.jumpSequenceId + 1, t.ready = !0, t.loadingMore = !1
                    }, !0)
                }
                jumpToMessage(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
                        n = arguments.length > 2 ? arguments[2] : void 0,
                        i = arguments.length > 3 ? arguments[3] : void 0,
                        a = arguments.length > 4 ? arguments[4] : void 0;
                    return this.mutate(l => {
                        l.jumped = !0, l.jumpedToPresent = !1, l.jumpType = null != a ? a : s.JumpTypes.ANIMATED, l.jumpTargetId = e, l.jumpTargetOffset = null != e && null != n ? n : 0, l.jumpSequenceId = l.jumpSequenceId + 1, l.jumpFlash = t, l.jumpReturnTargetId = i, l.ready = !0, l.loadingMore = !1
                    }, !1)
                }
                focusOnMessage(e) {
                    return this.mutate(t => {
                        t.focusTargetId = e, t.ready = !0, t.loadingMore = !1
                    }, !1)
                }
                loadFromCache(e, t) {
                    return this.mutate(n => {
                        let i = e ? n._before : n._after;
                        n._merge(i.extract(t), e);
                        let a = i.length > 0 || !i.wasAtEdge;
                        e ? n.hasMoreBefore = a : n.hasMoreAfter = a, n.ready = !0, n.loadingMore = !1
                    }, !0)
                }
                truncate(e, t) {
                    return this.length <= c.MAX_LOADED_MESSAGES ? this : e ? this.truncateBottom(c.TRUNCATED_MESSAGE_VIEW_SIZE) : t ? this.truncateTop(c.TRUNCATED_MESSAGE_VIEW_SIZE) : this
                }
                receiveMessage(e) {
                    var t, n;
                    let i = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
                        a = null == e.nonce ? null : this.get(e.nonce, !0);
                    if (null != a && ((null === (t = e.author) || void 0 === t ? void 0 : t.id) === (null === (n = a.author) || void 0 === n ? void 0 : n.id) || null != e.interaction && e.interaction.user.id === a.author.id) && null != e.nonce && a.id === e.nonce) {
                        let t = (0, u.createMessageRecord)(e);
                        return null != a.interactionData && (t.interactionData = a.interactionData), this.replace(e.nonce, t)
                    }
                    if (this.hasMoreAfter) this._after.wasAtEdge && (this._after.wasAtEdge = !1);
                    else {
                        let t = l.default.getCurrentConfig({
                                location: "2ecb25_1"
                            }, {
                                autoTrackExposure: !1
                            }).enabled ? (0, u.createMessageRecord)(e) : _(this, e),
                            n = this.merge([t]);
                        return i ? n.truncateTop(c.TRUNCATED_MESSAGE_VIEW_SIZE, !1) : this.length > c.MAX_LOADED_MESSAGES ? n.truncateBottom(c.TRUNCATED_MESSAGE_VIEW_SIZE, !1) : n
                    }
                    return this
                }
                receivePushNotification(e) {
                    let t = null == e.nonce ? null : this.get(e.nonce, !0);
                    return null != t ? this : this.mutate({
                        ready: !0,
                        cached: !0
                    }).merge([_(this, e)])
                }
                loadStart(e) {
                    var t, n, i, a;
                    return this.mutate({
                        loadingMore: !0,
                        jumped: null != e,
                        jumpedToPresent: null !== (t = null == e ? void 0 : e.present) && void 0 !== t && t,
                        jumpTargetId: null !== (n = null == e ? void 0 : e.messageId) && void 0 !== n ? n : null,
                        jumpTargetOffset: null !== (i = null == e ? void 0 : e.offset) && void 0 !== i ? i : 0,
                        jumpReturnTargetId: null !== (a = null == e ? void 0 : e.returnMessageId) && void 0 !== a ? a : null,
                        ready: null == e && this.ready
                    })
                }
                loadComplete(e) {
                    var t, n, i, r, o, d, c, E, f, h, T;
                    let p = [...e.newMessages],
                        S = null !== (t = e.isBefore) && void 0 !== t && t,
                        I = null !== (n = e.isAfter) && void 0 !== n && n,
                        A = null !== (i = e.jump) && void 0 !== i ? i : null,
                        m = null !== (r = e.hasMoreBefore) && void 0 !== r && r,
                        g = null !== (o = e.hasMoreAfter) && void 0 !== o && o,
                        C = null !== (d = e.cached) && void 0 !== d && d,
                        N = a(p).reverse().map(l.default.getCurrentConfig({
                            location: "2ecb25_2"
                        }, {
                            autoTrackExposure: !1
                        }).enabled ? e => (0, u.createMessageRecord)(e) : e => _(this, e)).value(),
                        O = null;
                    return O = (O = (S || I) && null == A && this.ready ? this.merge(N, S, !0) : this.reset(N)).mutate({
                        ready: !0,
                        loadingMore: !1,
                        jumpType: null !== (c = null == A ? void 0 : A.jumpType) && void 0 !== c ? c : s.JumpTypes.ANIMATED,
                        jumpFlash: null !== (E = null == A ? void 0 : A.flash) && void 0 !== E && E,
                        jumped: null != A,
                        jumpedToPresent: null !== (f = null == A ? void 0 : A.present) && void 0 !== f && f,
                        jumpTargetId: null !== (h = null == A ? void 0 : A.messageId) && void 0 !== h ? h : null,
                        jumpTargetOffset: null != A && null != A.messageId && null != A.offset ? A.offset : 0,
                        jumpSequenceId: null != A ? O.jumpSequenceId + 1 : O.jumpSequenceId,
                        jumpReturnTargetId: null !== (T = null == A ? void 0 : A.returnMessageId) && void 0 !== T ? T : null,
                        hasMoreBefore: null == A && I ? O.hasMoreBefore : m,
                        hasMoreAfter: null == A && S ? O.hasMoreAfter : g,
                        cached: C,
                        hasFetched: e.hasFetched,
                        error: !1
                    })
                }
                addCachedMessages(e, t) {
                    (0, r.requireSortedDescending)(e);
                    let n = e.map(e => _(this, e)).reverse();
                    return this._array.filter(e => !n.some(t => t.id === e.id)).forEach(e => d.insert(n, e, (e, t) => o.default.compare(e.id, t.id))), this.reset(n).mutate({
                        ready: !0,
                        cached: t,
                        error: !1
                    })
                }
                constructor(e) {
                    this._array = [], this._map = {}, this.channelId = e, this.ready = !1, this.jumpTargetId = null, this.jumpTargetOffset = 0, this.jumpSequenceId = 1, this.jumped = !1, this.jumpedToPresent = !1, this.jumpType = s.JumpTypes.ANIMATED, this.jumpFlash = !0, this.jumpReturnTargetId = null, this.hasMoreBefore = !0, this.hasMoreAfter = !1, this.loadingMore = !1, this.revealedMessageId = null, this._clearMessages(), this._before = new E(!0), this._after = new E(!1), this.cached = !1, this.hasFetched = !1, this.error = !1
                }
            }
            f._channelMessages = {};
            var h = f
        },
        979911: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                MessageDataType: function() {
                    return s
                },
                isMessageDataEdit: function() {
                    return O
                },
                getFailedMessageId: function() {
                    return R
                },
                default: function() {
                    return y
                }
            });
            var i, a, l, s, r = n("627445"),
                u = n.n(r),
                o = n("981980"),
                d = n("872717"),
                c = n("798609"),
                _ = n("716241"),
                E = n("605250"),
                f = n("676574"),
                h = n("618421"),
                T = n("271938"),
                p = n("985365"),
                S = n("254490"),
                I = n("231987"),
                A = n("980134"),
                m = n("282928"),
                g = n("49111");
            let C = null;
            __OVERLAY__ && (C = n("901165").default), (i = l || (l = {})).OVERLAY_UNLOCKED = "overlay_unlocked", i.OVERLAY_UNLOCKED_PINNED = "overlay_unlocked_pinned", i.OVERLAY_LOCKED_ACTIVATED = "overlay_locked_activated", (a = s || (s = {}))[a.SEND = 0] = "SEND", a[a.EDIT = 1] = "EDIT", a[a.COMMAND = 2] = "COMMAND";
            let N = e => e.type === s.SEND,
                O = e => e.type === s.EDIT,
                R = e => N(e) ? e.message.nonce : O(e) ? e.message.messageId : e.message.data.id,
                v = [6e4, 3e5];
            class M extends I.default {
                isFull() {
                    return this.queue.length >= this.maxSize
                }
                drain(e, t) {
                    switch (this.logger.log("Draining Message Queue with: ", e), e.type) {
                        case s.SEND:
                            this.handleSend(e.message, t);
                            break;
                        case s.EDIT:
                            this.handleEdit(e.message, t);
                            break;
                        case s.COMMAND:
                            this.handleCommand(e.message, t)
                    }
                }
                cancelRequest(e) {
                    var t;
                    null === (t = this.requests.get(e)) || void 0 === t || t.abort(), this.requests.delete(e), this.cancelQueueMetricTimers(e)
                }
                startQueueMetricTimers(e) {
                    let t = v.map(e => setTimeout(() => {
                        (0, _.trackWithMetadata)(g.AnalyticEvents.SEND_MESSAGE_QUEUED, {
                            queued_duration_ms: e
                        })
                    }, e));
                    this.analyticsTimeouts.set(e, t)
                }
                cancelQueueMetricTimers(e) {
                    var t;
                    null === (t = this.analyticsTimeouts.get(e)) || void 0 === t || t.forEach(clearTimeout), this.analyticsTimeouts.delete(e)
                }
                createResponseHandler(e, t) {
                    return n => {
                        if (null != e && (this.requests.delete(e), this.cancelQueueMetricTimers(e)), n.hasErr) return t(null, n);
                        null != n.body && (n.body.code === g.AbortCodes.SLOWMODE_RATE_LIMITED || n.body.code === g.AbortCodes.CHANNEL_FOLLOWING_EDIT_RATE_LIMITED) ? t(null, n) : 429 === n.status ? t({
                            retryAfter: 1e3 * n.body.retry_after
                        }) : t(null, n)
                    }
                }
                handleSend(e, t) {
                    let n;
                    let {
                        channelId: i,
                        file: a,
                        filename: s,
                        ...r
                    } = e, u = (0, h.getSignalStrength)(), c = {
                        mobile_network_type: p.default.getType(),
                        ...r,
                        ...null != u && {
                            signal_strength: u
                        }
                    };
                    if (f.default.get("send_fail_100")) {
                        this.logger.log("Skipping message sened because send_fail_100 is enabled"), t(null, {
                            ok: !1,
                            hasErr: !1,
                            status: 500,
                            headers: {},
                            body: "{}",
                            text: "Simulated failure"
                        });
                        return
                    }
                    null != C && (C.isInstanceUILocked() ? n = {
                        location: l.OVERLAY_LOCKED_ACTIVATED
                    } : !C.isInstanceUILocked() && (n = C.isPinned(g.OverlayWidgets.TEXT) ? {
                        location: l.OVERLAY_UNLOCKED_PINNED
                    } : {
                        location: l.OVERLAY_UNLOCKED
                    }));
                    let _ = this.createResponseHandler(e.nonce, t),
                        E = new AbortController;
                    if (this.startQueueMetricTimers(e.nonce), null != a && null != s && "" !== s) d.default.post({
                        url: g.Endpoints.MESSAGES(i),
                        fields: Object.entries(c).map(e => {
                            let [t, n] = e;
                            return {
                                name: t,
                                value: n
                            }
                        }),
                        attachments: [{
                            name: "file",
                            file: a,
                            filename: s
                        }],
                        context: n,
                        oldFormErrors: !0,
                        signal: E.signal,
                        onRequestCreated: () => {
                            null != e.nonce && this.requests.set(e.nonce, E)
                        }
                    }, _);
                    else {
                        let t = {
                            timeout: 6e4,
                            retries: 3,
                            backoff: new o.default
                        };
                        d.default.post({
                            url: g.Endpoints.MESSAGES(i),
                            body: c,
                            context: n,
                            oldFormErrors: !0,
                            ...t,
                            signal: E.signal,
                            onRequestCreated: () => {
                                null != e.nonce && this.requests.set(e.nonce, E)
                            }
                        }, _)
                    }
                }
                handleEdit(e, t) {
                    let {
                        channelId: n,
                        messageId: i,
                        ...a
                    } = e, l = new AbortController;
                    d.default.patch({
                        url: g.Endpoints.MESSAGE(n, i),
                        body: a,
                        retries: 1,
                        oldFormErrors: !0,
                        signal: l.signal,
                        onRequestCreated: () => {
                            this.requests.set(i, l)
                        }
                    }, this.createResponseHandler(i, t))
                }
                handleCommand(e, t) {
                    let n, {
                            applicationId: i,
                            guildId: a,
                            channelId: l,
                            data: s,
                            nonce: r,
                            attachments: o,
                            maxSizeCallback: _
                        } = e,
                        E = {
                            type: c.InteractionTypes.APPLICATION_COMMAND,
                            application_id: i,
                            guild_id: a,
                            channel_id: l,
                            session_id: T.default.getSessionId(),
                            data: s,
                            nonce: r
                        };
                    if (null != o) {
                        E.data.attachments = [], n = [];
                        E.data.attachments = o.map((e, t) => (u(e.status === m.CloudUploadStatus.COMPLETED, "Uploads must be staged before trying to send a message"), (0, A.getAttachmentPayload)(e, t)))
                    }
                    let f = new AbortController;
                    d.default.post({
                        url: g.Endpoints.INTERACTIONS,
                        fields: [{
                            name: "payload_json",
                            value: JSON.stringify(E)
                        }],
                        attachments: n,
                        signal: f.signal,
                        onRequestCreated: e => {
                            this.requests.set(r, f), e.on("progress", e => {
                                let {
                                    total: t
                                } = e, n = (0, S.maxFileSize)(a);
                                if (null != t && t > n) this.cancelRequest(r), null == _ || _(n)
                            })
                        }
                    }, this.createResponseHandler(r, t))
                }
                constructor(e = 5) {
                    super(new E.default("MessageQueue")), this.maxSize = e, this.requests = new Map, this.analyticsTimeouts = new Map
                }
            }
            var y = new M
        },
        390933: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return u
                }
            });
            var i = n("522632"),
                a = n("872717"),
                l = n("605250"),
                s = n("49111");
            class r {
                async fetch(e, t, n) {
                    if (!this.isCanceled) try {
                        let a = await this.makeRequest();
                        if (null == a || this.isCanceled) return;
                        if (200 === a.status) e(a);
                        else if (202 === a.status) {
                            var i;
                            this.query.attempts = (null !== (i = this.query.attempts) && void 0 !== i ? i : 0) + 1;
                            let l = 1e3 * a.body.retry_after;
                            this.retryDelay = isNaN(l) || 0 === l ? 5e3 : l, this.retryLater(e, t, n), t(a)
                        }
                    } catch (e) {
                        new(0, l.default)("SearchFetcher").error(e), n(e)
                    }
                }
                cancel() {
                    this.isCanceled = !0, null != this.indexingPollId && clearTimeout(this.indexingPollId)
                }
                retryLater(e, t, n) {
                    null != this.indexingPollId && clearTimeout(this.indexingPollId), this.indexingPollId = setTimeout(this.fetch.bind(this, e, t, n), this.retryDelay)
                }
                constructor(e, t, n) {
                    this.isCanceled = !1, this.searchId = e, this.searchType = t, this.query = n
                }
            }
            class u extends r {
                getEndpoint() {
                    switch (this.searchType) {
                        case s.SearchTypes.DMS:
                            return s.Endpoints.SEARCH_DMS;
                        case s.SearchTypes.GUILD:
                            if (null == this.searchId || "" === this.searchId) return;
                            return s.Endpoints.SEARCH_GUILD(this.searchId);
                        case s.SearchTypes.CHANNEL:
                            if (null == this.searchId || "" === this.searchId) return;
                            return s.Endpoints.SEARCH_CHANNEL(this.searchId);
                        default:
                            throw Error("[SearchFetcher] Unhandled search type: ".concat(this.searchType))
                    }
                }
                makeRequest() {
                    let e = this.getEndpoint();
                    return null == e ? null : a.default.get({
                        url: e,
                        query: i.stringify(this.query),
                        oldFormErrors: !0
                    })
                }
            }
        },
        201876: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("714617"),
                a = n.n(i);
            class l {
                shouldCommit() {
                    return !0
                }
                setState(e) {
                    this.state = {
                        ...this.state,
                        ...e
                    }
                }
                getState() {
                    return this.state
                }
                reset() {
                    this.dirty = !1, this.state = this.getInitialState()
                }
                update() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        n = this.getNextState({
                            ...this.state,
                            ...e
                        });
                    if (t) this.dirty = !a(n, this.getInitialState());
                    else
                        for (let e of Object.keys(n)) this.dirty = this.dirty || !a(this.state[e], n[e]);
                    return this.state = n, !!(this.dirty && this.shouldCommit()) && (this.dirty = !1, this.didCommit(this.state), !0)
                }
                forceUpdate() {
                    this.dirty = !1, this.didCommit(this.state)
                }
                constructor() {
                    this.dirty = !1, this.state = this.getInitialState()
                }
            }
        },
        572544: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return y
                }
            });
            var i = n("746379"),
                a = n("394846"),
                l = n("913144"),
                s = n("970728"),
                r = n("79112"),
                u = n("389153"),
                o = n("412707"),
                d = n("139514"),
                c = n("312016"),
                _ = n("374021"),
                E = n("398604"),
                f = n("468560"),
                h = n("361572"),
                T = n("537325"),
                p = n("835174"),
                S = n("566271"),
                I = n("337543"),
                A = n("18494"),
                m = n("162771"),
                g = n("677099"),
                C = n("599110"),
                N = n("253981");
            n("545158");
            var O = n("49111");
            async function R(e, t) {
                await l.default.dispatch({
                    type: "INVITE_MODAL_OPEN",
                    invite: e,
                    code: t,
                    context: O.AppContext.APP
                })
            }
            async function v(e) {
                var t, n;
                let i = I.default.getInvite(e.code);
                if (null == i) {
                    let {
                        invite: t
                    } = await s.default.resolveInvite(e.code, "Markdown Link");
                    i = t
                }
                if (null == i) return;
                if (i.state === O.InviteStates.EXPIRED || i.state === O.InviteStates.BANNED || i.state === O.InviteStates.ERROR) {
                    await R(i, e.code);
                    return
                }
                let a = g.default.getFlattenedGuildIds(),
                    l = null === (n = i) || void 0 === n ? void 0 : null === (t = n.guild) || void 0 === t ? void 0 : t.id,
                    r = null != l && a.includes(l);
                r ? s.default.transitionToInviteSync(i) : await R(i, e.code)
            }
            let M = {
                skipExtensionCheck: void 0,
                analyticsLocations: []
            };

            function y(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : M,
                    l = (0, c.findCodedLink)(e),
                    {
                        skipExtensionCheck: s
                    } = t;
                if (null != l && (l.type === d.CodedLinkType.INVITE || l.type === d.CodedLinkType.EMBEDDED_ACTIVITY_INVITE)) return e => (null == e || e.preventDefault(), v(l), !0);
                if (null != l && l.type === d.CodedLinkType.APP_DIRECTORY_PROFILE) return e => {
                    var t;
                    null == e || e.preventDefault();
                    let {
                        code: i
                    } = l, s = null !== (t = m.default.getGuildId()) && void 0 !== t ? t : void 0;
                    return C.default.track(O.AnalyticEvents.APP_DIRECTORY_PROFILE_EMBED_URL_CLICKED, {
                        application_id: i,
                        device_platform: a.isMobile ? "mobile_web" : "desktop_web",
                        guild_id: s,
                        channel_id: A.default.getChannelId()
                    }), n.el("838093").then(n.bind(n, "838093")).then(e => {
                        let {
                            goToAppDirectory: t
                        } = e, {
                            ApplicationDirectoryViews: a
                        } = n("412707");
                        t({
                            view: a.APPLICATION,
                            applicationId: i,
                            guildId: s,
                            entrypoint: {
                                name: o.ApplicationDirectoryEntrypointNames.APPLICATION_DIRECTORY_URL
                            }
                        })
                    }), !0
                };
                if (null != l && l.type === d.CodedLinkType.GUILD_PRODUCT) return e => {
                    null == e || e.preventDefault();
                    let [t, i] = l.code.split("-");
                    return n.el("573777").then(n.bind(n, "573777")).then(e => {
                        let {
                            openGuildProductLink: n
                        } = e;
                        n(t, i)
                    }), !0
                };
                let {
                    path: I,
                    hostname: g = "",
                    host: R,
                    query: y
                } = i.parse(e), D = N.default.isDiscordHostname(g) || window.location.host === R;
                if (D && (null == I ? void 0 : I.startsWith("/application-directory"))) {
                    let [, , e, t] = I.split("/"), i = null != e && (0, u.isSnowflake)(e) ? e : void 0;
                    return l => {
                        var s;
                        null == l || l.preventDefault();
                        let {
                            ApplicationDirectoryProfileSections: r
                        } = n("750947"), {
                            ApplicationDirectoryViews: u
                        } = n("412707"), d = null !== (s = m.default.getGuildId()) && void 0 !== s ? s : void 0, c = u.HOME;
                        return "search" === e && (c = u.SEARCH), null != i && (c = u.APPLICATION, C.default.track(O.AnalyticEvents.APP_DIRECTORY_PROFILE_EMBED_URL_CLICKED, {
                            application_id: i,
                            device_platform: a.isMobile ? "mobile_web" : "desktop_web",
                            guild_id: d,
                            channel_id: A.default.getChannelId()
                        })), n.el("838093").then(n.bind(n, "838093")).then(e => {
                            let {
                                goToAppDirectory: n
                            } = e;
                            n({
                                view: c,
                                applicationId: i,
                                guildId: d,
                                applicationSection: (0, f.default)(r, t),
                                entrypoint: {
                                    name: o.ApplicationDirectoryEntrypointNames.APPLICATION_DIRECTORY_URL
                                }
                            })
                        }), !0
                    }
                }
                if (null != I && D && N.default.isAppRoute(I)) {
                    let e = null != y ? {
                        search: y
                    } : null;
                    return t => (null == t || t.preventDefault(), (0, T.default)(I, e), !0)
                }
                if (null != I && D) {
                    let {
                        getOAuth2AuthorizeProps: t,
                        openOAuth2Modal: i
                    } = n("33942"), a = t(e);
                    if (null != a) return e => (null == e || e.preventDefault(), i(a), !0)
                }
                let L = (0, h.tryParseEventDetailsPath)(I);
                if (null != I && D && null != L) return e => {
                    null == e || e.preventDefault();
                    let t = m.default.getGuildId();
                    null != L.guildId && "" !== L.guildId && L.guildId !== t && (0, T.default)(O.Routes.CHANNEL(L.guildId));
                    let n = E.default.getGuildScheduledEvent(L.guildEventId);
                    return null != n && (0, _.openGuildEventDetails)({
                        eventId: n.id
                    }), !0
                };
                if (D && (null == I ? void 0 : I.startsWith("/settings/"))) {
                    let {
                        default: e
                    } = n("777523"), t = e(I);
                    if (null != t) return e => (null == e || e.preventDefault(), r.default.open(t.section, t.subsection, {
                        openWithoutBackstack: !1,
                        impressionSource: t.source
                    }), !0)
                }
                if (!s && null != (0, S.isSuspiciousDownload)(e)) return t => (null == t || t.preventDefault(), p.default.show(e), !0)
            }
        },
        49978: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return r
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("862337");
            class s {
                acknowledge(e) {
                    this._unacknowledgedRequests.delete(e), this._pendingRequests.delete(e)
                }
                flushRequests(e) {
                    if (0 === this._pendingRequests.size) return;
                    let t = [];
                    this._pendingRequests.forEach(e => {
                        !this._guildMemberExists(e) && (this._unacknowledgedRequests.add(e), this._sentRequests.add(e), t.push(e))
                    }), t.length > 0 && e(this._guildId, t), this._pendingRequests.clear()
                }
                requestUnacknowledged() {
                    return 0 !== this._unacknowledgedRequests.size && (this._unacknowledgedRequests.forEach(e => {
                        this._guildMemberExists(e) ? this._unacknowledgedRequests.delete(e) : this._pendingRequests.add(e)
                    }), 0 !== this._pendingRequests.size && void 0)
                }
                request(e) {
                    if (this._guildMemberExists(e) || this._sentRequests.has(e) || this._pendingRequests.has(e)) return !1;
                    this._pendingRequests.add(e)
                }
                constructor(e, t) {
                    this._pendingRequests = new Set, this._sentRequests = new Set, this._unacknowledgedRequests = new Set, this._guildId = e, this._guildMemberExists = n => t(e, n)
                }
            }
            class r {
                reset() {
                    this._guildStates = {}, this._flush.cancel()
                }
                request(e, t) {
                    !1 !== this._getGuildState(e).request(t) && this._flush.delay(!1)
                }
                acknowledge(e, t) {
                    this._getGuildState(e).acknowledge(t)
                }
                flushRequests() {
                    a.forEach(this._guildStates, e => e.flushRequests(this._onChange))
                }
                requestUnacknowledged() {
                    let e = a.reduce(this._guildStates, (e, t) => !1 !== t.requestUnacknowledged() || t, !1);
                    e && this._flush.delay()
                }
                _getGuildState(e) {
                    let t = this._guildStates[e];
                    return null == t && (t = this._guildStates[e] = new s(e, this._guildMemberExists)), t
                }
                constructor(e, t) {
                    this._guildStates = {}, this._flush = new l.DelayedCall(0, () => this.flushRequests()), this._guildMemberExists = e, this._onChange = t
                }
            }
        },
        661736: function(e, t, n) {
            "use strict";

            function i(e, t, n) {
                let i;
                let a = [],
                    l = function() {
                        for (var s = arguments.length, r = Array(s), u = 0; u < s; u++) r[u] = arguments[u];
                        let o = Date.now();
                        for (null != i && (clearTimeout(i), i = null); a.length > 0 && a[0] <= o;) a.shift();
                        a.length < e ? (a.push(o + t), n(...r)) : i = setTimeout(() => l(...r), a[0] - o)
                    };
                return l
            }
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            })
        },
        282928: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                CloudUploadStatus: function() {
                    return a
                },
                CloudUpload: function() {
                    return I
                }
            });
            var i, a, l = n("917351"),
                s = n.n(l),
                r = n("981980"),
                u = n("872717"),
                o = n("605250"),
                d = n("676574"),
                c = n("994440"),
                _ = n("286235"),
                E = n("980134"),
                f = n("966724"),
                h = n("142852"),
                T = n("49111");
            let p = new o.default("CloudUpload.tsx"),
                S = n("123010").default;
            (i = a || (a = {})).NOT_STARTED = "NOT_STARTED", i.STARTED = "STARTED", i.UPLOADING = "UPLOADING", i.ERROR = "ERROR", i.COMPLETED = "COMPLETED", i.CANCELED = "CANCELED";
            class I extends f.default {
                static fromJson(e) {
                    let {
                        item: t,
                        channelId: n,
                        showLargeMessageDialog: i,
                        reactNativeFileIndex: l
                    } = e, s = new I(t, n, i, l);
                    return s.status !== a.COMPLETED && (s.status = a.NOT_STARTED), Object.entries(e).forEach(e => {
                        let [t, n] = e;
                        !t.startsWith("_") && (s[t] = n)
                    }), s
                }
                retryOpts() {
                    return this.item.platform === f.UploadPlatform.REACT_NATIVE ? {
                        timeout: 36e5,
                        backoff: new r.default(500, 2048e3),
                        retries: 12
                    } : {
                        timeout: 36e5,
                        retries: 12,
                        backoff: new r.default
                    }
                }
                uploadFileToCloud() {
                    let e, t;
                    if (null == this.responseUrl) throw Error("_uploadFileToCloud - responseUrl is not set");
                    p.log("Uploading ".concat(this.id)), this.item.platform === f.UploadPlatform.REACT_NATIVE ? t = null != (e = {
                        type: this.item.mimeType,
                        uri: this.item.uri,
                        name: this.item.filename
                    }).type && "application/json" !== e.type ? e.type : "application/octet-stream" : (e = this.item.file, t = "application/octet-stream");
                    let n = s.throttle(e => {
                            this.emit("progress", e.loaded, e.total, e.loaded - this.loaded), this.loaded = e.loaded
                        }, 50),
                        i = {
                            "Content-Type": t
                        };
                    return u.default.put({
                        url: this.responseUrl,
                        body: e,
                        headers: i,
                        signal: this._abortController.signal,
                        onRequestProgress: n,
                        ...this.retryOpts()
                    })
                }
                async getSize() {
                    var e;
                    return null !== (e = this.currentSize) && void 0 !== e ? e : 0
                }
                async upload() {
                    var e, t, n;
                    if (this.status === a.COMPLETED) return;
                    if (this.setStatus(a.STARTED), this.status === a.CANCELED) {
                        this.handleComplete(this.id);
                        return
                    }
                    let i = await S.getUploadPayload(this),
                        l = (0, h.getUploadTarget)(this.item.target);
                    if (null == i.filename || "" === i.filename || 0 === this.currentSize) {
                        p.error("File does not have a filename or size is 0.", JSON.stringify(i)), this.handleError(T.AbortCodes.INVALID_FILE_ASSET);
                        return
                    }
                    if ((null !== (e = this.currentSize) && void 0 !== e ? e : 0) > l.getMaxFileSize(this.channelId)) {
                        this.handleError(T.AbortCodes.ENTITY_TOO_LARGE);
                        return
                    }
                    if (d.default.get("upload_fail_50") && .5 > Math.random()) {
                        setTimeout(() => {
                            this.handleError(500)
                        }, 1e3);
                        return
                    }
                    try {
                        p.log("Requesting upload url for ".concat(this.id));
                        let e = await u.default.post({
                            url: l.getCreateAttachmentURL(this.channelId),
                            body: {
                                files: [i]
                            },
                            ...this.retryOpts()
                        });
                        this.setResponseUrl(e.body.attachments[0].upload_url), this.setUploadedFilename(e.body.attachments[0].upload_filename)
                    } catch (i) {
                        let e = null !== (n = null == i ? void 0 : null === (t = i.body) || void 0 === t ? void 0 : t.code) && void 0 !== n ? n : i.status;
                        e !== T.AbortCodes.ENTITY_TOO_LARGE && (p.error("Requesting upload url failed with code ".concat(null != e ? e : JSON.stringify(i.body), " for ").concat(this.id)), _.default.captureException(i)), this.handleError(e);
                        return
                    }
                    try {
                        let e = await this.uploadFileToCloud();
                        this.handleComplete(e)
                    } catch (e) {
                        this.status === a.CANCELED ? this.handleComplete(e) : (p.info("Error: status ".concat(e.status, " for ").concat(this.id)), this.handleError(e))
                    }
                }
                async reactNativeCompressAndExtractData() {
                    var e, t;
                    if (!(0, h.getUploadTarget)(this.item.target).shouldReactNativeCompressUploads) {
                        p.log("reactNativeCompressAndExtractData() disabled by upload target");
                        return
                    }
                    if (!0 === this.reactNativeFilePrepped) {
                        p.log("reactNativeCompressAndExtractData() file already prepped - ".concat(this.id));
                        return
                    }
                    p.log("Starting compression/conversion for ".concat(this.id));
                    let n = await (0, c.getAttachmentFile)(this, null !== (e = this.reactNativeFileIndex) && void 0 !== e ? e : 0);
                    if (null == n || null == n.file) return;
                    let i = n.uri,
                        a = n.file.name,
                        l = n.file.type;
                    if (this.filename = a, null == a || null == i || null == l) throw p.error("Insufficient file data: ".concat({
                        filename: a,
                        uri: i,
                        mimeType: l
                    }, " for ").concat(this.id)), Error("Insufficient file data: ".concat({
                        filename: a,
                        uri: i,
                        mimeType: l
                    }));
                    let s = null !== (t = n.fileSize) && void 0 !== t ? t : (await (0, E.getFileData)(i)).size;
                    if (this.postCompressionSize = s, this.currentSize = s, null == s) throw p.error("Size missing from file data for ".concat(this.id)), Error("Size missing from file data");
                    p.log("Completed compression and conversion. Output size=".concat(s, " bytes; filename=").concat(a, " for ").concat(this.id));
                    this.item = {
                        ...this.item,
                        uri: i,
                        filename: a,
                        mimeType: l
                    }, this.reactNativeFilePrepped = !0
                }
                handleError(e) {
                    this.setStatus(a.ERROR), this.error = e;
                    try {
                        this.emit("error", e)
                    } catch {}
                    this.removeAllListeners()
                }
                handleComplete(e) {
                    this.setStatus(a.COMPLETED), p.log("Upload complete for ".concat(this.id)), this.emit("complete", e), this.removeAllListeners()
                }
                cancel() {
                    p.log("Cancelled called for ".concat(this.id)), this._abortController.abort(), this.status === a.COMPLETED && this.delete(), this.setStatus(a.CANCELED), this.emit("complete"), this.removeAllListeners()
                }
                resetState() {
                    return this.status = a.NOT_STARTED, this.uploadedFilename = void 0, this.responseUrl = void 0, this.error = void 0, this._abortController = new AbortController, super.resetState()
                }
                async delete() {
                    if (null == this.uploadedFilename) return;
                    let e = (0, h.getUploadTarget)(this.item.target).getDeleteUploadURL(this.uploadedFilename);
                    try {
                        await u.default.delete(e)
                    } catch {}
                }
                setResponseUrl(e) {
                    this.responseUrl = e
                }
                setStatus(e) {
                    this.status = e
                }
                setFilename(e) {
                    this.filename = e
                }
                setUploadedFilename(e) {
                    this.uploadedFilename = e
                }
                constructor(e, t, n, i) {
                    var l, s, r, u, o;
                    super(e, n), this.status = a.NOT_STARTED, this.loaded = 0, this.reactNativeFilePrepped = !1, this._aborted = !1, this.channelId = t, this.preCompressionSize = null !== (r = null === (l = e.file) || void 0 === l ? void 0 : l.size) && void 0 !== r ? r : 0, this.currentSize = null !== (u = null === (s = e.file) || void 0 === s ? void 0 : s.size) && void 0 !== u ? u : 0, this.reactNativeFileIndex = i, this._abortController = new AbortController, this.isClip = null !== (o = e.isClip) && void 0 !== o && o
                }
            }
        },
        966724: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                UploadPlatform: function() {
                    return l
                },
                default: function() {
                    return E
                }
            });
            var i, a, l, s, r = n("44170"),
                u = n("917351"),
                o = n.n(u),
                d = n("748820"),
                c = n("254490"),
                _ = n("980134");
            (i = l || (l = {}))[i.REACT_NATIVE = 0] = "REACT_NATIVE", i[i.WEB = 1] = "WEB", (a = s || (s = {}))[a.FILE_ATTACHMENT = 0] = "FILE_ATTACHMENT", a[a.IMAGE_PICKER = 1] = "IMAGE_PICKER";
            class E extends r.EventEmitter {
                cancel() {}
                resetState() {
                    return this
                }
                constructor(e, t) {
                    var n, i;
                    if (super(), this.item = e, e.platform === l.REACT_NATIVE) {
                        this.id = null !== (n = e.id) && void 0 !== n ? n : e.uri;
                        let t = (0, _.getFile)({
                            uri: e.uri,
                            overrideFilename: e.filename,
                            overrideType: e.mimeType
                        });
                        this.filename = t.filename, this.isImage = t.isImage, this.isVideo = t.isVideo, this.mimeType = t.type, this.origin = e.origin, this.durationSecs = e.durationSecs, this.waveform = e.waveform, this.isRemix = e.isRemix, this.isThumbnail = e.isThumbnail
                    } else this.id = null !== (i = e.id) && void 0 !== i ? i : o.uniqueId("upload"), this.classification = c.classifyFile(e.file), this.isImage = "image" === this.classification, this.isVideo = "video" === this.classification, this.filename = e.file.name, this.mimeType = e.file.type, this.isThumbnail = e.isThumbnail;
                    this.isClip = e.isClip, this.uniqueId = (0, d.v4)(), this.showLargeMessageDialog = t, this.spoiler = !1, this.description = null
                }
            }
        },
        142852: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                UploadTargets: function() {
                    return a
                },
                getUploadTarget: function() {
                    return c
                }
            });
            var i, a, l = n("572679"),
                s = n("42203"),
                r = n("254490"),
                u = n("980134"),
                o = n("49111");
            class d {
                getCreateAttachmentURL(e) {
                    return o.Endpoints.MESSAGE_CREATE_ATTACHMENT_UPLOAD(e)
                }
                getDeleteUploadURL(e) {
                    return o.Endpoints.MESSAGE_DELETE_UPLOAD(e)
                }
                getMaxFileSize(e) {
                    let t = s.default.getBasicChannel(e);
                    return r.maxFileSize(null == t ? void 0 : t.guild_id)
                }
                getMaxAttachmentsCount() {
                    return o.MAX_UPLOAD_COUNT
                }
                getMaxTotalAttachmentSize() {
                    return u.MAX_TOTAL_ATTACHMENT_SIZE
                }
                get shouldReactNativeCompressUploads() {
                    return !0
                }
            }

            function c(e) {
                switch (e) {
                    case a.GUILD_PRODUCT_ATTACHMENT:
                        return new l.default;
                    default:
                    case a.MESSAGE_ATTACHMENT:
                        return new d
                }
            }(i = a || (a = {}))[i.MESSAGE_ATTACHMENT = 0] = "MESSAGE_ATTACHMENT", i[i.GUILD_PRODUCT_ATTACHMENT = 1] = "GUILD_PRODUCT_ATTACHMENT"
        },
        402752: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                doesImageMatchUpload: function() {
                    return a
                },
                calculateProgress: function() {
                    return l
                }
            });
            var i = n("966724");

            function a(e, t) {
                if (t.id === e.uri || null != t.id && t.id === e.id) return !0;
                if (t.item.platform === i.UploadPlatform.REACT_NATIVE) {
                    let {
                        item: i
                    } = t, {
                        filename: a
                    } = e;
                    if (i.originalUri === e.uri) return !0;
                    if (null != a) {
                        var n;
                        if (null === (n = i.originalUri) || void 0 === n ? void 0 : n.includes(a)) return !0
                    }
                }
                return !1
            }

            function l(e, t) {
                return 0 === t ? 0 : Math.min(Math.floor(e / t * 100), 100)
            }
        },
        123010: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getUploadPayload: function() {
                    return r
                },
                default: function() {
                    return u
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("917351"),
                s = n.n(l);

            function r(e) {
                let t = e.item.file;
                return a(null != t, "file data must not be empty"), {
                    filename: t.name,
                    file_size: t.size,
                    id: s.uniqueId(),
                    is_clip: e.isClip
                }
            }
            var u = {
                getUploadPayload: r
            }
        },
        810793: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                ActivityBookmarkEmbedExperiment: function() {
                    return a
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                kind: "user",
                id: "2023-04_activity_launcher_embed",
                label: "Activity Launcher Embed",
                defaultConfig: {
                    activityBookmarkEmbedEnabled: !1
                },
                treatments: [{
                    id: 1,
                    label: "Enable the Activity Launcher Embed in chat",
                    config: {
                        activityBookmarkEmbedEnabled: !0
                    }
                }]
            })
        },
        84460: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("568734"),
                s = n("49111");

            function r() {
                return {
                    isEnabled: !1,
                    lastUsedObject: {},
                    useActivityUrlOverride: !1,
                    activityUrlOverride: null,
                    filter: ""
                }
            }
            let u = r(),
                o = null,
                d = [];
            class c extends i.default.PersistedStore {
                initialize(e) {
                    u = {
                        ...r(),
                        ...null != e ? e : {}
                    }
                }
                getState() {
                    return u
                }
                getIsEnabled() {
                    return u.isEnabled
                }
                getLastUsedObject() {
                    return u.lastUsedObject
                }
                getUseActivityUrlOverride() {
                    return u.useActivityUrlOverride
                }
                getActivityUrlOverride() {
                    return u.activityUrlOverride
                }
                getFetchState() {
                    return o
                }
                getFilter() {
                    return u.filter
                }
                getDeveloperShelfItems() {
                    return d
                }
                isApplicationInDevShelf(e) {
                    return null != d.find(t => t.id === e)
                }
                inDevModeForApplication(e) {
                    return u.isEnabled && this.isApplicationInDevShelf(e)
                }
            }
            c.displayName = "DeveloperActivityShelfStore", c.persistKey = "DeveloperActivityShelfStore";
            var _ = new c(a.default, {
                LOGOUT: function() {
                    u = r(), o = null, d = []
                },
                DEVELOPER_ACTIVITY_SHELF_TOGGLE_ENABLED: function() {
                    u.isEnabled = !u.isEnabled
                },
                DEVELOPER_ACTIVITY_SHELF_TOGGLE_USE_ACTIVITY_URL_OVERRIDE: function() {
                    u.useActivityUrlOverride = !u.useActivityUrlOverride
                },
                DEVELOPER_ACTIVITY_SHELF_SET_ACTIVITY_URL_OVERRIDE: function(e) {
                    let {
                        activityUrlOverride: t
                    } = e;
                    u.activityUrlOverride = t
                },
                DEVELOPER_ACTIVITY_SHELF_MARK_ACTIVITY_USED: function(e) {
                    let {
                        applicationId: t,
                        timestamp: n
                    } = e;
                    if (null == d.find(e => e.id === t)) return !1;
                    u.lastUsedObject[t] = n
                },
                DEVELOPER_ACTIVITY_SHELF_FETCH_START() {
                    o = "loading"
                },
                DEVELOPER_ACTIVITY_SHELF_FETCH_SUCCESS: function(e) {
                    let {
                        items: t
                    } = e;
                    o = "loaded", d = t.filter(e => null != e.flags && (0, l.hasFlag)(e.flags, s.ApplicationFlags.EMBEDDED))
                },
                DEVELOPER_ACTIVITY_SHELF_FETCH_FAIL: function(e) {
                    let {
                        type: t
                    } = e;
                    o = "errored"
                },
                DEVELOPER_ACTIVITY_SHELF_UPDATE_FILTER: function(e) {
                    let {
                        filter: t
                    } = e;
                    u.filter = t
                }
            })
        },
        191225: function(e, t, n) {
            "use strict";
            let i;
            n.r(t), n.d(t, {
                NO_ACTIVITIES: function() {
                    return I
                },
                default: function() {
                    return V
                }
            });
            var a = n("446674"),
                l = n("913144"),
                s = n("798609"),
                r = n("271938"),
                u = n("42203"),
                o = n("957255"),
                d = n("18494"),
                c = n("697218"),
                _ = n("773336"),
                E = n("711562"),
                f = n("334368"),
                h = n("272505"),
                T = n("49111"),
                p = n("782340");
            let S = {
                    seenActivities: new Set,
                    seenNewActivities: {},
                    seenUpdatedActivities: {},
                    shouldShowNewActivityIndicator: !1,
                    usersHavePlayedByApp: new Map
                },
                I = [],
                A = new Map,
                m = new Map,
                g = new Map,
                C = !1,
                N = new Map,
                O = new Map,
                R = new Map,
                v = new Map,
                M = new Map,
                y = new Map,
                D = new Map,
                L = new Set([]);
            let U = h.ActivityPanelModes.ACTION_BAR;

            function P(e) {
                return null != e ? e : "0"
            }

            function b(e, t, n, i) {
                var a, l;
                let s = (0, E.default)(n.application_id);
                if (null == s) return;
                let d = u.default.getBasicChannel(t),
                    c = null != d && o.default.canBasicChannel(T.BasicPermissions.CONNECT, d) || (null == d ? void 0 : d.type) === T.ChannelTypes.DM || (null == d ? void 0 : d.type) === T.ChannelTypes.GROUP_DM;
                if (function(e, t) {
                        var n;
                        S.usersHavePlayedByApp.set(e, new Set([...null !== (n = S.usersHavePlayedByApp.get(e)) && void 0 !== n ? n : [], ...t.map(e => e.user_id)]))
                    }(n.application_id, i), !c) return;
                let _ = function(e, t, n, i, a) {
                        var l, s;
                        let r = new Map;
                        return t.forEach(e => {
                            r.set(e.user_id, e)
                        }), {
                            ...e,
                            name: null !== (l = e.name) && void 0 !== l ? l : p.default.Messages.EMBEDDED_ACTIVITIES_UNKNOWN_ACTIVITY_NAME,
                            type: null !== (s = e.type) && void 0 !== s ? s : T.ActivityTypes.PLAYING,
                            url: n,
                            connections: r,
                            guildId: i,
                            channelId: a
                        }
                    }(n, i, s, e, t),
                    f = r.default.getId(),
                    h = A.get(_.application_id);
                i.some(e => e.user_id === f) && null != h && A.set(h.application_id, {
                    ...h,
                    ..._
                });
                let I = null !== (a = g.get(t)) && void 0 !== a ? a : [],
                    C = I.filter(e => {
                        let {
                            application_id: t
                        } = e;
                        return t !== n.application_id
                    }),
                    N = P(e),
                    O = null !== (l = m.get(N)) && void 0 !== l ? l : [],
                    R = O.filter(e => !(e.application_id === n.application_id && e.channelId === t));
                0 !== i.length && (C.push(_), R.push(_)), g.set(t, C), m.set(N, R)
            }

            function G(e) {
                let t = e.embedded_activities;
                t.forEach(t => {
                    let {
                        channel_id: n,
                        embedded_activity: i,
                        connections: a
                    } = t;
                    b(e.id, n, i, a)
                })
            }

            function k() {
                C = !1
            }

            function F(e, t) {
                return "".concat(e, ":").concat(t)
            }
            class w extends a.default.PersistedStore {
                initialize(e) {
                    var t;
                    let n = new Map;
                    Array.isArray(null == e ? void 0 : e.usersHavePlayedByApp) && (null == e || e.usersHavePlayedByApp.forEach(e => {
                        if (Array.isArray(e)) {
                            let [t, i] = e;
                            "string" == typeof t && Array.isArray(i) && n.set(t, new Set(i))
                        }
                    }));
                    let i = new Set(null !== (t = null == e ? void 0 : e.seenActivities) && void 0 !== t ? t : []);
                    null != e && (S = {
                        ...e,
                        seenActivities: i,
                        usersHavePlayedByApp: n
                    })
                }
                getState() {
                    return S
                }
                getSelfEmbeddedActivityForChannel(e) {
                    var t;
                    return null !== (t = Array.from(A.values()).find(t => {
                        let {
                            channelId: n
                        } = t;
                        return e === n
                    })) && void 0 !== t ? t : null
                }
                getSelfEmbeddedActivities() {
                    return A
                }
                getEmbeddedActivitiesForGuild(e) {
                    var t;
                    return null !== (t = m.get(e)) && void 0 !== t ? t : I
                }
                getEmbeddedActivitiesForChannel(e) {
                    var t;
                    return null !== (t = g.get(e)) && void 0 !== t ? t : I
                }
                getEmbeddedActivitiesByChannel() {
                    return g
                }
                getEmbeddedActivityDurationMs(e, t) {
                    let n = D.get(F(e, t));
                    return null == n ? null : Date.now() - n
                }
                isLaunchingActivity() {
                    return C
                }
                getShelfActivities(e) {
                    var t;
                    let n = P(e);
                    return null !== (t = N.get(n)) && void 0 !== t ? t : []
                }
                getShelfFetchStatus(e) {
                    let t = P(e);
                    return O.get(t)
                }
                shouldFetchShelf(e) {
                    var t, n;
                    let i = P(e),
                        a = null !== (t = O.get(i)) && void 0 !== t ? t : {
                            isFetching: !1
                        },
                        l = Date.now(),
                        s = l - (null !== (n = null == a ? void 0 : a.lastFetchTimestampMs) && void 0 !== n ? n : 0) > 216e5;
                    return !(null == a ? void 0 : a.isFetching) && s
                }
                getOrientationLockStateForApp(e) {
                    var t;
                    return null !== (t = R.get(e)) && void 0 !== t ? t : null
                }
                getPipOrientationLockStateForApp(e) {
                    var t;
                    return null !== (t = v.get(e)) && void 0 !== t ? t : this.getOrientationLockStateForApp(e)
                }
                getGridOrientationLockStateForApp(e) {
                    var t, n;
                    return null !== (n = null !== (t = M.get(e)) && void 0 !== t ? t : v.get(e)) && void 0 !== n ? n : this.getOrientationLockStateForApp(e)
                }
                getLayoutModeForApp(e) {
                    return y.get(e)
                }
                getDismissedEmbeddedActivityMessageKeys() {
                    return Array.from(L)
                }
                getUsersHavePlayedByApp(e) {
                    var t;
                    return [...null !== (t = S.usersHavePlayedByApp.get(e)) && void 0 !== t ? t : []]
                }
                getConnectedActivityChannelId() {
                    return i
                }
                getActivityPanelMode() {
                    return U
                }
                getCurrentEmbeddedActivity() {
                    var e;
                    let t = this.getConnectedActivityChannelId();
                    if (null != t) return null !== (e = this.getSelfEmbeddedActivityForChannel(t)) && void 0 !== e ? e : void 0
                }
            }
            w.displayName = "EmbeddedActivitiesStore", w.persistKey = "EmbeddedActivities", w.migrations = [e => ({
                ...e,
                seenFeaturedActivities: [],
                shouldShowNewActivityIndicator: !1
            }), e => (delete e.seenFeaturedActivities, {
                ...e,
                seenActivities: []
            }), e => ({
                ...e
            }), e => (delete e.currentFreeActivity, delete e.lastFreeActivityRotationTimestampMs, delete e.freePeriodActivities, delete e.shouldShowFreeActivityIndicator, {
                ...e
            }), e => {
                var t;
                let n = new Set(null !== (t = e.seenActivities) && void 0 !== t ? t : []);
                return {
                    ...e,
                    seenActivities: n,
                    seenNewActivities: {},
                    seenUpdatedActivities: {}
                }
            }];
            let H = new w(l.default, {
                ACTIVITY_LAYOUT_MODE_UPDATE: function(e) {
                    let {
                        applicationId: t,
                        layoutMode: n
                    } = e;
                    y.set(t, n)
                },
                CONNECTION_OPEN_SUPPLEMENTAL: function(e) {
                    let {
                        guilds: t
                    } = e;
                    g.clear(), m.clear(), t.forEach(e => G(e))
                },
                GUILD_CREATE: function(e) {
                    let {
                        guild: t
                    } = e;
                    G(t)
                },
                CALL_CREATE: function(e) {
                    let {
                        channelId: t,
                        embeddedActivities: n
                    } = e;
                    ! function(e, t) {
                        t.forEach(e => {
                            let {
                                channel_id: t,
                                embedded_activity: n,
                                connections: i
                            } = e;
                            b(null, t, n, i)
                        })
                    }(0, n)
                },
                CHANNEL_DELETE: function(e) {
                    let {
                        channel: t
                    } = e;
                    g.set(t.id, []);
                    let n = t.guild_id;
                    if (null != n) {
                        var i;
                        let e = P(n),
                            a = null !== (i = m.get(e)) && void 0 !== i ? i : [],
                            l = a.filter(e => e.channelId !== t.id);
                        m.set(e, l)
                    }
                },
                EMBEDDED_ACTIVITY_LAUNCH_START: function(e) {
                    let {
                        embeddedActivity: t
                    } = e;
                    C = !0, U = t.channelId === d.default.getChannelId() ? h.ActivityPanelModes.PANEL : h.ActivityPanelModes.PIP
                },
                EMBEDDED_ACTIVITY_LAUNCH_SUCCESS: k,
                EMBEDDED_ACTIVITY_LAUNCH_FAIL: k,
                EMBEDDED_ACTIVITY_OPEN: function(e) {
                    var t, n, a;
                    let {
                        channelId: l,
                        embeddedActivity: s
                    } = e, {
                        application_id: o
                    } = s, d = (0, E.default)(o), _ = r.default.getSessionId();
                    if (null == d || null == _ || (null === (t = A.get(o)) || void 0 === t ? void 0 : t.channelId) === l) return !1;
                    let f = u.default.getChannel(l),
                        h = null == f ? void 0 : f.getGuildId(),
                        S = c.default.getCurrentUser();
                    if (null == h && !(null !== (n = null == f ? void 0 : f.isPrivate()) && void 0 !== n && n) || null == S) return !1;
                    i = l;
                    let I = new Map,
                        m = S.id;
                    I.set(m, {
                        user_id: m
                    }), A.set(o, {
                        guildId: h,
                        channelId: l,
                        application_id: o,
                        name: null !== (a = s.name) && void 0 !== a ? a : p.default.Messages.EMBEDDED_ACTIVITIES_UNKNOWN_ACTIVITY_NAME,
                        url: d,
                        type: T.ActivityTypes.PLAYING,
                        connections: I,
                        connectedSince: Date.now()
                    }), D.set(F(l, o), Date.now())
                },
                EMBEDDED_ACTIVITY_CLOSE: function(e) {
                    let {
                        applicationId: t
                    } = e, n = A.get(t);
                    A.delete(t), (null == n ? void 0 : n.channelId) === i && (i = void 0)
                },
                EMBEDDED_ACTIVITY_INBOUND_UPDATE: function(e) {
                    let {
                        guildId: t,
                        channelId: n,
                        embeddedActivity: i,
                        connections: a
                    } = e;
                    b(t, n, i, a)
                },
                LOCAL_ACTIVITY_UPDATE: function(e) {
                    var t, n;
                    let {
                        activity: i
                    } = e;
                    if (null == i) return !1;
                    let a = A.get(null !== (t = i.application_id) && void 0 !== t ? t : "");
                    if (null == a) return !1;
                    A.set(a.application_id, {
                        ...a,
                        type: null !== (n = i.type) && void 0 !== n ? n : a.type,
                        secrets: i.secrets
                    })
                },
                EMBEDDED_ACTIVITY_SET_CONFIG: function(e) {
                    let {
                        applicationId: t,
                        config: n
                    } = e, i = A.get(t);
                    null != i && A.set(i.application_id, {
                        ...i,
                        config: n
                    })
                },
                EMBEDDED_ACTIVITY_FETCH_SHELF: function(e) {
                    let {
                        guildId: t
                    } = e, n = P(t), i = O.get(n);
                    O.set(n, {
                        isFetching: !0,
                        lastFetchTimestampMs: null == i ? void 0 : i.lastFetchTimestampMs
                    })
                },
                EMBEDDED_ACTIVITY_FETCH_SHELF_SUCCESS: function(e) {
                    let {
                        guildId: t,
                        activities: n
                    } = e, i = P(t);
                    N.set(i, n);
                    let a = Date.now();
                    ! function(e) {
                        let {
                            activities: t,
                            now: n
                        } = e;
                        t.forEach(e => {
                            let t = e.application_id,
                                i = e.client_platform_config[(0, f.default)((0, _.getOS)())];
                            if (!S.seenActivities.has(t) && (S.shouldShowNewActivityIndicator = !0, S.seenActivities.add(t)), null == i.label_until) return;
                            let a = new Date(i.label_until).getTime();
                            if (a < n) return;
                            let l = S.seenNewActivities[t],
                                r = Object.hasOwn(S.seenNewActivities, t),
                                u = new Date(l).getTime() < a;
                            i.label_type === s.EmbeddedActivityLabelTypes.NEW && (!r || u) && (S.shouldShowNewActivityIndicator = !0, S.seenNewActivities[t] = i.label_until);
                            let o = S.seenUpdatedActivities[t],
                                d = Object.hasOwn(S.seenUpdatedActivities, t),
                                c = new Date(o).getTime() < a;
                            i.label_type === s.EmbeddedActivityLabelTypes.UPDATED && (!d || c) && (S.shouldShowNewActivityIndicator = !0, S.seenUpdatedActivities[t] = i.label_until)
                        })
                    }({
                        activities: n,
                        now: a
                    }), O.set(i, {
                        isFetching: !1,
                        lastFetchTimestampMs: a
                    })
                },
                EMBEDDED_ACTIVITY_FETCH_SHELF_FAIL: function(e) {
                    let {
                        guildId: t
                    } = e, n = P(t), i = O.get(n);
                    O.set(n, {
                        isFetching: !1,
                        lastFetchTimestampMs: null == i ? void 0 : i.lastFetchTimestampMs
                    })
                },
                EMBEDDED_ACTIVITY_DISMISS_NEW_INDICATOR: () => {
                    S.shouldShowNewActivityIndicator = !1
                },
                EMBEDDED_ACTIVITY_SET_ORIENTATION_LOCK_STATE: function(e) {
                    let {
                        applicationId: t,
                        lockState: n,
                        pictureInPictureLockState: i,
                        gridLockState: a
                    } = e;
                    null == n ? R.delete(t) : R.set(t, n), null === i ? v.delete(t) : void 0 !== i && v.set(t, i), null === a ? M.delete(t) : void 0 !== a && M.set(t, a)
                },
                EMBEDDED_ACTIVITY_DISMISS_MESSAGE: function(e) {
                    let {
                        embeddedActivityKey: t
                    } = e;
                    L.add(t)
                },
                EMBEDDED_ACTIVITY_SET_PANEL_MODE: function(e) {
                    let {
                        activityPanelMode: t
                    } = e;
                    U = t
                },
                CHANNEL_SELECT: function(e) {
                    let {
                        channelId: t
                    } = e;
                    i !== t && U === h.ActivityPanelModes.PANEL && (U = h.ActivityPanelModes.PIP)
                }
            });
            var V = H
        },
        711562: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("167726"),
                a = n("84460");

            function l(e) {
                let t = a.default.getState();
                return t.isEnabled && t.useActivityUrlOverride && null != t.activityUrlOverride && "" !== t.activityUrlOverride ? t.activityUrlOverride : i.default.inTestModeForEmbeddedApplication(e) ? i.default.testModeOriginURL : function(e) {
                    let t = window.GLOBAL_ENV.ACTIVITY_APPLICATION_HOST;
                    return null == t ? null : "https://".concat(e, ".").concat(t)
                }(e)
            }
        },
        272505: function(e, t, n) {
            "use strict";
            var i, a;
            n.r(t), n.d(t, {
                ActivityPanelModes: function() {
                    return i
                },
                LANDSCAPE_ACTIVITY_ASPECT_RATIO: function() {
                    return l
                }
            }), (a = i || (i = {})).ACTION_BAR = "action_bar", a.PANEL = "panel", a.PIP = "pip";
            let l = 16 / 9
        },
        644223: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("913144");

            function a(e, t, n, a) {
                i.default.dispatch({
                    type: "EMBEDDED_ACTIVITY_DEFERRED_OPEN",
                    channelId: e,
                    applicationId: t,
                    intent: a,
                    analyticsLocations: n
                })
            }
        },
        334368: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("798609");

            function a(e) {
                switch (e) {
                    case "android":
                        return i.EmbeddedActivitySupportedPlatforms.ANDROID;
                    case "ios":
                        return i.EmbeddedActivitySupportedPlatforms.IOS;
                    default:
                        return i.EmbeddedActivitySupportedPlatforms.WEB
                }
            }
        },
        429928: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                }
            });
            var i = n("376556"),
                a = n("49111"),
                l = n("450484");

            function s(e) {
                return null != e && e.type === a.ActivityTypes.LISTENING && e.name === i.default.get(a.PlatformTypes.SPOTIFY).name && null != e.party && null != e.party.id && (0, l.isSpotifyParty)(e.party.id)
            }
        },
        823704: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("913144");

            function a() {
                i.default.dispatch({
                    type: "ACTIVITY_SYNC_STOP"
                })
            }
        },
        148217: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return u
                }
            });
            var i = n("884691"),
                a = n("446674"),
                l = n("327037"),
                s = n("84339"),
                r = n("271938");

            function u() {
                let [e, t] = (0, a.useStateFromStoresArray)([r.default], () => [r.default.isAuthenticated(), null != r.default.getAnalyticsToken()]), n = (0, s.default)(e);
                i.useEffect(() => {
                    !n && e && !t && l.fetchCurrentUser({
                        withAnalyticsToken: !0
                    })
                }, [n, e, t])
            }
        },
        939398: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getDesktopSourceMetadata: function() {
                    return o
                },
                trackWithOverlayMetadata: function() {
                    return d
                }
            });
            var i = n("42887"),
                a = n("568307"),
                l = n("703370"),
                s = n("599110"),
                r = n("716241"),
                u = n("49111");

            function o() {
                let e, t, n, l, s;
                let r = i.default.getGoLiveSource();
                if (null != r && (e = r.quality.resolution, t = r.quality.frameRate, null != r.desktopSource)) {
                    var u, o;
                    n = r.desktopSource.soundshareSession;
                    let e = null != r.desktopSource.sourcePid ? a.default.getGameForPID(r.desktopSource.sourcePid) : null;
                    l = null !== (u = null == e ? void 0 : e.name) && void 0 !== u ? u : null, s = null !== (o = null == e ? void 0 : e.id) && void 0 !== o ? o : null
                }
                return {
                    video_input_resolution: e,
                    video_input_frame_rate: t,
                    soundshare_session: n,
                    share_game_name: l,
                    share_game_id: s
                }
            }

            function d(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                    i = l.default.getGame();
                switch (t = {
                        ...t,
                        overlay_game_name: null != i ? i.name : "Unknown Game",
                        overlay_app_id: null != i ? i.id : null
                    }, e) {
                    case u.AnalyticEvents.VOICE_CHANNEL_SELECTED:
                    case u.AnalyticEvents.SETTINGS_PANE_VIEWED:
                    case u.AnalyticEvents.GUILD_VIEWED:
                    case u.AnalyticEvents.CHANNEL_OPENED:
                        return (0, r.trackWithMetadata)(e, t, n);
                    default:
                        return s.default.track(e, t, {
                            flush: n
                        })
                }
            }
        },
        212084: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                }
            });
            var i = n("605250"),
                a = n("802493");
            let l = new i.default("GuildStickers");
            var s = new class e {
                getSync(e) {
                    let t = performance.now(),
                        n = a.default.stickers(e).getMapEntriesSyncUnsafe(),
                        i = performance.now();
                    return l.log("synchronously loaded in ".concat(i - t, "ms (guilds: ").concat(n.length, ")")), n
                }
                handleConnectionOpen(e, t) {
                    for (let n of e.guilds) this.handleOneGuildCreate(n, t)
                }
                handleGuildCreate(e, t) {
                    this.handleOneGuildCreate(e.guild, t)
                }
                handleGuildUpdate(e, t) {
                    this.replace(e.guild.id, e.guild.stickers, t)
                }
                handleGuildDelete(e, t) {
                    this.delete(e.guild.id, t)
                }
                handleGuildStickersUpdate(e, t) {
                    this.replace(e.guildId, e.stickers, t)
                }
                handleBackgroundSync(e, t) {
                    e.promisesForBackgroundSyncToWaitOn.push(Promise.all(e.stickers.map(e => {
                        if ("unavailable" === e.dataMode) return Promise.resolve();
                        "full" === e.dataMode ? (l.verbose("Replacing ".concat(e.entities.length, " stickers for ").concat(e.guildId)), this.replace(e.guildId, e.entities, t)) : (e.updatedEntities.length > 0 || e.deletedEntityIds.length > 0) && (l.verbose("Updating ".concat(e.updatedEntities.length, " and deleting ").concat(e.deletedEntityIds.length, " stickers for ").concat(e.guildId)), this.update(e.guildId, e.updatedEntities, e.deletedEntityIds, t))
                    })))
                }
                handleOneGuildCreate(e, t) {
                    null != e.stickers && this.replace(e.id, e.stickers, t), null != e.stickerUpdates && this.update(e.id, e.stickerUpdates.writes, e.stickerUpdates.deletes, t)
                }
                handleClearGuildCache(e) {
                    this.clear(e)
                }
                handleReset() {}
                replace(e, t, n) {
                    a.default.stickersTransaction(n).replaceAll(e, t)
                }
                delete(e, t) {
                    a.default.stickersTransaction(t).delete(e)
                }
                clear(e) {
                    a.default.stickersTransaction(e).delete()
                }
                update(e, t, n, i) {
                    let l = a.default.stickersTransaction(i);
                    for (let i of (l.putAll(e, t), n)) l.delete(e, i)
                }
                constructor() {
                    this.actions = {
                        BACKGROUND_SYNC: (e, t) => this.handleBackgroundSync(e, t),
                        CLEAR_GUILD_CACHE: (e, t) => this.handleClearGuildCache(t),
                        CONNECTION_OPEN: (e, t) => this.handleConnectionOpen(e, t),
                        GUILD_CREATE: (e, t) => this.handleGuildCreate(e, t),
                        GUILD_DELETE: (e, t) => this.handleGuildDelete(e, t),
                        GUILD_STICKERS_UPDATE: (e, t) => this.handleGuildStickersUpdate(e, t),
                        GUILD_UPDATE: (e, t) => this.handleGuildUpdate(e, t)
                    }
                }
            }
        },
        105059: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return r
                }
            });
            var i = n("605250"),
                a = n("305961"),
                l = n("802493");
            let s = new i.default("GuildVersions");
            var r = new class e {
                getCommittedVersions() {
                    try {
                        var e, t;
                        let n = null === (t = l.default.versions()) || void 0 === t ? void 0 : null === (e = t.getManySyncUnsafe()) || void 0 === e ? void 0 : e.map(e => [e.id, e.version]);
                        return new Map(null != n ? n : [])
                    } catch (e) {
                        return s.warn("couldn't load guild versions", e), new Map
                    }
                }
                pause(e) {
                    let t = Symbol(e);
                    return this.pauseTokens.add(t), t
                }
                resume(e, t) {
                    this.pauseTokens.delete(e) && 0 === this.pauseTokens.size && this.commit(t)
                }
                remove(e, t) {
                    this.deleteWith(e), this.commit(t)
                }
                handleBackgroundSync(e, t) {
                    for (let n of e.guilds) "unavailable" !== n.data_mode && this.updateWith(n.id, [n]), null == a.default.getGuild(n.id) && this.remove(n.id, t);
                    this.commit(t)
                }
                handleConnectionOpen(e, t) {
                    for (let t of (this.reset(), e.guilds)) this.updateWith(t.id, [t]);
                    this.commit(t)
                }
                handleGuildCreate(e, t) {
                    var n;
                    let i = e.guild,
                        a = e.guild.id;
                    this.updateWith(a, [i]), this.updateWith(a, i.emojis), this.updateWith(a, i.stickers), this.updateWith(a, i.channels), this.updateWith(a, null === (n = i.channelUpdates) || void 0 === n ? void 0 : n.writes), this.updateWith(a, Array.isArray(i.roles) ? i.roles : Object.values(i.roles)), this.commit(t)
                }
                handleGuildUpdate(e, t) {
                    let n = e.guild,
                        i = e.guild.id;
                    this.updateWith(i, [n]), this.updateWith(i, n.emojis), this.updateWith(i, n.stickers), this.updateWith(i, Array.isArray(n.roles) ? n.roles : Object.values(n.roles)), this.commit(t)
                }
                handleGuildDelete(e, t) {
                    this.deleteWith(e.guild.id), this.commit(t)
                }
                handleGuildRoleChange(e, t) {
                    this.updateWith(e.guildId, [e.role]), this.commit(t)
                }
                handleGuildRoleDelete(e, t) {
                    this.updateWith(e.guildId, [{
                        version: e.version
                    }]), this.commit(t)
                }
                handleGuildEmojisUpdate(e, t) {
                    this.updateWith(e.guildId, e.emojis), this.commit(t)
                }
                handleGuildStickersUpdate(e, t) {
                    this.updateWith(e.guildId, e.stickers), this.commit(t)
                }
                handleChannelCreate(e, t) {
                    null != e.channel.guild_id && this.updateWith(e.channel.guild_id, [e.channel]), this.commit(t)
                }
                handleChannelUpdates(e, t) {
                    for (let t of e.channels) null != t.guild_id && this.updateWith(t.guild_id, [t]);
                    this.commit(t)
                }
                handleChannelDelete(e, t) {
                    null != e.channel.guild_id && this.updateWith(e.channel.guild_id, [e.channel]), this.commit(t)
                }
                handleClearGuildCache(e) {
                    this.reset(), l.default.versionsTransaction(e).delete()
                }
                handleReset() {
                    this.reset()
                }
                reset() {
                    this.committed = new Map, this.pending = new Map, this.pauseTokens = new Set
                }
                deleteWith(e) {
                    this.pending.set(e, null)
                }
                updateWith(e, t) {
                    if (null != t) {
                        var n, i;
                        let a = Math.max(null !== (n = this.committed.get(e)) && void 0 !== n ? n : 0, null !== (i = this.pending.get(e)) && void 0 !== i ? i : 0),
                            l = this.computeLatestVersion(a, t);
                        l > a && this.pending.set(e, l)
                    }
                }
                computeLatestVersion(e, t) {
                    let n = e;
                    for (let e of t) {
                        var i;
                        n = Math.max(n, null !== (i = e.version) && void 0 !== i ? i : 0)
                    }
                    return n
                }
                commit(e) {
                    if (this.pending.size > 0 && 0 === this.pauseTokens.size) {
                        let t = l.default.versionsTransaction(e);
                        for (let [e, n] of this.pending) null != n ? (t.put({
                            id: e,
                            version: n
                        }), this.committed.set(e, n)) : (t.delete(e), this.committed.delete(e));
                        this.pending.clear()
                    }
                }
                constructor() {
                    this.pending = new Map, this.committed = new Map, this.pauseTokens = new Set, this.actions = {
                        BACKGROUND_SYNC: (e, t) => this.handleBackgroundSync(e, t),
                        CHANNEL_CREATE: (e, t) => this.handleChannelCreate(e, t),
                        CHANNEL_DELETE: (e, t) => this.handleChannelDelete(e, t),
                        CHANNEL_UPDATES: (e, t) => this.handleChannelUpdates(e, t),
                        CLEAR_GUILD_CACHE: (e, t) => this.handleClearGuildCache(t),
                        CONNECTION_OPEN: (e, t) => this.handleConnectionOpen(e, t),
                        GUILD_CREATE: (e, t) => this.handleGuildCreate(e, t),
                        GUILD_DELETE: (e, t) => this.handleGuildDelete(e, t),
                        GUILD_EMOJIS_UPDATE: (e, t) => this.handleGuildEmojisUpdate(e, t),
                        GUILD_ROLE_CREATE: (e, t) => this.handleGuildRoleChange(e, t),
                        GUILD_ROLE_DELETE: (e, t) => this.handleGuildRoleDelete(e, t),
                        GUILD_ROLE_UPDATE: (e, t) => this.handleGuildRoleChange(e, t),
                        GUILD_STICKERS_UPDATE: (e, t) => this.handleGuildStickersUpdate(e, t),
                        GUILD_UPDATE: (e, t) => this.handleGuildUpdate(e, t)
                    }
                }
            }
        },
        849365: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return u
                }
            });
            var i = n("605250"),
                a = n("802493"),
                l = n("723939");
            let s = "version",
                r = new i.default("KvCacheVersion");
            var u = new class e {
                async okAsync(e) {
                    let t = await a.default.cache(e).get(s);
                    return null == t ? null : 3 === t
                }
                okSync(e) {
                    try {
                        let t = a.default.cache(e).getSyncUnsafe(s);
                        return null == t ? null : 3 === t
                    } catch (e) {
                        return r.log("couldn't read version from database: ".concat(e.message)), !1
                    }
                }
                handleClearGuildCache(e) {
                    a.default.cacheTransaction(e).delete(s), a.default.cacheTransaction(e).delete("CacheStore.Nonce"), l.default.replaceDisableAllDatabases("CLEAR_GUILD_CACHE (via KvCacheVersion)")
                }
                handleWrite(e) {
                    a.default.cacheTransaction(e).put("hello", "\uD83D\uDC4B"), a.default.cacheTransaction(e).put(s, 3)
                }
                handleReset() {}
                constructor() {
                    this.actions = {
                        CLEAR_GUILD_CACHE: (e, t) => this.handleClearGuildCache(t),
                        CONNECTION_OPEN: (e, t) => this.handleWrite(t),
                        WRITE_CACHES: (e, t) => this.handleWrite(t)
                    }
                }
            }
        },
        280468: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                requireSortedDescending: function() {
                    return s
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("249654");

            function s(e) {
                a(e.length <= 2 || l.default.compare(e[0].id, e[e.length - 1].id) >= 0, "messages must be sorted in descending order.")
            }
        },
        926274: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                size: function() {
                    return a
                }
            });
            let i = new Set;

            function a() {
                return i.size
            }
        },
        317041: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                TRUE_OPTION_NAME: function() {
                    return r
                },
                FALSE_OPTION_NAME: function() {
                    return u
                },
                BOOLEAN_CHOICES: function() {
                    return o
                },
                BuiltInSectionId: function() {
                    return a
                },
                DISCOVERY_COMMANDS_QUERY_LIMIT: function() {
                    return d
                },
                DISCOVERY_COMMANDS_FRECENCY_LIMIT: function() {
                    return c
                },
                DISCOVERY_COMMAND_FRECENCY_GATEWAY_LIMIT: function() {
                    return _
                },
                SUB_COMMAND_KEY_SEPARATOR: function() {
                    return E
                },
                APPLICATION_COMMAND_PERMISSIONS_LIMIT: function() {
                    return f
                },
                MAX_SUBCOMMAND_LEVEL: function() {
                    return h
                },
                CONTEXT_MENU_COMMANDS_QUERY_LIMIT: function() {
                    return T
                },
                CONTEXT_MENU_PLACEHOLDER_COUNT: function() {
                    return p
                },
                AUTOCOMPLETE_OPTION_DEBOUNCE_TIME: function() {
                    return S
                },
                getValidationErrorText: function() {
                    return I
                }
            });
            var i, a, l = n("798609"),
                s = n("782340");
            let r = "True",
                u = "False",
                o = [{
                    name: r,
                    displayName: r,
                    value: "true"
                }, {
                    name: u,
                    displayName: u,
                    value: "false"
                }];
            (i = a || (a = {})).BUILT_IN = "-1", i.FRECENCY = "-2";
            let d = 10,
                c = 5,
                _ = 25,
                E = "\x00",
                f = 100,
                h = 3,
                T = 10,
                p = 1,
                S = 500;

            function I(e) {
                if (null != e.choices) return s.default.Messages.COMMAND_VALIDATION_CHOICE_ERROR;
                switch (e.type) {
                    case l.ApplicationCommandOptionType.BOOLEAN:
                        return s.default.Messages.COMMAND_VALIDATION_BOOLEAN_ERROR;
                    case l.ApplicationCommandOptionType.CHANNEL:
                        return s.default.Messages.COMMAND_VALIDATION_CHANNEL_ERROR;
                    case l.ApplicationCommandOptionType.INTEGER:
                        return s.default.Messages.COMMAND_VALIDATION_INTEGER_ERROR;
                    case l.ApplicationCommandOptionType.NUMBER:
                        return s.default.Messages.COMMAND_VALIDATION_NUMBER_ERROR;
                    case l.ApplicationCommandOptionType.ROLE:
                        return s.default.Messages.COMMAND_VALIDATION_ROLE_ERROR;
                    case l.ApplicationCommandOptionType.USER:
                        return s.default.Messages.COMMAND_VALIDATION_USER_ERROR;
                    case l.ApplicationCommandOptionType.MENTIONABLE:
                        return s.default.Messages.COMMAND_VALIDATION_MENTIONABLE_ERROR;
                    default:
                        return s.default.Messages.COMMAND_VALIDATION_GENERAL_ERROR
                }
            }
        },
        14090: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                UserAppsTreatment: function() {
                    return a
                },
                default: function() {
                    return s
                }
            });
            var i, a, l = n("862205");
            (i = a || (a = {})).ALLOWED = "allowed", i.DEFAULT = "default";
            var s = (0, l.createExperiment)({
                kind: "user",
                id: "2023-08_new_app_command_serving",
                label: "New Application Command Serving",
                defaultConfig: {
                    enabled: !1,
                    newScoreLogic: !1
                },
                treatments: [{
                    id: 1,
                    label: "Enabled",
                    config: {
                        enabled: !0,
                        newScoreLogic: !1
                    }
                }, {
                    id: 2,
                    label: "Enabled + New Logic",
                    config: {
                        enabled: !0,
                        newScoreLogic: !0
                    }
                }]
            })
        },
        524768: function(e, t, n) {
            "use strict";
            var i, a, l, s, r, u, o, d, c, _, E, f;
            n.r(t), n.d(t, {
                ApplicationCommandSectionType: function() {
                    return i
                },
                ApplicationCommandInputType: function() {
                    return a
                },
                ApplicationCommandPermissionType: function() {
                    return l
                },
                ApplicationCommandTriggerLocations: function() {
                    return s
                },
                ApplicationCommandTriggerSections: function() {
                    return r
                },
                CommandOrigin: function() {
                    return u
                }
            }), (o = i || (i = {}))[o.BUILT_IN = 0] = "BUILT_IN", o[o.APPLICATION = 1] = "APPLICATION", (d = a || (a = {}))[d.BUILT_IN = 0] = "BUILT_IN", d[d.BUILT_IN_TEXT = 1] = "BUILT_IN_TEXT", d[d.BUILT_IN_INTEGRATION = 2] = "BUILT_IN_INTEGRATION", d[d.BOT = 3] = "BOT", d[d.PLACEHOLDER = 4] = "PLACEHOLDER", (c = l || (l = {}))[c.ROLE = 1] = "ROLE", c[c.USER = 2] = "USER", c[c.CHANNEL = 3] = "CHANNEL", (_ = s || (s = {})).DISCOVERY = "discovery", _.SUGGESTION = "suggestion", _.MENTION = "mention", _.PASTE = "paste", _.RECALL = "recall", _.POPULAR_COMMANDS = "popular_commands", _.MJ_CHAT_BAR = "mj_chat_bar", _.QUERY = "query", (E = r || (r = {}))[E.BUILT_IN = 1] = "BUILT_IN", E[E.FRECENCY = 2] = "FRECENCY", E[E.APP = 3] = "APP", (f = u || (u = {}))[f.CHAT = 0] = "CHAT", f[f.APPLICATION_LAUNCHER = 1] = "APPLICATION_LAUNCHER"
        },
        970254: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                UserAppsTreatment: function() {
                    return a
                },
                default: function() {
                    return s
                }
            });
            var i, a, l = n("862205");
            (i = a || (a = {})).ALLOWED = "allowed", i.DEFAULT = "default";
            var s = (0, l.createExperiment)({
                kind: "user",
                id: "2023-08_user_apps",
                label: "Allow user app commands",
                defaultConfig: {
                    userAppsTreatment: a.DEFAULT
                },
                treatments: [{
                    id: 1,
                    label: "Allow user app commands",
                    config: {
                        userAppsTreatment: a.ALLOWED
                    }
                }]
            })
        },
        389153: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                buildCommand: function() {
                    return g
                },
                buildApplicationCommands: function() {
                    return C
                },
                isSnowflake: function() {
                    return N
                },
                getMatchingGroupCommands: function() {
                    return O
                },
                getApplicationCommandOptionQueryOptions: function() {
                    return R
                },
                allChannelsSentinel: function() {
                    return v
                },
                canUseContextMenuCommands: function() {
                    return M
                },
                canUseApplicationCommands: function() {
                    return y
                },
                DISABLED_BY_DEFAULT_PERMISSION_FLAG: function() {
                    return D
                },
                hasAccess: function() {
                    return L
                },
                getCommandAttachmentDraftType: function() {
                    return P
                },
                getCommandTriggerSection: function() {
                    return b
                },
                getApplicationCommandSection: function() {
                    return G
                },
                extractInteractionDataProps: function() {
                    return k
                },
                scoreCommand: function() {
                    return F
                },
                useIsInUserAppExperiment: function() {
                    return w
                },
                isInUserAppExperiment: function() {
                    return H
                }
            });
            var i = n("552442"),
                a = n.n(i),
                l = n("627445"),
                s = n.n(l),
                r = n("917351"),
                u = n.n(r),
                o = n("316693"),
                d = n("798609"),
                c = n("892692"),
                _ = n("140596"),
                E = n("233069"),
                f = n("474643"),
                h = n("957255"),
                T = n("14090"),
                p = n("524768"),
                S = n("970254"),
                I = n("317041"),
                A = n("49111"),
                m = n("843455");

            function g(e) {
                var t, n, i;
                let a, {
                    rootCommand: l,
                    command: s,
                    applicationId: r,
                    subCommandPath: u,
                    useKeyedPermissions: _
                } = e;
                null != l.permissions && l.permissions.length > 0 && (_ ? a = (0, c.keyPermissions)(l.permissions) : (a = {}, l.permissions.forEach(e => {
                    a[e.id] = e
                })));
                let E = (null != u ? u : []).map(e => e.name),
                    f = (null != u ? u : []).map(e => e.displayName);
                return {
                    version: l.version,
                    guildId: l.guild_id,
                    id: [l.id, ...E].join(I.SUB_COMMAND_KEY_SEPARATOR),
                    name: [l.name, ...E].join(" "),
                    serverLocalizedName: s.name_localized,
                    applicationId: r,
                    type: null !== (t = l.type) && void 0 !== t ? t : d.ApplicationCommandType.CHAT,
                    inputType: p.ApplicationCommandInputType.BOT,
                    description: s.description,
                    options: function e(t) {
                        return null == t ? void 0 : t.map(t => {
                            var n, i;
                            let a = {
                                ...t,
                                choices: function(e) {
                                    return null == e ? void 0 : e.map(e => {
                                        var t;
                                        return {
                                            ...e,
                                            displayName: null !== (t = e.name_localized) && void 0 !== t ? t : e.name
                                        }
                                    })
                                }(t.choices),
                                options: e(t.options),
                                serverLocalizedName: t.name_localized,
                                displayName: null !== (n = t.name_localized) && void 0 !== n ? n : t.name,
                                displayDescription: null !== (i = t.description_localized) && void 0 !== i ? i : t.description
                            };
                            if (t.type === d.ApplicationCommandOptionType.CHANNEL && "channel_types" in t) return {
                                ...a,
                                channelTypes: t.channel_types
                            };
                            if ((t.type === d.ApplicationCommandOptionType.NUMBER || t.type === d.ApplicationCommandOptionType.INTEGER) && ("min_value" in t || "max_value" in t)) return {
                                ...a,
                                minValue: t.min_value,
                                maxValue: t.max_value
                            };
                            if (t.type === d.ApplicationCommandOptionType.STRING && ("min_length" in t || "max_length" in t)) return {
                                ...a,
                                minLength: t.min_length,
                                maxLength: t.max_length
                            };
                            return a
                        })
                    }(s.options),
                    rootCommand: l,
                    subCommandPath: u,
                    defaultMemberPermissions: null == l.default_member_permissions ? void 0 : o.default.deserialize(l.default_member_permissions),
                    dmPermission: l.dm_permission,
                    permissions: a,
                    displayName: [null !== (n = l.name_localized) && void 0 !== n ? n : l.name, ...f].join(" "),
                    displayDescription: null !== (i = s.description_localized) && void 0 !== i ? i : s.description,
                    nsfw: l.nsfw,
                    contexts: l.contexts,
                    integration_types: l.integration_types
                }
            }

            function C(e, t) {
                return u.flatMap(e, e => (s(null != e.id, "Missing command id"), function e(t) {
                    var n, i;
                    let {
                        rootCommand: a,
                        command: l,
                        applicationId: s,
                        subCommandPath: r,
                        useKeyedPermissions: u
                    } = t;
                    if (l.hasOwnProperty("id")) {
                        if (null == l.options || 0 === l.options.length) return [g({
                            rootCommand: a,
                            command: l,
                            applicationId: s,
                            subCommandPath: r,
                            useKeyedPermissions: u
                        })]
                    } else if (l.type !== d.ApplicationCommandOptionType.SUB_COMMAND && l.type !== d.ApplicationCommandOptionType.SUB_COMMAND_GROUP && (null == l.options || 0 === l.options.length)) return [g({
                        rootCommand: a,
                        command: l,
                        applicationId: s,
                        subCommandPath: r,
                        useKeyedPermissions: u
                    })];
                    let o = [];
                    if (null == l.options) return o;
                    let c = l.options.filter(e => e.type === d.ApplicationCommandOptionType.SUB_COMMAND_GROUP);
                    for (let t = 0; t < c.length; t++) o.push(...e({
                        rootCommand: a,
                        command: c[t],
                        applicationId: s,
                        subCommandPath: (null != r ? r : []).concat([{
                            name: c[t].name,
                            type: d.ApplicationCommandOptionType.SUB_COMMAND_GROUP,
                            displayName: null !== (n = c[t].name_localized) && void 0 !== n ? n : c[t].name
                        }]),
                        useKeyedPermissions: u
                    }));
                    let _ = l.options.filter(e => e.type === d.ApplicationCommandOptionType.SUB_COMMAND);
                    for (let e = 0; e < _.length; e++) o.push(g({
                        rootCommand: a,
                        command: _[e],
                        applicationId: s,
                        subCommandPath: (null != r ? r : []).concat([{
                            name: _[e].name,
                            type: d.ApplicationCommandOptionType.SUB_COMMAND,
                            displayName: null !== (i = _[e].name_localized) && void 0 !== i ? i : _[e].name
                        }]),
                        useKeyedPermissions: u
                    }));
                    return 0 === c.length && 0 === _.length && o.push(g({
                        rootCommand: a,
                        command: l,
                        applicationId: s,
                        subCommandPath: r,
                        useKeyedPermissions: u
                    })), o
                }({
                    rootCommand: e,
                    command: e,
                    applicationId: e.application_id,
                    subCommandPath: void 0,
                    useKeyedPermissions: t
                })))
            }

            function N(e) {
                return A.ID_REGEX.test(e.trim())
            }

            function O(e, t, n, i) {
                let a = [];
                return u(e).forEach(e => {
                    t.test(e.displayName) && (null == e.predicate || e.predicate(n)) && a.push(e)
                }), a.slice(0, i)
            }

            function R(e) {
                let t = e.type === d.ApplicationCommandOptionType.STRING,
                    n = e.type === d.ApplicationCommandOptionType.CHANNEL,
                    i = e.type === d.ApplicationCommandOptionType.USER || e.type === d.ApplicationCommandOptionType.MENTIONABLE,
                    a = e.type === d.ApplicationCommandOptionType.ROLE || e.type === d.ApplicationCommandOptionType.MENTIONABLE;
                return {
                    canMentionEveryone: t || a,
                    canMentionHere: t,
                    canMentionChannels: t || n,
                    canMentionUsers: t || i,
                    canMentionRoles: t || a,
                    canMentionAnyGuildUser: i,
                    canMentionNonMentionableRoles: a
                }
            }

            function v(e) {
                return a(e).subtract(1).toString()
            }

            function M(e, t, n) {
                return !!y(h.default, _.default, !1, e) && (null != n ? n : t) > 0
            }

            function y(e, t, n, i) {
                if (n) return !1;
                if (i.isMultiUserDM()) return H({
                    location: "canUseApplicationCommands"
                }, {
                    autoTrackExposure: !1
                }) || t.getIntegrations(i.id).length > 0;
                if (i.isDM()) return !i.isSystemDM() && (null != i.rawRecipients.find(e => e.bot) || H({
                    location: "canUseApplicationCommands"
                }, {
                    autoTrackExposure: !1
                }) || t.getIntegrations(i.id).length > 0);
                return i.isArchivedLockedThread() ? e.can(o.default.combine(m.Permissions.USE_APPLICATION_COMMANDS, m.Permissions.MANAGE_THREADS), i) : !!(0, E.isReadableType)(i.type) && e.can(o.default.combine(m.Permissions.USE_APPLICATION_COMMANDS, m.Permissions.SEND_MESSAGES), i)
            }
            let D = o.default.deserialize(0);

            function L(e) {
                let {
                    PermissionStore: t,
                    guild: n,
                    selfMember: i,
                    applicationLevelPermissions: a,
                    commandLevelPermissions: l,
                    defaultMemberPermissions: s
                } = e;
                if (n.ownerId === i.userId || t.can(m.Permissions.ADMINISTRATOR, n)) return !0;
                let r = n.id;
                if (null != l) {
                    let e = U(i, r, l);
                    if ("boolean" == typeof e) return e
                }
                let u = U(i, r, a);
                return ("boolean" != typeof u || !!u) && (null == s || !o.default.equals(s, D) && t.can(s, n))
            }

            function U(e, t, n) {
                let i = n[(0, c.toPermissionKey)(e.userId, p.ApplicationCommandPermissionType.USER)];
                if (null != i) return i.permission;
                let a = !1;
                for (let t of e.roles) {
                    let e = n[(0, c.toPermissionKey)(t, p.ApplicationCommandPermissionType.ROLE)];
                    if (null != e && (a = !0, e.permission)) return !0
                }
                if (a) return !1;
                let l = n[(0, c.toPermissionKey)(t, p.ApplicationCommandPermissionType.ROLE)];
                return null != l ? l.permission : null
            }

            function P(e) {
                switch (e) {
                    case p.CommandOrigin.CHAT:
                        return f.DraftType.ChannelMessage;
                    case p.CommandOrigin.APPLICATION_LAUNCHER:
                        return f.DraftType.ApplicationLauncherCommand
                }
            }

            function b(e) {
                if (null != e) {
                    if (e.id === I.BuiltInSectionId.BUILT_IN) return p.ApplicationCommandTriggerSections.BUILT_IN;
                    else if (e.id === I.BuiltInSectionId.FRECENCY) return p.ApplicationCommandTriggerSections.FRECENCY;
                    else return p.ApplicationCommandTriggerSections.APP
                }
            }

            function G(e) {
                var t, n;
                return {
                    type: p.ApplicationCommandSectionType.APPLICATION,
                    id: e.id,
                    name: null !== (n = null == e ? void 0 : null === (t = e.bot) || void 0 === t ? void 0 : t.username) && void 0 !== n ? n : e.name,
                    icon: e.icon,
                    application: e
                }
            }

            function k(e) {
                var t, n;
                let i = e.id,
                    a = e.options,
                    l = null === (t = a) || void 0 === t ? void 0 : t.find(e => e.type === d.ApplicationCommandOptionType.SUB_COMMAND_GROUP);
                null != l && (i += "".concat(I.SUB_COMMAND_KEY_SEPARATOR).concat(l.name), a = l.options);
                let s = null === (n = a) || void 0 === n ? void 0 : n.find(e => e.type === d.ApplicationCommandOptionType.SUB_COMMAND);
                return null != s && (i += "".concat(I.SUB_COMMAND_KEY_SEPARATOR).concat(s.name), a = s.options), {
                    commandKey: i,
                    interactionOptions: a
                }
            }

            function F(e, t, n, i) {
                var a;
                let l = n.name,
                    s = n.displayName;
                if (l.startsWith(e) || s.startsWith(e)) return 6;
                if (l.startsWith(t[0])) {
                    let e = l.split(" ").slice(1).join(" ");
                    if (e.startsWith(t.slice(1).join(" "))) return 5
                }
                if (s.startsWith(t[0])) {
                    let e = s.split(" ").slice(1).join(" ");
                    if (e.startsWith(t.slice(1).join(" "))) return 5
                }
                if (l.includes(e) || (null == s ? void 0 : s.includes(e))) return 4;
                let r = !1;
                for (let {
                        name: t,
                        serverLocalizedName: i
                    }
                    of null !== (a = n.options) && void 0 !== a ? a : []) {
                    if (t.startsWith(e) || "".concat(l, " ").concat(t).startsWith(e)) return 3;
                    if (null != s && "".concat(s, " ").concat(t).startsWith(e)) return 2;
                    if (null != i && (i.startsWith(e) || "".concat(l, " ").concat(i).startsWith(e) || null != s && "".concat(s, " ").concat(i).startsWith(e))) return 3;
                    (t.includes(e) || (null == i ? void 0 : i.includes(e))) && (r = !0)
                }
                return r ? 2 : (null == i ? void 0 : i.name.toLocaleLowerCase().startsWith(e)) ? 1 : 0
            }

            function w(e, t) {
                return S.default.useExperiment(e, t).userAppsTreatment === T.UserAppsTreatment.ALLOWED
            }

            function H(e, t) {
                return S.default.getCurrentConfig(e, t).userAppsTreatment === T.UserAppsTreatment.ALLOWED
            }
        },
        349503: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                FetchState: function() {
                    return a
                },
                default: function() {
                    return _
                }
            });
            var i, a, l = n("446674"),
                s = n("913144");
            (i = a || (a = {}))[i.FETCHING = 0] = "FETCHING", i[i.FETCHED = 1] = "FETCHED", i[i.ERROR = 2] = "ERROR";
            let r = {},
                u = {},
                o = new Set,
                d = {};
            class c extends l.default.Store {
                getApplication(e) {
                    if (null != e) return r[e]
                }
                getApplications() {
                    return r
                }
                getApplicationFetchState(e) {
                    if (null != e) return u[e]
                }
                getApplicationFetchStates() {
                    return u
                }
                isInvalidApplication(e) {
                    return null != e && o.has(e)
                }
                getInvalidApplicationIds() {
                    return o
                }
                isFetching(e) {
                    return this.getApplicationFetchState(e) === a.FETCHING
                }
                getApplicationLastFetchTime(e) {
                    if (null != e) return d[e]
                }
            }
            c.displayName = "ApplicationDirectoryApplicationsStore";
            var _ = new c(s.default, {
                APPLICATION_DIRECTORY_FETCH_APPLICATION: function(e) {
                    let {
                        applicationId: t
                    } = e;
                    u = {
                        ...u,
                        [t]: a.FETCHING
                    }
                },
                APPLICATION_DIRECTORY_FETCH_APPLICATION_SUCCESS: function(e) {
                    let {
                        application: t
                    } = e;
                    r = {
                        ...r,
                        [t.id]: t
                    }, u = {
                        ...u,
                        [t.id]: a.FETCHED
                    };
                    let n = Date.now();
                    d = {
                        ...d,
                        [t.id]: n
                    }, o.has(t.id) && (o.delete(t.id), o = new Set(o))
                },
                APPLICATION_DIRECTORY_FETCH_APPLICATION_FAILURE: function(e) {
                    let {
                        applicationId: t,
                        isInvalidApplication: n
                    } = e;
                    u = {
                        ...u,
                        [t]: a.ERROR
                    }, n && (o.add(t), o = new Set(o))
                }
            })
        },
        412707: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                ApplicationDirectoryViews: function() {
                    return l
                },
                ApplicationDirectoryEntrypointNames: function() {
                    return s
                },
                useApplicationDirectoryHistory: function() {
                    return E
                },
                getPreviousView: function() {
                    return f
                },
                getCurrentView: function() {
                    return h
                },
                setEntrypoint: function() {
                    return T
                },
                setGuildId: function() {
                    return p
                },
                resetApplicationDirectoryHistory: function() {
                    return S
                },
                setTrackedOpenedFromExternalEntrypoint: function() {
                    return I
                }
            });
            var i, a, l, s, r = n("803182"),
                u = n("308503"),
                o = n("393414"),
                d = n("349503"),
                c = n("49111");
            (i = l || (l = {})).HOME = "home", i.SEARCH = "search", i.APPLICATION = "application", (a = s || (s = {})).EXTERNAL = "External", a.KEYBOARD_SHORTCUT = "Keyboard Shortcut", a.APPLICATION_DIRECTORY_URL = "Application Directory URL", a.APPLICATION_DIRECTORY_PROFILE_EMBED = "Application Directory Profile Embed", a.APPLICATION_DIRECTORY_UPSELL_MODAL = "Application Directory Upsell Modal", a.GUILD_HEADER_POPOUT = "Guild Header Popout", a.GUILD_SETTINGS = "Guild Settings", a.GUILD_INTEGRATION_SETTINGS = "Guild Integration Settings", a.GUILD_CONTEXT_MENU = "Guild Context Menu";
            let _ = (0, u.default)(() => ({
                    guildId: null,
                    entrypoint: null,
                    trackedOpenedFromExternalEntrypoint: !1
                })),
                E = _;

            function f() {
                let {
                    location: {
                        state: e
                    }
                } = (0, o.getHistory)();
                return null == e ? void 0 : e.previousView
            }

            function h() {
                var e, t;
                let {
                    location: {
                        pathname: n
                    }
                } = (0, o.getHistory)(), i = (0, r.matchPath)(n, {
                    path: c.Routes.APPLICATION_DIRECTORY,
                    exact: !0
                }), a = (0, r.matchPath)(n, {
                    path: c.Routes.APPLICATION_DIRECTORY_SEARCH,
                    exact: !0
                }), s = (0, r.matchPath)(n, {
                    path: [c.Routes.APPLICATION_DIRECTORY_PROFILE(":applicationId"), c.Routes.APPLICATION_DIRECTORY_PROFILE(":applicationId", ":section")],
                    exact: !0
                }), {
                    applicationId: u,
                    section: _
                } = null !== (e = null == s ? void 0 : s.params) && void 0 !== e ? e : {};
                if (null != i) return {
                    type: l.HOME
                };
                if (null != a) return {
                    type: l.SEARCH
                };
                if (null != s && null != u) {
                    let e = null === (t = d.default.getApplication(u)) || void 0 === t ? void 0 : t.name;
                    return {
                        type: l.APPLICATION,
                        applicationId: u,
                        applicationName: e,
                        section: _
                    }
                }
            }

            function T(e) {
                _.setState({
                    entrypoint: e
                })
            }

            function p(e) {
                _.setState({
                    guildId: e
                })
            }

            function S() {
                _.setState({
                    entrypoint: null,
                    guildId: null
                })
            }

            function I(e) {
                _.setState({
                    trackedOpenedFromExternalEntrypoint: e
                })
            }
        },
        750947: function(e, t, n) {
            "use strict";
            var i, a;
            n.r(t), n.d(t, {
                ApplicationDirectoryProfileSections: function() {
                    return i
                }
            }), (a = i || (i = {})).GENERAL = "GENERAL", a.IMAGES = "IMAGES", a.PREMIUM = "PREMIUM", a.PRIVACY = "PRIVACY"
        },
        195052: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("77078"),
                l = {
                    show(e) {
                        (0, a.openModalLazy)(async () => {
                            let {
                                default: t
                            } = await n.el("745705").then(n.bind(n, "745705"));
                            return n => (0, i.jsx)(t, {
                                ...n,
                                url: e
                            })
                        })
                    }
                }
        },
        352266: function(e, t, n) {
            "use strict";
            let i;
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var a = n("446674"),
                l = n("95410"),
                s = n("913144"),
                r = n("48703"),
                u = n("599110"),
                o = n("49111");
            let d = null;
            class c extends a.default.Store {
                initialize() {
                    i = null
                }
                getCurrentRevision() {
                    if (null == i) {
                        var e;
                        i = null !== (e = l.default.get("BlockedDomainRevision")) && void 0 !== e ? e : null
                    }
                    return i
                }
                getBlockedDomainList() {
                    if (null == d) {
                        var e, t;
                        d = new Set(null !== (t = null === (e = l.default.get("BlockedDomainStore")) || void 0 === e ? void 0 : e._state) && void 0 !== t ? t : [])
                    }
                    return d
                }
                isBlockedDomain(e) {
                    let t = n("874749");
                    this.getBlockedDomainList();
                    let i = (0, r.getHostname)(e),
                        a = new t.hash.sha256,
                        l = t.codec.hex.fromBits(a.update(i).finalize()),
                        s = "";
                    d.has(l) && (s = i);
                    let c = i.indexOf(".");
                    for (; - 1 !== c && "" === s;) i = i.substring(c + 1), a.reset(), l = t.codec.hex.fromBits(a.update(i).finalize()), d.has(l) && (s = i), c = i.indexOf(".");
                    return "" !== s ? (u.default.track(o.AnalyticEvents.LINK_SECURITY_CHECK_BLOCKED, {
                        blocked_domain: s
                    }), s) : null
                }
            }
            c.displayName = "BlockedDomainStore", c.persistKey = "BlockedDomainStore";
            var _ = new c(s.default, {
                BLOCKED_DOMAIN_LIST_FETCHED: function(e) {
                    let {
                        list: t,
                        revision: n
                    } = e;
                    d = null, i = null, l.default.set("BlockedDomainStore", {
                        _state: t
                    }), l.default.set("BlockedDomainRevision", n)
                }
            })
        },
        837374: function(e, t, n) {
            "use strict";
            var i, a;

            function l(e) {
                let {
                    sessionId: t,
                    userId: n,
                    applicationId: i,
                    channelId: a,
                    streamKey: l
                } = e;
                return {
                    session_id: t,
                    user_id: n,
                    application_id: i,
                    channel_id: a,
                    stream_key: l
                }
            }

            function s(e, t, n) {
                let {
                    session_id: i,
                    application_id: a,
                    channel_id: l,
                    stream_key: s
                } = e;
                return {
                    sessionId: i,
                    userId: t,
                    applicationId: a,
                    channelId: l,
                    streamKey: s,
                    source: n
                }
            }
            n.r(t), n.d(t, {
                BroadcastSourceType: function() {
                    return i
                },
                broadcastToServer: function() {
                    return l
                },
                broadcastFromServer: function() {
                    return s
                }
            }), (a = i || (i = {}))[a.GLOBAL = 0] = "GLOBAL", a[a.GUILD = 1] = "GUILD"
        },
        548578: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                MAX_CACHE_AGE_MS: function() {
                    return i
                },
                CACHE_VERSION: function() {
                    return a
                },
                getDefaultState: function() {
                    return l
                }
            });
            let i = 2592e6,
                a = "stable-50";

            function l() {
                return {
                    nonce: "",
                    useGuildVersions: !1,
                    highestLastMessageId: "0",
                    readStateVersion: 0,
                    userGuildSettingsVersion: -1,
                    userSettingsVersion: -1,
                    version: a,
                    cacheCreationDate: null,
                    privateChannelsVersion: "0",
                    apiCodeVersion: 0,
                    guildIdsRequiringDeletedIdsSync: [],
                    lastSelectedGuildId: null
                }
            }
        },
        288206: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return b
                }
            });
            var i, a, l, s = n("446674"),
                r = n("95410"),
                u = n("913144"),
                o = n("105059"),
                d = n("605250"),
                c = n("271938"),
                _ = n("42203"),
                E = n("162771"),
                f = n("299039"),
                h = n("91131"),
                T = n("70754"),
                p = n("548578");
            let S = new d.default("ClientStateStore"),
                I = h.initialState.nonce,
                A = h.initialState.useGuildVersions,
                m = h.initialState.highestLastMessageId,
                g = h.initialState.readStateVersion,
                C = h.initialState.userGuildSettingsVersion,
                N = null !== (i = h.initialState.userSettingsVersion) && void 0 !== i ? i : -1,
                O = h.initialState.cacheCreationDate,
                R = h.initialState.apiCodeVersion,
                v = null !== (a = h.initialState.privateChannelsVersion) && void 0 !== a ? a : "0",
                M = new Set(null !== (l = h.initialState.guildIdsRequiringDeletedIdsSync) && void 0 !== l ? l : []),
                y = h.initialState.lastSelectedGuildId,
                D = !1;

            function L(e) {
                null != e && 1 === f.default.compare(e, m) && (m = e)
            }

            function U() {
                m = "0", g = 0, C = -1, N = -1, v = "0", h.clear(), R = 0, M.clear()
            }
            class P extends s.default.Store {
                initialize() {
                    this.waitFor(c.default), this.syncWith([E.default], () => {
                        if (!D) return !1;
                        y = E.default.getGuildId()
                    })
                }
                persist(e) {
                    S.verbose("writing ClientStateStore (nonce: ".concat(e, ")")), null == O && (O = Date.now()), I = e, h.persist(c.default.getId(), {
                        nonce: e,
                        version: p.CACHE_VERSION,
                        useGuildVersions: A,
                        highestLastMessageId: m,
                        readStateVersion: g,
                        userGuildSettingsVersion: C,
                        userSettingsVersion: N,
                        cacheCreationDate: O,
                        privateChannelsVersion: v,
                        apiCodeVersion: R,
                        guildIdsRequiringDeletedIdsSync: Array.from(M),
                        lastSelectedGuildId: y
                    }), r.default.remove("GuildIdsRequiringDeletedIdsSync")
                }
                clear() {
                    U()
                }
                getClientState() {
                    let e = A && (0, T.isCacheEnabled)() ? Object.fromEntries(o.default.getCommittedVersions()) : {};
                    return {
                        knownGuildVersions: e,
                        highestLastMessageId: m,
                        readStateVersion: g,
                        userGuildSettingsVersion: C,
                        userSettingsVersion: N,
                        privateChannelsVersion: v,
                        apiCodeVersion: R,
                        lastSelectedGuildId: y
                    }
                }
                getGuildIdsRequiringDeletedIdsSync() {
                    return M
                }
                getSavedNonce() {
                    return I
                }
            }
            P.displayName = "ClientStateStore";
            var b = new P(u.default, {
                BACKGROUND_SYNC: function(e) {
                    for (let t of e.guilds) "partial" === t.data_mode && t.unableToSyncDeletes && M.add(t.id);
                    null != e.apiCodeVersion && (R = e.apiCodeVersion)
                },
                CONNECTION_OPEN: function(e) {
                    var t, n, i, a, l, s;
                    let {
                        guilds: r,
                        readState: u,
                        userGuildSettings: o,
                        userSettingsProto: d,
                        apiCodeVersion: c
                    } = e;
                    for (let e of (g = u.version, C = o.version, N = null !== (n = null == d ? void 0 : null === (t = d.versions) || void 0 === t ? void 0 : t.dataVersion) && void 0 !== n ? n : -1, R = c, D = !0, A = !0, r)) e.unableToSyncDeletes && M.add(e.id), e.unableToSyncDeletes && M.add(e.id), null === (i = e.channels) || void 0 === i || i.forEach(e => L(e.lastMessageId)), null === (l = e.channelUpdates) || void 0 === l || null === (a = l.writes) || void 0 === a || a.forEach(e => L(e.lastMessageId)), null === (s = e.channelTimestampUpdates) || void 0 === s || s.forEach(e => L(e.last_message_id))
                },
                CONNECTION_OPEN_SUPPLEMENTAL: function() {
                    let e = _.default.getMutablePrivateChannels();
                    for (let t in e) {
                        1 === f.default.compare(t, v) && (v = t);
                        let n = e[t].lastMessageId;
                        null != n && 1 === f.default.compare(n, v) && (v = n)
                    }
                },
                DELETED_ENTITY_IDS: function(e) {
                    M.delete(e.guild_id)
                },
                MESSAGE_CREATE: function(e) {
                    var t;
                    let {
                        message: {
                            id: n,
                            channel_id: i
                        },
                        isPushNotification: a,
                        optimistic: l
                    } = e;
                    !a && !l && (L(n), (null === (t = _.default.getChannel(i)) || void 0 === t ? void 0 : t.isPrivate()) && 1 === f.default.compare(n, v) && (v = n))
                },
                GUILD_CREATE: function(e) {
                    var t, n, i, a;
                    let {
                        guild: l
                    } = e;
                    !l.unavailable && (l.unableToSyncDeletes && M.add(l.id), null === (t = l.channels) || void 0 === t || t.forEach(e => L(e.lastMessageId)), null === (i = l.channelUpdates) || void 0 === i || null === (n = i.writes) || void 0 === n || n.forEach(e => L(e.lastMessageId)), null === (a = l.channelTimestampUpdates) || void 0 === a || a.forEach(e => L(e.last_message_id)), l.unableToSyncDeletes && M.add(l.id))
                },
                CLEAR_GUILD_CACHE: U,
                CLEAR_CACHES: U,
                LOGOUT: U,
                LOGIN: U,
                MESSAGE_ACK: function(e) {
                    let {
                        version: t,
                        ...n
                    } = e;
                    null != t ? g = t : S.log("Received null read states version", n)
                },
                CHANNEL_PINS_ACK: function(e) {
                    let {
                        version: t,
                        ...n
                    } = e;
                    null != t ? g = t : S.log("Received null read states version", n)
                },
                USER_GUILD_SETTINGS_FULL_UPDATE: function(e) {
                    let {
                        userGuildSettings: t
                    } = e;
                    for (let e of t) null != e.version && e.version > C && (C = e.version)
                },
                USER_SETTINGS_PROTO_UPDATE: function(e) {
                    let {
                        settings: t
                    } = e;
                    if (null != t.proto.versions) {
                        var n;
                        N = null !== (n = t.proto.versions.dataVersion) && void 0 !== n ? n : -1
                    }
                }
            })
        },
        91131: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                initialState: function() {
                    return r
                },
                persist: function() {
                    return u
                },
                clear: function() {
                    return o
                }
            });
            var i = n("95410"),
                a = n("548578");
            let l = "ClientStateStore",
                s = (0, a.getDefaultState)();
            s.version === a.CACHE_VERSION && null != s.cacheCreationDate && s.cacheCreationDate + a.MAX_CACHE_AGE_MS > Date.now() || (s = (0, a.getDefaultState)());
            let r = s;

            function u(e, t) {
                i.default.set(l, t)
            }

            function o() {
                i.default.remove(l)
            }
        },
        70754: function(e, t, n) {
            "use strict";

            function i() {
                return !1
            }
            n.r(t), n.d(t, {
                isCacheEnabled: function() {
                    return i
                }
            })
        },
        949719: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                ChannelRTCParticipantsIndexes: function() {
                    return a
                },
                default: function() {
                    return R
                }
            });
            var i, a, l = n("917351"),
                s = n("407846"),
                r = n("899633"),
                u = n("191225"),
                o = n("374014"),
                d = n("373469"),
                c = n("271938"),
                _ = n("950104"),
                E = n("42203"),
                f = n("42887"),
                h = n("280168"),
                T = n("697218"),
                p = n("555035"),
                S = n("800762"),
                I = n("387111"),
                A = n("246846"),
                m = n("99795"),
                g = n("49111"),
                C = n("353927");
            let N = "__EMBEDDED_ACTIVITIES__";

            function O(e) {
                switch (e.type) {
                    case m.ParticipantTypes.ACTIVITY:
                        return "\x00".concat(e.sortKey);
                    case m.ParticipantTypes.HIDDEN_STREAM:
                    case m.ParticipantTypes.STREAM:
                        return "".concat(e.userVideo ? "\x01" : "\x02").concat((0, A.default)(e.userNick, e.user), "\x02");
                    case m.ParticipantTypes.USER:
                        var t, n;
                        let i = "\x04";
                        return (null === (t = e.voiceState) || void 0 === t ? void 0 : t.selfVideo) ? i = "\x02" : (null === (n = e.voiceState) || void 0 === n ? void 0 : n.selfStream) && (i = "\x03"), "".concat(i).concat((0, A.default)(e.userNick, e.user))
                }
            }(i = a || (a = {})).VIDEO = "VIDEO", i.STREAM = "STREAM", i.FILTERED = "FILTERED", i.SPEAKING = "SPEAKING", i.ACTIVITY = "ACTIVITY";
            class R {
                get version() {
                    return this.participantByIndex.version
                }
                size(e) {
                    return this.participantByIndex.size(e)
                }
                toArray(e) {
                    return this.participantByIndex.values(e, !0)
                }
                rebuild() {
                    let e = E.default.getChannel(this.channelId);
                    if (null == e || e.type === g.ChannelTypes.GUILD_TEXT) return !1;
                    if (this.call = _.default.getCall(this.channelId), e.isPrivate() && (null == this.call || this.call.unavailable)) return !1;
                    let t = new Set(e.isGuildVocalOrThread() ? Object.keys(S.default.getVoiceStatesForChannel(e.id)) : e.recipients);
                    return t.add(c.default.getId()), d.default.getAllActiveStreamsForChannel(this.channelId).forEach(e => {
                        let {
                            ownerId: n
                        } = e;
                        return t.add(n)
                    }), this.participantByIndex.clear(), this.participants = {}, t.forEach(e => this.updateParticipant(e)), this.updateEmbeddedActivities(), !0
                }
                getParticipant(e) {
                    var t;
                    return null !== (t = this.participantByIndex.get(e)) && void 0 !== t ? t : null
                }
                updateEmbeddedActivities() {
                    return this.updateParticipant(N)
                }
                hasEmbeddedActivity() {
                    let e = this.participants[N];
                    return null != e && e.length > 0
                }
                updateParticipant(e) {
                    let t = this.participants[e],
                        n = e === N ? this._getParticipantsForEmbeddedActivities() : this._getParticipantsForUser(e);
                    return (null != t || 0 !== n.length) && (null == t || t.forEach(e => {
                        this.participantByIndex.delete(e.id)
                    }), n.forEach(e => {
                        this.participantByIndex.set(e.id, e)
                    }), this.participants[e] = n, !0)
                }
                updateParticipantSpeaking(e) {
                    var t, n;
                    return null !== (n = null === (t = this.participants[e]) || void 0 === t ? void 0 : t.reduce((t, n) => {
                        if (n.type === m.ParticipantTypes.USER) {
                            let t = (0, r.getIsSpeaking)({
                                userId: e,
                                checkIsMuted: !0
                            });
                            return t && (this.lastSpoke[e] = Date.now()), this.participantByIndex.set(n.id, {
                                ...n,
                                speaking: t,
                                lastSpoke: this.lastSpoke[e],
                                soundsharing: h.default.isSoundSharing(e)
                            }), !0
                        }
                        return t
                    }, !1)) && void 0 !== n && n
                }
                updateParticipantQuality(e, t, n) {
                    var i, a;
                    return null !== (a = null === (i = this.participants[e]) || void 0 === i ? void 0 : i.reduce((e, i) => i.type === m.ParticipantTypes.STREAM ? (this.participantByIndex.set(i.id, {
                        ...i,
                        maxResolution: t,
                        maxFrameRate: n
                    }), !0) : e, !1)) && void 0 !== a && a
                }
                _getEmbeddedActivities() {
                    let e = u.default.getEmbeddedActivitiesForChannel(this.channelId),
                        t = u.default.getSelfEmbeddedActivityForChannel(this.channelId);
                    return null == t ? e : (0, l.uniqBy)([...e, t], "application_id")
                }
                _getParticipantsForEmbeddedActivities() {
                    return this._getEmbeddedActivities().map((e, t) => {
                        var n, i, a, l;
                        return {
                            type: m.ParticipantTypes.ACTIVITY,
                            id: e.application_id,
                            activityType: e.type,
                            activityUrl: e.url,
                            participants: new Set(e.connections.keys()),
                            canJoin: (null == e ? void 0 : null === (n = e.secrets) || void 0 === n ? void 0 : n.join) != null,
                            joinSecret: null == e ? void 0 : null === (i = e.secrets) || void 0 === i ? void 0 : i.join,
                            guildId: null !== (l = null === (a = E.default.getChannel(this.channelId)) || void 0 === a ? void 0 : a.getGuildId()) && void 0 !== l ? l : null,
                            sortKey: t.toString()
                        }
                    })
                }
                _getParticipantsForUser(e) {
                    var t, n, i, a, l, s;
                    let u, _;
                    let A = [],
                        g = T.default.getUser(e);
                    if (null == g) return A;
                    let N = S.default.getVoiceStateForChannel(this.channelId, e),
                        O = S.default.getVoicePlatformForChannel(this.channelId, e),
                        R = E.default.getChannel(this.channelId),
                        v = null !== (i = null === (n = this.call) || void 0 === n ? void 0 : null === (t = n.ringing) || void 0 === t ? void 0 : t.includes(e)) && void 0 !== i && i;
                    (null != N || v) && (u = {
                        type: m.ParticipantTypes.USER,
                        ...p.default.getUserStreamData(e, null == R ? void 0 : R.getGuildId()),
                        user: g,
                        id: g.id,
                        voiceState: N,
                        voicePlatform: O,
                        speaking: (0, r.getIsSpeaking)({
                            userId: e,
                            checkIsMuted: !0
                        }),
                        lastSpoke: null !== (a = this.lastSpoke[e]) && void 0 !== a ? a : 0,
                        soundsharing: h.default.isSoundSharing(e),
                        ringing: v,
                        userNick: I.default.getName(null == R ? void 0 : R.getGuildId(), this.channelId, g),
                        localVideoDisabled: f.default.isLocalVideoDisabled(g.id)
                    }, A.push(u));
                    let M = null !== (l = d.default.getStreamForUser(e, null == R ? void 0 : R.getGuildId())) && void 0 !== l ? l : d.default.getActiveStreamForUser(e, null == R ? void 0 : R.getGuildId());
                    if (null != M && M.channelId === this.channelId) {
                        let t = (0, o.encodeStreamKey)(M),
                            n = this.getParticipant(t),
                            i = M.ownerId === c.default.getId() && d.default.isSelfStreamHidden(this.channelId),
                            a = (null == n ? void 0 : n.type) === m.ParticipantTypes.STREAM ? {
                                maxResolution: null != n.maxResolution ? {
                                    ...n.maxResolution
                                } : void 0,
                                maxFrameRate: n.maxFrameRate
                            } : null;
                        _ = {
                            ...p.default.getUserStreamData(e, null == R ? void 0 : R.getGuildId(), C.MediaEngineContextTypes.STREAM),
                            ...a,
                            type: i ? m.ParticipantTypes.HIDDEN_STREAM : m.ParticipantTypes.STREAM,
                            id: t,
                            userVideo: null !== (s = null == N ? void 0 : N.selfVideo) && void 0 !== s && s,
                            user: g,
                            userNick: I.default.getName(null == R ? void 0 : R.getGuildId(), this.channelId, g),
                            stream: M
                        }, A.push(_)
                    }
                    return A
                }
                constructor(e) {
                    this.participants = {}, this.lastSpoke = {}, this.participantByIndex = new s.default(e => {
                        var t;
                        let n = [];
                        return e.type === m.ParticipantTypes.USER && e.speaking && n.push(a.SPEAKING), e.type === m.ParticipantTypes.USER && (null === (t = e.voiceState) || void 0 === t ? void 0 : t.selfVideo) ? (n.push(a.VIDEO), !e.localVideoDisabled && n.push(a.FILTERED)) : (0, m.isStreamParticipant)(e) && (n.push(a.STREAM), e.type !== m.ParticipantTypes.HIDDEN_STREAM && null != e.streamId && n.push(a.FILTERED)), e.type === m.ParticipantTypes.ACTIVITY && n.push(a.ACTIVITY), n
                    }, O), this.channelId = e
                }
            }
        },
        191145: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return en
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("917351"),
                s = n.n(l),
                r = n("446674"),
                u = n("913144"),
                o = n("191225"),
                d = n("605250"),
                c = n("76393"),
                _ = n("374014"),
                E = n("373469"),
                f = n("271938"),
                h = n("950104"),
                T = n("42203"),
                p = n("18494"),
                S = n("280168"),
                I = n("697218"),
                A = n("555035"),
                m = n("800762"),
                g = n("949719"),
                C = n("99795"),
                N = n("49111");
            let O = new d.default("ChannelRTCStore"),
                R = Object.freeze([]),
                v = [],
                M = {},
                y = {},
                D = {},
                L = {},
                U = {},
                P = {},
                b = {},
                G = {},
                k = {},
                F = {};

            function w(e) {
                let t = M[e];
                return null == t && (t = new g.default(e), M[e] = t), t
            }

            function H(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : v;
                return t.reduce((t, n) => {
                    let i = w(n);
                    return e(i) ? (function(e) {
                        let t = w(e);
                        if (0 === t.size()) return;
                        let n = ee(e) || j(t) ? N.ChannelModes.VIDEO : N.ChannelModes.VOICE;
                        n === N.ChannelModes.VOICE ? (delete L[e], delete U[e]) : L[e] = n
                    }(n), function(e) {
                        let t = f.default.getId(),
                            n = w(e);
                        if (0 === n.size() || p.default.getVoiceChannelId() !== e) {
                            K(e, null);
                            return
                        }
                        let i = C.ParticipantSelectionTypes.NONE,
                            l = n.toArray(g.ChannelRTCParticipantsIndexes.STREAM).find(e => e.type === C.ParticipantTypes.STREAM && E.default.getActiveStreamForStreamKey(e.id));
                        if (null != l) a(l.type === C.ParticipantTypes.STREAM, "Impossible condition"), i = l.id;
                        else if (1 === n.size()) i = t;
                        else if (1 === n.size(g.ChannelRTCParticipantsIndexes.VIDEO)) {
                            let [e] = n.toArray(g.ChannelRTCParticipantsIndexes.VIDEO);
                            i = e.id
                        } else {
                            var s;
                            let e = n.toArray().find(e => e.type === C.ParticipantTypes.USER && e.id !== t && !e.ringing);
                            i = null !== (s = null == e ? void 0 : e.id) && void 0 !== s ? s : t
                        }
                        let [r] = B(e);
                        if (r !== C.ParticipantSelectionTypes.AUTO && r !== C.ParticipantSelectionTypes.NONE) {
                            let e = n.getParticipant(r);
                            (null == e || e.type === C.ParticipantTypes.STREAM && null == E.default.getActiveStreamForStreamKey(e.id)) && (r = C.ParticipantSelectionTypes.NONE)
                        }
                        K(e, [r, i])
                    }(n), !0) : t
                }, !1)
            }

            function V(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : v;
                return H(t => t.updateParticipant(e), t)
            }

            function B(e) {
                var t;
                let n = T.default.getChannel(e),
                    i = (null == n ? void 0 : n.isDM()) ? C.ParticipantSelectionTypes.AUTO : C.ParticipantSelectionTypes.NONE;
                return null !== (t = y[e]) && void 0 !== t ? t : [i, C.ParticipantSelectionTypes.NONE]
            }

            function x(e) {
                let t = y[e];
                if (null == t) return !1;
                let [n] = y[e];
                return n !== C.ParticipantSelectionTypes.NONE
            }

            function Y(e) {
                null == D[e] && (D[e] = {
                    gridDurationMs: 0,
                    focusDurationMs: 0,
                    toggleCount: 0,
                    lastUpdate: 0
                });
                let t = D[e],
                    n = performance.now(),
                    i = x(e);
                if (t.lastUpdate > 0) {
                    let e = n - t.lastUpdate;
                    t[i ? "focusDurationMs" : "gridDurationMs"] += e
                }
                t.lastUpdate = n
            }

            function K(e, t) {
                Y(e);
                let n = x(e);
                null == t ? delete y[e] : y[e] = t;
                let i = x(e);
                n !== i && D[e].toggleCount++
            }

            function j(e) {
                return e.size(g.ChannelRTCParticipantsIndexes.STREAM) > 0 || e.size(g.ChannelRTCParticipantsIndexes.VIDEO) > 0 || e.hasEmbeddedActivity()
            }

            function z(e) {
                delete M[e], delete y[e], delete L[e], delete U[e]
            }

            function W() {
                return H(e => e.rebuild(), function() {
                    let e = [],
                        t = p.default.getChannelId();
                    null != t && e.push(t);
                    let n = p.default.getVoiceChannelId();
                    null != n && !e.includes(n) && e.push(n);
                    let i = c.default.getRemoteSessionId(),
                        a = m.default.getVoiceStateForSession(f.default.getId(), i);
                    (null == a ? void 0 : a.channelId) != null && e.push(null == a ? void 0 : a.channelId), s.difference(v, e).forEach(z);
                    let l = s.difference(e, v);
                    return v = e, l
                }())
            }

            function q() {
                return H(e => e.updateEmbeddedActivities())
            }

            function Q(e) {
                let {
                    userId: t
                } = e;
                return H(e => e.updateParticipantSpeaking(t))
            }

            function X(e) {
                let {
                    user: t
                } = e;
                return V(t.id)
            }

            function Z(e) {
                let {
                    channelId: t
                } = e;
                return H(e => e.rebuild(), [t])
            }

            function J(e) {
                let {
                    channel: {
                        id: t
                    }
                } = e;
                return delete G[t], delete k[t], z(t)
            }

            function $(e) {
                let {
                    streamKey: t
                } = e, {
                    channelId: n,
                    ownerId: i
                } = (0, _.decodeStreamKey)(t);
                return V(i, [n])
            }

            function ee(e) {
                var t;
                return !!(null === (t = T.default.getChannel(e)) || void 0 === t ? void 0 : t.isGuildVocal())
            }
            class et extends r.default.Store {
                initialize() {
                    this.waitFor(E.default, f.default, h.default, T.default, o.default, p.default, S.default, I.default, A.default, m.default), this.syncWith([o.default], q), this.syncWith([c.default], W)
                }
                getParticipantsVersion(e) {
                    return w(e).version
                }
                getParticipants(e) {
                    var t;
                    return null !== (t = w(e).toArray()) && void 0 !== t ? t : R
                }
                getSpeakingParticipants(e) {
                    var t;
                    return null !== (t = w(e).toArray(g.ChannelRTCParticipantsIndexes.SPEAKING)) && void 0 !== t ? t : R
                }
                getFilteredParticipants(e) {
                    return b[e] ? w(e).toArray(g.ChannelRTCParticipantsIndexes.FILTERED) : w(e).toArray()
                }
                getVideoParticipants(e) {
                    var t;
                    return null !== (t = w(e).toArray(g.ChannelRTCParticipantsIndexes.VIDEO)) && void 0 !== t ? t : R
                }
                getStreamParticipants(e) {
                    var t;
                    return null !== (t = w(e).toArray(g.ChannelRTCParticipantsIndexes.STREAM)) && void 0 !== t ? t : R
                }
                getActivityParticipants(e) {
                    var t;
                    return null !== (t = w(e).toArray(g.ChannelRTCParticipantsIndexes.ACTIVITY)) && void 0 !== t ? t : R
                }
                getParticipant(e, t) {
                    return w(e).getParticipant(t)
                }
                getUserParticipantCount(e) {
                    let t = w(e);
                    return t.size() - t.size(g.ChannelRTCParticipantsIndexes.STREAM) - t.size(g.ChannelRTCParticipantsIndexes.ACTIVITY)
                }
                getParticipantsOpen(e) {
                    var t;
                    return null === (t = P[e]) || void 0 === t || t
                }
                getVoiceParticipantsHidden(e) {
                    var t;
                    return null !== (t = b[e]) && void 0 !== t && t
                }
                getSelectedParticipantId(e) {
                    let [t, n] = B(e);
                    return t === C.ParticipantSelectionTypes.NONE ? null : t !== C.ParticipantSelectionTypes.AUTO ? t : n === C.ParticipantSelectionTypes.NONE || n === C.ParticipantSelectionTypes.AUTO ? null : n
                }
                getSelectedParticipant(e) {
                    let t = this.getSelectedParticipantId(e);
                    return null == t ? null : w(e).getParticipant(t)
                }
                getSelectedParticipantStats(e) {
                    let t = D[e];
                    return null == t ? {} : {
                        view_mode_grid_duration_ms: Math.floor(t.gridDurationMs),
                        view_mode_focus_duration_ms: Math.floor(t.focusDurationMs),
                        view_mode_toggle_count: t.toggleCount
                    }
                }
                getMode(e) {
                    var t;
                    return null !== (t = L[e]) && void 0 !== t ? t : ee(e) ? N.ChannelModes.VIDEO : N.ChannelModes.VOICE
                }
                getLayout(e) {
                    var t, n;
                    let i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : N.AppContext.APP;
                    if (__OVERLAY__) return N.ChannelLayouts.NORMAL;
                    let a = T.default.getChannel(e),
                        l = ee(e) || (null == a ? void 0 : a.isBroadcastChannel());
                    return null !== (n = null === (t = U[e]) || void 0 === t ? void 0 : t[i]) && void 0 !== n ? n : l ? N.ChannelLayouts.NO_CHAT : N.ChannelLayouts.NORMAL
                }
                getChatOpen(e) {
                    var t;
                    return null !== (t = G[e]) && void 0 !== t && t
                }
                isFullscreenInContext() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : N.AppContext.APP;
                    return Object.values(U).some(t => t[e] === N.ChannelLayouts.FULL_SCREEN)
                }
                getStageStreamSize(e) {
                    return k[e]
                }
                getStageVideoLimitBoostUpsellDismissed(e) {
                    return F[e]
                }
            }
            et.displayName = "ChannelRTCStore";
            var en = new et(u.default, {
                CONNECTION_OPEN: W,
                CONNECTION_OPEN_SUPPLEMENTAL: W,
                THREAD_LIST_SYNC: W,
                OVERLAY_INITIALIZE: W,
                VOICE_CHANNEL_SELECT: function(e) {
                    let {
                        channelId: t,
                        currentVoiceChannelId: n
                    } = e;
                    return null != t ? delete D[t] : null != n && (delete G[n], delete k[n], Y(n)), W()
                },
                CHANNEL_SELECT: function(e) {
                    let {
                        channelId: t,
                        messageId: n
                    } = e, i = W(), a = T.default.getChannel(t);
                    return null == t || null == n || (null == a ? void 0 : a.type) !== N.ChannelTypes.GUILD_VOICE && (null == a ? void 0 : a.type) !== N.ChannelTypes.GUILD_STAGE_VOICE || G[t] ? i : (G[t] = !0, !0)
                },
                CHANNEL_RTC_ACTIVE_CHANNELS: W,
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t,
                        initial: n
                    } = e;
                    return t.reduce((e, t) => {
                        let {
                            userId: i,
                            channelId: a
                        } = t;
                        return n && null != a && !v.includes(a) ? e : V(i) || e
                    }, !1)
                },
                CHANNEL_CREATE: function(e) {
                    let {
                        channel: t
                    } = e;
                    if (t.type === N.ChannelTypes.GROUP_DM) {
                        let e = t.originChannelId;
                        if (null != e) {
                            var n, i;
                            return U[t.id] = {
                                [N.AppContext.APP]: null !== (i = null === (n = U[e]) || void 0 === n ? void 0 : n[N.AppContext.APP]) && void 0 !== i ? i : N.ChannelLayouts.NORMAL
                            }, !0
                        }
                        t.isBroadcastChannel() && (U[t.id] = {
                            [N.AppContext.APP]: N.ChannelLayouts.NO_CHAT
                        })
                    }
                    return !1
                },
                CHANNEL_DELETE: J,
                THREAD_DELETE: J,
                CALL_CREATE: Z,
                CALL_UPDATE: Z,
                CALL_DELETE: function(e) {
                    let {
                        channelId: t
                    } = e;
                    return z(t)
                },
                CHANNEL_RTC_SELECT_PARTICIPANT: function(e) {
                    let {
                        channelId: t,
                        id: n
                    } = e, i = w(t), a = null == n;
                    a && i.toArray(g.ChannelRTCParticipantsIndexes.STREAM).forEach(e => {
                        (0, C.isStreamParticipant)(e) && i.updateParticipant(e.user.id)
                    });
                    let [, l] = B(t);
                    if (K(t, [null != n ? n : C.ParticipantSelectionTypes.NONE, l]), (0, _.isStreamKey)(n)) {
                        try {
                            let {
                                ownerId: e
                            } = (0, _.decodeStreamKey)(n);
                            e === f.default.getId() && V(e, [t])
                        } catch (e) {
                            O.warn("INVALID STREAM KEY FORMAT ".concat(n), e)
                        }!j(i) && (P[t] = !1)
                    }
                },
                CHANNEL_RTC_UPDATE_LAYOUT: function(e) {
                    let {
                        channelId: t,
                        layout: n,
                        appContext: i
                    } = e;
                    U[t] = {
                        ...U[t],
                        [i]: n
                    }
                },
                CHANNEL_RTC_UPDATE_PARTICIPANTS_OPEN: function(e) {
                    let {
                        channelId: t,
                        participantsOpen: n
                    } = e;
                    P[t] = n
                },
                CHANNEL_RTC_UPDATE_VOICE_PARTICIPANTS_HIDDEN: function(e) {
                    let {
                        channelId: t,
                        voiceParticipantsHidden: n
                    } = e;
                    b[t] = n
                },
                CHANNEL_RTC_UPDATE_STAGE_STREAM_SIZE: function(e) {
                    let {
                        channelId: t,
                        large: n
                    } = e;
                    k[t] = n
                },
                CHANNEL_RTC_UPDATE_STAGE_VIDEO_LIMIT_BOOST_UPSELL_DISMISSED: function(e) {
                    let {
                        channelId: t,
                        dismissed: n
                    } = e;
                    F[t] = n
                },
                STREAM_UPDATE_SELF_HIDDEN: function(e) {
                    let {
                        channelId: t,
                        selfStreamHidden: n
                    } = e, i = f.default.getId();
                    if (n) {
                        let [e] = B(t), n = (0, _.isStreamKey)(e);
                        n && e.includes(i) && K(t, null)
                    }
                    V(i, [t])
                },
                CHANNEL_RTC_UPDATE_CHAT_OPEN: function(e) {
                    let {
                        channelId: t,
                        chatOpen: n
                    } = e;
                    G[t] = n
                },
                RTC_CONNECTION_VIDEO: function(e) {
                    let {
                        channelId: t,
                        userId: n
                    } = e;
                    return V(n, [t])
                },
                RTC_CONNECTION_PLATFORM: function(e) {
                    let {
                        channelId: t,
                        userId: n
                    } = e;
                    return V(n, [t])
                },
                AUDIO_SET_LOCAL_VIDEO_DISABLED: function(e) {
                    let {
                        userId: t
                    } = e;
                    return V(t)
                },
                MEDIA_ENGINE_VIDEO_SOURCE_QUALITY_CHANGED: function(e) {
                    let {
                        channelId: t,
                        senderUserId: n,
                        maxResolution: i,
                        maxFrameRate: a
                    } = e;
                    return H(e => e.updateParticipantQuality(n, i, a), [t])
                },
                STREAM_CLOSE: $,
                STREAM_DELETE: $,
                STREAM_WATCH: function(e) {
                    let {
                        streamKey: t
                    } = e, {
                        channelId: n,
                        ownerId: i
                    } = (0, _.decodeStreamKey)(t);
                    return V(i, [n])
                },
                SPEAKING: Q,
                GUILD_SOUNDBOARD_SOUND_PLAY_START: Q,
                GUILD_SOUNDBOARD_SOUND_PLAY_END: Q,
                USER_UPDATE: X,
                GUILD_MEMBER_UPDATE: X,
                GUILD_DELETE: function(e) {
                    let {
                        guild: t
                    } = e, n = [];
                    if (s.forEach(v, e => {
                            let i = T.default.getChannel(e);
                            (null == i || i.getGuildId() === t.id) && n.push(e)
                        }), 0 === n.length) return !1;
                    s.forEach(n, e => z(e))
                }
            })
        },
        246846: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            });

            function i(e, t) {
                return "".concat(e.toLowerCase().padEnd(32, "!")).concat(t.id)
            }
        },
        98309: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return u
                }
            });
            var i = n("316693"),
                a = n("305961"),
                l = n("49111");
            let s = [l.ChannelTypes.GUILD_TEXT, l.ChannelTypes.GUILD_VOICE, l.ChannelTypes.GUILD_ANNOUNCEMENT, l.ChannelTypes.GUILD_FORUM, l.ChannelTypes.PUBLIC_THREAD, l.ChannelTypes.PRIVATE_THREAD],
                r = i.default.combine(l.Permissions.VIEW_CHANNEL, l.Permissions.SEND_MESSAGES);

            function u(e) {
                if (null == e || !s.includes(e.type)) return [];
                let t = a.default.getGuild(e.guild_id);
                return null == t ? [] : Object.values(e.permissionOverwrites).filter(e => {
                    var n, a;
                    return 0 === e.type && (null === (a = t.roles[e.id]) || void 0 === a ? void 0 : null === (n = a.tags) || void 0 === n ? void 0 : n.guild_connections) === null && !i.default.hasAny(e.deny, r)
                }).map(e => t.roles[e.id]).filter(e => null != e)
            }
        },
        364480: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.replace(/[\s-~]+/g, "-").replace(/^-+/, "").replace(/[\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").toLowerCase()
            }
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            })
        },
        792367: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                shouldShowVoiceChannelChangeConfirmation: function() {
                    return u
                }
            });
            var i = n("76393"),
                a = n("168973"),
                l = n("271938"),
                s = n("305961"),
                r = n("800762");

            function u(e) {
                let t = a.default.disableVoiceChannelChangeAlert;
                if (t) return !1;
                let n = i.default.getRemoteSessionId(),
                    u = r.default.getVoiceStateForSession(l.default.getId(), n);
                if (null != u || !r.default.isCurrentClientInVoiceChannel() || r.default.isInChannel(e.id)) return !1;
                let o = s.default.getGuild(e.getGuildId());
                return !((null == o ? void 0 : o.afkChannelId) != null && r.default.isInChannel(o.afkChannelId)) && !0
            }
        },
        358269: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useUnreadChannelHighlights: function() {
                    return s
                },
                getUnreadChannelHighlights: function() {
                    return r
                },
                hasUnreadChannelHighlights: function() {
                    return u
                }
            });
            var i = n("249654"),
                a = n("446674"),
                l = n("483038");

            function s(e, t) {
                let n = (0, a.useStateFromStores)([l.default], () => l.default.getHighlightedMessageIds(e), [e]),
                    s = [...n];
                return s.sort(i.default.compare), s.filter(e => i.default.compare(e, t) > 0)
            }

            function r(e, t) {
                let n = [...l.default.getHighlightedMessageIds(e)];
                return n.sort(i.default.compare), n.filter(e => i.default.compare(e, t) > 0)
            }

            function u(e, t) {
                let n = l.default.getHighlightedMessageIds(e);
                for (let e of n)
                    if (i.default.compare(e, t) > 0) return !0;
                return !1
            }
        },
        481555: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useChannelHighlightsExperiment: function() {
                    return l
                },
                isChannelHighlightsExperimentEnabled: function() {
                    return s
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                kind: "user",
                id: "2022-07_channel_highlights",
                label: "Channel Highlights",
                defaultConfig: {
                    showChannelHighlights: !1
                },
                treatments: [{
                    id: 1,
                    label: "Show Channel Highlights",
                    config: {
                        showChannelHighlights: !0
                    }
                }]
            });

            function l() {
                let {
                    showChannelHighlights: e
                } = a.useExperiment({
                    location: "9a5018_1"
                }, {
                    autoTrackExposure: !1
                });
                return e
            }

            function s() {
                let {
                    showChannelHighlights: e
                } = a.getCurrentConfig({
                    location: "9a5018_2"
                }, {
                    autoTrackExposure: !1
                });
                return e
            }
        },
        483038: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return S
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("582713"),
                s = n("923959"),
                r = n("282109"),
                u = n("697218"),
                o = n("599110"),
                d = n("49111");
            let c = new Set,
                _ = {},
                E = {},
                f = {},
                h = {},
                T = {};
            class p extends i.default.Store {
                initialize() {
                    this.waitFor(r.default, s.default)
                }
                getHighlightedMessageIds(e) {
                    var t;
                    return null !== (t = _[e]) && void 0 !== t ? t : c
                }
                getTempHighlightedMessageIds(e) {
                    var t;
                    return null !== (t = h[e]) && void 0 !== t ? t : c
                }
                getHighlightedMessageIdCount(e) {
                    var t, n;
                    return null !== (n = null === (t = _[e]) || void 0 === t ? void 0 : t.size) && void 0 !== n ? n : 0
                }
                getLastFetchedMillis(e) {
                    return f[e]
                }
                isLoading(e) {
                    return "loading" === E[e]
                }
            }
            p.displayName = "ChannelHighlightsStore";
            var S = new p(a.default, {
                CHANNEL_HIGHLIGHTS_FETCH_START: function(e) {
                    let {
                        guildId: t
                    } = e;
                    E[t] = "loading"
                },
                CHANNEL_HIGHLIGHTS_FETCH_SUCCESS: function(e) {
                    let {
                        guildId: t,
                        data: n
                    } = e;
                    f[t] = Date.now();
                    let i = u.default.getCurrentUser();
                    if (null == n || null == i) return !1;
                    T[t] = n.load_id, n.channels.forEach(e => {
                        _[e.channel_id] = new Set(e.highlighted_message_ids.slice(0, 5))
                    }), o.default.track(d.AnalyticEvents.GUILD_CHANNEL_HIGHLIGHTS_LOADED, {
                        guild_id: t,
                        num_channels_highlighted: n.channels.length
                    }), delete E[t]
                },
                SIDEBAR_VIEW_CHANNEL: function(e) {
                    let {
                        guildId: t,
                        details: n
                    } = e;
                    (null == n ? void 0 : n.type) === l.SidebarOpenDetailsType.HOME && null != t && (h[t] = new Set(n.highlightMessageIds))
                }
            })
        },
        774146: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                openNewUserAgeGateModal: function() {
                    return r
                },
                openClaimAccountModal: function() {
                    return u
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("551042"),
                l = n("586391"),
                s = n("843455");

            function r(e) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: e
                    } = await n.el("377531").then(n.bind(n, "377531"));
                    return t => (0, i.jsx)(e, {
                        ...t
                    })
                }, {
                    modalKey: l.NEW_USER_AGE_GATE_MODAL_KEY,
                    onCloseRequest: s.NOOP,
                    onCloseCallback: e
                })
            }

            function u() {
                let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                    t = arguments.length > 1 ? arguments[1] : void 0;
                (0, a.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await n.el("633156").then(n.bind(n, "633156"));
                    return n => (0, i.jsx)(t, {
                        claimRequired: e,
                        ...n
                    })
                }, {
                    onCloseRequest: e ? s.NOOP : null,
                    onCloseCallback: t
                })
            }
        },
        56947: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                areClipsEnabled: function() {
                    return u
                },
                useEnableClips: function() {
                    return o
                },
                useShouldSeeClipsPremiumEarlyAccessGoLiveRoadblock: function() {
                    return d
                },
                useShouldSeeClipsPremiumEarlyAccessAnnouncementCoachmark: function() {
                    return c
                }
            });
            var i = n("862205"),
                a = n("584687"),
                l = n("18346");
            let s = (0, i.createExperiment)({
                    kind: "user",
                    id: "2022-11_clips_experiment",
                    label: "Clips Experiment",
                    defaultConfig: {
                        enableClips: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Clips without upsells",
                        config: {
                            enableClips: !0
                        }
                    }, {
                        id: 2,
                        label: "Clips with upsells",
                        config: {
                            enableClips: !0
                        }
                    }]
                }),
                r = (0, i.createExperiment)({
                    kind: "user",
                    id: "2023-09_clips_nitro_early_access",
                    label: "Clips (Nitro EA)",
                    defaultConfig: {
                        enableClips: !1,
                        enablePremiumEarlyAccessAnnouncementCoachmark: !1,
                        enablePremiumEarlyAccessGoLiveRoadblock: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Clips Nitro EA Upsells Visible",
                        config: {
                            enableClips: !1,
                            enablePremiumEarlyAccessAnnouncementCoachmark: !0,
                            enablePremiumEarlyAccessGoLiveRoadblock: !0
                        }
                    }, {
                        id: 2,
                        label: "Clips Enabled (Nitro)",
                        config: {
                            enableClips: !0,
                            enablePremiumEarlyAccessAnnouncementCoachmark: !0,
                            enablePremiumEarlyAccessGoLiveRoadblock: !1
                        }
                    }]
                });

            function u() {
                if (!(0, l.default)()) return !1;
                let {
                    enableClips: e
                } = r.getCurrentConfig({
                    location: "areClipsEnabled"
                }, {
                    autoTrackExposure: !1
                }), {
                    enableClips: t
                } = s.getCurrentConfig({
                    location: "areClipsEnabled"
                }, {
                    autoTrackExposure: !1
                }), {
                    enableDecoupledGameClipping: n
                } = a.default.getCurrentConfig({
                    location: "areClipsEnabled"
                }, {
                    autoTrackExposure: !1
                });
                return e || t || n
            }

            function o() {
                let e = (0, l.default)(),
                    {
                        enableClips: t
                    } = r.useExperiment({
                        location: "useEnableClips"
                    }, {
                        autoTrackExposure: !1
                    }),
                    {
                        enableClips: n
                    } = s.useExperiment({
                        location: "useEnableClips"
                    }, {
                        autoTrackExposure: !1
                    }),
                    {
                        enableDecoupledGameClipping: i
                    } = a.default.useExperiment({
                        location: "useEnableClips"
                    }, {
                        autoTrackExposure: !1
                    });
                return (n || t || i) && e
            }
            let d = e => {
                    let {
                        autoTrackExposure: t
                    } = e, n = (0, l.default)(), {
                        enablePremiumEarlyAccessGoLiveRoadblock: i
                    } = r.useExperiment({
                        location: "useShouldSeeClipsPremiumEarlyAccessGoLiveRoadblock"
                    }, {
                        autoTrackExposure: t && n
                    });
                    return !!n && i
                },
                c = e => {
                    let {
                        autoTrackExposure: t
                    } = e, n = (0, l.default)(), {
                        enablePremiumEarlyAccessAnnouncementCoachmark: i
                    } = r.useExperiment({
                        location: "useShouldSeeClipsPremiumEarlyAccessGoLiveRoadblock"
                    }, {
                        autoTrackExposure: t && n
                    });
                    return !!n && i
                }
        },
        18346: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                }
            });
            var i = n("42887"),
                a = n("773336"),
                l = n("353927");

            function s() {
                return a.isDesktop() && i.default.getMediaEngine().supports(l.Features.CLIPS)
            }
        },
        139514: function(e, t, n) {
            "use strict";
            var i, a;
            n.r(t), n.d(t, {
                CodedLinkType: function() {
                    return i
                }
            }), (a = i || (i = {})).INVITE = "INVITE", a.TEMPLATE = "TEMPLATE", a.BUILD_OVERRIDE = "BUILD_OVERRIDE", a.EVENT = "EVENT", a.CHANNEL_LINK = "CHANNEL_LINK", a.APP_DIRECTORY_PROFILE = "APP_DIRECTORY_PROFILE", a.ACTIVITY_BOOKMARK = "ACTIVITY_BOOKMARK", a.EMBEDDED_ACTIVITY_INVITE = "EMBEDDED_ACTIVITY_INVITE", a.GUILD_PRODUCT = "GUILD_PRODUCT", a.SERVER_SHOP = "SERVER_SHOP", a.CLYDE_PROFILE = "CLYDE_PROFILE"
        },
        312016: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                remainingPathFromDiscordHostMatch: function() {
                    return F
                },
                default: function() {
                    return w
                },
                parseURLSafely: function() {
                    return H
                },
                findCodedLink: function() {
                    return V
                }
            });
            var i, a, l, s, r, u, o = n("746379"),
                d = n("810793");
            n("355025");
            var c = n("9294");
            n("42793");
            var _ = n("337543"),
                E = n("655518"),
                f = n("253981"),
                h = n("139514"),
                T = n("49111");
            let p = /^\/([a-zA-Z0-9-]+)$/,
                S = /^\/channels\/([0-9]+|@me)\/([0-9]+)$/,
                I = /^\/(invite|template)\/([a-zA-Z0-9-]+)\/?$/,
                A = RegExp("^/events/(\\d+)(?:/)(\\d+)?((?:/)(\\d+))?"),
                m = /^\/application-directory\/([0-9-]+)\/?$/,
                g = /^\/activities\/([0-9-]+)\/?$/,
                C = /^\/channels\/([0-9]+)\/shop\/([0-9]+)$/,
                N = /^\/channels\/([0-9]+)\/shop$/,
                O = /^\/clyde-profiles\/([0-9-]+)\/?$/,
                R = G(window.GLOBAL_ENV.INVITE_HOST),
                v = G(window.GLOBAL_ENV.GUILD_TEMPLATE_HOST),
                M = G(null !== (i = window.GLOBAL_ENV.WEBAPP_ENDPOINT) && void 0 !== i ? i : "//canary.".concat(T.PRIMARY_DOMAIN)),
                y = G("//canary.".concat(T.PRIMARY_DOMAIN)),
                D = G("//ptb.".concat(T.PRIMARY_DOMAIN)),
                L = G("discordapp.com"),
                U = G("discord.com"),
                P = [E.default.escape(null !== (a = R.host) && void 0 !== a ? a : ""), E.default.escape(null !== (l = v.host) && void 0 !== l ? l : ""), E.default.escape(null !== (s = M.host) && void 0 !== s ? s : ""), E.default.escape(null !== (r = L.host) && void 0 !== r ? r : ""), E.default.escape(null !== (u = U.host) && void 0 !== u ? u : "")].filter(Boolean),
                b = RegExp("((https?://[^ ]*)|^|[^/][^/.])(".concat(P.join("|"), ")"), "g");

            function G(e) {
                if (null == e) return {
                    host: null,
                    pathPrefix: null
                };
                if (e.indexOf("/") >= 0) {
                    let t = (0, o.parse)(e, void 0, !0);
                    return {
                        host: t.host,
                        pathPrefix: t.pathname
                    }
                }
                return {
                    host: e,
                    pathPrefix: null
                }
            }

            function k(e, t) {
                var n, i, a;
                if ((null === (n = t.host) || void 0 === n ? void 0 : n.replace(/^www[.]/i, "")) !== e.host) return null;
                let l = null !== (i = t.pathname) && void 0 !== i ? i : "",
                    s = null !== (a = e.pathPrefix) && void 0 !== a ? a : "";
                if (!l.startsWith(s)) return null;
                let r = l.substring(s.length);
                return "" === r ? null : r
            }

            function F(e) {
                var t, n, i, a;
                return null !== (a = null !== (i = null !== (n = null !== (t = k(M, e)) && void 0 !== t ? t : k(y, e)) && void 0 !== n ? n : k(D, e)) && void 0 !== i ? i : k(L, e)) && void 0 !== a ? a : k(U, e)
            }

            function w(e) {
                if (null == e) return [];
                let t = new Set,
                    n = [];
                e = e.replace(b, (e, t, n, i) => null == n ? "".concat(t, "http://").concat(i) : e);
                let i = e.match(f.default.URL_REGEX);
                if (null == i) return [];
                for (let e of i) {
                    var a, l, s, r;
                    if (n.length >= 10) break;
                    let i = H(e);
                    if (null == i || null == i.pathname) continue;
                    let u = k(R, i),
                        o = k(v, i),
                        E = null !== (r = null !== (s = null !== (l = null !== (a = k(M, i)) && void 0 !== a ? a : k(y, i)) && void 0 !== l ? l : k(D, i)) && void 0 !== s ? s : k(L, i)) && void 0 !== r ? r : k(U, i),
                        f = (e, i) => {
                            !t.has(i) && (t.add(i), n.push({
                                type: e,
                                code: i
                            }))
                        };
                    if ((null == u ? void 0 : u.match(p)) != null) {
                        let e = (0, c.generateInviteKeyFromUrlParams)(u.substring(1), i.search);
                        _.default.getInvite(e), f(h.CodedLinkType.INVITE, e)
                    }(null == o ? void 0 : o.match(p)) != null && f(h.CodedLinkType.TEMPLATE, o.substring(1));
                    let T = null == E ? void 0 : E.match(I);
                    if (null != T) {
                        let e = T[1].toUpperCase();
                        if (e === h.CodedLinkType.INVITE) {
                            let e = (0, c.generateInviteKeyFromUrlParams)(T[2], i.search);
                            f(h.CodedLinkType.INVITE, e)
                        } else f(e, T[2])
                    }(null == E ? void 0 : E.match(S)) != null && f(h.CodedLinkType.CHANNEL_LINK, E.replace("/channels/", ""));
                    let P = function(e) {
                        if (null == e) return null;
                        let t = e.match(A);
                        return null != t && t.length >= 4 ? {
                            guildId: t[1],
                            guildEventId: t[2],
                            recurrenceId: t[4]
                        } : null
                    }(i.pathname);
                    null != P && f(h.CodedLinkType.EVENT, "".concat(P.guildId, "-").concat(P.guildEventId) + (null != P.recurrenceId ? "-".concat(P.recurrenceId) : ""));
                    let b = null == E ? void 0 : E.match(m);
                    if (null != b) {
                        let e = b[1];
                        f(h.CodedLinkType.APP_DIRECTORY_PROFILE, e)
                    }
                    let G = null == E ? void 0 : E.match(O);
                    if (null != G) {
                        let e = G[1];
                        f(h.CodedLinkType.CLYDE_PROFILE, e)
                    }
                    let F = null == E ? void 0 : E.match(g),
                        {
                            activityBookmarkEmbedEnabled: w
                        } = d.ActivityBookmarkEmbedExperiment.getCurrentConfig({
                            location: "78afcf_1"
                        }, {
                            autoTrackExposure: !1
                        });
                    if (null != F && w) {
                        let e = F[1];
                        f(h.CodedLinkType.ACTIVITY_BOOKMARK, e)
                    }
                    let V = null == E ? void 0 : E.match(C);
                    null != V && f(h.CodedLinkType.GUILD_PRODUCT, "".concat(V[1], "-").concat(V[2]));
                    let B = null == E ? void 0 : E.match(N);
                    null != B && f(h.CodedLinkType.SERVER_SHOP, B[1])
                }
                return n
            }

            function H(e) {
                try {
                    return (0, o.parse)(e)
                } catch (e) {
                    return null
                }
            }

            function V(e) {
                return w(e)[0]
            }
        },
        523086: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("913144"),
                a = n("492397"),
                l = {
                    openNativeAppModal(e, t) {
                        !a.CONFERENCE_MODE_ENABLED && (i.default.dispatch({
                            type: "NATIVE_APP_MODAL_OPENING",
                            code: e
                        }), n.el("43982").then(n.bind(n, "43982")).then(n => {
                            let {
                                default: i
                            } = n;
                            i.request(t, {
                                code: e
                            }).then(e => {
                                let {
                                    code: t
                                } = e;
                                return this.nativeModalOpened(t)
                            }).catch(() => this.nativeModalOpenFailed(e)).then(() => i.disconnect())
                        }))
                    },
                    nativeModalOpened(e) {
                        i.default.dispatch({
                            type: "NATIVE_APP_MODAL_OPENED",
                            code: e
                        })
                    },
                    nativeModalOpenFailed(e) {
                        i.default.dispatch({
                            type: "NATIVE_APP_MODAL_OPEN_FAILED",
                            code: e
                        })
                    }
                }
        },
        535013: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                officialApplicationIds: function() {
                    return T
                },
                ConnectionConfigurationRuleOperator: function() {
                    return a
                },
                getCallbackParamsFromURL: function() {
                    return p
                },
                getConnectionsCheckText: function() {
                    return S
                },
                isVerifiedRolesChannelVisible: function() {
                    return I
                },
                getVisibleConnectionsRole: function() {
                    return A
                },
                getCreatedAtDate: function() {
                    return m
                }
            });
            var i, a, l = n("627445"),
                s = n.n(l),
                r = n("917351"),
                u = n.n(r),
                o = n("746379"),
                d = n("429030");
            n("151426");
            var c = n("98309");
            n("10641");
            var _ = n("305961");
            n("957255");
            var E = n("214509"),
                f = n("49111"),
                h = n("782340");
            let T = ["426537812993638400", "1042836142560645130", "296023718839451649", "979802510766268446", "1031611223235637258", "512333785338216465"];

            function p(e) {
                let {
                    query: t
                } = o.parse(e, !0), {
                    code: n,
                    state: i,
                    error: a,
                    error_description: l
                } = t;
                return s(!Array.isArray(n), "Received multiple query param values for code"), s(!Array.isArray(i), "Received multiple query param values for state"), s(!Array.isArray(a), "Received multiple query param values for error"), s(!Array.isArray(l), "Received multiple query param values for error_description"), {
                    code: n,
                    state: i,
                    error: a,
                    errorDescription: l
                }
            }

            function S(e) {
                let {
                    connectionType: t,
                    connectionMetadataField: n,
                    operator: i,
                    operatorText: a,
                    value: l
                } = e, s = null, r = Math.round(Number(l));
                switch (i) {
                    case E.OperatorTypes.EQUAL:
                        s = h.default.Messages.CONNECTIONS_ROLE_POPOUT_MUST_BE, t === f.PlatformTypes.PAYPAL && n === E.MetadataFields.PAYPAL_VERIFIED && (s = h.default.Messages.CONNECTIONS_ROLE_POPOUT_MUST_HAVE_A);
                        break;
                    case E.OperatorTypes.NOT_EQUAL:
                        s = h.default.Messages.CONNECTIONS_ROLE_POPOUT_MUST_NOT_BE;
                        break;
                    case E.OperatorTypes.LESS_THAN:
                        s = h.default.Messages.CONNECTIONS_ROLE_POPOUT_MUST_HAVE_AT_MOST, r = Math.max(0, r - 1);
                        break;
                    case E.OperatorTypes.GREATER_THAN:
                        s = h.default.Messages.CONNECTIONS_ROLE_POPOUT_MUST_HAVE_AT_LEAST, r = Math.max(0, r + 1);
                        break;
                    case void 0:
                    case null:
                        return null
                }
                if (null != a && (s = a), s instanceof d.FormattedMessage && null != i) switch (t) {
                    case f.PlatformTypes.REDDIT:
                        switch (n) {
                            case E.MetadataFields.CREATED_AT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_ACCOUNT_AGE.format({
                                        days: r
                                    })
                                });
                                break;
                            case E.MetadataFields.REDDIT_TOTAL_KARMA:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_REDDIT_KARMA.format({
                                        karma: r
                                    })
                                });
                                break;
                            case E.MetadataFields.REDDIT_GOLD:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_REDDIT_GOLD
                                });
                                break;
                            case E.MetadataFields.REDDIT_MOD:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_REDDIT_MODERATOR
                                });
                                break;
                            default:
                                return null
                        }
                        break;
                    case f.PlatformTypes.STEAM:
                        switch (n) {
                            case E.MetadataFields.CREATED_AT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_ACCOUNT_AGE.format({
                                        days: r
                                    })
                                });
                                break;
                            case E.MetadataFields.STEAM_GAME_COUNT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_STEAM_GAMES.format({
                                        count: r
                                    })
                                });
                                break;
                            case E.MetadataFields.STEAM_ITEM_COUNT_TF2:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_STEAM_TF2_ITEMS.format({
                                        count: r
                                    })
                                });
                                break;
                            case E.MetadataFields.STEAM_ITEM_COUNT_DOTA2:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_STEAM_DOTA2_ITEMS.format({
                                        count: r
                                    })
                                });
                                break;
                            default:
                                return null
                        }
                        break;
                    case f.PlatformTypes.TWITTER:
                        switch (n) {
                            case E.MetadataFields.CREATED_AT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_ACCOUNT_AGE.format({
                                        days: r
                                    })
                                });
                                break;
                            case E.MetadataFields.TWITTER_VERIFIED:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_TWITTER_VERIFIED
                                });
                                break;
                            case E.MetadataFields.TWITTER_FOLLOWERS_COUNT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_TWITTER_FOLLOWERS.format({
                                        count: r
                                    })
                                });
                                break;
                            case E.MetadataFields.TWITTER_STATUSES_COUNT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_TWITTER_STATUSES.format({
                                        count: r
                                    })
                                });
                                break;
                            default:
                                return null
                        }
                        break;
                    case f.PlatformTypes.PAYPAL:
                        switch (n) {
                            case E.MetadataFields.CREATED_AT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_ACCOUNT_AGE.format({
                                        days: r
                                    })
                                });
                                break;
                            case E.MetadataFields.PAYPAL_VERIFIED:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_PAYPAL_VERIFIED
                                });
                                break;
                            default:
                                return null
                        }
                        break;
                    case f.PlatformTypes.EBAY:
                        switch (n) {
                            case E.MetadataFields.CREATED_AT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_ACCOUNT_AGE.format({
                                        days: r
                                    })
                                });
                                break;
                            case E.MetadataFields.EBAY_TOP_RATED_SELLER:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_EBAY_TOP_RATED_SELLER
                                });
                                break;
                            case E.MetadataFields.EBAY_POSITIVE_FEEDBACK_PERCENTAGE:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_EBAY_POSITIVE_FEEDBACK_PERCENTAGE.format({
                                        value: r
                                    })
                                });
                                break;
                            case E.MetadataFields.EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT.format({
                                        count: r
                                    })
                                });
                                break;
                            case E.MetadataFields.EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT.format({
                                        count: r
                                    })
                                });
                                break;
                            default:
                                return null
                        }
                        break;
                    case f.PlatformTypes.TIKTOK:
                        switch (n) {
                            case E.MetadataFields.TIKTOK_VERIFIED:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_TIKTOK_VERIFIED
                                });
                                break;
                            case E.MetadataFields.TIKTOK_FOLLOWER_COUNT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_TIKTOK_FOLLOWER_COUNT.format({
                                        count: r
                                    })
                                });
                                break;
                            case E.MetadataFields.TIKTOK_FOLLOWING_COUNT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_TIKTOK_FOLLOWING_COUNT.format({
                                        count: r
                                    })
                                });
                                break;
                            case E.MetadataFields.TIKTOK_LIKES_COUNT:
                                s = s.format({
                                    platformQuantityHook: () => h.default.Messages.CONNECTIONS_ROLE_RULE_TIKTOK_LIKES_COUNT.format({
                                        count: r
                                    })
                                });
                                break;
                            default:
                                return null
                        }
                        break;
                    default:
                        return null
                }
                return s
            }

            function I(e) {
                return Object.values(e.roles).some(e => {
                    var t;
                    return (null === (t = e.tags) || void 0 === t ? void 0 : t.guild_connections) === null
                })
            }

            function A(e) {
                var t, n;
                let {
                    guildMember: i,
                    guild: a,
                    channel: l,
                    onlyChannelConnectionRoles: r = !1
                } = e;
                if (null == i) return null;
                if (null == a && null != l && (a = _.default.getGuild(l.getGuildId())), null == a) return null;
                let o = i.roles.map(e => {
                        var t, n;
                        return null === (n = a) || void 0 === n ? void 0 : null === (t = n.roles) || void 0 === t ? void 0 : t[e]
                    }).filter(e => {
                        var t;
                        return (null == e ? void 0 : null === (t = e.tags) || void 0 === t ? void 0 : t.guild_connections) === null
                    }).sort((e, t) => (s(null != e && null != t, "roleA or roleB is null"), t.position - e.position)),
                    d = u.intersection(o, (0, c.default)(l));
                return d.length > 0 ? null !== (t = d[0]) && void 0 !== t ? t : null : r ? null : null !== (n = o[0]) && void 0 !== n ? n : null
            }

            function m(e, t) {
                if (null == e || "" === e) return null;
                let n = new Date(e);
                return !(n instanceof Date) || isNaN(n.getTime()) ? null : n.toLocaleDateString(t, {
                    month: "short",
                    day: "numeric",
                    year: "numeric"
                })
            }(i = a || (a = {}))[i.AND = 0] = "AND", i[i.OR = 1] = "OR"
        },
        214509: function(e, t, n) {
            "use strict";
            var i, a, l, s, r, u;
            n.r(t), n.d(t, {
                OperatorTypes: function() {
                    return i
                },
                MetadataFields: function() {
                    return a
                },
                GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE: function() {
                    return o
                },
                MetadataItemTypes: function() {
                    return l
                }
            }), (s = i || (i = {}))[s.EQUAL = 1] = "EQUAL", s[s.NOT_EQUAL = 2] = "NOT_EQUAL", s[s.LESS_THAN = 3] = "LESS_THAN", s[s.GREATER_THAN = 4] = "GREATER_THAN", (r = a || (a = {})).CREATED_AT = "created_at", r.REDDIT_TOTAL_KARMA = "total_karma", r.REDDIT_GOLD = "gold", r.REDDIT_MOD = "mod", r.STEAM_GAME_COUNT = "game_count", r.STEAM_ITEM_COUNT_TF2 = "item_count_tf2", r.STEAM_ITEM_COUNT_DOTA2 = "item_count_dota2", r.TWITTER_VERIFIED = "verified", r.TWITTER_FOLLOWERS_COUNT = "followers_count", r.TWITTER_STATUSES_COUNT = "statuses_count", r.PAYPAL_VERIFIED = "verified", r.EBAY_POSITIVE_FEEDBACK_PERCENTAGE = "positive_feedback_percentage", r.EBAY_TOP_RATED_SELLER = "top_rated_seller", r.EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT = "unique_negative_feedback_count", r.EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT = "unique_positive_feedback_count", r.TIKTOK_VERIFIED = "verified", r.TIKTOK_FOLLOWER_COUNT = "follower_count", r.TIKTOK_FOLLOWING_COUNT = "following_count", r.TIKTOK_LIKES_COUNT = "likes_count";
            let o = "application";
            (u = l || (l = {}))[u.INTEGER_LESS_THAN_EQUAL = 1] = "INTEGER_LESS_THAN_EQUAL", u[u.INTEGER_GREATER_THAN_EQUAL = 2] = "INTEGER_GREATER_THAN_EQUAL", u[u.INTEGER_EQUAL = 3] = "INTEGER_EQUAL", u[u.INTEGER_NOT_EQUAL = 4] = "INTEGER_NOT_EQUAL", u[u.DATETIME_LESS_THAN_EQUAL = 5] = "DATETIME_LESS_THAN_EQUAL", u[u.DATETIME_GREATER_THAN_EQUAL = 6] = "DATETIME_GREATER_THAN_EQUAL", u[u.BOOLEAN_EQUAL = 7] = "BOOLEAN_EQUAL", u[u.BOOLEAN_NOT_EQUAL = 8] = "BOOLEAN_NOT_EQUAL"
        },
        926994: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                openProviderAuthorize: function() {
                    return E
                },
                default: function() {
                    return f
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("77078"),
                l = n("619340"),
                s = n("455711"),
                r = n("938157"),
                u = n("448819"),
                o = n("128259"),
                d = n("773336"),
                c = n("214509"),
                _ = n("49111");
            async function E(e) {
                let {
                    location: t,
                    twoWayLinkType: n
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i = arguments.length > 2 ? arguments[2] : void 0, a = Math.round(screen.width / 2 - 350), s = screen.height > 640 ? Math.round(screen.height / 2 - 320) : 0, r = null;
                !(0, d.isDesktop)() && (r = window.open("".concat(window.location.protocol, "//").concat(window.location.host).concat(_.Routes.CONNECTIONS(e), "?loading=true"), "authorize", "scrollbars=yes,resizable=yes,toolbar=no,location=yes,top=".concat(s, ",left=").concat(a, ",width=").concat(700, ",height=").concat(640)));
                let u = i;
                if (null == u && e !== c.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE) {
                    let {
                        body: i
                    } = await l.default.authorize(e, {
                        location: t,
                        twoWayLinkType: n
                    });
                    u = i.url
                }
                if (null != u) return null != r ? r.location.href = u : window.open(u), u
            }

            function f(e, t, l) {
                if (e === _.PlatformTypes.LEAGUE_OF_LEGENDS && (e = _.PlatformTypes.RIOT_GAMES), e === _.PlatformTypes.CRUNCHYROLL) {
                    s.showModal([null != t ? t : "unknown"]);
                    return
                }
                if (e === _.PlatformTypes.XBOX) {
                    u.showModal([null != t ? t : "unknown"]);
                    return
                }
                if (e === _.PlatformTypes.PLAYSTATION || e === _.PlatformTypes.PLAYSTATION_STAGING) {
                    r.showModal([null != t ? t : "unknown"], e);
                    return
                }
                if (e === _.PlatformTypes.DOMAIN) {
                    (0, a.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await n.el("359113").then(n.bind(n, "359113"));
                        return n => (0, i.jsx)(e, {
                            analyticsLocation: [null != t ? t : "unknown"],
                            ...n
                        })
                    });
                    return
                }
                if (null != l) {
                    (0, o.handleClick)({
                        shouldConfirm: !0,
                        href: l,
                        onConfirm: () => {
                            E(e, {
                                location: t
                            }, l)
                        }
                    });
                    return
                }
                E(e, {
                    location: t
                })
            }
        },
        599445: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                GuildShopStorefrontExperiment: function() {
                    return a
                },
                ShowGuildRoleSubInGuildShopExperiment: function() {
                    return l
                },
                GuildShopPreviewExperiment: function() {
                    return s
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                    kind: "user",
                    id: "2023-08_server_shop_storefront",
                    label: "Server Shop Storefront",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Enables Server shop storefront",
                        config: {
                            enabled: !0
                        }
                    }]
                }),
                l = (0, i.createExperiment)({
                    kind: "user",
                    id: "2023-09_show_server_sub_in_server_shop",
                    label: "Show server sub in server shop",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Enables showing server sub in server shop",
                        config: {
                            enabled: !0
                        }
                    }]
                }),
                s = (0, i.createExperiment)({
                    kind: "user",
                    id: "2023-09_server_shop_phantom_preview",
                    label: "Server Shop Phantom Preview",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Enables Server shop phantom preview",
                        config: {
                            enabled: !0
                        }
                    }]
                })
        },
        551254: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useIsEligibleForGuildShopStorefront: function() {
                    return l
                },
                isEligibleForGuildShopStorefront: function() {
                    return s
                },
                useIsEligibleForSubscriptionsInGuildShop: function() {
                    return r
                },
                isEligibleForSubscriptionsInGuildShop: function() {
                    return u
                },
                useIsEligibleForGuildShopPreview: function() {
                    return o
                }
            });
            var i = n("287883"),
                a = n("599445");

            function l() {
                let {
                    enabled: e
                } = a.GuildShopStorefrontExperiment.useExperiment({
                    location: "adf3ea_1"
                });
                return e
            }

            function s() {
                let {
                    enabled: e
                } = a.GuildShopStorefrontExperiment.getCurrentConfig({
                    location: "adf3ea_2"
                });
                return e
            }

            function r(e, t) {
                let {
                    enabled: n
                } = a.ShowGuildRoleSubInGuildShopExperiment.useExperiment({
                    location: t
                }), l = (0, i.useGuildEligibleForGuildProducts)(e, t);
                return n && l
            }

            function u(e, t) {
                let {
                    enabled: n
                } = a.ShowGuildRoleSubInGuildShopExperiment.getCurrentConfig({
                    location: t
                }), l = (0, i.isGuildEligibleForGuildProducts)(e, t);
                return n && l
            }

            function o(e) {
                let {
                    enabled: t
                } = a.GuildShopPreviewExperiment.useExperiment({
                    location: e
                });
                return t
            }
        },
        991148: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useGuildShopPreviewVisible: function() {
                    return d
                }
            });
            var i = n("65597"),
                a = n("151426"),
                l = n("10641"),
                s = n("287883"),
                r = n("957255"),
                u = n("551254"),
                o = n("49111");

            function d(e, t) {
                var n;
                let d = (0, u.useIsEligibleForGuildShopPreview)(t),
                    c = (0, l.useIsDismissibleContentDismissed)(a.DismissibleContent.SERVER_SHOP_PHANTOM_PREVIEW),
                    _ = (0, i.default)([r.default], () => null != e && r.default.can(o.Permissions.ADMINISTRATOR, e)),
                    E = null !== (n = null == e ? void 0 : e.hasFeature(o.GuildFeatures.PRODUCTS_AVAILABLE_FOR_PURCHASE)) && void 0 !== n && n,
                    f = (0, s.useGuildEligibleForGuildProducts)(null == e ? void 0 : e.id, "useGuildShopPreviewVisible"),
                    h = [o.GuildFeatures.CREATOR_MONETIZABLE, o.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL, o.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED].some(t => (null == e ? void 0 : e.hasFeature(t)) === !0);
                return null != e && _ && !E && h && d && f && !c
            }
        },
        590260: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useGuildShopVisibleInGuild: function() {
                    return u
                },
                isGuildShopVisibleInGuild: function() {
                    return o
                }
            });
            var i = n("465869"),
                a = n("903724"),
                l = n("551254"),
                s = n("991148"),
                r = n("49111");

            function u(e) {
                let t = (0, l.useIsEligibleForGuildShopStorefront)(),
                    n = (0, l.useIsEligibleForSubscriptionsInGuildShop)(null == e ? void 0 : e.id, "channel_list"),
                    u = (0, a.useRoleSubscriptionsVisibleInGuild)(null == e ? void 0 : e.id),
                    o = (0, s.useGuildShopPreviewVisible)(e, "channel_list"),
                    {
                        shouldHideGuildPurchaseEntryPoints: d
                    } = (0, i.useShouldHideGuildPurchaseEntryPoints)(null == e ? void 0 : e.id);
                return !!t && null != e && !d && (e.hasFeature(r.GuildFeatures.PRODUCTS_AVAILABLE_FOR_PURCHASE) || n && u || o)
            }

            function o(e) {
                let t = (0, l.isEligibleForGuildShopStorefront)(),
                    n = (0, l.isEligibleForSubscriptionsInGuildShop)(null == e ? void 0 : e.id, "channel_list"),
                    i = (0, a.areRoleSubscriptionsVisibleInGuild)(null == e ? void 0 : e.id);
                return !!t && null != e && (e.hasFeature(r.GuildFeatures.PRODUCTS_AVAILABLE_FOR_PURCHASE) || n && i)
            }
        },
        250666: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                isCreatorMonetizationEnabledGuild: function() {
                    return s
                },
                default: function() {
                    return r
                }
            });
            var i = n("446674"),
                a = n("305961"),
                l = n("49111");

            function s(e) {
                return !e.hasFeature(l.GuildFeatures.CREATOR_MONETIZABLE_DISABLED) && (e.hasFeature(l.GuildFeatures.CREATOR_MONETIZABLE) || e.hasFeature(l.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL))
            }

            function r(e) {
                return (0, i.useStateFromStores)([a.default], () => {
                    let t = a.default.getGuild(e);
                    return null != t && s(t)
                })
            }
        },
        465869: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useShouldHideGuildPurchaseEntryPoints: function() {
                    return _
                },
                useShouldRestrictUpdatingCreatorMonetizationSettings: function() {
                    return E
                },
                useIsMonetizationReapplicationDisabled: function() {
                    return f
                }
            });
            var i = n("884691"),
                a = n("446674"),
                l = n("763898"),
                s = n("371358"),
                r = n("648825"),
                u = n("305961"),
                o = n("736271"),
                d = n("49111");
            let c = e => {
                    let t = (0, l.default)();
                    i.useEffect(() => {
                        if (null != e && !!e.hasFeature(d.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED)) r.default.getMonetizationRestrictionsFetchState(e.id) === r.FetchState.NOT_FETCHED && s.fetchMonetizationRestrictions(e.id, {
                            signal: t
                        })
                    }, [e, t]);
                    let n = null == e ? void 0 : e.id,
                        u = (0, a.useStateFromStoresArray)([r.default], () => {
                            var e;
                            return null !== (e = r.default.getMonetizationRestrictions(null != n ? n : "")) && void 0 !== e ? e : []
                        }),
                        o = (0, a.useStateFromStores)([r.default], () => r.default.getMonetizationRestrictionsFetchState(null != n ? n : "") === r.FetchState.FETCHING);
                    return {
                        restrictions: u,
                        restrictionsLoading: o
                    }
                },
                _ = e => {
                    var t;
                    let n = (0, a.useStateFromStores)([u.default], () => u.default.getGuild(e), [e]),
                        {
                            restrictions: i,
                            restrictionsLoading: l
                        } = c(n),
                        s = null == n ? void 0 : n.hasFeature(d.GuildFeatures.CREATOR_MONETIZABLE_DISABLED),
                        r = s || (l ? null === (t = null == n ? void 0 : n.hasFeature(d.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED)) || void 0 === t || t : (0, o.isRestrictedFromShowingGuildPurchaseEntryPoints)(i));
                    return {
                        shouldHideGuildPurchaseEntryPoints: r,
                        restrictionsLoading: l
                    }
                },
                E = e => {
                    var t;
                    let n = (0, a.useStateFromStores)([u.default], () => u.default.getGuild(e), [e]),
                        {
                            restrictions: i,
                            restrictionsLoading: l
                        } = c(n),
                        s = null == n ? void 0 : n.hasFeature(d.GuildFeatures.CREATOR_MONETIZABLE_DISABLED),
                        r = null == n ? void 0 : n.hasFeature(d.GuildFeatures.CREATOR_MONETIZABLE_PENDING_NEW_OWNER_ONBOARDING),
                        _ = s || r || (l ? null === (t = null == n ? void 0 : n.hasFeature(d.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED)) || void 0 === t || t : (0, o.isRestrictedFromUpdatingCreatorMonetizationSettings)(i));
                    return {
                        shouldRestrictUpdatingCreatorMonetizationSettings: _,
                        restrictionsLoading: l
                    }
                },
                f = e => {
                    let t = (0, a.useStateFromStores)([u.default], () => u.default.getGuild(e), [e]),
                        {
                            restrictions: n,
                            restrictionsLoading: i
                        } = c(t),
                        l = (0, o.isRestrictedFromMonetizationReapplication)(n);
                    return {
                        isMonetizationReapplicationDisabled: l,
                        restrictionsLoading: i
                    }
                }
        },
        225772: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                }
            });
            var i = n("385976"),
                a = n("867805"),
                l = n("49111");

            function s(e) {
                let t = null;
                if (null != e.emojiId && "0" !== e.emojiId) {
                    let n = i.default.getUsableCustomEmojiById(e.emojiId);
                    t = null != n ? {
                        id: n.id,
                        name: n.name,
                        animated: n.animated
                    } : null
                } else if (null != e.emojiName && "" !== e.emojiName) {
                    let n = a.default.getByName(a.default.convertSurrogateToName(e.emojiName, !1));
                    t = null != n ? {
                        id: null,
                        name: n.surrogates,
                        animated: !1
                    } : null
                }
                let n = Number(e.expiresAtMs);
                return {
                    name: "Custom Status",
                    type: l.ActivityTypes.CUSTOM_STATUS,
                    state: e.text.length > 0 ? e.text : void 0,
                    timestamps: n > 0 ? {
                        end: n
                    } : void 0,
                    emoji: t
                }
            }
        },
        676574: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                DevSettingsCategory: function() {
                    return a
                },
                default: function() {
                    return d
                }
            });
            var i, a, l = n("446674"),
                s = n("913144");
            (i = a || (a = {}))[i.MESSAGING = 0] = "MESSAGING", i[i.OVERLAYS = 1] = "OVERLAYS";
            let r = {
                    visual_effect_view_overrides: {
                        label: "Blur view overrides for designers to test with",
                        category: a.OVERLAYS
                    },
                    obscure_blur_effect_enabled: {
                        label: "Force obscure blur effect on for message media and embeds",
                        category: a.OVERLAYS
                    },
                    explicit_media_redaction_ignore_pending_scan: {
                        label: "Ignore pending scan on explicit media",
                        category: a.OVERLAYS
                    },
                    upload_fail_50: {
                        label: "Uploads: Fail 50% of uploads with 500 status after a 1 second delay",
                        category: a.MESSAGING
                    },
                    send_fail_100: {
                        label: "Send: Fail with 500 status",
                        category: a.MESSAGING
                    }
                },
                u = {};
            class o extends l.default.DeviceSettingsStore {
                getUserAgnosticState() {
                    return {
                        toggleStates: u
                    }
                }
                initialize(e) {
                    for (var t in r) {
                        var n, i;
                        let a = null !== (i = null == e ? void 0 : null === (n = e.toggleStates) || void 0 === n ? void 0 : n[t]) && void 0 !== i && i;
                        u[t] = a
                    }
                }
                get(e) {
                    var t;
                    return null !== (t = u[e]) && void 0 !== t && t
                }
                set(e, t) {
                    return u[e] = t, t
                }
                all() {
                    return u
                }
                allByCategory(e) {
                    return Object.entries(r).filter(t => {
                        let [n, i] = t;
                        return i.category === e
                    }).map(e => {
                        let [t, n] = e;
                        return [t, u[t], n]
                    })
                }
            }
            o.displayName = "DevToolsDevSettingsStore", o.persistKey = "DevToolsDevSettingsStore";
            var d = new o(s.default, {
                DEV_TOOLS_DEV_SETTING_SET: function(e) {
                    u[e.toggle] = e.value
                }
            })
        },
        721423: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                MAX_NUM_SUGGESTED_STICKERS: function() {
                    return s
                },
                MAX_NUM_USER_INPUT_WORDS: function() {
                    return r
                },
                DELAY_BEFORE_SUGGESTIONS_MS: function() {
                    return u
                },
                SUGGESTIONS_SHOWED_INSTRUMENTATION_RATE_LIMIT_MS: function() {
                    return o
                },
                REQUEST_THROTTLE_DURATION_MS: function() {
                    return d
                }
            });
            var i, a, l = n("49111");
            let s = 4,
                r = 5,
                u = 350,
                o = 1e3 * l.Durations.MINUTE,
                d = 1e3 * l.Durations.MINUTE * 2;
            (i = a || (a = {}))[i.STICKER = 0] = "STICKER"
        },
        171209: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                removePunctuation: function() {
                    return d
                },
                getQueriesFromUserInput: function() {
                    return c
                },
                throttledTrackExpressionSuggestionDisplayed: function() {
                    return _
                }
            });
            var i = n("369470"),
                a = n.n(i),
                l = n("599110"),
                s = n("721423"),
                r = n("49111");
            let u = /(!|\.|;|,|-|—|–|\?|"|')/g,
                o = /(\n|\t|\s)/g,
                d = e => e.replace(u, "").replace(o, " "),
                c = e => null == e ? [] : d(e).trim().split(" "),
                _ = a(e => {
                    l.default.track(r.AnalyticEvents.AUTO_SUGGEST_DISPLAYED, {
                        suggestion_trigger: e
                    })
                }, s.SUGGESTIONS_SHOWED_INSTRUMENTATION_RATE_LIMIT_MS, {
                    leading: !0,
                    trailing: !1
                })
        },
        565298: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return r
                },
                getGuildIdForGenericRedirect: function() {
                    return u
                }
            });
            var i = n("446674"),
                a = n("162771"),
                l = n("379881"),
                s = n("49111");

            function r(e) {
                let t = (0, i.useStateFromStores)([a.default], () => a.default.getGuildId());
                return null != t ? t : e.getGuildId()
            }

            function u(e) {
                return a.default.getGuildId() !== s.FAVORITES ? e.getGuildId() : l.default.isFavorite(e.id) || e.isThread() && l.default.isFavorite(e.parent_id) ? s.FAVORITES : e.getGuildId()
            }
        },
        700507: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                disconnectRemote: function() {
                    return I
                },
                connectToRemote: function() {
                    return A
                },
                remoteVoiceStateUpdate: function() {
                    return m
                },
                remoteDisconnect: function() {
                    return g
                },
                remoteAudioSettingsUpdate: function() {
                    return C
                },
                fetchDevices: function() {
                    return O
                },
                persistSelectedDeviceId: function() {
                    return R
                },
                transferToPlayStation: function() {
                    return y
                }
            });
            var i = n("30945"),
                a = n("363747"),
                l = n("872717"),
                s = n("913144"),
                r = n("404118"),
                u = n("504385"),
                o = n("945956"),
                d = n("235660"),
                c = n("599110"),
                _ = n("286235"),
                E = n("893243"),
                f = n("76393"),
                h = n("780338"),
                T = n("49111"),
                p = n("782340");

            function S(e, t) {
                var n, i;
                c.default.track(T.AnalyticEvents.REMOTE_COMMAND_SENT, {
                    command_type: e,
                    remote_platform: null === (i = d.default.getSessionById(t)) || void 0 === i ? void 0 : null === (n = i.clientInfo) || void 0 === n ? void 0 : n.os
                })
            }
            async function I() {
                let e = f.default.getAwaitingRemoteSessionInfo(),
                    t = null == e ? void 0 : e.nonce;
                s.default.dispatch({
                    type: "REMOTE_SESSION_DISCONNECT"
                });
                let n = [];
                ((null == e ? void 0 : e.type) === T.PlatformTypes.PLAYSTATION || (null == e ? void 0 : e.type) === T.PlatformTypes.PLAYSTATION_STAGING) && (null == e ? void 0 : e.commandId) != null && (null == e ? void 0 : e.deviceId) != null && n.push(M(e.type, e.deviceId, e.commandId)), null != t && n.push(function(e) {
                    return l.default.delete({
                        url: T.Endpoints.CONNECT_REQUEST(e)
                    })
                }(t));
                try {
                    await Promise.all(n)
                } catch (e) {
                    r.default.show({
                        title: p.default.Messages.CANCEL_TRANSFER_VOICE_FAILED_TITLE,
                        body: p.default.Messages.CANCEL_TRANSFER_VOICE_FAILED_BODY
                    })
                }
            }

            function A(e) {
                s.default.dispatch({
                    type: "REMOTE_SESSION_CONNECT",
                    sessionId: e
                })
            }

            function m(e, t) {
                let {
                    selfMute: n,
                    selfDeaf: i
                } = t;
                s.default.dispatch({
                    type: "REMOTE_COMMAND",
                    sessionId: e,
                    payload: {
                        type: "VOICE_STATE_UPDATE",
                        self_mute: n,
                        self_deaf: i
                    }
                }), S("VOICE_STATE_UPDATE", e)
            }

            function g(e) {
                s.default.dispatch({
                    type: "REMOTE_COMMAND",
                    sessionId: e,
                    payload: {
                        type: "DISCONNECT"
                    }
                }), S("DISCONNECT", e), I()
            }

            function C(e, t, n, i) {
                let a = (0, u.coerceAudioContextForProto)(n);
                null != a && (s.default.dispatch({
                    type: "REMOTE_COMMAND",
                    sessionId: e,
                    payload: {
                        type: "AUDIO_SETTINGS_UPDATE",
                        context: a,
                        id: t,
                        ...i
                    }
                }), S("AUDIO_SETTINGS_UPDATE", e))
            }
            async function N() {
                let e;
                try {
                    let t = null != o.default.getRTCConnectionId() ? a.ConsoleHandoffType.TRANSFER_EXISTING_CALL : a.ConsoleHandoffType.CREATE_NEW_CALL,
                        n = await l.default.post({
                            url: T.Endpoints.CONNECT_REQUEST_CREATE,
                            body: {
                                analytics_properties: {
                                    handoff_type: t
                                }
                            }
                        });
                    e = n.body.nonce
                } catch (e) {
                    _.default.captureException(e)
                }
                return e
            }
            async function O(e) {
                let t;
                s.default.dispatch({
                    type: "GAME_CONSOLE_FETCH_DEVICES_START",
                    platform: e
                });
                try {
                    t = await l.default.get({
                        url: T.Endpoints.CONSOLES_DEVICES(e)
                    })
                } catch (t) {
                    throw s.default.dispatch({
                        type: "GAME_CONSOLE_FETCH_DEVICES_FAIL",
                        platform: e,
                        error: t
                    }), t
                }
                let n = t.body.devices;
                return s.default.dispatch({
                    type: "GAME_CONSOLE_FETCH_DEVICES_SUCCESS",
                    platform: e,
                    devices: n
                }), n
            }

            function R(e, t) {
                s.default.dispatch({
                    type: "GAME_CONSOLE_SELECT_DEVICE",
                    platform: e,
                    deviceId: t
                })
            }
            async function v(e, t, n, a) {
                let r;
                s.default.dispatch({
                    type: "GAME_CONSOLE_DEVICE_SEND_COMMAND_START",
                    platform: e
                });
                try {
                    r = await l.default.post({
                        url: T.Endpoints.CONSOLES_DEVICES_COMMANDS(e, t),
                        body: {
                            command: i.ConsoleCommands.CONNECT_VOICE,
                            channel_id: n.id,
                            guild_id: n.guild_id,
                            nonce: a
                        }
                    })
                } catch (t) {
                    throw s.default.dispatch({
                        type: "GAME_CONSOLE_DEVICE_SEND_COMMAND_FAIL",
                        platform: e,
                        error: t
                    }), t
                }
                let u = r.body.id;
                return s.default.dispatch({
                    type: "WAIT_FOR_REMOTE_SESSION",
                    sessionType: e,
                    nonce: a,
                    channelId: n.id,
                    deviceId: t,
                    commandId: u
                }), u
            }
            async function M(e, t, n) {
                s.default.dispatch({
                    type: "GAME_CONSOLE_DEVICE_CANCEL_COMMAND_START",
                    platform: e,
                    deviceId: t,
                    commandId: n
                });
                try {
                    await l.default.delete({
                        url: T.Endpoints.CONSOLES_DEVICES_COMMAND(e, t, n)
                    })
                } catch (i) {
                    throw s.default.dispatch({
                        type: "GAME_CONSOLE_DEVICE_CANCEL_COMMAND_FAIL",
                        platform: e,
                        deviceId: t,
                        commandId: n,
                        error: i
                    }), i
                }
                s.default.dispatch({
                    type: "GAME_CONSOLE_DEVICE_CANCEL_COMMAND_SUCCESS",
                    platform: e,
                    deviceId: t,
                    commandId: n
                })
            }
            async function y(e, t, n) {
                await E.default.maybeShowPTTAlert(e), await I();
                let i = await N();
                await v(e, t, n, i), (0, h.default)(n.id, e)
            }
        },
        893243: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            });
            var i = n("855164").default
        },
        171644: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                XBOX_URL_BASE: function() {
                    return u
                },
                XBOX_APP_WEB_LINK: function() {
                    return o
                },
                XBOX_LINK_DEST_ORIGIN: function() {
                    return d
                },
                XBOX_CLIENT_SCOPES: function() {
                    return c
                },
                PLAYSTATION_LINK_DEST_ORIGIN: function() {
                    return _
                },
                PLAYSTATION_CLIENT_SCOPES: function() {
                    return E
                },
                XBOX_HANDOFF_SEARCH_PARAMS: function() {
                    return f
                },
                GameConsoleTypes: function() {
                    return l
                },
                GAME_CONSOLE_SESSIONS: function() {
                    return h
                },
                GameConsoleCommandResultErrorCodes: function() {
                    return s
                },
                USER_ACTION_REQUIRED_ERROR_CODES: function() {
                    return T
                },
                GAME_CONSOLE_ALERT_MODAL_LOCATION: function() {
                    return p
                }
            });
            var i, a, l, s, r = n("49111");
            let u = "xbox://communitylinking/donut/audio",
                o = "https://www.xbox.com/en-US/apps/xbox-app-for-mobile",
                d = "https://login.live.com",
                c = [r.OAuth2Scopes.VOICE, r.OAuth2Scopes.DM_CHANNELS_READ, r.OAuth2Scopes.GUILDS, r.OAuth2Scopes.GUILDS_MEMBERS_READ, r.OAuth2Scopes.IDENTIFY, r.OAuth2Scopes.CONNECTIONS],
                _ = "https://my.account.sony.com",
                E = c,
                f = e => {
                    let {
                        guildId: t,
                        channelName: n,
                        guildName: i,
                        channelId: a,
                        muted: l,
                        deafened: s,
                        nonce: r
                    } = e, u = {
                        channelid: a,
                        guildid: t,
                        channelname: n,
                        guildname: i,
                        muted: String(l),
                        deafened: String(s)
                    };
                    return null != r && (u.nonce = r), new URLSearchParams(u)
                };
            (i = l || (l = {})).PLAYSTATION = "playstation", i.XBOX = "xbox";
            let h = new Set([l.XBOX, l.PLAYSTATION]);
            r.ActivityGamePlatforms.XBOX, r.ActivityGamePlatforms.PS5, (a = s || (s = {}))[a.CONSOLE_DEVICE_PASSCODE_UNLOCK_REQUIRED = 27e4] = "CONSOLE_DEVICE_PASSCODE_UNLOCK_REQUIRED", a[a.CONSOLE_DEVICE_UNAVAILABLE = 270001] = "CONSOLE_DEVICE_UNAVAILABLE", a[a.CONSOLE_DEVICE_UNVAILABLE_FROM_OTHER_USERS = 270002] = "CONSOLE_DEVICE_UNVAILABLE_FROM_OTHER_USERS", a[a.CONSOLE_DEVICE_COMMUNICATION_RESTRICTED = 270003] = "CONSOLE_DEVICE_COMMUNICATION_RESTRICTED", a[a.CONSOLE_DEVICE_INVALID_POWER_MODE = 270004] = "CONSOLE_DEVICE_INVALID_POWER_MODE", a[a.CONSOLE_DEVICE_ACCOUNT_LINK_ERROR = 270005] = "CONSOLE_DEVICE_ACCOUNT_LINK_ERROR", a[a.CONSOLE_DEVICE_MAX_MEMBERS_REACHED = 270006] = "CONSOLE_DEVICE_MAX_MEMBERS_REACHED", a[a.CONSOLE_DEVICE_BAD_COMMAND = 270007] = "CONSOLE_DEVICE_BAD_COMMAND";
            let T = new Set([s.CONSOLE_DEVICE_PASSCODE_UNLOCK_REQUIRED]),
                p = "console error alert"
        },
        780338: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return u
                }
            });
            var i = n("42203"),
                a = n("945956"),
                l = n("235660"),
                s = n("599110"),
                r = n("49111");

            function u(e, t, n) {
                var u, o;
                s.default.track(r.AnalyticEvents.VOICE_CALL_TRANSFER, {
                    source_platform: null != n ? null === (u = l.default.getSessionById(n)) || void 0 === u ? void 0 : u.clientInfo.os : "discord_client",
                    guild_id: null === (o = i.default.getChannel(e)) || void 0 === o ? void 0 : o.guild_id,
                    channel_id: e,
                    rtc_connection_id: a.default.getRTCConnectionId(),
                    target_platform: t
                })
            }
        },
        129978: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                SelfDismissibleAlertBody: function() {
                    return u
                }
            });
            var i = n("37983"),
                a = n("884691"),
                l = n("446674"),
                s = n("76393"),
                r = n("347279");

            function u(e) {
                let {
                    body: t,
                    dismissCallback: n,
                    errorCodeMessage: u
                } = e, o = (0, l.useStateFromStores)([s.default], () => s.default.getRemoteSessionId());
                return (a.useEffect(() => {
                    null != o && n()
                }, [o, n]), null == u) ? (0, i.jsx)(i.Fragment, {
                    children: t
                }) : (0, i.jsxs)(i.Fragment, {
                    children: [t, (0, i.jsx)("div", {
                        className: r.errorCodeMessage,
                        children: u
                    })]
                })
            }
        },
        855164: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return S
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("151426"),
                l = n("551042"),
                s = n("135230"),
                r = n("926994"),
                u = n("10641"),
                o = n("42887"),
                d = n("599110"),
                c = n("129978"),
                _ = n("171644"),
                E = n("49111"),
                f = n("782340"),
                h = n("274520");
            let T = "game_console_alert_modal",
                p = "game_console_ptt_alert_modal";
            var S = {
                maybeShowPTTAlert(e) {
                    if (o.default.getMode() !== E.InputModes.PUSH_TO_TALK || (0, u.isDismissibleContentDismissed)(a.DismissibleContent.CONSOLE_PTT_DISABLE_ALERT)) return Promise.resolve();
                    let t = {
                            [E.PlatformTypes.XBOX]: f.default.Messages.PTT_NOT_SUPPORTED_XBOX,
                            [E.PlatformTypes.PLAYSTATION]: f.default.Messages.PTT_NOT_SUPPORTED_PLAYSTATION,
                            [E.PlatformTypes.PLAYSTATION_STAGING]: f.default.Messages.PTT_NOT_SUPPORTED_PLAYSTATION
                        },
                        n = t[e];
                    return null == n ? Promise.resolve() : new Promise(e => {
                        let t = () => {
                                (0, u.markDismissibleContentAsDismissed)(a.DismissibleContent.CONSOLE_PTT_DISABLE_ALERT), e()
                            },
                            r = e => (0, i.jsx)(s.default, {
                                ...e,
                                title: n,
                                body: f.default.Messages.PTT_NOT_SUPPORTED_ALERT_BODY,
                                onConfirm: t,
                                titleClassName: h.title
                            });
                        (0, l.hasModalOpen)(p) ? (0, l.updateModal)(p, r) : (0, l.openModal)(r, {
                            modalKey: p
                        })
                    })
                },
                showSelfDismissableAlert(e) {
                    let {
                        title: t,
                        body: n,
                        errorCodeMessage: a,
                        reconnectPlatformType: u
                    } = e, o = (0, i.jsx)(c.SelfDismissibleAlertBody, {
                        body: n,
                        errorCodeMessage: a,
                        dismissCallback: () => (0, l.closeModal)(T)
                    });

                    function f() {
                        null != u && ((0, r.default)(u), d.default.track(E.AnalyticEvents.ACCOUNT_LINK_STEP, {
                            previous_step: _.GAME_CONSOLE_ALERT_MODAL_LOCATION,
                            current_step: "desktop oauth",
                            platform_type: u
                        }))
                    }
                    let h = e => (0, i.jsx)(s.default, {
                        ...e,
                        title: t,
                        body: o,
                        onConfirm: f
                    });
                    (0, l.hasModalOpen)(T) ? (0, l.updateModal)(T, h) : (0, l.openModal)(h, {
                        modalKey: T
                    })
                }
            }
        },
        791160: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("546463"),
                a = n("49111");

            function l(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2],
                    l = i.default.getGame(e.applicationId),
                    s = e.getPrice(),
                    r = e.getPrice(null, !1),
                    u = {
                        sku_id: e.id,
                        sku_type: e.type,
                        application_id: e.applicationId,
                        application_name: null != l ? l.name : null,
                        store_title: e.name,
                        distribution_type: e.premium ? "premium" : "distribution"
                    },
                    o = null;
                n && (o = {
                    price: null != s ? s.amount : null,
                    regular_price: null != r ? r.amount : null,
                    currency: null != s ? s.currency : null
                });
                let d = null;
                return t && (d = {
                    has_single_player: e.hasFeature(a.SKUFeatureTypes.SINGLE_PLAYER),
                    has_online_multiplayer: e.hasFeature(a.SKUFeatureTypes.ONLINE_MULTIPLAYER),
                    has_local_multiplayer: e.hasFeature(a.SKUFeatureTypes.LOCAL_MULTIPLAYER),
                    has_pvp_features: e.hasFeature(a.SKUFeatureTypes.PVP),
                    has_local_coop: e.hasFeature(a.SKUFeatureTypes.LOCAL_COOP),
                    has_online_coop: e.hasFeature(a.SKUFeatureTypes.ONLINE_COOP),
                    has_cross_platform: e.hasFeature(a.SKUFeatureTypes.CROSS_PLATFORM),
                    has_rich_presence: e.hasFeature(a.SKUFeatureTypes.RICH_PRESENCE),
                    has_game_invites: e.hasFeature(a.SKUFeatureTypes.DISCORD_GAME_INVITES),
                    has_spectator_mode: e.hasFeature(a.SKUFeatureTypes.SPECTATOR_MODE),
                    has_controller_support: e.hasFeature(a.SKUFeatureTypes.CONTROLLER_SUPPORT),
                    has_cloud_saves: e.hasFeature(a.SKUFeatureTypes.CLOUD_SAVES),
                    has_secure_networking: e.hasFeature(a.SKUFeatureTypes.SECURE_NETWORKING)
                }), {
                    ...u,
                    ...o,
                    ...d
                }
            }
        },
        509065: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("913144");
            class a {
                static flush(e, t) {
                    for (let n of a.batchers) null != n.action && (null == e || n.shouldFlush(e, t)) && n.flush()
                }
                flush() {
                    let {
                        action: e
                    } = this;
                    this.action = null, null != e && i.default.dispatch(e).catch(t => this.socket.resetSocketOnError(t, e.type))
                }
                constructor(e, t, n) {
                    this.socket = e, this.action = null, this.shouldFlush = n, this.add = e => {
                        this.action = t(this.action, e)
                    }, a.batchers.push(this)
                }
            }
            a.batchers = []
        },
        265912: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            });
            var i = 16381
        },
        799600: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("605250"),
                s = n("197881");
            let {
                NativeModules: r
            } = {}, u = [];
            class o {
                static canUse() {
                    return !1
                }
                bindWebSocket(e) {}
                feed(e) {}
                dataReady(e) {
                    this._onDataReady = e
                }
                constructor(e) {
                    this._onDataReady = null, this._gatewayEncoding = e
                }
            }
            u.push(class extends o {
                static canUse() {
                    return void 0 !== window.Uint8Array
                }
                getAlgorithm() {
                    return "zlib-stream"
                }
                usesLegacyCompression() {
                    return !1
                }
                feed(e) {
                    let t = this._pako,
                        n = this._inflate;
                    if (null == n) throw Error("Trying to feed to closed compression adapter");
                    let i = this._onDataReady;
                    if (null === i) throw Error("Cannot feed unless a data ready callback is registered.");
                    if (e instanceof ArrayBuffer) {
                        let i = new DataView(e),
                            a = i.byteLength >= 4 && 65535 === i.getUint32(i.byteLength - 4, !1);
                        n.push(e, !!a && t.Z_SYNC_FLUSH)
                    } else throw Error("Expected array buffer, but got " + typeof e)
                }
                close() {
                    null != this._inflate && (this._inflate.onEnd = null, this._inflate.chunks = []), this._inflate = null
                }
                handleFlushEnd(e) {
                    let t;
                    let n = this._pako,
                        i = this._inflate;
                    if (null == i) {
                        new(0, l.default)("GatewayCompressionHandler").error("flush end happened on closed compression adapter");
                        return
                    }
                    if (e !== n.Z_OK) throw Error("zlib error, ".concat(e, ", ").concat(i.strm.msg));
                    let {
                        chunks: a
                    } = i, s = a.length;
                    if (this._gatewayEncoding.wantsString()) t = s > 1 ? a.join("") : a[0];
                    else if (s > 1) {
                        let e = 0;
                        for (let t = 0; t < s; t++) e += a[t].length;
                        let n = new Uint8Array(e),
                            i = 0;
                        for (let e = 0; e < s; e++) {
                            let t = a[e];
                            n.set(t, i), i += t.length
                        }
                        t = n
                    } else t = a[0];
                    a.length = 0, null != this._onDataReady && this._onDataReady(t)
                }
                constructor(e) {
                    super(e), this._pako = n("181905");
                    let t = this._pako,
                        i = this._inflate = new t.Inflate({
                            chunkSize: 65536,
                            to: this._gatewayEncoding.wantsString() ? "string" : ""
                        });
                    i.onEnd = this.handleFlushEnd.bind(this)
                }
            }), u.push(class extends o {
                static canUse() {
                    return !0
                }
                getAlgorithm() {
                    return null
                }
                usesLegacyCompression() {
                    return !0
                }
                feed(e) {
                    let t = this._pako;
                    if (e instanceof ArrayBuffer && this._gatewayEncoding.wantsString() && (e = t.inflate(e, {
                            to: "string"
                        })), null == this._onDataReady) throw Error("Cannot feed unless a data ready callback is registered.");
                    this._onDataReady(e)
                }
                close() {}
                constructor(...e) {
                    super(...e), this._pako = n("181905")
                }
            }), u.push(class extends o {
                static canUse() {
                    return !1
                }
                bindWebSocket(e) {
                    this.close(), this._socketId = e._socketId, r.DCDCompressionManager.enableZlibStreamSupport(this._socketId)
                }
                getAlgorithm() {
                    return "zlib-stream"
                }
                usesLegacyCompression() {
                    return !1
                }
                feed(e) {
                    if (null == this._onDataReady) throw Error("Cannot feed unless a data ready callback is registered.");
                    null !== e && this._onDataReady(e)
                }
                close() {
                    let e = this._socketId;
                    this._socketId = null, null !== e && r.DCDCompressionManager.disableZlibStreamSupport(e)
                }
                constructor(e) {
                    super(e), this._socketId = null
                }
            });
            class d extends o {
                static canUse() {
                    return !0
                }
                getAlgorithm() {
                    return null
                }
                usesLegacyCompression() {
                    return !1
                }
                feed(e) {
                    if (null == this._onDataReady) throw Error("Cannot feed unless a data ready callback is registered.");
                    this._onDataReady(e)
                }
                close() {}
            }
            u.push(d);
            let c = a.find(u, e => e.canUse());
            s.ProcessArgs.isDiscordGatewayPlaintextSet() && (c = d);
            var _ = c
        },
        619443: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return G
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("723939"),
                u = n("605250"),
                o = n("374014"),
                d = n("374363"),
                c = n("271938"),
                _ = n("950104"),
                E = n("42203"),
                f = n("260320"),
                h = n("42887"),
                T = n("590401"),
                p = n("18494"),
                S = n("101125"),
                I = n("205817"),
                A = n("447214"),
                m = n("518916"),
                g = n("571420"),
                C = n("399010"),
                N = n("49111"),
                O = n("397336");
            (0, m.setDispatchSocketMessageFunction)(C.default);
            let R = new u.default("ConnectionStore"),
                v = 0,
                M = null;

            function y() {
                m.localVoiceState.update()
            }

            function D() {
                return m.localVoiceState.update(), m.localLobbyVoiceStates.update(), !1
            }

            function L() {
                return m.localPresenceState.update(), !1
            }

            function U() {
                return m.localLobbyVoiceStates.update(), !1
            }

            function P(e) {
                m.socket.isSessionEstablished() && m.socket.streamDelete(e)
            }
            class b extends l.default.Store {
                initialize() {
                    this.waitFor(c.default, p.default, E.default, _.default, f.default, d.default), this.syncWith([h.default], D), this.syncWith([S.default], L)
                }
                getSocket() {
                    return m.socket
                }
                isTryingToConnect() {
                    return !m.socket.isClosed()
                }
                isConnected() {
                    return m.socket.isSessionEstablished()
                }
                isConnectedOrOverlay() {
                    return m.socket.isSessionEstablished() || __OVERLAY__
                }
                lastTimeConnectedChanged() {
                    return v
                }
            }
            b.displayName = "GatewayConnectionStore";
            var G = new b(s.default, {
                START_SESSION: function() {
                    return m.socket.isClosed() ? (R.verbose("Socket is reconnecting because of starting new session"), m.socket.connect()) : (R.verbose("Socket is not reconnecting during a new session because it is not closed"), !1)
                },
                LOGIN_SUCCESS: function() {
                    return R.verbose("session refresh dispatched", {
                        isEstablished: m.socket.isSessionEstablished()
                    }), !!m.socket.isSessionEstablished() && (m.socket.close(), m.socket.connect())
                },
                LOGOUT: function(e) {
                    e.isSwitchingAccount && m.localPresenceState.handleAccountSwitch(), R.verbose("Closing socket because of logout"), m.socket.close()
                },
                CLEAR_CACHES: function(e) {
                    return m.socket.close(), m.socket.clearDispatchQueue(), m.socket.connect(), !1
                },
                CONNECTION_OPEN: function(e) {
                    v = Date.now(), M = e.sessionId, m.localPresenceState.handleConnectionOpen();
                    let t = {},
                        n = p.default.getVoiceChannelId();
                    if (null != n) {
                        let e = E.default.getChannel(n);
                        null != e && (t = {
                            guildId: e.getGuildId(),
                            channelId: n
                        })
                    }
                    m.localVoiceState.update(t, !0), m.localLobbyVoiceStates.update({}, !0)
                },
                CONNECTION_CLOSED: function() {
                    R.verbose("connection closed dispatched"), v = Date.now()
                },
                RTC_CONNECTION_STATE: function(e) {
                    if (e.state !== N.RTCConnectionStates.DISCONNECTED) return !1;
                    e.willReconnect && (null != e.streamKey ? m.socket.streamPing(e.streamKey) : m.socket.voiceServerPing())
                },
                VOICE_CHANNEL_SELECT: function(e) {
                    return m.localVoiceState.update({
                        guildId: e.guildId,
                        channelId: e.channelId
                    }), !1
                },
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t
                    } = e;
                    return t.reduce((e, t) => {
                        if (c.default.getId() !== t.userId) return e;
                        if (t.sessionId === M) m.localVoiceState.setState({
                            guildId: t.guildId,
                            channelId: t.channelId
                        });
                        else {
                            if (t.guildId !== m.localVoiceState.guildId) return e;
                            m.localVoiceState.setState({
                                guildId: null,
                                channelId: null
                            })
                        }
                        return !0
                    }, !1)
                },
                GUILD_DELETE: function(e) {
                    e.guild.id === m.localVoiceState.guildId && m.localVoiceState.setState({
                        guildId: null,
                        channelId: null
                    })
                },
                CHANNEL_DELETE: function(e) {
                    let {
                        channel: t
                    } = e;
                    t.id === m.localVoiceState.channelId && m.localVoiceState.setState({
                        guildId: null,
                        channelId: null
                    })
                },
                CALL_DELETE: function(e) {
                    let {
                        channelId: t
                    } = e;
                    t === m.localVoiceState.channelId && m.localVoiceState.setState({
                        guildId: null,
                        channelId: null
                    })
                },
                APP_STATE_UPDATE: function(e) {
                    return e.state === N.AppStates.ACTIVE && (g.setIsPaused(!1), c.default.isAuthenticated() && m.socket.resetBackoff("App state is active")), !1
                },
                GUILD_MEMBERS_REQUEST: function(e) {
                    return m.socket.isSessionEstablished() && ("userIds" in e ? a(e.userIds).chunk(100).forEach(t => {
                        m.socket.requestGuildMembers(e.guildIds, {
                            userIds: t,
                            presences: !!e.presences
                        })
                    }) : m.socket.requestGuildMembers(e.guildIds, {
                        query: e.query,
                        limit: e.limit,
                        presences: !!e.presences
                    })), !1
                },
                GUILD_SEARCH_RECENT_MEMBERS: function(e) {
                    let {
                        guildId: t,
                        query: n,
                        continuationToken: i
                    } = e;
                    m.socket.isSessionEstablished() && m.socket.searchRecentMembers(t, {
                        query: n,
                        continuationToken: i
                    })
                },
                GUILD_SUBSCRIPTIONS_FLUSH: function(e) {
                    let {
                        guildId: t,
                        subscriptions: n
                    } = e;
                    return m.socket.isSessionEstablished() && m.socket.updateGuildSubscriptions(t, n), !1
                },
                CALL_CONNECT: function(e) {
                    let {
                        channelId: t
                    } = e;
                    return m.socket.isSessionEstablished() && m.socket.callConnect(t), !1
                },
                CALL_CONNECT_MULTIPLE: function(e) {
                    let {
                        channelIds: t
                    } = e;
                    return m.socket.isSessionEstablished() && t.forEach(e => {
                        m.socket.callConnect(e)
                    }), !1
                },
                LOBBY_CONNECT: function(e) {
                    let {
                        lobbyId: t,
                        lobbySecret: n
                    } = e;
                    return m.socket.isSessionEstablished() && m.socket.lobbyConnect(t, n), !1
                },
                LOBBY_DISCONNECT: function(e) {
                    let {
                        lobbyId: t
                    } = e;
                    return m.socket.isSessionEstablished() && m.socket.lobbyDisconnect(t), m.localLobbyVoiceStates.update(), !1
                },
                LOBBY_VOICE_CONNECT: U,
                LOBBY_VOICE_DISCONNECT: U,
                RPC_APP_DISCONNECTED: U,
                STREAM_CREATE: y,
                STREAM_START: function(e) {
                    let {
                        streamType: t,
                        guildId: n,
                        channelId: i
                    } = e;
                    if (m.socket.isSessionEstablished()) {
                        var a, l;
                        let e = null != n ? null === (a = E.default.getChannel(i)) || void 0 === a ? void 0 : a.rtcRegion : null === (l = _.default.getCall(i)) || void 0 === l ? void 0 : l.region;
                        m.socket.streamCreate(t, n, i, null != e ? e : T.default.getPreferredRegion())
                    }
                    return !1
                },
                STREAM_WATCH: function(e) {
                    let {
                        streamKey: t,
                        allowMultiple: n
                    } = e;
                    return m.socket.isSessionEstablished() && (n || ! function() {
                        let e = function() {
                            return I.default.getAllActiveStreamKeys().find(e => (0, o.decodeStreamKey)(e).ownerId === c.default.getId())
                        }();
                        I.default.getAllActiveStreamKeys().filter(t => t !== e).forEach(e => P(e))
                    }(), m.socket.streamWatch(t)), !1
                },
                STREAM_STOP: function(e) {
                    let {
                        streamKey: t
                    } = e;
                    return P(t), y(), !1
                },
                STREAM_SET_PAUSED: function(e) {
                    let {
                        streamKey: t,
                        paused: n
                    } = e;
                    m.socket.isSessionEstablished() && m.socket.streamSetPaused(t, n)
                },
                PUSH_NOTIFICATION_CLICK: function() {
                    return m.socket.expeditedHeartbeat(5e3, "user clicked on notification", !0), !1
                },
                EMBEDDED_ACTIVITY_DISCONNECT: function(e) {
                    var t, n;
                    let {
                        channelId: i,
                        applicationId: a
                    } = e, l = null !== (n = null === (t = E.default.getChannel(i)) || void 0 === t ? void 0 : t.getGuildId()) && void 0 !== n ? n : null;
                    m.socket.embeddedActivityClose(l, i, a)
                },
                REQUEST_FORUM_UNREADS: function(e) {
                    let {
                        guildId: t,
                        channelId: n,
                        threads: i
                    } = e;
                    m.socket.requestForumUnreads(t, n, i)
                },
                REQUEST_SOUNDBOARD_SOUNDS: function(e) {
                    let {
                        guildIds: t
                    } = e;
                    m.socket.requestSoundboardSounds(t)
                },
                REMOTE_COMMAND: function(e) {
                    let {
                        sessionId: t,
                        payload: n
                    } = e;
                    return m.socket.isSessionEstablished() && m.socket.remoteCommand(t, n), !1
                },
                RESET_CONNECTION: function(e) {
                    m.socket.connectionState !== A.ConnectionState.WILL_RECONNECT && (e.badCache ? (r.default.replaceDisableAllDatabases("RESET_CONNECTION"), m.socket.resetSocketOnError(Error("Guild data was missing from store (via RESET_CONNECTION)"), "RESET_CONNECTION_DATA_MISSING")) : m.socket.resetSocketOnError(Error("Connection reset requested (via RESET_CONNECTION)"), "RESET_CONNECTION"))
                },
                RTC_SPEED_TEST_START_TEST: function() {
                    return m.socket.isSessionEstablished() && m.socket.speedTestCreate(T.default.getPreferredRegion()), !1
                },
                RTC_SPEED_TEST_STOP_TEST: function() {
                    return m.socket.isSessionEstablished() && m.socket.speedTestDelete(), !1
                },
                CLIPS_SETTINGS_UPDATE: y,
                RUNNING_GAMES_CHANGE: y,
                USER_SETTINGS_PROTO_UPDATE: function(e) {
                    var t;
                    e.settings.type === O.UserSettingsTypes.PRELOADED_USER_SETTINGS && (null === (t = e.settings.proto.clips) || void 0 === t ? void 0 : t.allowVoiceRecording) != null && y()
                }
            })
        },
        705215: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return u
                }
            });
            var i = n("197881"),
                a = n("338580");
            let l = (0, a.getErlpackEncoding)();
            class s {
                pack(e) {
                    return JSON.stringify(e)
                }
                unpack(e) {
                    if ("string" != typeof e) throw Error("Expected a string to be passed to JSONEncoding.unpack, got ".concat(null == e ? null : typeof e));
                    return JSON.parse(e)
                }
                getName() {
                    return "json"
                }
                wantsString() {
                    return !0
                }
            }
            let r = void 0 !== l ? l : s;
            i.ProcessArgs.isDiscordGatewayPlaintextSet() && (r = s);
            var u = r
        },
        338580: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getErlpackEncoding: function() {
                    return s
                }
            });
            var i = n("605250"),
                a = n("773336"),
                l = n("50885");

            function s() {
                if (a.isPlatformEmbedded) {
                    let e;
                    try {
                        e = l.default.requireModule("discord_erlpack")
                    } catch (t) {
                        try {
                            e = l.default.requireModule("erlpack")
                        } catch (e) {}
                    }
                    if (null != e) return class {
                        static canUse() {
                            return null != e
                        }
                        pack(t) {
                            return e.pack(t).buffer
                        }
                        unpack(t) {
                            t instanceof ArrayBuffer && (t = new Uint8Array(t));
                            try {
                                return e.unpack(t)
                            } catch (e) {
                                throw new(0, i.default)("GatewayEncodingErlpackEncoding").error("Error unpacking", {
                                    erlpackUnpackError: e,
                                    erlpackDataPreview: null != t ? Array.from(t.slice(0, 32)) : null,
                                    erlpackDataLength: null != t ? t.length : null
                                }), e
                            }
                        }
                        getName() {
                            return "etf"
                        }
                        wantsString() {
                            return !1
                        }
                    }
                }
            }
        },
        447214: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                ConnectionState: function() {
                    return a
                },
                default: function() {
                    return F
                }
            });
            var i, a, l = n("627445"),
                s = n.n(l),
                r = n("181905"),
                u = n("981980"),
                o = n("102053"),
                d = n("432710"),
                c = n("446674"),
                _ = n("872717"),
                E = n("913144"),
                f = n("288206"),
                h = n("605250"),
                T = n("155084"),
                p = n("410912"),
                S = n("313915"),
                I = n("599110"),
                A = n("922932"),
                m = n("773336"),
                g = n("286235"),
                C = n("265912"),
                N = n("799600"),
                O = n("705215"),
                R = n("342797"),
                v = n("340115"),
                M = n("289362"),
                y = n("571420"),
                D = n("797785"),
                L = n("49111");
            let U = new h.default("GatewaySocket"),
                P = new O.default;

            function b() {}(i = a || (a = {})).CLOSED = "CLOSED", i.WILL_RECONNECT = "WILL_RECONNECT", i.CONNECTING = "CONNECTING", i.IDENTIFYING = "IDENTIFYING", i.RESUMING = "RESUMING", i.SESSION_ESTABLISHED = "SESSION_ESTABLISHED";

            function G(e) {
                return null == e ? 0 : "string" == typeof e ? e.length : e.byteLength
            }
            let k = window.GLOBAL_ENV.GATEWAY_ENDPOINT;
            class F extends v.default {
                get connectionState() {
                    return this.connectionState_
                }
                set connectionState(e) {
                    U.verbose("Setting connection state to ".concat(e)), this.connectionState_ = e
                }
                hasQueuedDispatches() {
                    return this.queuedDispatches.length > 0
                }
                processFirstQueuedDispatch(e) {
                    if (!this.hasQueuedDispatches()) return !1;
                    for (; this.queuedDispatches.length > 0 && e.has(this.queuedDispatches[0].type);) {
                        let {
                            data: e,
                            type: t,
                            compressionAnalytics: n
                        } = this.queuedDispatches.shift();
                        this._handleDispatchWithoutQueueing(e, t, n)
                    }
                    return !0
                }
                processDispatchQueue() {
                    if (this.isDeferringDispatches = !1, this.hasQueuedDispatches()) {
                        for (let {
                                data: e,
                                type: t,
                                compressionAnalytics: n
                            }
                            of this.queuedDispatches) this._handleDispatchWithoutQueueing(e, t, n);
                        this.queuedDispatches.length = 0
                    }
                }
                clearDispatchQueue() {
                    this.isDeferringDispatches = !1, this.queuedDispatches.length = 0
                }
                addAnalytics(e) {
                    this.analytics = {
                        ...this.analytics,
                        ...e
                    }
                }
                setResumeUrl(e) {
                    null != e && e.endsWith("/") && (e = e.substring(0, e.length - 1)), null !== e && U.verbose("Updating resume url to ".concat(e)), this.resumeUrl = e
                }
                _connect() {
                    var e, t;
                    let n;
                    if (!this.willReconnect()) {
                        U.verbose("Skipping _connect because willReconnect is false");
                        return
                    }
                    if (y.getIsPaused()) {
                        U.info("Skipping _connect because socket is paused");
                        return
                    }
                    this.connectionState = a.CONNECTING, this.nextReconnectIsImmediate = !1;
                    let i = this.compressionHandler.getAlgorithm(),
                        l = P.getName(),
                        s = this._getGatewayUrl(),
                        r = window.GLOBAL_ENV.API_VERSION;
                    o.default.mark("\uD83C\uDF10", "Socket._connect"), U.info("[CONNECT] ".concat(s, ", ") + "encoding: ".concat(l, ", ") + "version: ".concat(r, ", ") + "compression: ".concat(null != i ? i : "none")), null !== this.webSocket && (U.error("_connect called with already existing websocket"), this._cleanup(e => e.close(4e3))), this.connectionStartTime = Date.now(), this.helloTimeout = setTimeout(() => {
                        let e = Date.now() - this.connectionStartTime;
                        this._handleClose(!1, 0, "The connection timed out after ".concat(e, " ms - did not receive OP_HELLO in time.")), this.setResumeUrl(null)
                    }, 3e4);
                    let u = new URL(s);
                    u.searchParams.append("encoding", l), u.searchParams.append("v", r.toString()), null != i && u.searchParams.append("compress", i);
                    ! function(e) {
                        let t, {
                                gatewayURL: n,
                                newCallback: i,
                                onOpen: a,
                                onMessage: l,
                                onError: s,
                                onClose: r
                            } = e,
                            u = window._ws,
                            o = !1,
                            d = !1,
                            c = null,
                            _ = null;
                        if (window._ws = null, null != u) {
                            if (t = u.ws, u.state.gateway !== n) U.verbose("[FAST CONNECT] gatewayURL mismatch: ".concat(u.state.gateway, " !== ").concat(n)), t.close(1e3), t = null;
                            else {
                                var E;
                                let e = {
                                    ...u.state
                                };
                                null != e.messages && (e.messages = e.messages.map(e => null != e.data && "string" == typeof e.data ? {
                                    ...e,
                                    data: e.data.substring(0, 100)
                                } : e)), U.log("[FAST CONNECT] successfully took over websocket, state:", {
                                    ...e,
                                    messages: null === (E = e.messages) || void 0 === E ? void 0 : E.length
                                }), o = u.state.open, d = u.state.identify, c = u.state.messages, _ = u.state.clientState
                            }
                        }
                        null == t && ((t = (0, D.default)(n)).binaryType = "arraybuffer"), i(t), o && a(d, _), null != c && c.forEach(l), t.onopen = () => a(d, _), t.onmessage = l, t.onclose = r, t.onerror = s
                    }({
                        gatewayURL: u.toString(),
                        newCallback: e => {
                            this.webSocket = e, this.compressionHandler.bindWebSocket(e)
                        },
                        onOpen: (e, t) => {
                            o.default.mark("\uD83C\uDF10", "GatewaySocket.onOpen ".concat(e));
                            let n = Date.now() - this.connectionStartTime;
                            U.info("[CONNECTED] ".concat(u.toString(), " in ").concat(n, " ms")), this.isFastConnect = e, this.lastIdentifyClientState = t, e ? this._doFastConnectIdentify() : this._doResumeOrIdentify()
                        },
                        onMessage: (e = this.compressionHandler, t = (e, t) => {
                            let n = Date.now(),
                                {
                                    op: i,
                                    s: a,
                                    t: l,
                                    d: s
                                } = P.unpack(e);
                            i !== v.Opcode.DISPATCH && o.default.mark("\uD83C\uDF10", "GatewaySocket.onMessage ".concat(i, " ").concat(v.Opcode[i]));
                            let r = Date.now() - n;
                            switch ("READY" === l ? p.default.parseReady.set(n, r) : "READY_SUPPLEMENTAL" === l ? p.default.parseReadySupplemental.set(n, r) : r > 10 && o.default.mark("\uD83C\uDF10", "Parse " + l, r), null != a && (this.seq = a), i) {
                                case v.Opcode.HELLO:
                                    this._clearHelloTimeout(), this._handleHello(s);
                                    break;
                                case v.Opcode.RECONNECT:
                                    this._handleReconnect();
                                    break;
                                case v.Opcode.INVALID_SESSION:
                                    this._handleInvalidSession(s);
                                    break;
                                case v.Opcode.HEARTBEAT:
                                    this._sendHeartbeat();
                                    break;
                                case v.Opcode.HEARTBEAT_ACK:
                                    this._handleHeartbeatAck(s);
                                    break;
                                case v.Opcode.DISPATCH:
                                    this._handleDispatch(s, l, "READY" === l ? {
                                        compressed_byte_size: t,
                                        uncompressed_byte_size: G(e),
                                        compression_algorithm: this.compressionHandler.getAlgorithm(),
                                        packing_algorithm: P.getName(),
                                        unpack_duration_ms: r
                                    } : null);
                                    break;
                                default:
                                    U.info("Unhandled op ".concat(i))
                            }
                        }, n = 0, e.dataReady(e => {
                            try {
                                return t(e, n)
                            } finally {
                                n = 0
                            }
                        }), t => {
                            let i = t.data;
                            n += G(i), e.feed(i)
                        }),
                        onError: () => {
                            this.setResumeUrl(null), A.default.flushDNSCache(), this._handleClose(!1, 0, "An error with the websocket occurred")
                        },
                        onClose: e => {
                            let {
                                wasClean: t,
                                code: n,
                                reason: i
                            } = e;
                            return this._handleClose(t, n, i)
                        }
                    })
                }
                _handleHello(e) {
                    let t = this.heartbeatInterval = e.heartbeat_interval,
                        n = Date.now() - this.connectionStartTime;
                    U.verbose("[HELLO] via ".concat((0, R.getConnectionPath)(e), ", ") + "heartbeat interval: ".concat(t, ", ") + "took ".concat(n, " ms")), this._startHeartbeater()
                }
                _handleReconnect() {
                    U.verbose("[RECONNECT] gateway requested I reconnect."), this._cleanup(e => e.close(4e3)), this.connectionState = a.WILL_RECONNECT, this._connect()
                }
                _handleInvalidSession(e) {
                    U.info("[INVALID_SESSION]".concat(e ? " can resume)" : "")), e ? this._doResumeOrIdentify() : this._doIdentify()
                }
                _handleDispatch(e, t, n) {
                    let i = performance.now();
                    if (this.connectionState === a.RESUMING) {
                        let e = i - this.resumeAnalytics.lastUpdateTime;
                        0 === this.resumeAnalytics.numEvents ? this.resumeAnalytics.initialWaitTime = e : e > this.resumeAnalytics.largestWaitTime && (this.resumeAnalytics.largestWaitTime = e), this.resumeAnalytics.totalWaitTime += e, this.resumeAnalytics.lastUpdateTime = i, this.resumeAnalytics.numEvents += 1, c.default.Emitter.pause(150)
                    }
                    this.isDeferringDispatches ? this.queuedDispatches.push({
                        data: e,
                        type: t,
                        compressionAnalytics: n
                    }) : this._handleDispatchWithoutQueueing(e, t, n), this.connectionState === a.RESUMING && (this.resumeAnalytics.dispatchTime += performance.now() - i)
                }
                _handleDispatchWithoutQueueing(e, t, n) {
                    if ("READY" === t) return this._handleReady(e, n);
                    if ("READY_SUPPLEMENTAL" === t) {
                        c.default.Emitter.resume();
                        let e = Date.now() - this.connectionStartTime;
                        U.info("[READY_SUPPLEMENTAL] took ".concat(e, "ms")), this.connectionState = a.SESSION_ESTABLISHED, this.gatewayBackoff.succeed(), this.iosGoingAwayEventCount = 0
                    } else if ("RESUMED" === t) {
                        c.default.Emitter.resume();
                        let t = Date.now() - this.connectionStartTime;
                        U.info("[RESUMED] took ".concat(t, "ms, replayed ").concat(this.resumeAnalytics.numEvents, " events, new seq: ").concat(this.seq)), U.verbose((0, R.getConnectionPath)(e)), (0, R.logResumeAnalytics)(this.resumeAnalytics), this.resumeAnalytics = (0, R.createResumeAnalytics)(), this.connectionState = a.SESSION_ESTABLISHED, this.gatewayBackoff.succeed(), this.iosGoingAwayEventCount = 0
                    }
                    return this._handleGenericDispatch(e, t)
                }
                _getGatewayUrl() {
                    return null != this.resumeUrl ? this.resumeUrl : k
                }
                _handleReady(e, t) {
                    let n = Date.now();
                    c.default.Emitter.resume();
                    let i = Date.now() - this.connectionStartTime,
                        l = e.session_id;
                    this.sessionId = l;
                    let s = (0, R.getConnectionPath)(e);
                    o.default.setServerTrace(s), U.info("[READY] took ".concat(i, "ms, as ").concat(l)), U.verbose("".concat(s)), this.connectionState = a.SESSION_ESTABLISHED, this.gatewayBackoff.succeed(), this.iosGoingAwayEventCount = 0;
                    let r = (0, R.getReadyPayloadByteSizeAnalytics)(e);
                    this._handleGenericDispatch(e, "READY"), (0, R.logReadyPayloadReceived)(this, e, n, t, r), this.didForceClearGuildHashes = !1, this.hasConnectedOnce = !0, this.setResumeUrl(e.resume_gateway_url)
                }
                _handleGenericDispatch(e, t) {
                    S.default.isLoggingGatewayEvents && U.verbose("<~", t, e);
                    try {
                        this.emit("dispatch", t, e)
                    } catch (e) {
                        this.resetSocketOnError(e, t)
                    }
                }
                _handleHeartbeatAck(e) {
                    this.lastHeartbeatAckTime = Date.now(), this.heartbeatAck = !0, null !== this.expeditedHeartbeatTimeout && (clearTimeout(this.expeditedHeartbeatTimeout), this.expeditedHeartbeatTimeout = null, U.verbose("Expedited heartbeat succeeded"))
                }
                _handleHeartbeatTimeout() {
                    this._cleanup(e => e.close(4e3)), this.connectionState = a.WILL_RECONNECT;
                    let e = this.gatewayBackoff.fail(() => this._connect());
                    U.warn("[ACK TIMEOUT] reconnecting in ".concat((e / 1e3).toFixed(2), " seconds."))
                }
                _handleClose(e, t, n) {
                    if (e = e || !1, this._cleanup(), this.emit("close", {
                            code: t,
                            reason: n
                        }), 4004 === t) return this.connectionState = a.CLOSED, U.warn("[WS CLOSED] because of authentication failure, marking as closed."), this._reset(e, t, n);
                    if (this._tryDetectInvalidIOSToken(t, n, e), this.connectionState = a.WILL_RECONNECT, this.nextReconnectIsImmediate) U.warn("[WS CLOSED] (".concat(e.toString(), ", ").concat(t, ", ").concat(n, ") retrying immediately.")), this._connect();
                    else {
                        let i = this.gatewayBackoff.fail(() => this._connect());
                        U.warn("[WS CLOSED] (".concat(e.toString(), ", ").concat(t, ", ").concat(n, ") retrying in ").concat((i / 1e3).toFixed(2), " seconds.")), this.gatewayBackoff.fails > 4 && this._reset(e, t, n)
                    }
                }
                _tryDetectInvalidIOSToken(e, t, n) {
                    (0, m.isIOS)() && null != this.token && 1001 === e && "Stream end encountered" === t && (this.iosGoingAwayEventCount += 1, 3 === this.iosGoingAwayEventCount && _.default.get({
                        url: L.Endpoints.ME,
                        headers: {
                            authorization: this.token
                        }
                    }).then(e => {
                        let {
                            status: t
                        } = e;
                        I.default.track(L.AnalyticEvents.IOS_INVALID_TOKEN_WORKAROUND_TRIGGERED, {
                            api_status_code: t
                        })
                    }, e => {
                        let {
                            status: t
                        } = e;
                        401 === t && (this.connectionState = a.CLOSED, U.warn("[WS CLOSED] because of manual authentication failure, marking as closed."), this._reset(n, 4004, "invalid token manually detected")), I.default.track(L.AnalyticEvents.IOS_INVALID_TOKEN_WORKAROUND_TRIGGERED, {
                            api_status_code: t
                        })
                    }))
                }
                _reset(e, t, n) {
                    this.sessionId = null, this.seq = 0, U.warn("[RESET] (".concat(e.toString(), ", ").concat(t, ", ").concat(n, ")")), this.emit("disconnect", {
                        wasClean: e,
                        code: t,
                        reason: n
                    })
                }
                _startHeartbeater() {
                    let {
                        heartbeatInterval: e
                    } = this;
                    s(null != e, "GatewaySocket: Heartbeat interval should never null here."), null !== this.initialHeartbeatTimeout && clearTimeout(this.initialHeartbeatTimeout), null !== this.heartbeater && (clearInterval(this.heartbeater), this.heartbeater = null);
                    let t = () => {
                        this.heartbeatAck ? (this.heartbeatAck = !1, this._sendHeartbeat()) : null === this.expeditedHeartbeatTimeout && this._handleHeartbeatTimeout()
                    };
                    this.initialHeartbeatTimeout = setTimeout(() => {
                        this.initialHeartbeatTimeout = null, this.heartbeatAck = !0, this.heartbeater = setInterval(t, e), t()
                    }, Math.floor(Math.random() * e))
                }
                _stopHeartbeater() {
                    null !== this.heartbeater && (clearInterval(this.heartbeater), this.heartbeater = null), null !== this.initialHeartbeatTimeout && (clearTimeout(this.initialHeartbeatTimeout), this.initialHeartbeatTimeout = null), null !== this.expeditedHeartbeatTimeout && (clearTimeout(this.expeditedHeartbeatTimeout), this.expeditedHeartbeatTimeout = null)
                }
                _clearHelloTimeout() {
                    null != this.helloTimeout && (clearTimeout(this.helloTimeout), this.helloTimeout = null)
                }
                _cleanup(e) {
                    c.default.Emitter.resume(), this._stopHeartbeater(), this._clearHelloTimeout();
                    let t = this.webSocket;
                    if (this.webSocket = null, null != t) t.onopen = b, t.onmessage = b, t.onerror = b, t.onclose = b, null == e || e(t);
                    this.gatewayBackoff.cancel(), this.compressionHandler.close(), this.compressionHandler = new N.default(P)
                }
                _doResume() {
                    var e;
                    this.connectionState = a.RESUMING, this.resumeAnalytics = (0, R.createResumeAnalytics)(Date.now() - this.connectionStartTime), U.info("[RESUME] resuming session ".concat(null !== (e = this.sessionId) && void 0 !== e ? e : "", ", seq: ").concat(this.seq)), this.send(v.Opcode.RESUME, {
                        token: this.token,
                        session_id: this.sessionId,
                        seq: this.seq
                    }, !1)
                }
                _doIdentify() {
                    this.seq = 0, this.sessionId = null;
                    let e = this.handleIdentify();
                    if (null === e) {
                        this._handleClose(!0, 4004, "No connection info provided");
                        return
                    }
                    this.connectionState = a.IDENTIFYING, this.identifyStartTime = Date.now();
                    let {
                        token: t,
                        properties: n = {},
                        presence: i
                    } = e;
                    this.token = t, U.verbose("[IDENTIFY]");
                    let l = {
                            token: t,
                            capabilities: C.default,
                            properties: n,
                            presence: i,
                            compress: this.compressionHandler.usesLegacyCompression(),
                            client_state: (0, M.toGatewayClientState)(f.default.getClientState())
                        },
                        s = JSON.stringify(l);
                    this.identifyUncompressedByteSize = s.length, this.identifyCompressedByteSize = r.deflate(s).length, this.lastIdentifyClientState = l.client_state, this.identifyCount += 1, this.send(v.Opcode.IDENTIFY, l, !1)
                }
                _doFastConnectIdentify() {
                    this.seq = 0, this.sessionId = null;
                    let e = this.handleIdentify();
                    if (null === e) {
                        this._handleClose(!0, 4004, "No connection info provided");
                        return
                    }
                    let {
                        token: t
                    } = e;
                    this.token = t, this.connectionState = a.IDENTIFYING, this.identifyStartTime = Date.now(), this.identifyCount += 1, U.verbose("[IDENTIFY, fast-connect]"), this._updateLastHeartbeatAckTime()
                }
                _doResumeOrIdentify() {
                    let e = Date.now(),
                        t = null !== this.sessionId && (null == this.lastHeartbeatAckTime || e - this.lastHeartbeatAckTime <= 18e4);
                    t ? this._doResume() : this._doIdentify(), this._updateLastHeartbeatAckTime()
                }
                _updateLastHeartbeatAckTime() {
                    this.lastHeartbeatAckTime = Date.now()
                }
                _sendHeartbeat() {
                    this.send(v.Opcode.HEARTBEAT, this.seq, !1)
                }
                getLogger() {
                    return U
                }
                willReconnect() {
                    return this.connectionState === a.WILL_RECONNECT
                }
                isClosed() {
                    return this.connectionState === a.CLOSED
                }
                isSessionEstablished() {
                    return this.connectionState === a.SESSION_ESTABLISHED || this.connectionState === a.RESUMING
                }
                isConnected() {
                    return this.connectionState === a.IDENTIFYING || this.connectionState === a.RESUMING || this.connectionState === a.SESSION_ESTABLISHED
                }
                connect() {
                    return this.isClosed() ? (U.verbose(".connect() called, new state is WILL_RECONNECT"), this.connectionState = a.WILL_RECONNECT, this._connect(), !0) : (U.error("Cannot start a new connection, connection state is not closed"), !1)
                }
                getIdentifyInitialGuildId() {
                    var e;
                    return null === (e = this.lastIdentifyClientState) || void 0 === e ? void 0 : e.initial_guild_id
                }
                resetSocketOnError(e, t) {
                    let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {
                        sentry: !0,
                        immediate: !1
                    };
                    U.error("resetSocketOnError", e.stack);
                    let i = null != e.message && e.message.indexOf("Guild data was missing from store") >= 0;
                    T.default.increment({
                        name: d.MetricEvents.SOCKET_CRASHED,
                        tags: ["action:".concat(t)]
                    }, !0), n.sentry = n.sentry && !i, n.immediate = n.immediate || i, n.sentry && g.default.captureException(e, {
                        tags: {
                            socketCrashedAction: t
                        }
                    }), this._cleanup(e => e.close()), this._reset(!0, 1e3, "Resetting socket due to error."), this.clearDispatchQueue(), this.connectionState = a.WILL_RECONNECT, this.dispatchExceptionBackoff.cancel(), 0 === this.dispatchExceptionBackoff._fails && n.immediate ? (U.verbose("Triggering fast reconnect"), this.dispatchExceptionBackoff.fail(() => {}), setTimeout(() => this._connect(), 0)) : this.dispatchExceptionBackoff.fail(() => this._connect()), this.didForceClearGuildHashes = !0, E.default.dispatch({
                        type: "CLEAR_GUILD_CACHE"
                    }), clearTimeout(this.dispatchSuccessTimer), this.dispatchSuccessTimer = setTimeout(() => this.dispatchExceptionBackoff.succeed(), 12e4)
                }
                close() {
                    if (this.isClosed()) {
                        U.verbose("close() called, but socket is already closed.");
                        return
                    }
                    U.info("Closing connection, current state is ".concat(this.connectionState)), this._cleanup(e => e.close()), this.connectionState = a.CLOSED, setImmediate(() => {
                        this._reset(!0, 1e3, "Disconnect requested by user")
                    })
                }
                networkStateChange(e, t) {
                    let n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
                    this.expeditedHeartbeat(e, t, n, !1)
                }
                expeditedHeartbeat(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
                        n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2],
                        i = !(arguments.length > 3) || void 0 === arguments[3] || arguments[3];
                    if (!this.isClosed()) {
                        if (this.isConnected()) {
                            U.verbose("Performing an expedited heartbeat ".concat(null != t && "" !== t ? "reason: " + t : "")), this.heartbeatAck = !1, this._sendHeartbeat(), null !== this.expeditedHeartbeatTimeout && clearTimeout(this.expeditedHeartbeatTimeout), this.expeditedHeartbeatTimeout = setTimeout(() => {
                                this.expeditedHeartbeatTimeout = null, !1 === this.heartbeatAck && this._handleHeartbeatTimeout()
                            }, e);
                            return
                        }
                        n ? this.resetBackoff(t, i) : U.verbose("Expedited heartbeat requested, but, connection state is ".concat(this.connectionState, " and reconnectImmediately was not requested ").concat(null != t && "" !== t ? "reason: " + t : ""))
                    }
                }
                resetBackoff() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                        t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                    U.verbose("Connection has reset backoff".concat(null != e && "" !== e ? " for reason: " + e : "")), this.gatewayBackoff.succeed(), this.iosGoingAwayEventCount = 0, this.nextReconnectIsImmediate = !0, this.willReconnect() ? this._connect() : t && this.connectionState !== a.SESSION_ESTABLISHED && this._handleClose(!0, 0, e)
                }
                constructor() {
                    super(), this.dispatchExceptionBackoff = new u.default(1e3, 6e4), this.dispatchSuccessTimer = 0, this.resumeAnalytics = (0, R.createResumeAnalytics)(), this.didForceClearGuildHashes = !1, this.identifyUncompressedByteSize = 0, this.identifyCompressedByteSize = 0, this.isDeferringDispatches = !0, this.queuedDispatches = [], this.analytics = {}, this.identifyCount = 0, this.resumeUrl = null, this.lastIdentifyClientState = null, this.iosGoingAwayEventCount = 0, this.send = (e, t, n) => {
                        S.default.isLoggingGatewayEvents && U.verbose("~>", e, t);
                        let i = P.pack({
                            op: e,
                            d: t
                        });
                        if (!n || this.isSessionEstablished()) try {
                            null != this.webSocket ? this.webSocket.send(i) : U.warn("Attempted to send without a websocket that exists. Opcode: ".concat(e))
                        } catch (e) {} else U.warn("Attempted to send while not being in a connected state opcode: ".concat(e))
                    }, this.gatewayBackoff = new u.default(1e3, 6e4), this.connectionState_ = a.CLOSED, this.webSocket = null, this.seq = 0, this.sessionId = null, this.token = null, this.initialHeartbeatTimeout = null, this.expeditedHeartbeatTimeout = null, this.lastHeartbeatAckTime = null, this.helloTimeout = null, this.heartbeatInterval = null, this.heartbeater = null, this.heartbeatAck = !0, this.connectionStartTime = 0, this.identifyStartTime = 0, this.nextReconnectIsImmediate = !1, this.compressionHandler = new N.default(P), this.hasConnectedOnce = !1, this.isFastConnect = !1, this.identifyCount = 0, this.iosGoingAwayEventCount = 0
                }
            }
        },
        342797: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                logReadyPayloadReceived: function() {
                    return u
                },
                getConnectionPath: function() {
                    return o
                },
                getReadyPayloadByteSizeAnalytics: function() {
                    return d
                },
                createResumeAnalytics: function() {
                    return c
                },
                logResumeAnalytics: function() {
                    return _
                }
            });
            var i = n("102053");
            n("704744");
            var a = n("410912"),
                l = n("697218"),
                s = n("599110"),
                r = n("49111");

            function u(e, t, n, l, u) {
                var o, d, c;
                let _ = function(e) {
                    let {
                        _trace: t
                    } = e, n = {};
                    try {
                        let e = JSON.parse(t);
                        null != e[0] && "" !== e[0] && e[0].startsWith("gateway-") && (n.identify_total_server_duration_ms = Math.floor(e[1].micros / 1e3)),
                            function e(t, n) {
                                if (null != t && t.length > 0)
                                    for (let i = 0; i < t.length; i += 2) {
                                        let a = t[i],
                                            l = t[i + 1];
                                        n(a, l.micros), e(l.calls, n)
                                    }
                            }(e, (e, t) => {
                                "start_session" === e ? n.identify_api_duration_ms = Math.floor(t / 1e3) : "guilds_connect" === e && (n.identify_guilds_duration_ms = Math.floor(t / 1e3))
                            })
                    } catch (e) {}
                    return n
                }(t);
                i.default.addDetail("payload_size(kb)", Math.round(l.uncompressed_byte_size / 1024)), i.default.addDetail("server_time(ms)", null !== (o = _.identify_total_server_duration_ms) && void 0 !== o ? o : 0);
                let E = {
                    ...l,
                    ..._,
                    ... function(e) {
                        let {
                            guilds: t
                        } = e, n = 0, i = 0;
                        return t.forEach(e => {
                            if (e.unavailable) return;
                            let t = "partial" === e.data_mode ? e.partial_updates.channels : e.channels;
                            null != t && null != t.forEach && t.forEach(e => {
                                i++, e.type === r.ChannelTypes.GUILD_CATEGORY && n++
                            })
                        }), {
                            num_guilds: t.length,
                            num_guild_channels: i,
                            num_guild_category_channels: n
                        }
                    }(t),
                    ...u,
                    duration_ms_since_identify_start: n - e.identifyStartTime,
                    duration_ms_since_connection_start: n - e.connectionStartTime,
                    duration_ms_since_emit_start: Date.now() - n,
                    is_reconnect: e.hasConnectedOnce,
                    is_fast_connect: e.isFastConnect,
                    did_force_clear_guild_hashes: e.didForceClearGuildHashes,
                    identify_uncompressed_byte_size: e.identifyUncompressedByteSize,
                    identify_compressed_byte_size: e.identifyCompressedByteSize,
                    had_cache_at_startup: null !== (d = e.analytics.hadCacheAtStartup) && void 0 !== d && d,
                    used_cache_at_startup: null !== (c = e.analytics.usedCacheAtStartup) && void 0 !== c && c
                };
                a.default.attachReadyPayloadProperties(E), s.default.track(r.AnalyticEvents.READY_PAYLOAD_RECEIVED, E, {
                    logEventProperties: !0
                })
            }

            function o(e) {
                try {
                    var t;
                    let n = function(e) {
                        if (null == e) return null;
                        let t = JSON.parse(e);
                        return function e(t, n) {
                            if (null == t) return "";
                            let i = "";
                            for (let a = 0; a < t.length; a += 2) i += "\n".concat(n).concat(t[a], ": ").concat(t[a + 1].micros / 1e3) + e(t[a + 1].calls, n + "|  ");
                            return i
                        }(t, "")
                    }(null === (t = e._trace) || void 0 === t ? void 0 : t[0]);
                    if (null != n) return n
                } catch (e) {}
                return null != e._trace ? e._trace.join(" -> ") : "???"
            }

            function d(e) {
                var t, n;
                let i = Date.now(),
                    {
                        guilds: a,
                        merged_presences: l,
                        merged_members: s,
                        read_state: r,
                        private_channels: u,
                        user_guild_settings: o,
                        user_settings: d,
                        user_settings_proto: c,
                        experiments: _,
                        guild_experiments: E,
                        relationships: f,
                        users: h,
                        ...T
                    } = e,
                    p = [],
                    S = [],
                    I = [],
                    A = [],
                    m = [],
                    g = [],
                    C = [],
                    N = [];
                return a.forEach(e => {
                    var t;
                    if (e.unavailable) return;
                    let {
                        features: n,
                        ...i
                    } = null !== (t = e.properties) && void 0 !== t ? t : {}, {
                        threads: a,
                        guild_scheduled_events: l,
                        ...s
                    } = e;
                    p.push("partial" === e.data_mode ? e.partial_updates.channels : e.channels), S.push("partial" === e.data_mode ? e.partial_updates.roles : e.roles), I.push("partial" === e.data_mode ? e.partial_updates.emojis : e.emojis), A.push(a), m.push("partial" === e.data_mode ? e.partial_updates.stickers : e.stickers), g.push(n), C.push(l), N.push(s, i)
                }), {
                    presences_size: JSON.stringify(null !== (t = null == l ? void 0 : l.friends) && void 0 !== t ? t : []).length,
                    users_size: JSON.stringify(h).length,
                    read_states_size: JSON.stringify(r).length,
                    private_channels_size: JSON.stringify(u).length,
                    user_settings_size: JSON.stringify(null != d ? d : "").length + (null != c ? c : "").length,
                    experiments_size: JSON.stringify(null != _ ? _ : []).length + JSON.stringify(null != E ? E : []).length,
                    user_guild_settings_size: JSON.stringify(o).length,
                    relationships_size: JSON.stringify(f).length,
                    remaining_data_size: JSON.stringify(null != T ? T : {}).length,
                    guild_channels_size: JSON.stringify(p).length,
                    guild_members_size: JSON.stringify(null != s ? s : []).length,
                    guild_presences_size: JSON.stringify(null !== (n = null == l ? void 0 : l.guilds) && void 0 !== n ? n : []).length,
                    guild_roles_size: JSON.stringify(S).length,
                    guild_emojis_size: JSON.stringify(I).length,
                    guild_threads_size: JSON.stringify(A).length,
                    guild_stickers_size: JSON.stringify(m).length,
                    guild_events_size: JSON.stringify(C).length,
                    guild_features_size: JSON.stringify(g).length,
                    guild_remaining_data_size: JSON.stringify(N).length,
                    size_metrics_duration_ms: Date.now() - i
                }
            }

            function c(e) {
                return {
                    connectTime: null != e ? e : 0,
                    numEvents: 0,
                    largestWaitTime: 0,
                    dispatchTime: 0,
                    totalWaitTime: 0,
                    initialWaitTime: 0,
                    startTime: performance.now(),
                    lastUpdateTime: performance.now()
                }
            }

            function _(e) {
                var t;
                !(!(null === (t = l.default.getCurrentUser()) || void 0 === t ? void 0 : t.isStaff()) && .5 > Math.random()) && s.default.track(r.AnalyticEvents.CONNECTION_RESUMED, {
                    connect_time_ms: e.connectTime,
                    resume_time_ms: Math.floor(performance.now() - e.startTime),
                    num_events: e.numEvents,
                    largest_wait_time_ms: Math.floor(e.largestWaitTime),
                    initial_wait_time_ms: Math.floor(e.initialWaitTime),
                    total_wait_time_ms: Math.floor(e.totalWaitTime),
                    total_dispatch_time_ms: Math.floor(e.dispatchTime)
                }, {
                    logEventProperties: !0
                })
            }
        },
        340115: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                Opcode: function() {
                    return a
                },
                default: function() {
                    return r
                }
            });
            var i, a, l = n("44170"),
                s = n("590401");
            (i = a || (a = {}))[i.DISPATCH = 0] = "DISPATCH", i[i.HEARTBEAT = 1] = "HEARTBEAT", i[i.IDENTIFY = 2] = "IDENTIFY", i[i.PRESENCE_UPDATE = 3] = "PRESENCE_UPDATE", i[i.VOICE_STATE_UPDATE = 4] = "VOICE_STATE_UPDATE", i[i.VOICE_SERVER_PING = 5] = "VOICE_SERVER_PING", i[i.RESUME = 6] = "RESUME", i[i.RECONNECT = 7] = "RECONNECT", i[i.REQUEST_GUILD_MEMBERS = 8] = "REQUEST_GUILD_MEMBERS", i[i.INVALID_SESSION = 9] = "INVALID_SESSION", i[i.HELLO = 10] = "HELLO", i[i.HEARTBEAT_ACK = 11] = "HEARTBEAT_ACK", i[i.CALL_CONNECT = 13] = "CALL_CONNECT", i[i.GUILD_SUBSCRIPTIONS = 14] = "GUILD_SUBSCRIPTIONS", i[i.LOBBY_CONNECT = 15] = "LOBBY_CONNECT", i[i.LOBBY_DISCONNECT = 16] = "LOBBY_DISCONNECT", i[i.LOBBY_VOICE_STATES_UPDATE = 17] = "LOBBY_VOICE_STATES_UPDATE", i[i.STREAM_CREATE = 18] = "STREAM_CREATE", i[i.STREAM_DELETE = 19] = "STREAM_DELETE", i[i.STREAM_WATCH = 20] = "STREAM_WATCH", i[i.STREAM_PING = 21] = "STREAM_PING", i[i.STREAM_SET_PAUSED = 22] = "STREAM_SET_PAUSED", i[i.REQUEST_GUILD_APPLICATION_COMMANDS = 24] = "REQUEST_GUILD_APPLICATION_COMMANDS", i[i.EMBEDDED_ACTIVITY_LAUNCH = 25] = "EMBEDDED_ACTIVITY_LAUNCH", i[i.EMBEDDED_ACTIVITY_CLOSE = 26] = "EMBEDDED_ACTIVITY_CLOSE", i[i.EMBEDDED_ACTIVITY_UPDATE = 27] = "EMBEDDED_ACTIVITY_UPDATE", i[i.REQUEST_FORUM_UNREADS = 28] = "REQUEST_FORUM_UNREADS", i[i.REMOTE_COMMAND = 29] = "REMOTE_COMMAND", i[i.GET_DELETED_ENTITY_IDS_NOT_MATCHING_HASH = 30] = "GET_DELETED_ENTITY_IDS_NOT_MATCHING_HASH", i[i.REQUEST_SOUNDBOARD_SOUNDS = 31] = "REQUEST_SOUNDBOARD_SOUNDS", i[i.SPEED_TEST_CREATE = 32] = "SPEED_TEST_CREATE", i[i.SPEED_TEST_DELETE = 33] = "SPEED_TEST_DELETE", i[i.REQUEST_LAST_MESSAGES = 34] = "REQUEST_LAST_MESSAGES", i[i.SEARCH_RECENT_MEMBERS = 35] = "SEARCH_RECENT_MEMBERS";
            class r extends l.EventEmitter {
                presenceUpdate(e, t, n, i, l) {
                    this.send(a.PRESENCE_UPDATE, {
                        status: e,
                        since: t,
                        activities: n,
                        afk: i,
                        broadcast: l
                    })
                }
                voiceStateUpdate(e) {
                    let {
                        guildId: t = null,
                        channelId: n = null,
                        selfMute: i = !1,
                        selfDeaf: l = !1,
                        selfVideo: r = !1,
                        preferredRegion: u = null,
                        videoStreamParameters: o = null,
                        flags: d = 0
                    } = e, c = {
                        guild_id: t,
                        channel_id: n,
                        self_mute: i,
                        self_deaf: l,
                        self_video: r,
                        flags: d
                    };
                    if (null != n && s.default.shouldIncludePreferredRegion() && (c.preferred_region = u), null != o) c.tracks = null == o ? void 0 : o.map(e => ({
                        type: e.type,
                        rid: e.rid,
                        quality: e.quality
                    }));
                    this.send(a.VOICE_STATE_UPDATE, c)
                }
                voiceServerPing() {
                    this.send(a.VOICE_SERVER_PING, null)
                }
                embeddedActivityClose(e, t, n) {
                    this.send(a.EMBEDDED_ACTIVITY_CLOSE, {
                        guild_id: null != e ? e : "0",
                        channel_id: t,
                        application_id: n
                    })
                }
                requestGuildMembers(e, t) {
                    let {
                        query: n,
                        limit: i,
                        userIds: l,
                        presences: s
                    } = t;
                    this.send(a.REQUEST_GUILD_MEMBERS, {
                        guild_id: e,
                        query: n,
                        limit: i,
                        user_ids: l,
                        presences: s
                    })
                }
                searchRecentMembers(e, t) {
                    let {
                        query: n,
                        continuationToken: i
                    } = t;
                    this.send(a.SEARCH_RECENT_MEMBERS, {
                        guild_id: e,
                        query: null != n ? n : "",
                        continuation_token: null != i ? i : null
                    })
                }
                updateGuildSubscriptions(e, t) {
                    this.send(a.GUILD_SUBSCRIPTIONS, {
                        guild_id: e,
                        ...t
                    })
                }
                callConnect(e) {
                    this.send(a.CALL_CONNECT, {
                        channel_id: e
                    })
                }
                lobbyConnect(e, t) {
                    this.send(a.LOBBY_CONNECT, {
                        lobby_id: e,
                        lobby_secret: t
                    })
                }
                lobbyDisconnect(e) {
                    this.send(a.LOBBY_DISCONNECT, {
                        lobby_id: e
                    })
                }
                lobbyVoiceStatesUpdate(e) {
                    this.send(a.LOBBY_VOICE_STATES_UPDATE, e.map(e => ({
                        lobby_id: e.lobbyId,
                        self_mute: e.selfMute,
                        self_deaf: e.selfDeaf
                    })))
                }
                streamCreate(e, t, n) {
                    let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
                    this.send(a.STREAM_CREATE, {
                        type: e,
                        guild_id: t,
                        channel_id: n,
                        preferred_region: i
                    })
                }
                streamWatch(e) {
                    this.send(a.STREAM_WATCH, {
                        stream_key: e
                    })
                }
                streamPing(e) {
                    this.send(a.STREAM_PING, {
                        stream_key: e
                    })
                }
                streamDelete(e) {
                    this.send(a.STREAM_DELETE, {
                        stream_key: e
                    })
                }
                streamSetPaused(e, t) {
                    this.send(a.STREAM_SET_PAUSED, {
                        stream_key: e,
                        paused: t
                    })
                }
                speedTestCreate() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                    this.send(a.SPEED_TEST_CREATE, {
                        preferred_region: e
                    })
                }
                speedTestDelete() {
                    this.send(a.SPEED_TEST_DELETE, null)
                }
                requestForumUnreads(e, t, n) {
                    this.send(a.REQUEST_FORUM_UNREADS, {
                        guild_id: e,
                        channel_id: t,
                        threads: n.map(e => ({
                            thread_id: e.threadId,
                            ack_message_id: e.ackMessageId
                        }))
                    })
                }
                requestSoundboardSounds(e) {
                    this.send(a.REQUEST_SOUNDBOARD_SOUNDS, {
                        guild_ids: e
                    })
                }
                requestLastMessages(e, t) {
                    this.send(a.REQUEST_LAST_MESSAGES, {
                        guild_id: e,
                        channel_ids: t
                    })
                }
                getDeletedEntityIdsNotMatchingHash(e, t, n, i, l) {
                    this.send(a.GET_DELETED_ENTITY_IDS_NOT_MATCHING_HASH, {
                        guild_id: e,
                        channel_ids_hash: t,
                        role_ids_hash: n,
                        emoji_ids_hash: i,
                        sticker_ids_hash: l
                    })
                }
                remoteCommand(e, t) {
                    this.send(a.REMOTE_COMMAND, {
                        target_session_id: e,
                        payload: t
                    })
                }
            }
        },
        518916: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                socket: function() {
                    return p
                },
                localPresenceState: function() {
                    return S
                },
                localVoiceState: function() {
                    return I
                },
                localLobbyVoiceStates: function() {
                    return A
                },
                setDispatchSocketMessageFunction: function() {
                    return g
                }
            });
            var i = n("35092"),
                a = n("913144"),
                l = n("49671"),
                s = n("605250"),
                r = n("271938"),
                u = n("599110"),
                o = n("35468"),
                d = n("773336"),
                c = n("509065"),
                _ = n("447214"),
                E = n("413196"),
                f = n("764867"),
                h = n("292892");
            let T = new s.default("ConnectionStore"),
                p = new _.default,
                S = new f.default(p),
                I = new h.default(p),
                A = new E.default(p),
                m = null;

            function g(e) {
                m = e
            }
            p.handleIdentify = () => {
                let e = r.default.getToken();
                return (T.verbose("handleIdentify called", {
                    hasToken: null != e
                }), null == e) ? null : {
                    token: e,
                    properties: u.default.getSuperProperties(),
                    presence: S.getState()
                }
            }, (0, d.isDesktop)() && l.default.remotePowerMonitor.on("resume", () => {
                p.expeditedHeartbeat(5e3, "power monitor resumed")
            }), o.default.addOfflineCallback(() => {
                p.networkStateChange(15e3, "network detected offline.", !1)
            }), o.default.addOnlineCallback(() => {
                p.networkStateChange(5e3, "network detected online.")
            }), p.on("disconnect", e => {
                let {
                    code: t,
                    reason: n
                } = e;
                a.default.dispatch({
                    type: "CONNECTION_CLOSED",
                    code: t,
                    reason: n
                })
            }), p.on("close", e => {
                let {
                    code: t,
                    reason: n
                } = e;
                a.default.dispatch({
                    type: "CONNECTION_INTERRUPTED",
                    code: t,
                    reason: n
                })
            });
            let C = [],
                N = null,
                O = 33,
                R = new Set(["READY", "INITIAL_GUILD"]);

            function v() {
                N = null;
                let e = Date.now(),
                    t = C.slice();
                if (C.length = 0, null == m) throw Error("setDispatchSocketMessageFunction needs to be called first!");
                let n = "none";
                try {
                    i.default.Emitter.batched(() => {
                        t.forEach(e => {
                            let [t, i] = e;
                            n = t, m(t, i)
                        }), c.default.flush()
                    })
                } catch (e) {
                    p.resetSocketOnError(e, n)
                }
                let a = Date.now() - e;
                a > 100 ? (T.log("Dispatched ".concat(t.length, " messages in ").concat(a, "ms")), O = 250) : O = 33
            }
            p.on("dispatch", (e, t) => {
                C.push([e, t]), R.has(e) ? (null != N && clearTimeout(N), v()) : null == N && (N = setTimeout(v, O))
            })
        },
        289362: function(e, t, n) {
            "use strict";

            function i(e) {
                let {
                    knownGuildVersions: t,
                    highestLastMessageId: n,
                    readStateVersion: i,
                    userGuildSettingsVersion: a,
                    userSettingsVersion: l,
                    privateChannelsVersion: s,
                    apiCodeVersion: r,
                    lastSelectedGuildId: u
                } = e, o = null == u || isNaN(Number(u)) ? void 0 : u;
                return {
                    guild_versions: t,
                    highest_last_message_id: n,
                    read_state_version: i,
                    user_guild_settings_version: a,
                    user_settings_version: l,
                    private_channels_version: s,
                    api_code_version: r,
                    initial_guild_id: o
                }
            }
            n.r(t), n.d(t, {
                toGatewayClientState: function() {
                    return i
                }
            })
        },
        413196: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                }
            });
            var i = n("201876"),
                a = n("260320"),
                l = n("42887");
            class s extends i.default {
                getInitialState() {
                    return this.getNextState()
                }
                getNextState() {
                    let e = a.default.getLobbiesWithVoice();
                    return e.length > 0 && (this._hadLobbyVoiceStates = !0), {
                        lobbies: e.map(e => ({
                            lobbyId: e.id,
                            selfMute: l.default.isSelfMute(e.application_id),
                            selfDeaf: l.default.isSelfDeaf(e.application_id)
                        }))
                    }
                }
                shouldCommit() {
                    return this._hadLobbyVoiceStates && this.socket.isSessionEstablished()
                }
                didCommit(e) {
                    let {
                        lobbies: t
                    } = e;
                    this.socket.lobbyVoiceStatesUpdate(t)
                }
                forceUpdate() {
                    this._hadLobbyVoiceStates && super.forceUpdate()
                }
                constructor(e) {
                    super(), this.socket = e, this._hadLobbyVoiceStates = !1
                }
            }
        },
        764867: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                }
            });
            var i = n("201876"),
                a = n("661736"),
                l = n("101125");
            class s extends i.default {
                getInitialState() {
                    return l.default.getLocalPresence()
                }
                getNextState() {
                    return l.default.getLocalPresence()
                }
                shouldCommit() {
                    return this.socket.isSessionEstablished()
                }
                emitPresenceUpdate(e) {
                    let {
                        status: t,
                        since: n,
                        activities: i,
                        afk: a,
                        broadcast: l
                    } = e;
                    this.socket.presenceUpdate(t, n, i, a, l)
                }
                handleConnectionOpen() {
                    let e = !this.switchingAccounts;
                    this.update({}, e), this.switchingAccounts = !1
                }
                handleAccountSwitch() {
                    this.switchingAccounts = !0, this.reset(), this.emitPresenceUpdate(this.getState())
                }
                constructor(e) {
                    super(), this.socket = e, this.switchingAccounts = !1, this.didCommit = (0, a.default)(5, 2e4, this.emitPresenceUpdate.bind(this))
                }
            }
        },
        292892: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return h
                }
            });
            var i = n("201876"),
                a = n("56947"),
                l = n("386045"),
                s = n("584687"),
                r = n("845579"),
                u = n("373469"),
                o = n("42203"),
                d = n("42887"),
                c = n("590401"),
                _ = n("568307"),
                E = n("568734"),
                f = n("49111");
            class h extends i.default {
                get guildId() {
                    return this.getState().guildId
                }
                get channelId() {
                    return this.getState().channelId
                }
                computeVoiceFlags() {
                    var e, t, n;
                    let i = 0,
                        o = r.ClipsAllowVoiceRecording.getSetting();
                    i = (0, E.setFlag)(i, f.VoiceFlags.ALLOW_VOICE_RECORDING, o);
                    let d = l.default.getSettings().clipsEnabled && (0, a.areClipsEnabled)() && ((null === (e = u.default.getCurrentUserActiveStream()) || void 0 === e ? void 0 : e.state) === f.ApplicationStreamStates.ACTIVE || (null === (t = u.default.getCurrentUserActiveStream()) || void 0 === t ? void 0 : t.state) === f.ApplicationStreamStates.PAUSED),
                        {
                            enableDecoupledGameClipping: c
                        } = s.default.getCurrentConfig({
                            location: "computeVoiceFlags"
                        }),
                        h = l.default.getSettings().decoupledClipsEnabled && (null === (n = _.default.getVisibleGame()) || void 0 === n ? void 0 : n.windowHandle) != null && c;
                    return i = (0, E.setFlag)(i, f.VoiceFlags.CLIPS_ENABLED, d || h)
                }
                getInitialState() {
                    return {
                        guildId: null,
                        channelId: null,
                        selfMute: d.default.isSelfMute(),
                        selfDeaf: d.default.isSelfDeaf(),
                        selfVideo: d.default.isVideoEnabled(),
                        preferredRegion: null,
                        videoStreamParameters: null,
                        flags: 0
                    }
                }
                getNextState(e) {
                    let {
                        guildId: t,
                        channelId: n
                    } = e;
                    return {
                        guildId: t,
                        channelId: n,
                        selfMute: d.default.isSelfMute(),
                        selfDeaf: d.default.isSelfDeaf(),
                        selfVideo: d.default.isVideoEnabled(),
                        preferredRegion: c.default.getPreferredRegion(),
                        videoStreamParameters: d.default.getVideoStreamParameters(),
                        flags: this.computeVoiceFlags()
                    }
                }
                shouldCommit() {
                    return this.socket.isSessionEstablished()
                }
                didCommit(e) {
                    var t;
                    let {
                        guildId: n,
                        channelId: i,
                        selfMute: a,
                        selfDeaf: l,
                        selfVideo: s,
                        preferredRegion: r,
                        videoStreamParameters: u,
                        flags: d = 0
                    } = e;
                    s && (null === (t = o.default.getChannel(i)) || void 0 === t ? void 0 : t.type) === f.ChannelTypes.GUILD_STAGE_VOICE ? this.socket.voiceStateUpdate({
                        guildId: n,
                        channelId: i,
                        selfMute: a,
                        selfDeaf: l,
                        selfVideo: s,
                        preferredRegion: r,
                        videoStreamParameters: u,
                        flags: d
                    }) : this.socket.voiceStateUpdate({
                        guildId: n,
                        channelId: i,
                        selfMute: a,
                        selfDeaf: l,
                        selfVideo: s,
                        preferredRegion: r,
                        flags: d
                    })
                }
                constructor(e) {
                    super(), this.socket = e
                }
            }
        },
        571420: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getIsPaused: function() {
                    return a
                },
                setIsPaused: function() {
                    return l
                }
            });
            let i = !1;

            function a() {
                return i
            }

            function l(e) {
                i = e
            }
        },
        263901: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                addPostConnectionCallback: function() {
                    return r
                }
            });
            var i = n("913144"),
                a = n("619443");
            let l = [];

            function s(e) {
                setImmediate(() => e())
            }

            function r(e) {
                a.default.isConnectedOrOverlay() ? s(e) : l.push(e)
            }
            i.default.subscribe("CONNECTION_OPEN", () => {
                l.forEach(e => s(e)), l = []
            })
        },
        797785: function(e, t, n) {
            "use strict";

            function i(e, t) {
                return new WebSocket(e, t)
            }
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            })
        },
        399010: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return b
                }
            });
            var i = n("917351"),
                a = n.n(i);
            n("576863");
            var l = n("446674"),
                s = n("913144"),
                r = n("851387"),
                u = n("775433"),
                o = n("327037"),
                d = n("605250"),
                c = n("871336"),
                _ = n("25932"),
                E = n("410912"),
                f = n("116949"),
                h = n("233069"),
                T = n("522308"),
                p = n("766274"),
                S = n("42203"),
                I = n("26989"),
                A = n("778588"),
                m = n("260320"),
                g = n("697218"),
                C = n("800762"),
                N = n("10514"),
                O = n("521012"),
                R = n("224400"),
                v = n("390946"),
                M = n("509065"),
                y = n("518916");
            let D = new d.default("ConnectionStore"),
                L = new M.default(y.socket, (e, t) => {
                    var n;
                    e = null != e ? e : {
                        type: "CHANNEL_UPDATES",
                        channels: []
                    };
                    let i = (0, h.createChannelRecordFromServer)(t),
                        a = S.default.getChannel(t.id),
                        l = null == a ? void 0 : a.merge({
                            ...i,
                            recipients: a.recipients,
                            bitrate: null !== (n = i.bitrate) && void 0 !== n ? n : a.bitrate
                        });
                    return e.channels.push(null != l ? l : i), e
                }, e => "CHANNEL_UPDATE" !== e),
                U = new M.default(y.socket, (e, t) => ((e = null == e ? {
                    type: "SOUNDBOARD_SOUNDS_RECEIVED",
                    updates: []
                } : e).updates.push({
                    guildId: t.guild_id,
                    sounds: t.soundboard_sounds.map(e => ({
                        name: e.name,
                        soundId: e.sound_id,
                        emojiName: e.emoji_name,
                        emojiId: e.emoji_id,
                        userId: e.user_id,
                        volume: e.volume,
                        available: e.available,
                        guildId: t.guild_id
                    }))
                }), e), e => "SOUNDBOARD_SOUNDS" !== e),
                P = new M.default(y.socket, (e, t) => ((e = null == e ? {
                    type: "PRESENCE_UPDATES",
                    updates: []
                } : e).updates.push(t), e), e => "PRESENCE_UPDATE" !== e);

            function b(e, t) {
                var i, s, d, I, m, P, b;
                switch (M.default.flush(e, t), e) {
                    case "INITIAL_GUILD":
                        E.default.initialGuild.measure(() => {
                            l.default.Emitter.batched(() => {
                                let e = v.hydrateInitialGuild(t, y.socket.identifyStartTime);
                                if (null != g.default.getCurrentUser()) {
                                    var n;
                                    G({
                                        type: "GUILD_CREATE",
                                        guild: e
                                    }), G({
                                        type: "VOICE_STATE_UPDATES",
                                        voiceStates: e.voice_states.map(t => ({
                                            userId: t.user_id,
                                            guildId: e.id,
                                            sessionId: t.session_id,
                                            channelId: t.channel_id,
                                            mute: t.mute,
                                            deaf: t.deaf,
                                            selfMute: t.self_mute,
                                            selfDeaf: t.self_deaf,
                                            selfVideo: t.self_video || !1,
                                            suppress: t.suppress,
                                            selfStream: t.self_stream || !1,
                                            requestToSpeakTimestamp: null !== (n = t.request_to_speak_timestamp) && void 0 !== n ? n : null
                                        }))
                                    }), D.log("Dispatched INITIAL_GUILD ".concat(t.id))
                                }
                            })
                        });
                        break;
                    case "READY_SUPPLEMENTAL":
                        E.default.readySupplemental.measure(() => {
                            l.default.Emitter.batched(() => {
                                var e, n;
                                t = E.default.hydrateReadySupplemental.measure(() => v.hydrateReadySupplementalPayload(t, y.socket.identifyStartTime));
                                let i = e => e.map(e => ({
                                        user: e.user,
                                        status: e.status,
                                        clientStatus: e.client_status,
                                        activities: e.activities,
                                        broadcast: e.broadcast
                                    })),
                                    a = t.guilds.filter(e => !0 !== e.unavailable);
                                a.forEach(e => {
                                    e.presences = i(e.presences || [])
                                });
                                let l = t.presences ? i(t.presences) : [],
                                    s = (null !== (e = t.lazy_private_channels) && void 0 !== e ? e : []).map(e => (0, h.createChannelRecordFromServer)(e)),
                                    r = null !== (n = t.game_invites) && void 0 !== n ? n : [];
                                E.default.dispatchReadySupplemental.measure(() => {
                                    G({
                                        type: "CONNECTION_OPEN_SUPPLEMENTAL",
                                        guilds: a,
                                        presences: l,
                                        lazyPrivateChannels: s,
                                        gameInvites: r
                                    })
                                });
                                let u = [];
                                a.forEach(e => {
                                    e.voice_states.forEach(t => {
                                        var n;
                                        u.push({
                                            userId: t.user_id,
                                            guildId: e.id,
                                            sessionId: t.session_id,
                                            channelId: t.channel_id,
                                            mute: t.mute,
                                            deaf: t.deaf,
                                            selfMute: t.self_mute,
                                            selfDeaf: t.self_deaf,
                                            selfVideo: t.self_video || !1,
                                            suppress: t.suppress,
                                            selfStream: t.self_stream || !1,
                                            requestToSpeakTimestamp: null !== (n = t.request_to_speak_timestamp) && void 0 !== n ? n : null
                                        })
                                    })
                                }), G({
                                    type: "VOICE_STATE_UPDATES",
                                    voiceStates: u,
                                    initial: !0
                                }), y.localVoiceState.update(), y.localLobbyVoiceStates.update({}, !0)
                            })
                        }), setTimeout(() => G({
                            type: "POST_CONNECTION_OPEN"
                        }), 2e3);
                        break;
                    case "READY":
                        if (t.user.bot) {
                            G({
                                type: "LOGOUT"
                            });
                            return
                        }
                        E.default.ready.measure(() => {
                            l.default.Emitter.batched(() => {
                                t = E.default.hydrateReady.measure(() => v.hydrateReadyPayloadPrioritized(t, y.socket.identifyStartTime));
                                let e = t.private_channels.map(e => (0, h.createChannelRecordFromServer)(e)),
                                    n = t.guilds.filter(e => e.unavailable).map(e => e.id),
                                    i = t.guilds.filter(e => !0 !== e.unavailable);
                                i.forEach(e => {
                                    e.presences = []
                                });
                                let a = null == t.user_settings_proto ? void 0 : (0, f.b64ToPreloadedUserSettingsProto)(t.user_settings_proto);
                                E.default.dispatchReady.measure(() => {
                                    var l;
                                    G({
                                        type: "CONNECTION_OPEN",
                                        sessionId: t.session_id,
                                        authSessionIdHash: t.auth_session_id_hash,
                                        user: t.user,
                                        users: t.users,
                                        guilds: i,
                                        initialPrivateChannels: e,
                                        unavailableGuilds: n,
                                        readState: t.read_state,
                                        userGuildSettings: t.user_guild_settings,
                                        tutorial: t.tutorial,
                                        relationships: t.relationships,
                                        friendSuggestionCount: t.friend_suggestion_count,
                                        presences: t.presences,
                                        analyticsToken: t.analytics_token,
                                        experiments: t.experiments,
                                        connectedAccounts: t.connected_accounts,
                                        guildExperiments: t.guild_experiments,
                                        requiredAction: t.required_action,
                                        consents: t.consents,
                                        sessions: w(t.sessions || []),
                                        pendingPayments: t.pending_payments,
                                        countryCode: null !== (l = t.country_code) && void 0 !== l ? l : void 0,
                                        guildJoinRequests: t.guild_join_requests || [],
                                        userSettingsProto: a,
                                        apiCodeVersion: t.api_code_version,
                                        auth: t.auth
                                    })
                                }), null != t.auth_token && G({
                                    type: "UPDATE_TOKEN",
                                    token: t.auth_token,
                                    userId: t.user.id
                                }), y.localPresenceState.update(), y.localVoiceState.update(), y.localLobbyVoiceStates.update(), H()
                            })
                        });
                        break;
                    case "RESUMED":
                        y.localPresenceState.forceUpdate(), y.localVoiceState.forceUpdate(), y.localLobbyVoiceStates.forceUpdate(), H(), G({
                            type: "CONNECTION_RESUMED"
                        });
                        break;
                    case "TYPING_START":
                        null != t.member && k(t.guild_id, t.member.user, t.member), G({
                            type: "TYPING_START",
                            channelId: t.channel_id,
                            userId: t.user_id
                        });
                        break;
                    case "ACTIVITY_START":
                        G({
                            type: "ACTIVITY_START",
                            userId: t.user_id,
                            activity: t.activity
                        });
                        break;
                    case "ACTIVITY_USER_ACTION":
                        G({
                            type: "ACTIVITY_USER_ACTION",
                            actionType: t.action_type,
                            user: t.user,
                            applicationId: t.application_id,
                            channelId: t.channel_id,
                            messageId: t.message_id
                        });
                        break;
                    case "MESSAGE_CREATE":
                        F(t), null != t.author && G({
                            type: "MESSAGE_CREATE",
                            guildId: t.guild_id,
                            channelId: t.channel_id,
                            message: t,
                            optimistic: !1,
                            isPushNotification: !1
                        });
                        break;
                    case "MESSAGE_UPDATE":
                        F(t), G({
                            type: "MESSAGE_UPDATE",
                            guildId: t.guild_id,
                            message: t
                        });
                        break;
                    case "MESSAGE_DELETE":
                        G({
                            type: "MESSAGE_DELETE",
                            guildId: t.guild_id,
                            id: t.id,
                            channelId: t.channel_id
                        });
                        break;
                    case "MESSAGE_DELETE_BULK":
                        G({
                            type: "MESSAGE_DELETE_BULK",
                            guildId: t.guild_id,
                            ids: t.ids,
                            channelId: t.channel_id
                        });
                        break;
                    case "MESSAGE_ACK":
                        G({
                            type: "MESSAGE_ACK",
                            channelId: t.channel_id,
                            messageId: t.message_id,
                            manual: t.manual,
                            newMentionCount: t.mention_count,
                            version: t.version
                        });
                        break;
                    case "GUILD_FEATURE_ACK":
                        G({
                            type: "GUILD_FEATURE_ACK",
                            id: t.resource_id,
                            ackType: t.ack_type,
                            ackedId: t.entity_id
                        });
                        break;
                    case "USER_NON_CHANNEL_ACK":
                        G({
                            type: "USER_NON_CHANNEL_ACK",
                            ackType: t.ack_type,
                            ackedId: t.entity_id
                        });
                        break;
                    case "CHANNEL_PINS_ACK":
                        G({
                            type: "CHANNEL_PINS_ACK",
                            channelId: t.channel_id,
                            timestamp: t.timestamp,
                            version: t.version
                        });
                        break;
                    case "CHANNEL_PINS_UPDATE":
                        G({
                            type: "CHANNEL_PINS_UPDATE",
                            channelId: t.channel_id,
                            lastPinTimestamp: t.last_pin_timestamp
                        });
                        break;
                    case "CHANNEL_CREATE":
                    case "CHANNEL_DELETE":
                        G({
                            type: e,
                            channel: (0, h.createChannelRecordFromServer)(t)
                        });
                        break;
                    case "VOICE_CHANNEL_STATUS_UPDATE":
                        G({
                            type: e,
                            id: t.id,
                            status: t.status
                        });
                        break;
                    case "CHANNEL_UPDATE":
                        L.add(t);
                        break;
                    case "THREAD_CREATE":
                    case "THREAD_UPDATE":
                    case "THREAD_DELETE": {
                        let {
                            newly_created: n,
                            ...i
                        } = t;
                        G({
                            type: e,
                            isNewlyCreated: n,
                            channel: (0, h.createChannelRecordFromServer)(i)
                        });
                        break
                    }
                    case "THREAD_LIST_SYNC":
                        G({
                            type: "THREAD_LIST_SYNC",
                            guildId: t.guild_id,
                            threads: t.threads.map(e => {
                                let t = S.default.getChannel(e.parent_id);
                                return null != t && (e.nsfw = t.nsfw, e.parentChannelThreadType = t.type), (0, h.createChannelRecordFromServer)(e)
                            }),
                            mostRecentMessages: t.most_recent_messages,
                            members: t.members ? a.map(t.members, _.default) : void 0,
                            channelIds: t.channel_ids
                        });
                        break;
                    case "THREAD_MEMBER_UPDATE":
                        G({
                            type: "THREAD_MEMBER_UPDATE",
                            id: t.id,
                            guildId: t.guild_id,
                            userId: t.user_id,
                            flags: t.flags,
                            muted: t.muted,
                            muteConfig: t.mute_config,
                            joinTimestamp: t.join_timestamp
                        });
                        break;
                    case "THREAD_MEMBERS_UPDATE":
                        G({
                            type: "THREAD_MEMBERS_UPDATE",
                            id: t.id,
                            guildId: t.guild_id,
                            memberCount: t.member_count,
                            addedMembers: null === (i = t.added_members) || void 0 === i ? void 0 : i.map(e => ({
                                id: e.id,
                                guildId: t.guild_id,
                                userId: e.user_id,
                                flags: e.flags,
                                joinTimestamp: e.join_timestamp
                            })),
                            removedMemberIds: t.removed_member_ids,
                            memberIdsPreview: t.member_ids_preview
                        });
                        break;
                    case "FORUM_UNREADS":
                        if (t.permission_denied) break;
                        G({
                            type: "FORUM_UNREADS",
                            channelId: t.channel_id,
                            threads: t.threads.map(e => ({
                                threadId: e.thread_id,
                                missing: e.missing,
                                count: e.count
                            }))
                        });
                        break;
                    case "SOUNDBOARD_SOUNDS":
                        U.add(t);
                        break;
                    case "CHANNEL_RECIPIENT_ADD":
                    case "CHANNEL_RECIPIENT_REMOVE":
                        let B = S.default.getBasicChannel(t.channel_id);
                        G({
                            type: e,
                            channelId: t.channel_id,
                            user: t.user,
                            nick: t.nick,
                            isMember: null != B
                        });
                        break;
                    case "GUILD_CREATE":
                        if (t.unavailable) G({
                            type: "GUILD_UNAVAILABLE",
                            guildId: t.id
                        });
                        else {
                            let e = v.hydratePreviouslyUnavailableGuild(t);
                            r.default.createGuild(e), G({
                                type: "VOICE_STATE_UPDATES",
                                voiceStates: e.voice_states.map(t => ({
                                    userId: t.user_id,
                                    guildId: e.id,
                                    sessionId: t.session_id,
                                    channelId: t.channel_id,
                                    mute: t.mute,
                                    deaf: t.deaf,
                                    selfMute: t.self_mute,
                                    selfDeaf: t.self_deaf,
                                    selfVideo: t.self_video || !1,
                                    suppress: t.suppress,
                                    selfStream: t.self_stream || !1,
                                    requestToSpeakTimestamp: null !== (s = t.request_to_speak_timestamp) && void 0 !== s ? s : null
                                }))
                            })
                        }
                        break;
                    case "GUILD_UPDATE":
                        G({
                            type: "GUILD_UPDATE",
                            guild: t
                        }), t.unavailable && G({
                            type: "GUILD_UNAVAILABLE",
                            guildId: t.id
                        });
                        break;
                    case "GUILD_DELETE":
                        G({
                            type: "GUILD_DELETE",
                            guild: t
                        }), t.unavailable && G({
                            type: "GUILD_UNAVAILABLE",
                            guildId: t.id
                        });
                        break;
                    case "GUILD_MEMBERS_CHUNK":
                        l.default.Emitter.batched(() => {
                            G({
                                type: "GUILD_MEMBERS_CHUNK",
                                guildId: t.guild_id,
                                members: t.members,
                                notFound: t.not_found
                            }), null != t.presences && t.presences.forEach(e => {
                                let {
                                    user: n,
                                    status: i,
                                    client_status: a,
                                    activities: l,
                                    broadcast: s
                                } = e;
                                return V({
                                    guildId: t.guild_id,
                                    user: n,
                                    status: i,
                                    activities: l,
                                    clientStatus: a,
                                    broadcast: s
                                })
                            }), M.default.flush()
                        });
                        break;
                    case "THREAD_MEMBER_LIST_UPDATE":
                        l.default.Emitter.batched(() => {
                            G({
                                type: "THREAD_MEMBER_LIST_UPDATE",
                                guildId: t.guild_id,
                                threadId: t.thread_id,
                                members: t.members
                            }), null != t.presences && t.presences.forEach(e => {
                                let {
                                    user: n,
                                    status: i,
                                    client_status: a,
                                    activities: l,
                                    broadcast: s
                                } = e;
                                return V({
                                    guildId: t.guild_id,
                                    user: n,
                                    status: i,
                                    activities: l,
                                    clientStatus: a,
                                    broadcast: s
                                })
                            }), M.default.flush()
                        });
                        break;
                    case "GUILD_BAN_ADD":
                    case "GUILD_BAN_REMOVE":
                    case "GUILD_MEMBER_ADD":
                    case "GUILD_MEMBER_UPDATE":
                    case "GUILD_MEMBER_REMOVE":
                        G({
                            type: e,
                            guildId: t.guild_id,
                            user: t.user,
                            avatar: t.avatar,
                            roles: t.roles,
                            nick: t.nick,
                            premiumSince: t.premium_since,
                            isPending: t.pending,
                            joinedAt: t.joined_at,
                            communicationDisabledUntil: t.communication_disabled_until,
                            unusualDMActivityUntil: t.unusual_dm_activity_until,
                            flags: t.flags
                        });
                        break;
                    case "GUILD_ROLE_CREATE":
                    case "GUILD_ROLE_UPDATE":
                        G({
                            type: e,
                            guildId: t.guild_id,
                            role: t.role
                        });
                        break;
                    case "GUILD_ROLE_DELETE":
                        G({
                            type: "GUILD_ROLE_DELETE",
                            guildId: t.guild_id,
                            roleId: t.role_id,
                            version: t.version
                        });
                        break;
                    case "GUILD_EMOJIS_UPDATE":
                        G({
                            type: "GUILD_EMOJIS_UPDATE",
                            guildId: t.guild_id,
                            emojis: t.emojis
                        });
                        break;
                    case "GUILD_STICKERS_UPDATE":
                        G({
                            type: "GUILD_STICKERS_UPDATE",
                            guildId: t.guild_id,
                            stickers: t.stickers
                        });
                        break;
                    case "GUILD_INTEGRATIONS_UPDATE":
                        G({
                            type: "GUILD_INTEGRATIONS_UPDATE",
                            guildId: t.guild_id
                        });
                        break;
                    case "INTEGRATION_CREATE":
                        G({
                            type: "INTEGRATION_CREATE",
                            application: t.application,
                            guildId: t.guild_id
                        });
                        break;
                    case "INTEGRATION_DELETE":
                        G({
                            type: "INTEGRATION_DELETE",
                            applicationId: t.application_id,
                            guildId: t.guild_id
                        });
                        break;
                    case "USER_UPDATE":
                        G({
                            type: "CURRENT_USER_UPDATE",
                            user: t
                        });
                        break;
                    case "USER_SETTINGS_PROTO_UPDATE":
                        let x = (0, f.b64ToProtoWithType)(t.settings.type, t.settings.proto);
                        if (null == x) break;
                        if ("string" == typeof x) throw console.error("Invalid proto: |".concat(x, "| |").concat(t.settings.proto, "|")), console.error({
                            parsed: x,
                            wire: t.settings.proto,
                            type: t.settings.type
                        }), Error("UserSettingsProto must not be a string");
                        G({
                            type: "USER_SETTINGS_PROTO_UPDATE",
                            settings: {
                                proto: x,
                                type: t.settings.type
                            },
                            partial: t.partial
                        });
                        break;
                    case "USER_GUILD_SETTINGS_UPDATE":
                        G({
                            type: "USER_GUILD_SETTINGS_FULL_UPDATE",
                            userGuildSettings: [t]
                        });
                        break;
                    case "USER_CONNECTIONS_UPDATE":
                        G({
                            type: "USER_CONNECTIONS_UPDATE"
                        });
                        break;
                    case "USER_REQUIRED_ACTION_UPDATE":
                        G({
                            type: "USER_REQUIRED_ACTION_UPDATE",
                            requiredAction: t.required_action
                        });
                        break;
                    case "USER_NOTE_UPDATE":
                        G({
                            type: "USER_NOTE_UPDATE",
                            ...t
                        });
                        break;
                    case "RELATIONSHIP_ADD":
                        G({
                            type: "RELATIONSHIP_ADD",
                            relationship: {
                                id: t.id,
                                type: t.type,
                                user: t.user,
                                since: t.since,
                                nickname: t.nickname
                            },
                            shouldNotify: !0 === t.should_notify
                        });
                        break;
                    case "RELATIONSHIP_REMOVE":
                        G({
                            type: "RELATIONSHIP_REMOVE",
                            relationship: t
                        });
                        break;
                    case "RELATIONSHIP_UPDATE":
                        G({
                            type: "RELATIONSHIP_UPDATE",
                            relationship: t
                        });
                        break;
                    case "PRESENCE_UPDATE":
                        V({
                            guildId: t.guild_id,
                            user: t.user,
                            status: t.status,
                            activities: t.activities,
                            clientStatus: t.client_status,
                            broadcast: t.broadcast
                        });
                        break;
                    case "PRESENCES_REPLACE":
                        G({
                            type: "PRESENCES_REPLACE",
                            presences: t
                        });
                        break;
                    case "SESSIONS_REPLACE":
                        G({
                            type: "SESSIONS_REPLACE",
                            sessions: w(t)
                        });
                        break;
                    case "VOICE_STATE_UPDATE":
                        null != t.member && k(t.guild_id, t.member.user, t.member), G({
                            type: "VOICE_STATE_UPDATES",
                            voiceStates: [{
                                userId: t.user_id,
                                guildId: t.guild_id,
                                sessionId: t.session_id,
                                channelId: t.channel_id,
                                mute: t.mute,
                                deaf: t.deaf,
                                selfMute: t.self_mute,
                                selfDeaf: t.self_deaf,
                                selfVideo: t.self_video || !1,
                                suppress: t.suppress,
                                selfStream: t.self_stream || !1,
                                requestToSpeakTimestamp: null !== (d = t.request_to_speak_timestamp) && void 0 !== d ? d : null,
                                oldChannelId: C.default.getUserVoiceChannelId(t.guild_id, t.user_id)
                            }]
                        });
                        break;
                    case "LOBBY_VOICE_STATE_UPDATE":
                        G({
                            type: "LOBBY_VOICE_STATE_UPDATE",
                            userId: t.user_id,
                            lobbyId: t.lobby_id,
                            sessionId: t.session_id,
                            channelId: t.channel_id,
                            mute: t.mute,
                            deaf: t.deaf,
                            selfMute: t.self_mute,
                            selfDeaf: t.self_deaf
                        });
                        break;
                    case "VOICE_SERVER_UPDATE":
                        G({
                            type: "VOICE_SERVER_UPDATE",
                            guildId: t.guild_id,
                            channelId: t.channel_id,
                            endpoint: t.endpoint,
                            token: t.token
                        });
                        break;
                    case "LOBBY_VOICE_SERVER_UPDATE":
                        G({
                            type: "LOBBY_VOICE_SERVER_UPDATE",
                            lobbyId: t.lobby_id,
                            endpoint: t.endpoint,
                            token: t.token
                        });
                        break;
                    case "CALL_CREATE":
                        G({
                            type: "CALL_CREATE",
                            channelId: t.channel_id,
                            messageId: t.message_id,
                            embeddedActivities: t.embedded_activities,
                            region: t.region,
                            ringing: t.ringing
                        });
                        let Y = t.voice_states;
                        null != Y && G({
                            type: "VOICE_STATE_UPDATES",
                            voiceStates: Y.map(e => ({
                                userId: e.user_id,
                                guildId: null,
                                sessionId: e.session_id,
                                channelId: e.channel_id,
                                mute: e.mute,
                                deaf: e.deaf,
                                selfMute: e.self_mute,
                                selfDeaf: e.self_deaf,
                                selfVideo: e.self_video || !1,
                                suppress: e.suppress,
                                selfStream: e.self_stream || !1,
                                requestToSpeakTimestamp: null !== (I = e.request_to_speak_timestamp) && void 0 !== I ? I : null
                            }))
                        });
                        break;
                    case "CALL_UPDATE":
                        G({
                            type: "CALL_UPDATE",
                            channelId: t.channel_id,
                            messageId: t.message_id,
                            region: t.region,
                            ringing: t.ringing
                        });
                        break;
                    case "CALL_DELETE":
                        G({
                            type: "CALL_DELETE",
                            channelId: t.channel_id,
                            unavailable: t.unavailable
                        });
                        break;
                    case "OAUTH2_TOKEN_REVOKE":
                        G({
                            type: "OAUTH2_TOKEN_REVOKE",
                            accessToken: t.access_token
                        });
                        break;
                    case "RECENT_MENTION_DELETE":
                        G({
                            type: "RECENT_MENTION_DELETE",
                            id: t.message_id
                        });
                        break;
                    case "FRIEND_SUGGESTION_CREATE":
                        G({
                            type: "FRIEND_SUGGESTION_CREATE",
                            suggestion: t
                        });
                        break;
                    case "FRIEND_SUGGESTION_DELETE":
                        G({
                            type: "FRIEND_SUGGESTION_DELETE",
                            suggestedUserId: t.suggested_user_id
                        });
                        break;
                    case "WEBHOOKS_UPDATE":
                        G({
                            type: "WEBHOOKS_UPDATE",
                            guildId: t.guild_id,
                            channelId: t.channel_id
                        });
                        break;
                    case "BURST_CREDIT_BALANCE_UPDATE":
                        G({
                            type: "BURST_CREDITS_SET",
                            amount: t.amount,
                            wasReplenishedToday: t.replenished_today,
                            nextReplenishAt: new Date(t.next_replenish_at)
                        });
                        break;
                    case "MESSAGE_REACTION_ADD":
                    case "MESSAGE_REACTION_REMOVE":
                        G({
                            type: e,
                            channelId: t.channel_id,
                            messageId: t.message_id,
                            userId: t.user_id,
                            emoji: t.emoji,
                            burst: t.burst,
                            colors: t.burst_colors,
                            messageAuthorId: t.message_author_id
                        });
                        break;
                    case "MESSAGE_REACTION_REMOVE_ALL":
                        G({
                            type: "MESSAGE_REACTION_REMOVE_ALL",
                            channelId: t.channel_id,
                            messageId: t.message_id
                        });
                        break;
                    case "MESSAGE_REACTION_REMOVE_EMOJI":
                        G({
                            type: "MESSAGE_REACTION_REMOVE_EMOJI",
                            channelId: t.channel_id,
                            messageId: t.message_id,
                            emoji: t.emoji
                        });
                        break;
                    case "MESSAGE_REACTION_ADD_MANY":
                        G({
                            type: "MESSAGE_REACTION_ADD_MANY",
                            channelId: t.channel_id,
                            messageId: t.message_id,
                            reactions: t.reactions
                        });
                        break;
                    case "PAYMENT_UPDATE":
                        G({
                            type: "PAYMENT_UPDATE",
                            payment: t
                        });
                        break;
                    case "ENTITLEMENT_CREATE":
                    case "ENTITLEMENT_UPDATE":
                    case "ENTITLEMENT_DELETE":
                        G({
                            type: e,
                            entitlement: t
                        });
                        break;
                    case "USER_PAYMENT_SOURCES_UPDATE":
                        A.default.hasLayers() && (n("850068").fetchPaymentSources(), u.fetchSubscriptionPlansBySKUs(N.default.getFetchedSKUIDs()));
                        break;
                    case "USER_SUBSCRIPTIONS_UPDATE":
                        o.fetchCurrentUser(), A.default.hasLayers() && n("850068").fetchSubscriptions();
                        break;
                    case "USER_PREMIUM_GUILD_SUBSCRIPTION_SLOT_CREATE":
                        G({
                            type: "GUILD_BOOST_SLOT_CREATE",
                            guildBoostSlot: T.default.createFromServer(t, O.default.getSubscriptionById(t.subscription_id))
                        });
                        break;
                    case "USER_PREMIUM_GUILD_SUBSCRIPTION_SLOT_UPDATE":
                        G({
                            type: "GUILD_BOOST_SLOT_UPDATE",
                            guildBoostSlot: T.default.createFromServer(t, O.default.getSubscriptionById(t.subscription_id))
                        });
                        break;
                    case "BILLING_POPUP_BRIDGE_CALLBACK":
                        G({
                            type: "BILLING_POPUP_BRIDGE_CALLBACK",
                            paymentSourceType: t.payment_source_type,
                            state: t.state,
                            path: t.path,
                            query: t.query
                        });
                        break;
                    case "USER_PAYMENT_BROWSER_CHECKOUT_DONE":
                        G({
                            type: "USER_PAYMENT_BROWSER_CHECKOUT_DONE",
                            loadId: t.load_id
                        });
                        break;
                    case "USER_PAYMENT_CLIENT_ADD":
                        (0, R.getPurchaseTokenHash)().then(e => {
                            let n = t.purchase_token_hash;
                            n === e && G({
                                type: "USER_PAYMENT_CLIENT_ADD",
                                purchaseTokenHash: n,
                                expiresAt: t.expires_at
                            })
                        });
                        break;
                    case "GUILD_MEMBER_LIST_UPDATE":
                        l.default.Emitter.batched(() => {
                            let e = e => {
                                if (null == e.member) return;
                                let {
                                    member: n
                                } = e;
                                if (k(t.guild_id, n.user, n), null == n.presence) return;
                                let {
                                    presence: i
                                } = n;
                                V({
                                    guildId: t.guild_id,
                                    user: i.user,
                                    status: i.status,
                                    activities: i.activities,
                                    clientStatus: i.client_status,
                                    broadcast: i.broadcast
                                })
                            };
                            t.ops.forEach(t => {
                                let {
                                    op: n,
                                    items: i,
                                    item: a
                                } = t;
                                switch (n) {
                                    case "SYNC":
                                        i.forEach(e);
                                        break;
                                    case "UPDATE":
                                    case "INSERT":
                                        e(a)
                                }
                            }), M.default.flush(), G({
                                type: "GUILD_MEMBER_LIST_UPDATE",
                                guildId: t.guild_id,
                                id: t.id,
                                ops: t.ops,
                                groups: t.groups,
                                memberCount: t.member_count
                            })
                        });
                        break;
                    case "LOBBY_CREATE":
                        G({
                            type: "LOBBY_CREATE",
                            lobby: t
                        }), t.voice_states.forEach(e => {
                            G({
                                type: "LOBBY_VOICE_STATE_UPDATE",
                                lobbyId: t.id,
                                userId: e.user_id,
                                sessionId: e.session_id,
                                channelId: e.channel_id,
                                mute: e.mute,
                                deaf: e.deaf,
                                selfMute: e.self_mute,
                                selfDeaf: e.self_deaf
                            })
                        });
                        break;
                    case "LOBBY_UPDATE":
                        G({
                            type: "LOBBY_UPDATE",
                            lobby: t
                        });
                        break;
                    case "LOBBY_DELETE":
                        G({
                            type: "LOBBY_DELETE",
                            lobbyId: t.id,
                            reason: t.reason
                        });
                        break;
                    case "LOBBY_MEMBER_CONNECT":
                    case "LOBBY_MEMBER_UPDATE":
                    case "LOBBY_MEMBER_DISCONNECT":
                        G({
                            type: e,
                            lobbyId: t.lobby_id,
                            member: t.member
                        });
                        break;
                    case "LOBBY_MESSAGE":
                        G({
                            type: "LOBBY_MESSAGE",
                            lobbyId: t.lobby_id,
                            senderId: t.sender_id,
                            data: t.data
                        });
                        break;
                    case "GIFT_CODE_UPDATE":
                        G({
                            type: "GIFT_CODE_UPDATE",
                            uses: t.uses,
                            code: t.code
                        });
                        break;
                    case "GIFT_CODE_CREATE":
                        G({
                            type: "GIFT_CODE_CREATE",
                            giftCode: t
                        });
                        break;
                    case "USER_ACHIEVEMENT_UPDATE":
                        G({
                            type: "USER_ACHIEVEMENT_UPDATE",
                            userAchievement: t
                        });
                        break;
                    case "LIBRARY_APPLICATION_UPDATE":
                        G({
                            type: "LIBRARY_APPLICATION_UPDATE",
                            libraryApplication: t
                        });
                        break;
                    case "STREAM_CREATE":
                        G({
                            type: "STREAM_CREATE",
                            streamKey: t.stream_key,
                            region: t.region,
                            viewerIds: t.viewer_ids,
                            rtcServerId: t.rtc_server_id,
                            paused: t.paused
                        });
                        break;
                    case "STREAM_SERVER_UPDATE":
                        G({
                            type: "STREAM_SERVER_UPDATE",
                            streamKey: t.stream_key,
                            endpoint: t.endpoint,
                            token: t.token
                        });
                        break;
                    case "STREAM_UPDATE":
                        G({
                            type: "STREAM_UPDATE",
                            streamKey: t.stream_key,
                            region: t.region,
                            viewerIds: t.viewer_ids,
                            paused: t.paused
                        });
                        break;
                    case "STREAM_DELETE":
                        G({
                            type: "STREAM_DELETE",
                            streamKey: t.stream_key,
                            unavailable: t.unavailable,
                            reason: t.reason
                        });
                        break;
                    case "GENERIC_PUSH_NOTIFICATION_SENT":
                        G({
                            type: "GENERIC_PUSH_NOTIFICATION_SENT",
                            title: t.title,
                            body: t.body,
                            trackingType: t.tracking_type,
                            icon: t.icon,
                            route: t.route,
                            tag: t.tag
                        });
                        break;
                    case "NOTIFICATION_CENTER_ITEM_CREATE":
                        G({
                            type: "NOTIFICATION_CENTER_ITEM_CREATE",
                            item: t
                        });
                        break;
                    case "NOTIFICATION_CENTER_ITEM_DELETE":
                        G({
                            type: "NOTIFICATION_CENTER_ITEM_DELETE",
                            id: t.id
                        });
                        break;
                    case "NOTIFICATION_CENTER_ITEMS_ACK":
                        G({
                            type: "NOTIFICATION_CENTER_ITEMS_ACK",
                            ids: [t.id],
                            optimistic: !1
                        });
                        break;
                    case "NOTIFICATION_CENTER_ITEM_COMPLETED":
                        G({
                            type: "NOTIFICATION_CENTER_ITEM_COMPLETED",
                            item_enum: t.item_enum
                        });
                        break;
                    case "APPLICATION_COMMAND_PERMISSIONS_UPDATE":
                        G({
                            type: e,
                            guildId: t.guild_id
                        });
                        break;
                    case "GUILD_APPLICATION_COMMAND_INDEX_UPDATE":
                        G({
                            type: "GUILD_APPLICATION_COMMAND_INDEX_UPDATE",
                            guildId: t.guild_id,
                            applicationCommandCounts: t.application_command_counts,
                            version: t.version
                        });
                        break;
                    case "GUILD_JOIN_REQUEST_CREATE":
                        G({
                            type: "GUILD_JOIN_REQUEST_CREATE",
                            request: t.request,
                            status: t.status,
                            guildId: t.guild_id
                        });
                        break;
                    case "GUILD_JOIN_REQUEST_UPDATE":
                        G({
                            type: "GUILD_JOIN_REQUEST_UPDATE",
                            request: t.request,
                            status: t.status,
                            guildId: t.guild_id
                        });
                        break;
                    case "GUILD_JOIN_REQUEST_DELETE":
                        G({
                            type: "GUILD_JOIN_REQUEST_DELETE",
                            id: t.id,
                            userId: t.user_id,
                            guildId: t.guild_id
                        });
                        break;
                    case "INTERACTION_CREATE":
                        G({
                            type: "INTERACTION_CREATE",
                            interactionId: t.id,
                            nonce: t.nonce
                        });
                        break;
                    case "INTERACTION_SUCCESS":
                        G({
                            type: "INTERACTION_SUCCESS",
                            interactionId: t.id,
                            nonce: t.nonce
                        });
                        break;
                    case "INTERACTION_FAILURE":
                        G({
                            type: "INTERACTION_FAILURE",
                            nonce: t.nonce
                        });
                        break;
                    case "APPLICATION_COMMAND_AUTOCOMPLETE_RESPONSE":
                        G({
                            type: "APPLICATION_COMMAND_AUTOCOMPLETE_RESPONSE",
                            choices: t.choices,
                            nonce: t.nonce
                        });
                        break;
                    case "INTERACTION_MODAL_CREATE":
                        G({
                            type: "INTERACTION_MODAL_CREATE",
                            id: t.id,
                            channelId: t.channel_id,
                            customId: t.custom_id,
                            application: t.application,
                            title: t.title,
                            components: t.components,
                            nonce: t.nonce
                        });
                        break;
                    case "INTERACTION_IFRAME_MODAL_CREATE":
                        G({
                            type: "INTERACTION_IFRAME_MODAL_CREATE",
                            id: t.id,
                            channelId: t.channel_id,
                            customId: t.custom_id,
                            application: t.application,
                            title: t.title,
                            iframePath: t.iframe_path,
                            modalSize: t.modal_size,
                            nonce: t.nonce
                        });
                        break;
                    case "STAGE_INSTANCE_CREATE":
                        G({
                            type: "STAGE_INSTANCE_CREATE",
                            instance: t
                        });
                        break;
                    case "STAGE_INSTANCE_UPDATE":
                        G({
                            type: "STAGE_INSTANCE_UPDATE",
                            instance: t
                        });
                        break;
                    case "STAGE_INSTANCE_DELETE":
                        G({
                            type: "STAGE_INSTANCE_DELETE",
                            instance: t
                        });
                        break;
                    case "GUILD_SCHEDULED_EVENT_CREATE":
                        G({
                            type: "GUILD_SCHEDULED_EVENT_CREATE",
                            guildScheduledEvent: t
                        });
                        break;
                    case "GUILD_SCHEDULED_EVENT_UPDATE":
                        G({
                            type: "GUILD_SCHEDULED_EVENT_UPDATE",
                            guildScheduledEvent: t
                        });
                        break;
                    case "GUILD_SCHEDULED_EVENT_DELETE":
                        G({
                            type: "GUILD_SCHEDULED_EVENT_DELETE",
                            guildScheduledEvent: t
                        });
                        break;
                    case "GUILD_SCHEDULED_EVENT_EXCEPTION_CREATE":
                        G({
                            type: "GUILD_SCHEDULED_EVENT_EXCEPTION_CREATE",
                            eventException: t
                        });
                        break;
                    case "GUILD_SCHEDULED_EVENT_EXCEPTION_UPDATE":
                        G({
                            type: "GUILD_SCHEDULED_EVENT_EXCEPTION_UPDATE",
                            eventException: t
                        });
                        break;
                    case "GUILD_SCHEDULED_EVENT_EXCEPTION_DELETE":
                        G({
                            type: "GUILD_SCHEDULED_EVENT_EXCEPTION_DELETE",
                            eventException: t
                        });
                        break;
                    case "GUILD_SCHEDULED_EVENT_USER_ADD":
                        G({
                            type: "GUILD_SCHEDULED_EVENT_USER_ADD",
                            userId: t.user_id,
                            guildId: t.guild_id,
                            guildEventId: t.guild_scheduled_event_id
                        });
                        break;
                    case "GUILD_SCHEDULED_EVENT_USER_REMOVE":
                        G({
                            type: "GUILD_SCHEDULED_EVENT_USER_REMOVE",
                            userId: t.user_id,
                            guildId: t.guild_id,
                            guildEventId: t.guild_scheduled_event_id
                        });
                        break;
                    case "GUILD_DIRECTORY_ENTRY_CREATE":
                        G({
                            type: "GUILD_DIRECTORY_ENTRY_CREATE",
                            channelId: t.directory_channel_id,
                            entry: t
                        });
                        break;
                    case "GUILD_DIRECTORY_ENTRY_UPDATE":
                        G({
                            type: "GUILD_DIRECTORY_ENTRY_UPDATE",
                            channelId: t.directory_channel_id,
                            entry: t
                        });
                        break;
                    case "GUILD_DIRECTORY_ENTRY_DELETE":
                        G({
                            type: "GUILD_DIRECTORY_ENTRY_DELETE",
                            channelId: t.directory_channel_id,
                            guildId: t.entity_id
                        });
                        break;
                    case "AUTO_MODERATION_MENTION_RAID_DETECTION":
                        G({
                            type: "AUTO_MODERATION_MENTION_RAID_DETECTION",
                            guildId: t.guild_id,
                            decisionId: t.decision_id,
                            suspiciousMentionActivityUntil: t.suspicious_mention_activity_until
                        });
                        break;
                    case "VOICE_CHANNEL_EFFECT_SEND":
                        G({
                            type: "VOICE_CHANNEL_EFFECT_SEND",
                            emoji: t.emoji,
                            channelId: t.channel_id,
                            userId: t.user_id,
                            animationType: t.animation_type,
                            animationId: t.animation_id,
                            soundId: t.sound_id,
                            soundVolume: t.sound_volume,
                            points: t.points,
                            streamerId: t.streamer_id,
                            lineId: t.line_id,
                            emojiHose: t.emoji_hose
                        });
                        break;
                    case "GUILD_SOUNDBOARD_SOUND_CREATE":
                        G({
                            type: "GUILD_SOUNDBOARD_SOUND_CREATE",
                            sound: {
                                guildId: t.guild_id,
                                name: t.name,
                                soundId: t.sound_id,
                                user: new p.default(t.user),
                                userId: t.user_id,
                                volume: t.volume,
                                emojiId: t.emoji_id,
                                emojiName: t.emoji_name,
                                available: t.available
                            }
                        });
                        break;
                    case "GUILD_SOUNDBOARD_SOUND_UPDATE":
                        G({
                            type: "GUILD_SOUNDBOARD_SOUND_UPDATE",
                            sound: {
                                guildId: t.guild_id,
                                name: t.name,
                                soundId: t.sound_id,
                                user: new p.default(t.user),
                                userId: t.user_id,
                                volume: t.volume,
                                emojiId: t.emoji_id,
                                emojiName: t.emoji_name,
                                available: t.available
                            }
                        });
                        break;
                    case "GUILD_SOUNDBOARD_SOUND_DELETE":
                        G({
                            type: "GUILD_SOUNDBOARD_SOUND_DELETE",
                            guildId: t.guild_id,
                            soundId: t.sound_id
                        });
                        break;
                    case "GUILD_SOUNDBOARD_SOUNDS_UPDATE":
                        G({
                            type: "GUILD_SOUNDBOARD_SOUNDS_UPDATE",
                            guildId: t.guild_id,
                            soundboardSounds: t.soundboard_sounds.map(e => ({
                                name: e.name,
                                soundId: e.sound_id,
                                emojiName: e.emoji_name,
                                emojiId: e.emoji_id,
                                userId: e.user_id,
                                volume: e.volume,
                                available: e.available,
                                guildId: t.guild_id
                            }))
                        });
                        break;
                    case "EMBEDDED_ACTIVITY_UPDATE":
                        G({
                            type: "EMBEDDED_ACTIVITY_INBOUND_UPDATE",
                            guildId: t.guild_id,
                            channelId: t.channel_id,
                            embeddedActivity: t.embedded_activity,
                            connections: t.connections,
                            updateCode: t.update_code
                        });
                        break;
                    case "AUTH_SESSION_CHANGE":
                        G({
                            type: "AUTH_SESSION_CHANGE",
                            authSessionIdHash: t.auth_session_id_hash
                        });
                        break;
                    case "USER_CONNECTIONS_LINK_CALLBACK":
                        G({
                            type: "USER_CONNECTIONS_LINK_CALLBACK",
                            provider: t.provider,
                            callbackCode: t.callback_code,
                            callbackState: t.callback_state
                        });
                        break;
                    case "DELETED_ENTITY_IDS":
                        G({
                            type: "DELETED_ENTITY_IDS",
                            ...t
                        });
                        break;
                    case "CONSOLE_COMMAND_UPDATE":
                        G({
                            type: "CONSOLE_COMMAND_UPDATE",
                            id: t.id,
                            result: t.result,
                            error: t.error
                        });
                        break;
                    case "PASSIVE_UPDATE_V1":
                        G({
                            type: "PASSIVE_UPDATE_V1",
                            guildId: t.guild_id,
                            members: t.members,
                            channels: null === (m = t.channels) || void 0 === m ? void 0 : m.map(e => ({
                                id: e.id,
                                lastMessageId: e.last_message_id,
                                lastPinTimestamp: e.last_pin_timestamp
                            })),
                            voiceStates: null === (P = t.voice_states) || void 0 === P ? void 0 : P.map(e => ({
                                channelId: e.channel_id,
                                deaf: e.deaf || !1,
                                mute: e.mute || !1,
                                requestToSpeakTimestamp: null !== (b = e.request_to_speak_timestamp) && void 0 !== b ? b : null,
                                selfDeaf: e.self_deaf || !1,
                                selfMute: e.self_mute || !1,
                                selfStream: e.self_stream || !1,
                                selfVideo: e.self_video || !1,
                                sessionId: e.session_id,
                                suppress: e.suppress,
                                userId: e.user_id
                            }))
                        });
                        break;
                    case "PRIVATE_CHANNEL_INTEGRATION_CREATE":
                        G({
                            type: "PRIVATE_CHANNEL_INTEGRATION_CREATE",
                            integration: t
                        });
                        break;
                    case "PRIVATE_CHANNEL_INTEGRATION_UPDATE":
                        G({
                            type: "PRIVATE_CHANNEL_INTEGRATION_UPDATE",
                            integration: t
                        });
                        break;
                    case "PRIVATE_CHANNEL_INTEGRATION_DELETE":
                        G({
                            type: "PRIVATE_CHANNEL_INTEGRATION_DELETE",
                            channelId: t.channel_id,
                            applicationId: t.application_id
                        });
                        break;
                    case "CREATOR_MONETIZATION_RESTRICTIONS_UPDATE":
                        G({
                            type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_SUCCESS",
                            guildId: t.guild_id,
                            restrictions: t.restrictions
                        });
                        break;
                    case "BILLING_REFERRAL_TRIAL_OFFER_UPDATE":
                        G({
                            type: "BILLING_REFERRAL_TRIAL_OFFER_UPDATE",
                            userTrialOfferId: t.user_trial_offer_id,
                            recipientId: t.recipient_id
                        });
                        break;
                    case "SPEED_TEST_CREATE":
                        G({
                            type: "SPEED_TEST_CREATE",
                            streamKey: t.stream_key,
                            region: t.region,
                            viewerIds: t.viewer_ids,
                            rtcServerId: t.rtc_server_id,
                            paused: t.paused
                        });
                        break;
                    case "SPEED_TEST_SERVER_UPDATE":
                        G({
                            type: "SPEED_TEST_SERVER_UPDATE",
                            streamKey: t.stream_key,
                            endpoint: t.endpoint,
                            token: t.token
                        });
                        break;
                    case "SPEED_TEST_UPDATE":
                        G({
                            type: "SPEED_TEST_UPDATE",
                            streamKey: t.stream_key,
                            region: t.region,
                            viewerIds: t.viewer_ids,
                            paused: t.paused
                        });
                        break;
                    case "SPEED_TEST_DELETE":
                        G({
                            type: "SPEED_TEST_DELETE",
                            streamKey: t.stream_key,
                            unavailable: t.unavailable,
                            reason: t.reason
                        });
                        break;
                    case "LAST_MESSAGES":
                        G({
                            type: "MESSAGE_PREVIEWS_LOADED",
                            guildId: t.guild_id,
                            messages: t.messages
                        });
                        break;
                    case "AUTHENTICATOR_UPDATE":
                        G({
                            type: "AUTHENTICATOR_UPDATE",
                            credential: t
                        });
                        break;
                    case "AUTHENTICATOR_CREATE":
                        G({
                            type: "AUTHENTICATOR_CREATE",
                            credential: t
                        });
                        break;
                    case "AUTHENTICATOR_DELETE":
                        G({
                            type: "AUTHENTICATOR_DELETE",
                            credential: t
                        });
                        break;
                    case "INVENTORY_PACK_UPDATE":
                        G({
                            type: "INVENTORY_PACK_UPDATE",
                            pack: c.default.fromServer(t)
                        });
                        break;
                    case "INVENTORY_PACK_DELETE":
                        G({
                            type: "INVENTORY_PACK_DELETE",
                            pack: c.default.fromServer(t)
                        });
                        break;
                    case "GAME_INVITE_CREATE":
                        G({
                            type: "GAME_INVITE_CREATE",
                            gameInvite: t
                        });
                        break;
                    case "GAME_INVITE_DELETE":
                        G({
                            type: "GAME_INVITE_DELETE",
                            inviteId: t.invite_id
                        })
                }
            }

            function G(e) {
                s.default.dispatch(e).catch(t => y.socket.resetSocketOnError(t, e.type))
            }

            function k(e, t, n) {
                let {
                    roles: i,
                    nick: l,
                    avatar: s,
                    flags: r,
                    premium_since: u,
                    pending: o,
                    joined_at: d,
                    communication_disabled_until: c,
                    unusual_dm_activity_until: _
                } = n, E = I.default.getMember(e, t.id);
                (!(null != E && E.nick === l && E.avatar === s && a.isEqual(E.roles, i)) || E.premiumSince !== u || E.isPending !== o || E.joinedAt !== d || E.communicationDisabledUntil !== c || E.flags !== r || E.unusualDMActivityUntil !== _) && G({
                    type: "GUILD_MEMBER_ADD",
                    guildId: e,
                    user: t,
                    roles: i,
                    nick: l,
                    avatar: s,
                    premiumSince: u,
                    isPending: o,
                    joinedAt: d,
                    communicationDisabledUntil: c,
                    unusualDMActivityUntil: _,
                    flags: r
                })
            }

            function F(e) {
                let {
                    member: t,
                    mentions: n,
                    author: i,
                    guild_id: a
                } = e;
                null != t && k(a, i, t), null != n && n.forEach(e => {
                    if (null != e.member) {
                        let {
                            member: t
                        } = e;
                        delete e.member, k(a, e, t)
                    }
                })
            }

            function w(e) {
                return e.map(e => ({
                    sessionId: e.session_id,
                    lastModified: e.last_modified,
                    status: e.status,
                    activities: e.activities,
                    active: !!e.active,
                    clientInfo: e.client_info,
                    broadcast: e.broadcast
                }))
            }

            function H() {
                y.socket.isSessionEstablished() && m.default.getPendingLobbies().forEach(e => {
                    y.socket.lobbyConnect(e.id, e.secret)
                })
            }

            function V(e) {
                let {
                    guildId: t,
                    user: n,
                    status: i,
                    activities: a,
                    clientStatus: l,
                    broadcast: s
                } = e;
                P.add({
                    guildId: t,
                    user: n,
                    status: i,
                    clientStatus: l,
                    activities: a,
                    broadcast: s
                })
            }
        },
        583702: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                StreamRTCAnalyticsContext: function() {
                    return C
                },
                default: function() {
                    return N
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("913144"),
                s = n("997722"),
                r = n("422791"),
                u = n("56947"),
                o = n("386045"),
                d = n("808122"),
                c = n("845579"),
                _ = n("271938"),
                E = n("42203"),
                f = n("985365"),
                h = n("945956"),
                T = n("590401"),
                p = n("599110"),
                S = n("104478"),
                I = n("374014"),
                A = n("196383"),
                m = n("49111"),
                g = n("353927");
            class C {
                setActionContext(e) {
                    this.actionContext = e
                }
                trackViewerCount(e) {
                    this.maxViewers = Math.max(e, this.maxViewers)
                }
                constructor({
                    streamRegion: e,
                    streamApplication: t,
                    streamSourceType: n,
                    actionContext: i,
                    numViewers: a,
                    isBroadcast: l = !1
                }) {
                    this.streamRegion = e, this.streamApplication = t, this.streamSourceType = n, this.actionContext = i, this.maxViewers = a, this.isBroadcast = l
                }
            }
            class N extends s.default {
                get isOwner() {
                    let {
                        ownerId: e
                    } = this._streamContext;
                    return _.default.getId() === e
                }
                destroy(e) {
                    this._videoStreamStats.stop(), this._trackVideoEndStats(e), this._updateVideoStreamId.cancel(), this._updateVideoStreamId(null, null), this._updateVideoStreamId.flush(), super.destroy()
                }
                streamUpdate(e) {
                    let t = this._videoQuality;
                    null != t && (e ? t.pause() : t.resume())
                }
                layoutChange(e) {
                    this._videoStreamStats.layoutChange(e)
                }
                getVideoStats() {
                    let {
                        ownerId: e
                    } = this._streamContext, t = this._videoQuality;
                    if (null != t) {
                        var n;
                        let {
                            duration: i,
                            avg_bitrate: a,
                            avg_fps: l,
                            avg_resolution: s
                        } = this.isOwner ? t.getOutboundStats()[0] : null !== (n = t.getInboundStats(e)) && void 0 !== n ? n : {};
                        return {
                            duration: i,
                            avg_bitrate: a,
                            avg_fps: l,
                            avg_resolution: s
                        }
                    }
                    return null
                }
                getRegion() {
                    return this.analyticsContext.streamRegion
                }
                getMaxViewers() {
                    return this.analyticsContext.maxViewers
                }
                _initializeEvents() {
                    let e = !1;
                    this.on(r.RTCConnectionEvent.State, (e, t, n) => {
                        l.default.wait(() => l.default.dispatch({
                            type: "RTC_CONNECTION_STATE",
                            state: e,
                            ...t,
                            ...n,
                            streamKey: this._streamKey
                        }))
                    }), this.on(r.RTCConnectionEvent.Video, (t, n, i, a, l) => {
                        let s = (0, I.decodeStreamKey)(this._streamKey);
                        s.guildId === t && s.channelId === n && s.ownerId === i && (null != this.getMediaSessionId() && !e && (this._trackVideoStartStats(), e = !0), this._updateVideoStreamId(a, l))
                    }), this.on(r.RTCConnectionEvent.VideoSourceQualityChanged, (e, t, n, i, a, s) => {
                        l.default.wait(() => l.default.dispatch({
                            type: "MEDIA_ENGINE_VIDEO_SOURCE_QUALITY_CHANGED",
                            guildId: e,
                            channelId: t,
                            senderUserId: n,
                            maxResolution: i,
                            maxFrameRate: a,
                            context: s
                        }))
                    })
                }
                _getStreamAnalyticsProperties() {
                    let {
                        streamRegion: e,
                        streamApplication: t,
                        streamSourceType: n,
                        actionContext: i,
                        isBroadcast: a
                    } = this.analyticsContext, {
                        ownerId: l,
                        guildId: s
                    } = this._streamContext, r = T.default.getRegion(h.default.getHostname()), u = c.BroadcastAutoBroadcast.getSetting();
                    return {
                        channel_id: this.channelId,
                        rtc_connection_id: this.getRTCConnectionId(),
                        media_session_id: this.getMediaSessionId(),
                        parent_media_session_id: this.parentMediaSessionId,
                        sender_user_id: l,
                        context: g.MediaEngineContextTypes.STREAM,
                        guild_id: s,
                        stream_region: e,
                        stream_source_type: n,
                        guild_region: r,
                        participant_type: this.isOwner ? "streamer" : "receiver",
                        share_application_name: null != t ? t.name : null,
                        share_application_id: null != t ? t.id : null,
                        share_application_executable: null != t ? t.exe : null,
                        video_layout: this._videoStreamStats.getLayout(),
                        client_event_source: i,
                        is_broadcast: a,
                        auto_broadcast_enabled: this.isOwner ? u : null
                    }
                }
                _trackVideoStartStats() {
                    let e = this.isOwner ? (0, A.default)() : null;
                    p.default.track(m.AnalyticEvents.VIDEO_STREAM_STARTED, {
                        ...this._getStreamAnalyticsProperties(),
                        ...e,
                        connection_type: f.default.getType(),
                        effective_connection_speed: f.default.getEffectiveConnectionSpeed(),
                        service_provider: f.default.getServiceProvider()
                    })
                }
                _trackVideoEndStats(e) {
                    let t = E.default.getChannel(this.channelId),
                        n = null != t ? t.type : null,
                        {
                            ownerId: i
                        } = this._streamContext,
                        a = null,
                        l = null,
                        s = null,
                        r = this._videoQuality;
                    null != r && (a = this.isOwner ? r.getOutboundStats()[0] : r.getInboundStats(i), l = r.getNetworkStats(), s = this.isOwner ? r.getCodecUsageStats("streamer", this.userId) : r.getCodecUsageStats("receiver", i));
                    let c = (0, u.areClipsEnabled)(),
                        _ = o.default.getSettings(),
                        f = this.isOwner ? {
                            clips_enabled: _.clipsEnabled && c,
                            clips_buffer_length: _.clipsLength
                        } : {},
                        h = this.isOwner ? {
                            bandwidth_estimation_experiment: this.getBandwidthEstimationExperiment()
                        } : {};
                    p.default.track(m.AnalyticEvents.VIDEO_STREAM_ENDED, {
                        ...a,
                        ...s,
                        ...l,
                        ...this._videoStreamStats.getStats(),
                        ...this._soundshareStats.getStats(),
                        ...this._getStreamAnalyticsProperties(),
                        ...f,
                        ...h,
                        channel_type: n,
                        reason: e,
                        max_viewers: this.analyticsContext.maxViewers,
                        hostname: this.hostname,
                        device_performance_class: this.isOwner ? (0, d.getMediaPerformanceClass)() : null
                    })
                }
                _getExtraConnectionOptions() {
                    return {
                        streamUserId: (0, I.decodeStreamKey)(this._streamKey).ownerId
                    }
                }
                constructor({
                    sessionId: e,
                    streamKey: t,
                    serverId: n,
                    initialLayout: i,
                    analyticsContext: s,
                    isStreamer: r,
                    parentMediaSessionId: u
                }) {
                    let o = (0, I.decodeStreamKey)(t),
                        {
                            guildId: d,
                            channelId: c
                        } = o;
                    super({
                        userId: _.default.getId(),
                        sessionId: e,
                        guildId: d,
                        channelId: c,
                        context: g.MediaEngineContextTypes.STREAM,
                        rtcServerId: n,
                        parentMediaSessionId: u
                    }), this._streamContext = o, this._streamKey = t, this._isStreamer = r, this._videoStreamStats = new S.default(i, this.isOwner), this.analyticsContext = s, this._updateVideoStreamId = a.debounce((e, t) => {
                        let {
                            guildId: n,
                            channelId: i,
                            ownerId: a
                        } = (0, I.decodeStreamKey)(this._streamKey);
                        l.default.wait(() => l.default.dispatch({
                            type: "RTC_CONNECTION_VIDEO",
                            guildId: n,
                            channelId: i,
                            userId: a,
                            streamId: e,
                            rtcServerId: t,
                            context: g.MediaEngineContextTypes.STREAM
                        }))
                    }, 200), this._videoStreamStats.start(), this._initializeEvents()
                }
            }
        },
        104478: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return u
                }
            });
            var i = n("398183"),
                a = n("862337"),
                l = n("268491"),
                s = n("49111");

            function r(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                return null != e ? Math.round(e) : t
            }
            class u {
                start() {
                    let {
                        resolution: e,
                        fps: t
                    } = l.default.getState();
                    this._targetResolution = e, this._targetFPS = t, this._statInterval.start(1e3, this._sampleStats), this._lastLayoutChanged = (0, i.now)()
                }
                stop() {
                    this._statInterval.stop(), this._streamEnd = (0, i.now)(), this._incrementLayout(this._lastLayout, (this._streamEnd - this._lastLayoutChanged) / 1e3)
                }
                layoutChange(e) {
                    if (e === this._lastLayout || null != this._streamEnd) return;
                    let t = (0, i.now)();
                    this._incrementLayout(this._lastLayout, (t - this._lastLayoutChanged) / 1e3), this._layoutChanges++, this._lastLayout = e, this._lastLayoutChanged = t
                }
                getLayout() {
                    return this._lastLayout
                }
                getStats() {
                    let e = {
                        num_layout_changes: this._layoutChanges,
                        duration_layout_fullscreen: r(this._layoutBuckets[s.StreamLayouts.FULL_SCREEN]),
                        duration_layout_theatre: r(this._layoutBuckets[s.StreamLayouts.THEATRE]),
                        duration_layout_pip: r(this._layoutBuckets[s.StreamLayouts.PIP]),
                        duration_layout_popout: r(this._layoutBuckets[s.StreamLayouts.POPOUT]),
                        duration_layout_portrait: r(this._layoutBuckets[s.StreamLayouts.PORTRAIT]),
                        duration_layout_landscape: r(this._layoutBuckets[s.StreamLayouts.LANDSCAPE]),
                        duration_layout_minimized: r(this._layoutBuckets[s.StreamLayouts.MINIMIZED])
                    };
                    return this._isSender ? {
                        ...e,
                        target_fps: this._targetFPS,
                        target_resolution_height: this._targetResolution,
                        stream_settings_changed: this._streamSettingsChanged
                    } : e
                }
                constructor(e, t) {
                    this._targetResolution = 0, this._targetFPS = 0, this._streamSettingsChanged = !1, this._lastLayoutChanged = 0, this._layoutChanges = 0, this._incrementLayout = (e, t) => {
                        null == this._layoutBuckets[e] && (this._layoutBuckets[e] = 0), this._layoutBuckets[e] += t
                    }, this._sampleStats = () => {
                        let {
                            resolution: e,
                            fps: t
                        } = l.default.getState();
                        this._streamSettingsChanged = e !== this._targetResolution || t !== this._targetFPS
                    }, this._isSender = t, this._statInterval = new a.Interval, this._lastLayout = e, this._layoutBuckets = {}
                }
            }
        },
        223913: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                canStreamInChannel: function() {
                    return T
                },
                getStreamCTAString: function() {
                    return p
                },
                canWatchStream: function() {
                    return S
                },
                useCanWatchStream: function() {
                    return I
                },
                getStreamEligibleChannels: function() {
                    return A
                }
            });
            var i, a, l = n("316693"),
                s = n("446674"),
                r = n("76393"),
                u = n("923959"),
                o = n("305961"),
                d = n("957255"),
                c = n("800762"),
                _ = n("404008"),
                E = n("49111"),
                f = n("782340");
            let h = (e, t) => e.isPrivate() || t.can(l.default.combine(E.Permissions.CONNECT, E.Permissions.VIEW_CHANNEL), e);

            function T(e, t, n) {
                var i;
                let a = !(arguments.length > 3) || void 0 === arguments[3] || arguments[3];
                if (e.isPrivate()) return !0;
                let l = t.getGuild(e.getGuildId()),
                    s = null !== (i = null == l ? void 0 : l.maxStageVideoChannelUsers) && void 0 !== i ? i : 0;
                return (!e.isGuildStageVoice() || !(s <= 0)) && (!a || !!h(e, n)) && !!n.can(E.Permissions.STREAM, e) && null != l && l.afkChannelId !== e.id && !0
            }

            function p(e) {
                switch (e) {
                    case a.REMOTE_MODE:
                        return f.default.Messages.CONSOLE_STREAM_UNAVAILABLE;
                    case a.CHANNEL_FULL:
                        return f.default.Messages.UNABLE_TO_JOIN_CHANNEL_FULL_MODAL_HEADER;
                    case a.NO_PERMISSION:
                        return f.default.Messages.STREAM_NO_PERMISSION_CTA;
                    default:
                        return f.default.Messages.WATCH_STREAM
                }
            }

            function S(e, t, n, i, l) {
                let s;
                if (null == e) return [!1, a.NO_PERMISSION];
                let r = t.isInChannel(e.id),
                    u = (0, _.isChannelFull)(e, t, n),
                    o = h(e, i),
                    d = null != l.getAwaitingRemoteSessionInfo() || null != l.getRemoteSessionId();
                d ? s = a.REMOTE_MODE : o || r ? u && !r && (s = a.CHANNEL_FULL) : s = a.NO_PERMISSION;
                let c = !__OVERLAY__ && !d && (r || o && !u);
                return [c, s]
            }

            function I(e) {
                return (0, s.useStateFromStoresArray)([c.default, o.default, d.default, r.default], () => S(e, c.default, o.default, d.default, r.default))
            }

            function A(e, t, n) {
                let i = [];
                for (let {
                        channel: a
                    }
                    of e[u.GUILD_VOCAL_CHANNELS_KEY]) T(a, t, n) && i.push(a);
                return i
            }(i = a || (a = {}))[i.REMOTE_MODE = 0] = "REMOTE_MODE", i[i.CHANNEL_FULL = 1] = "CHANNEL_FULL", i[i.NO_PERMISSION = 2] = "NO_PERMISSION"
        },
        582415: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getStreamerActivity: function() {
                    return l
                },
                getStreamerApplication: function() {
                    return s
                }
            });
            var i = n("49111");

            function a(e) {
                return e.type === i.ActivityTypes.PLAYING
            }

            function l(e, t) {
                var n;
                return null != e ? (n = e.ownerId, t.findActivity(n, a)) : null
            }

            function s(e, t) {
                if (null == e) return null;
                let n = l(e, t);
                return null == n ? null : {
                    id: n.application_id,
                    name: n.name
                }
            }
        },
        537429: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("353927");

            function a(e) {
                return e.supportsInApp(i.Features.VIDEO)
            }
        },
        196383: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            });
            var i = n("939398").getDesktopSourceMetadata
        },
        709463: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("144491");

            function a(e) {
                (0, i.transitionToChannel)(e.channelId)
            }
        },
        10853: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                isNotAutomodEmbed: function() {
                    return a
                }
            });
            var i = n("246111");
            let a = e => {
                let {
                    type: t
                } = e;
                return t !== i.MessageEmbedTypes.AUTO_MODERATION_MESSAGE && t !== i.MessageEmbedTypes.AUTO_MODERATION_NOTIFICATION
            }
        },
        677315: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useGuildHomeExperiment: function() {
                    return c
                },
                canSeeGuildHome: function() {
                    return _
                },
                GuildFeedRenderSelectorExperiment: function() {
                    return E
                },
                GuildFeedRefreshButtonExperiment: function() {
                    return f
                },
                GuildHomeBadgeExperiment: function() {
                    return h
                },
                GuildHomeFeedbackExperiment: function() {
                    return T
                },
                GuildHomeDeprecationExperiment: function() {
                    return p
                }
            });
            var i = n("446674"),
                a = n("203288"),
                l = n("862205"),
                s = n("21121"),
                r = n("923959"),
                u = n("305961"),
                o = n("49111");

            function d(e, t, n) {
                let i = t.getChannels(e)[r.GUILD_SELECTABLE_CHANNELS_KEY].filter(t => {
                    let {
                        channel: i
                    } = t;
                    return !n.isChannelGated(e, i.id)
                });
                return i.length > 5
            }

            function c(e) {
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                let t = (0, i.useStateFromStores)([r.default, a.default], () => null != e && d(e.id, r.default, a.default));
                return !__OVERLAY__ && !!t && null != e && e.hasFeature(o.GuildFeatures.GUILD_HOME_DEPRECATION_OVERRIDE)
            }

            function _(e) {
                if (__OVERLAY__ || e === o.ME || e === o.FAVORITES || (0, s.isInMainTabsExperiment)()) return !1;
                let t = u.default.getGuild(e);
                return !!(null != t && d(e, r.default, a.default)) && t.hasFeature(o.GuildFeatures.GUILD_HOME_DEPRECATION_OVERRIDE)
            }
            let E = (0, l.createExperiment)({
                    kind: "user",
                    id: "2022-01_home_feed_toggle",
                    label: "Show Guild Feed Sorting Selector",
                    defaultConfig: {
                        showSelector: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Yes Selector",
                        config: {
                            showSelector: !0
                        }
                    }]
                }),
                f = (0, l.createExperiment)({
                    kind: "user",
                    id: "2022-06_home_refresh_button",
                    label: "Show refresh button",
                    defaultConfig: {
                        showRefreshButton: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Yes button",
                        config: {
                            showRefreshButton: !0
                        }
                    }]
                }),
                h = (0, l.createExperiment)({
                    kind: "user",
                    id: "2022-08_home_badge",
                    label: "Show badge on home channel",
                    defaultConfig: {
                        showBadge: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "show badge",
                        config: {
                            showBadge: !0
                        }
                    }]
                });
            (0, l.createExperiment)({
                kind: "user",
                id: "2022-08_home_drawer_autoclose",
                label: "Auto close home drawer",
                defaultConfig: {
                    autoCloseDrawer: !1,
                    animation: !1,
                    delay: null
                },
                treatments: [{
                    id: 1,
                    label: "normal animation",
                    config: {
                        autoCloseDrawer: !0,
                        animation: !0,
                        delay: null
                    }
                }, {
                    id: 2,
                    label: "no animate",
                    config: {
                        autoCloseDrawer: !0,
                        animation: !1,
                        delay: null
                    }
                }, {
                    id: 3,
                    label: "150 delayed animation",
                    config: {
                        autoCloseDrawer: !0,
                        animation: !0,
                        delay: 150
                    }
                }, {
                    id: 4,
                    label: "250 delayed animation",
                    config: {
                        autoCloseDrawer: !0,
                        animation: !0,
                        delay: 250
                    }
                }, {
                    id: 5,
                    label: "500 delayed animation",
                    config: {
                        autoCloseDrawer: !0,
                        animation: !0,
                        delay: 500
                    }
                }]
            }), (0, l.createExperiment)({
                kind: "user",
                id: "2022-09_welcome_header",
                label: "Show welcome header for home",
                defaultConfig: {
                    showWelcomeHeader: !1
                },
                treatments: [{
                    id: 1,
                    label: "show welcome header",
                    config: {
                        showWelcomeHeader: !0
                    }
                }]
            });
            let T = (0, l.createExperiment)({
                    kind: "user",
                    id: "2022-12_home_feedback_ux",
                    label: "Show post feedback for home",
                    defaultConfig: {
                        showFeedback: !1
                    },
                    treatments: [{
                        id: 100,
                        label: "show feedback",
                        config: {
                            showFeedback: !0
                        }
                    }]
                }),
                p = (0, l.createExperiment)({
                    kind: "guild",
                    id: "2023-03_home_deprecation",
                    label: "Home Deprecation",
                    defaultConfig: {
                        showDeprecationNotice: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Show notice",
                        config: {
                            showDeprecationNotice: !0
                        }
                    }]
                })
        },
        526253: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                NO_MEMBER_VERIFICATION_FORM: function() {
                    return u
                },
                default: function() {
                    return c
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("567054");
            let u = {
                    version: "",
                    description: "",
                    formFields: []
                },
                o = {};
            class d extends l.default.Store {
                get(e) {
                    if (null != e) return o[e]
                }
                getRulesPrompt(e) {
                    var t;
                    return a.find(null === (t = o[e]) || void 0 === t ? void 0 : t.formFields, r.isTermsFormField)
                }
            }
            d.displayName = "MemberVerificationFormStore";
            var c = new d(s.default, {
                INVITE_ACCEPT_SUCCESS: function(e) {
                    let {
                        invite: t
                    } = e, {
                        member_verification_form: n
                    } = t, {
                        guild: i
                    } = t;
                    if (null != i && null != n) {
                        var a;
                        return o[i.id] = {
                            version: n.version,
                            description: null !== (a = n.description) && void 0 !== a ? a : "",
                            formFields: n.form_fields,
                            guild: i
                        }, !0
                    }
                    return !1
                },
                MEMBER_VERIFICATION_FORM_UPDATE: function(e) {
                    let {
                        form: t,
                        guildId: n
                    } = e;
                    o[n] = null != t ? t : u
                },
                MEMBER_VERIFICATION_FORM_FETCH_FAIL: function(e) {
                    var t;
                    let {
                        guildId: n
                    } = e;
                    o[n] = null !== (t = o[n]) && void 0 !== t ? t : u
                },
                GUILD_DELETE: function(e) {
                    let {
                        guild: t
                    } = e;
                    delete o[null == t ? void 0 : t.id]
                }
            })
        },
        520141: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useIsMemberVerificationManualApproval: function() {
                    return l
                },
                isMemberVerificationManualApproval: function() {
                    return s
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                kind: "guild",
                id: "2021-11_member_verification_manual_approval",
                label: "Member Verification Manual Approval",
                defaultConfig: {
                    manualApprovalEnabled: !1
                },
                treatments: [{
                    id: 1,
                    label: "Enable manual approval for membership verification",
                    config: {
                        manualApprovalEnabled: !0
                    }
                }]
            });

            function l(e) {
                a.trackExposure({
                    guildId: e,
                    location: "bda51f_1"
                });
                let t = a.useExperiment({
                    guildId: e,
                    location: "bda51f_2"
                }, {
                    autoTrackExposure: !1
                });
                return t.manualApprovalEnabled
            }

            function s(e) {
                let t = a.getCurrentConfig({
                    guildId: e,
                    location: "bda51f_3"
                }, {
                    autoTrackExposure: !1
                });
                return t.manualApprovalEnabled
            }
        },
        875229: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                canReviewGuildMemberApplications: function() {
                    return _
                },
                useCanReviewGuildMemberApplications: function() {
                    return E
                }
            });
            var i = n("884691"),
                a = n("446674"),
                l = n("305961"),
                s = n("957255"),
                r = n("50926"),
                u = n("526253"),
                o = n("520141"),
                d = n("567054"),
                c = n("49111");

            function _(e) {
                let t = l.default.getGuild(e);
                return null != t && (0, o.isMemberVerificationManualApproval)(e) && s.default.can(c.Permissions.KICK_MEMBERS, t)
            }

            function E(e) {
                var t;
                let n = (0, o.useIsMemberVerificationManualApproval)(e),
                    _ = (0, a.useStateFromStores)([l.default], () => l.default.getGuild(e)),
                    E = null != _ && n && s.default.can(c.Permissions.KICK_MEMBERS, _) && _.hasVerificationGate(),
                    f = (0, a.useStateFromStores)([u.default], () => u.default.get(e), [e]);
                i.useEffect(() => {
                    E && r.default.fetchVerificationForm(e)
                }, [E, e]);
                let h = i.useMemo(() => (null !== (t = null == f ? void 0 : f.formFields) && void 0 !== t ? t : []).some(e => !(0, d.isTermsFormField)(e)), [null == f ? void 0 : f.formFields]);
                return E && h
            }
        },
        157186: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                shouldShowMembershipVerificationGate: function() {
                    return u
                },
                useShowMemberVerificationGate: function() {
                    return o
                }
            });
            var i = n("446674"),
                a = n("26989"),
                l = n("305961"),
                s = n("88093"),
                r = n("697218");

            function u(e) {
                var t, n;
                let [i, u, o, d] = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [l.default, s.default, r.default, a.default];
                if (null == e) return !1;
                let c = i.getGuild(e),
                    {
                        notClaimed: _
                    } = u.getCheck(e),
                    E = o.getCurrentUser(),
                    f = !1;
                null != E && (f = null !== (n = null === (t = d.getMember(e, E.id)) || void 0 === t ? void 0 : t.isPending) && void 0 !== n && n);
                let h = f || _;
                return h && !!(null == c ? void 0 : c.hasVerificationGate())
            }

            function o(e) {
                return (0, i.useStateFromStores)([l.default, s.default, r.default, a.default], () => null != e && u(e, [l.default, s.default, r.default, a.default]), [e])
            }
        },
        536999: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useIsBulkBanningExperimentEnabled: function() {
                    return s
                },
                isInMembersSearchV2Experiment: function() {
                    return r
                },
                useMembersSearchV2Experiment: function() {
                    return u
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                    kind: "guild",
                    id: "2023-08_guild_member_bulk_ban_experiment",
                    label: "Bulk Banning Guild Members Experiment",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Bulk Banning Enabled",
                        config: {
                            enabled: !0
                        }
                    }]
                }),
                l = (0, i.createExperiment)({
                    kind: "guild",
                    id: "2023-07_guild_members_search_in_elasticsearch",
                    label: "Members Search V2 Experiment",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Enable Members Search V2 Backend Only",
                        config: {
                            enabled: !1
                        }
                    }, {
                        id: 2,
                        label: "Enable Members Search V2 Backend + Frontend",
                        config: {
                            enabled: !0
                        }
                    }]
                }),
                s = function(e) {
                    let {
                        autoTrackExposure: t = !1,
                        disable: n = !1,
                        location: i = "f03bed_5"
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, {
                        enabled: l
                    } = a.useExperiment({
                        guildId: e,
                        location: i
                    }, {
                        autoTrackExposure: t,
                        disable: n
                    });
                    return l
                },
                r = function(e) {
                    let {
                        autoTrackExposure: t = !1,
                        disable: n = !1,
                        location: i = "f03bed_7"
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, {
                        enabled: a
                    } = l.getCurrentConfig({
                        guildId: e,
                        location: i
                    }, {
                        autoTrackExposure: t,
                        disable: n
                    });
                    return a
                },
                u = function(e) {
                    let {
                        autoTrackExposure: t = !1,
                        disable: n = !1,
                        location: i = "f03bed_8"
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, {
                        enabled: a
                    } = l.useExperiment({
                        guildId: e,
                        location: i
                    }, {
                        autoTrackExposure: t,
                        disable: n
                    });
                    return a
                }
        },
        466818: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                MemberSafetyPagePermissions: function() {
                    return c
                },
                canAccessMemberSafetyPage: function() {
                    return E
                },
                useCanAccessMemberSafetyPage: function() {
                    return h
                },
                useCanAccessBulkBanningFeature: function() {
                    return T
                },
                useCanAccessInviteCodeFeature: function() {
                    return p
                },
                useCanBulkBanUser: function() {
                    return S
                },
                canBulkBanUser: function() {
                    return I
                }
            });
            var i = n("316693"),
                a = n("446674"),
                l = n("305961"),
                s = n("957255"),
                r = n("697218"),
                u = n("991170"),
                o = n("536999"),
                d = n("49111");
            let c = i.default.combine(d.Permissions.ADMINISTRATOR, d.Permissions.MANAGE_GUILD, d.Permissions.BAN_MEMBERS, d.Permissions.KICK_MEMBERS, d.Permissions.MODERATE_MEMBERS),
                _ = function(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [l.default, r.default],
                        [n, i] = t,
                        a = n.getGuild(e),
                        s = i.getCurrentUser();
                    return {
                        user: s,
                        guild: a
                    }
                },
                E = function(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [l.default, r.default],
                        n = _(e, t);
                    if (null == n) return !1;
                    let a = i.default.hasAny(u.default.computePermissions({
                        user: n.user,
                        context: n.guild,
                        checkElevated: !1
                    }), c);
                    return a
                },
                f = function(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [l.default, r.default],
                        n = _(e, t);
                    return null != n && s.default.can(d.Permissions.MANAGE_GUILD, n.guild) && s.default.can(d.Permissions.BAN_MEMBERS, n.guild)
                };

            function h(e) {
                let t = (0, a.useStateFromStores)([l.default, r.default], () => E(e, [l.default, r.default]), [e]);
                return t
            }

            function T(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                    i = h(e),
                    s = (0, a.useStateFromStores)([l.default, r.default], () => f(e, [l.default, r.default]), [e]),
                    u = (0, o.useIsBulkBanningExperimentEnabled)(e, {
                        location: t,
                        autoTrackExposure: n,
                        disable: !s
                    });
                return i && s && u
            }

            function p(e) {
                return (0, a.useStateFromStores)([l.default, s.default], () => {
                    let t = l.default.getGuild(e);
                    return null != t && s.default.can(d.Permissions.MANAGE_GUILD, t)
                }, [e])
            }

            function S(e, t, n) {
                return (0, a.useStateFromStores)([s.default, l.default], () => {
                    let i = l.default.getGuild(e);
                    return null != i && t && s.default.canManageUser(d.Permissions.BAN_MEMBERS, n, i)
                }, [t, e, n])
            }

            function I(e, t, n) {
                let i = l.default.getGuild(e);
                return null != i && t && s.default.canManageUser(d.Permissions.BAN_MEMBERS, n, i)
            }
        },
        572679: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("307785"),
                a = n("49111");
            class l {
                getCreateAttachmentURL(e) {
                    return a.Endpoints.GUILD_PRODUCT_CREATE_ATTACHMENT_UPLOAD(e)
                }
                getDeleteUploadURL(e) {
                    return a.Endpoints.MESSAGE_DELETE_UPLOAD(e)
                }
                getMaxFileSize(e) {
                    return i.MAX_ATTACHMENT_UPLOAD_FILESIZE_BYTES
                }
                getMaxAttachmentsCount() {
                    return i.MAX_ATTACHMENT_UPLOAD_COUNT
                }
                getMaxTotalAttachmentSize() {
                    return i.MAX_ATTACHMENT_UPLOAD_TOTAL_FILESIZE_BYTES
                }
                get shouldReactNativeCompressUploads() {
                    return !1
                }
            }
        },
        307785: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                GUILD_PRODUCT_EDIT_MODAL_KEY: function() {
                    return i
                },
                MAX_ATTACHMENT_UPLOAD_FILESIZE_BYTES: function() {
                    return a
                },
                MAX_ATTACHMENT_UPLOAD_TOTAL_FILESIZE_BYTES: function() {
                    return l
                },
                MAX_ATTACHMENT_UPLOAD_COUNT: function() {
                    return s
                }
            });
            let i = "guild-product-edit-modal",
                a = 1073741824,
                l = 1073741824,
                s = 10
        },
        287883: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useGuildEligibleForGuildProducts: function() {
                    return a
                },
                isGuildEligibleForGuildProducts: function() {
                    return l
                }
            });
            var i = n("60705");

            function a(e, t) {
                let {
                    enabled: n
                } = i.GuildProductsExperiment.useExperiment({
                    guildId: null != e ? e : "",
                    location: t
                });
                return n
            }

            function l(e, t) {
                let {
                    enabled: n
                } = i.GuildProductsExperiment.getCurrentConfig({
                    guildId: null != e ? e : "",
                    location: t
                });
                return n
            }
        },
        60705: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                GuildProductsExperiment: function() {
                    return a
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                kind: "guild",
                id: "2023-04_server_products",
                label: "Server Products",
                defaultConfig: {
                    enabled: !1
                },
                treatments: [{
                    id: 1,
                    label: "Enables Server Products (AKA one time purchases for creator guilds)",
                    config: {
                        enabled: !0
                    }
                }]
            })
        },
        371358: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                fetchSubscriptionsSettings: function() {
                    return c
                },
                updateSubscriptionsSettings: function() {
                    return _
                },
                fetchAllSubscriptionListingsDataForGuild: function() {
                    return E
                },
                createSubscriptionGroupListing: function() {
                    return f
                },
                fetchSubscriptionListingForPlan: function() {
                    return h
                },
                deleteSubscriptionListing: function() {
                    return T
                },
                archiveSubscriptionListing: function() {
                    return p
                },
                updateSubscriptionTrial: function() {
                    return S
                },
                createSubscriptionListing: function() {
                    return A
                },
                updateSubscriptionListing: function() {
                    return m
                },
                fetchMonetizationRestrictions: function() {
                    return g
                }
            });
            var i = n("398183"),
                a = n("913144"),
                l = n("850068"),
                s = n("775433"),
                r = n("716241"),
                u = n("599110"),
                o = n("719726"),
                d = n("49111");
            async function c(e) {
                let t = await o.getGuildRoleSubscriptionsSettings(e);
                a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_UPDATE_SUBSCRIPTIONS_SETTINGS",
                    settings: t
                })
            }
            async function _(e, t) {
                let n = await o.updateGuildRoleSubscriptionsSettings(e, t);
                a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_UPDATE_SUBSCRIPTIONS_SETTINGS",
                    settings: n
                })
            }
            async function E(e) {
                let {
                    includeSoftDeleted: t = !0,
                    countryCode: n
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS",
                    guildId: e
                });
                try {
                    let [i, s, r] = await Promise.all([o.getGuildRoleSubscriptionGroupListingsForGuild(e, {
                        includeSoftDeleted: t,
                        countryCode: n
                    }), o.getGuildRoleSubscriptionsSettings(e), o.getGuildRoleSubscriptionTrials(e), (0, l.fetchSubscriptions)()]);
                    a.default.dispatch({
                        type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS_SUCCESS",
                        guildId: e,
                        groupListings: i,
                        settings: s,
                        subscriptionTrials: r
                    })
                } catch (t) {
                    a.default.dispatch({
                        type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS_FAILURE",
                        guildId: e
                    })
                }
            }
            async function f(e, t) {
                let n = await o.createGuildRoleSubscriptionGroupListing(e, t);
                return a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_UPDATE_GROUP_LISTING",
                    listing: n
                }), n
            }
            async function h(e) {
                var t;
                a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTING_FOR_PLAN",
                    planId: e
                });
                let n = await o.getGuildRoleSubscriptionGroupForSubscriptionPlan(e);
                a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTING_FOR_PLAN_SUCCESS",
                    groupListing: n
                });
                let i = null !== (t = n.subscription_listings) && void 0 !== t ? t : [];
                for (let t of i) t.subscription_plans[0].id === e && await s.fetchSubscriptionPlansForSKU(t.id, void 0, void 0, !0)
            }
            async function T(e, t, n) {
                await o.deleteGuildRoleSubscriptionListing(e, t, n), a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_DELETE_LISTING",
                    listingId: n
                })
            }
            async function p(e, t, n) {
                let i = await o.archiveGuildRoleSubscriptionListing(e, t, n);
                a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_UPDATE_LISTING",
                    listing: i
                })
            }
            async function S(e, t, n) {
                let i = await o.updateGuildRoleSubscriptionsTrial(e, t, n);
                a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_UPDATE_SUBSCRIPTION_TRIAL",
                    subscriptionTrial: i
                })
            }
            async function I(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                    i = await o.getGuildRoleSubscriptionGroupListing(e, t, n);
                return a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_UPDATE_GROUP_LISTING",
                    listing: i
                }), i
            }
            async function A(e) {
                let {
                    guildId: t,
                    groupListingId: n,
                    data: i,
                    analyticsContext: l,
                    onBeforeDispatchNewListing: s
                } = e, c = await o.createGuildRoleSubscriptionListing(t, n, i);
                return u.default.track(d.AnalyticEvents.ROLE_SUBSCRIPTION_LISTING_CREATED, {
                    role_subscription_listing_id: c.id,
                    role_subscription_group_listing_id: n,
                    template_name: l.templateCategory,
                    has_change_from_template: l.hasChangeFromTemplate,
                    ...(0, r.collectGuildAnalyticsMetadata)(t)
                }), await I(t, n, {
                    includeArchivedListings: !0
                }), null == s || s(c), a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_UPDATE_LISTING",
                    listing: c
                }), c
            }
            async function m(e) {
                let {
                    guildId: t,
                    listingId: n,
                    groupListingId: i,
                    data: l
                } = e, s = await o.updateGuildRoleSubscriptionListing(t, i, n, l);
                return a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_UPDATE_LISTING",
                    listing: s
                }), await I(t, i, {
                    includeArchivedListings: !0
                }), s
            }
            async function g(e) {
                let {
                    signal: t
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = !1;
                for (let l = 0; l < 3; l++) try {
                    if (null == t ? void 0 : t.aborted) {
                        a.default.dispatch({
                            type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_ABORTED",
                            guildId: e
                        });
                        return
                    }
                    a.default.dispatch({
                        type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS",
                        guildId: e
                    });
                    let {
                        restrictions: i
                    } = await o.getGuildMonetizationRestrictions(e, {
                        signal: t
                    });
                    a.default.dispatch({
                        type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_SUCCESS",
                        guildId: e,
                        restrictions: null != i ? i : []
                    }), n = !0;
                    break
                } catch (e) {
                    await (0, i.sleep)((l + 1) * 1e3)
                }!n && a.default.dispatch({
                    type: "GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_FAILURE",
                    guildId: e
                })
            }
        },
        719726: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                createGuildRoleSubscriptionGroupListing: function() {
                    return r
                },
                createGuildRoleSubscriptionListing: function() {
                    return u
                },
                updateGuildRoleSubscriptionListing: function() {
                    return o
                },
                getGuildRoleSubscriptionGroupListingsForGuild: function() {
                    return d
                },
                getGuildRoleSubscriptionsSettings: function() {
                    return c
                },
                updateGuildRoleSubscriptionsSettings: function() {
                    return _
                },
                getPriceTiers: function() {
                    return E
                },
                getGuildRoleSubscriptionGroupListing: function() {
                    return f
                },
                getGuildRoleSubscriptionGroupForSubscriptionPlan: function() {
                    return h
                },
                deleteGuildRoleSubscriptionListing: function() {
                    return T
                },
                archiveGuildRoleSubscriptionListing: function() {
                    return p
                },
                getGuildRoleSubscriptionTrials: function() {
                    return S
                },
                updateGuildRoleSubscriptionsTrial: function() {
                    return I
                },
                getGuildRoleSubscriptionTrialEligibility: function() {
                    return A
                },
                getGuildMonetizationRestrictions: function() {
                    return m
                },
                fetchHighlightedCreatorGuildDetails: function() {
                    return g
                }
            });
            var i = n("872717"),
                a = n("448993"),
                l = n("49111"),
                s = n("843455");
            let r = async (e, t) => {
                try {
                    let n = await i.default.post({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_GROUP_LISTINGS(e),
                        body: t
                    });
                    return n.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, u = async (e, t, n) => {
                let {
                    priceTier: s,
                    ...r
                } = n;
                try {
                    let n = await i.default.post({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_LISTINGS(e, t),
                        body: {
                            ...r,
                            price_tier: s
                        }
                    });
                    return n.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, o = async (e, t, n, s) => {
                let {
                    priceTier: r,
                    ...u
                } = s;
                try {
                    let a = await i.default.patch({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_LISTINGS(e, t, n),
                        body: {
                            ...u,
                            price_tier: r
                        }
                    });
                    return a.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, d = async function(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                        includeSoftDeleted: !1
                    },
                    n = {
                        include_soft_deleted: t.includeSoftDeleted,
                        country_code: t.countryCode
                    };
                try {
                    let t = await i.default.get({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_GROUP_LISTINGS(e),
                        query: n
                    });
                    return t.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, c = async e => {
                let t = await i.default.get({
                    url: l.Endpoints.GUILD_ROLE_SUBSCRIPTIONS_SETTINGS(e)
                });
                return t.body
            }, _ = async (e, t) => {
                try {
                    let n = await i.default.patch({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTIONS_SETTINGS(e),
                        body: t
                    });
                    return n.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, E = async e => {
                try {
                    let t = await i.default.get({
                        url: l.Endpoints.PRICE_TIERS,
                        query: {
                            price_tier_type: s.PriceTierTypes.GUILD_ROLE_SUBSCRIPTIONS,
                            guild_id: e
                        }
                    });
                    return t.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, f = async function(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                try {
                    let a = await i.default.get({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_GROUP_LISTINGS(e, t),
                        query: {
                            include_draft_listings: n.includeDraftListings,
                            include_archived_listings: n.includeArchivedListings
                        }
                    });
                    return a.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, h = async e => {
                try {
                    let t = await i.default.get({
                        url: l.Endpoints.SUBSCRIPTION_PLAN_GUILD_ROLE_GROUP_LISTING(e)
                    });
                    return t.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, T = async (e, t, n) => {
                try {
                    await i.default.delete({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_LISTINGS(e, t, n)
                    })
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, p = async (e, t, n) => {
                try {
                    let a = await i.default.post({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_GROUP_LISTING_ARCHIVE(e, t, n)
                    });
                    return a.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, S = async e => {
                try {
                    let t = await i.default.get({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_TRIALS(e)
                    });
                    return t.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, I = async (e, t, n) => {
                try {
                    let a = await i.default.patch({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_LISTING_TRIAL(e, t),
                        body: n
                    });
                    return a.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, A = async (e, t, n) => {
                try {
                    let a = await i.default.get({
                        url: l.Endpoints.GUILD_ROLE_SUBSCRIPTION_TRIAL_ELIGIBILITY(e, t, n)
                    });
                    return a.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, m = async function(e) {
                let {
                    signal: t
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                try {
                    let n = await i.default.get({
                        url: l.Endpoints.CREATOR_MONETIZATION_RESTRICTIONS(e),
                        signal: t
                    });
                    return n.body
                } catch (e) {
                    throw new a.APIError(e)
                }
            }, g = async e => {
                try {
                    var t;
                    let n = await i.default.get({
                        url: l.Endpoints.GUILD_DISCOVERY_SLUG(e)
                    });
                    return null !== (t = n.body) && void 0 !== t ? t : JSON.parse(n.text)
                } catch (e) {
                    throw new a.APIError(e)
                }
            }
        },
        638779: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                computeHasRoleSubscriptionsInGuild: function() {
                    return u
                },
                default: function() {
                    return o
                }
            });
            var i = n("446674"),
                a = n("271938"),
                l = n("26989"),
                s = n("305961"),
                r = n("49111");

            function u(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null == e ? null : l.default.getMember(e, a.default.getId()),
                    [n] = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [s.default],
                    i = n.getGuild(e);
                if (null == i || null == t || !i.hasFeature(r.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED)) return !1;
                for (let e of t.roles) {
                    var u;
                    let t = i.getRole(e);
                    if ((null == t ? void 0 : null === (u = t.tags) || void 0 === u ? void 0 : u.subscription_listing_id) != null) return !0
                }
                return !1
            }

            function o(e) {
                let t = (0, i.useStateFromStores)([a.default, l.default], () => null == e ? null : l.default.getMember(e, a.default.getId()));
                return (0, i.useStateFromStores)([s.default], () => u(e, t, [s.default]), [e, t])
            }
        },
        903724: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                areRoleSubscriptionsVisibleInGuild: function() {
                    return _
                },
                useRoleSubscriptionsVisibleInGuild: function() {
                    return E
                },
                useShowRoleSubscriptionsInChannelList: function() {
                    return f
                }
            });
            var i = n("446674"),
                a = n("551254"),
                l = n("250666"),
                s = n("465869"),
                r = n("38654"),
                u = n("305961"),
                o = n("638779"),
                d = n("49111");

            function c(e) {
                let [t, n] = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [u.default, r.default], i = t.getGuild(e);
                if (null == i) return !1;
                let a = (0, l.isCreatorMonetizationEnabledGuild)(i),
                    s = i.hasFeature(d.GuildFeatures.ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE);
                if (a && s) return !0;
                let o = n.isViewingSubscriptionRoles(e);
                return !!o || !1
            }

            function _(e) {
                return !!c(e) || (0, o.computeHasRoleSubscriptionsInGuild)(e)
            }

            function E(e) {
                let t = (0, o.default)(e),
                    n = (0, i.useStateFromStores)([u.default, r.default], () => c(e, [u.default, r.default]), [e]),
                    {
                        shouldHideGuildPurchaseEntryPoints: a
                    } = (0, s.useShouldHideGuildPurchaseEntryPoints)(e);
                return !a && (n || t)
            }

            function f(e) {
                let t = E(e),
                    n = (0, a.useIsEligibleForSubscriptionsInGuildShop)(e, "useShowRoleSubscriptionsInChannelList");
                return t && !n
            }
        },
        374021: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                openGuildEventDetails: function() {
                    return u
                },
                transitionToEventDetailsFromInvite: function() {
                    return o
                },
                openEndEventModal: function() {
                    return d
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("551042"),
                l = n("851387"),
                s = n("49111"),
                r = n("625611");

            function u(e) {
                let {
                    eventId: t,
                    parentGuildId: l,
                    recurrenceId: s
                } = e;
                (0, a.openModalLazy)(async () => {
                    let {
                        default: e
                    } = await n.el("833843").then(n.bind(n, "833843"));
                    return n => (0, i.jsx)(e, {
                        guildScheduledEventId: t,
                        parentGuildId: l,
                        recurrenceId: s,
                        ...n
                    })
                })
            }
            async function o(e, t) {
                let {
                    guild_id: n
                } = e;
                await l.default.transitionToGuildSync(n, t), u({
                    eventId: e.id,
                    event: e
                })
            }

            function d(e, t) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await n.el("203811").then(n.bind(n, "203811"));
                    return n => (0, i.jsx)(t, {
                        ...n,
                        channel: e
                    })
                }, {
                    contextKey: t === s.AppContext.POPOUT ? r.POPOUT_MODAL_CONTEXT : r.DEFAULT_MODAL_CONTEXT
                })
            }
        },
        398604: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                StaticGuildEventIndexes: function() {
                    return E
                },
                scheduledEventSort: function() {
                    return f
                },
                isGuildScheduledEventActive: function() {
                    return D
                },
                isEventUpcoming: function() {
                    return L
                },
                isGuildEventEnded: function() {
                    return U
                },
                default: function() {
                    return b
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("407846"),
                r = n("913144"),
                u = n("766274"),
                o = n("271938"),
                d = n("26989"),
                c = n("697218"),
                _ = n("745049");
            let E = {
                EVENT: "event",
                EVENT_ACTIVE: "active",
                EVENT_UPCOMING: "event-upcoming",
                GUILD_EVENT: e => "".concat(e, "-").concat(E.EVENT),
                GUILD_EVENT_ACTIVE: e => "".concat(e, "-").concat(E.EVENT_ACTIVE),
                GUILD_EVENT_UPCOMING: e => "".concat(e, "-").concat(E.EVENT_UPCOMING),
                CHANNEL_EVENT: e => "".concat(e, "-").concat(E.EVENT),
                CHANNEL_EVENT_ACTIVE: e => "".concat(e, "-").concat(E.EVENT_ACTIVE),
                CHANNEL_EVENT_UPCOMING: e => "".concat(e, "-").concat(E.EVENT_UPCOMING)
            };

            function f(e) {
                let {
                    id: t,
                    scheduled_start_time: n
                } = e, i = D(e) ? "\x00" : "\x01";
                return "".concat(i, "-").concat(new Date(n).getTime(), "-").concat(t)
            }
            let h = new s.default(e => {
                let {
                    guild_id: t,
                    entity_id: n,
                    channel_id: i
                } = e, a = [t];
                return null != n && a.push(n), a.push(E.GUILD_EVENT(t)), null != i && a.push(E.CHANNEL_EVENT(i)), D(e) && (a.push(E.EVENT_ACTIVE), a.push(E.GUILD_EVENT_ACTIVE(t)), null != i && a.push(E.CHANNEL_EVENT_ACTIVE(i))), L(e) && (a.push(E.EVENT_UPCOMING), a.push(E.GUILD_EVENT_UPCOMING(t)), null != i && a.push(E.CHANNEL_EVENT_UPCOMING(i))), a
            }, f);

            function T(e) {
                var t;
                let n = h.get(e.id),
                    i = null !== (t = e.user_count) && void 0 !== t ? t : null == n ? void 0 : n.user_count,
                    a = g(e.id, e.guild_id) ? 1 : 0;
                e.user_count = Math.max(a, null != i ? i : 0), h.set(e.id, e), I += 1
            }

            function p(e, t) {
                h.delete(e), N(e, t), I += 1
            }
            let S = "orphaned",
                I = 0,
                A = {},
                m = [];

            function g(e) {
                var t, n;
                let i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : S;
                return i !== S && (null === (t = A[S]) || void 0 === t ? void 0 : t.has(e)) && (C(e, i), N(e, S)), !!(null === (n = A[i]) || void 0 === n ? void 0 : n.has(e))
            }

            function C(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : S;
                null == A[t] && (A[t] = new Set), A[t].add(e), I += 1
            }

            function N(e) {
                var t;
                let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : S;
                null === (t = A[n]) || void 0 === t || t.delete(e), I += 1
            }
            let O = {};

            function R(e, t) {
                var n;
                return !!(null === (n = O[e]) || void 0 === n ? void 0 : n[t])
            }

            function v(e) {
                h.values(E.GUILD_EVENT(e)).forEach(t => p(t.id, e))
            }

            function M(e) {
                let {
                    guildScheduledEvent: t
                } = e;
                return T(t), !0
            }

            function y(e) {
                let {
                    eventException: t
                } = e, n = h.get(t.event_id);
                if (null == n) return !1;
                let i = n.guild_scheduled_event_exceptions.findIndex(e => e.event_exception_id === t.event_exception_id),
                    a = [...n.guild_scheduled_event_exceptions];
                return i < 0 ? a.push(t) : a[i] = t, T({
                    ...n,
                    guild_scheduled_event_exceptions: a
                }), !0
            }

            function D(e) {
                var t;
                return null != e && (t = (null == e ? void 0 : e.status) === _.GuildScheduledEventStatus.ACTIVE, t)
            }

            function L(e) {
                return !_.GuildScheduledEventStatusDone.has(e.status)
            }

            function U(e) {
                return null != e && _.GuildScheduledEventStatusDone.has(e.status)
            }
            class P extends l.default.Store {
                getGuildScheduledEvent(e) {
                    var t;
                    return null == e ? null : null !== (t = h.get(e)) && void 0 !== t ? t : null
                }
                getGuildEventCountByIndex(e) {
                    return h.size(e)
                }
                getGuildScheduledEventsForGuild(e) {
                    return null == e ? [] : h.values(e)
                }
                getGuildScheduledEventsByIndex(e) {
                    return h.values(e)
                }
                getRsvpVersion() {
                    return I
                }
                hasRsvp(e, t) {
                    return null != e && null != t && g(e, t)
                }
                isActive(e) {
                    return null != e && D(h.get(e))
                }
                getActiveEventByChannel(e) {
                    if (null == e) return;
                    let t = this.getGuildScheduledEventsByIndex(E.CHANNEL_EVENT_ACTIVE(e));
                    return t[0]
                }
                getUsersForGuildEvent(e) {
                    var t;
                    return null == e ? {} : null !== (t = O[e]) && void 0 !== t ? t : {}
                }
            }
            P.displayName = "GuildScheduledEventStore";
            var b = new P(r.default, {
                CONNECTION_OPEN: function(e) {
                    let {
                        guilds: t
                    } = e;
                    return h.clear(), A = {}, I = 0, O = {}, m.forEach(T), t.forEach(e => e.guild_scheduled_events.forEach(T)), !0
                },
                GUILD_CREATE: function(e) {
                    let {
                        guild: t
                    } = e;
                    return v(t.id), t.guild_scheduled_events.forEach(e => T(e)), !0
                },
                GUILD_DELETE: function(e) {
                    let {
                        guild: t
                    } = e;
                    return v(t.id), !0
                },
                FETCH_GUILD_EVENTS_FOR_GUILD: function(e) {
                    let {
                        guildId: t,
                        guildScheduledEvents: n
                    } = e, i = h.values(E.GUILD_EVENT(t), !0).map(e => e.id), l = n.map(e => e.id);
                    for (let e of (a.difference(i, l).forEach(e => {
                            p(e, t)
                        }), n)) T(e);
                    return !0
                },
                GUILD_SCHEDULED_EVENT_CREATE: M,
                GUILD_SCHEDULED_EVENT_UPDATE: M,
                GUILD_SCHEDULED_EVENT_DELETE: function(e) {
                    let {
                        guildScheduledEvent: t
                    } = e;
                    return p(t.id, t.guild_id), !0
                },
                GUILD_SCHEDULED_EVENT_USER_ADD: function(e) {
                    var t, n, i;
                    let {
                        userId: a,
                        guildEventId: l,
                        guildId: s
                    } = e, r = h.get(l), u = o.default.getId(), _ = g(l, s), E = u === a;
                    if (null != r && (!_ || !E)) {
                        ;
                        let e = null !== (t = r.user_count) && void 0 !== t ? t : 0;
                        T({
                            ...r,
                            user_count: e + 1
                        })
                    }
                    if (E && !_ && C(l, s), null != a && !R(l, a)) {
                        let e = c.default.getUser(a),
                            t = d.default.getMember(s, a);
                        if (null != e) {
                            ;
                            n = l, i = {
                                user: e,
                                guild_member: null != t ? t : {
                                    guildId: s
                                }
                            }, null == O[n] && (O[n] = {}), O[n][i.user.id] = i, I += 1
                        }
                    }
                    return !0
                },
                GUILD_SCHEDULED_EVENT_USER_REMOVE: function(e) {
                    var t, n, i, a;
                    let {
                        userId: l,
                        guildEventId: s,
                        guildId: r
                    } = e, u = h.get(s), d = o.default.getId(), c = g(s, r), _ = d === l;
                    if (_ && c && N(s, r), null != l && R(s, l)) {
                        ;
                        t = s, n = l, null === (i = O[t]) || void 0 === i || delete i[n], I += 1
                    }
                    if (null != u && (c || !_)) {
                        ;
                        let e = null !== (a = u.user_count) && void 0 !== a ? a : 0;
                        T({
                            ...u,
                            user_count: Math.max(0, e - 1)
                        })
                    }
                    return !0
                },
                GUILD_SCHEDULED_EVENT_RSVPS_FETCH_SUCESS: function(e) {
                    let {
                        guildId: t,
                        guildScheduledEventUsers: n
                    } = e;
                    return A[t] = new Set, n.forEach(e => {
                        e.user_id === o.default.getId() && C(e.guild_scheduled_event_id, t)
                    }), !0
                },
                GUILD_SCHEDULED_EVENT_USERS_FETCH_SUCCESS: function(e) {
                    let {
                        guildEventId: t,
                        rsvpUsers: n,
                        guildId: i
                    } = e;
                    return O = {
                        ...O,
                        [t]: n.reduce((e, t) => {
                            let {
                                guild_member: n,
                                ...a
                            } = t, l = {
                                user: new u.default({
                                    ...a,
                                    guildMemberAvatars: (null == n ? void 0 : n.avatar) != null ? {
                                        [i]: n.avatar
                                    } : null
                                }),
                                guild_member: {
                                    ...null != n ? n : {},
                                    guildId: i
                                }
                            };
                            return e[a.id] = l, e
                        }, {})
                    }, !0
                },
                INVITE_RESOLVE_SUCCESS: function(e) {
                    let {
                        invite: t
                    } = e, n = t.guild_scheduled_event;
                    return null != n && (T(n), !0)
                },
                EVENT_DIRECTORY_FETCH_SUCCESS: function(e) {
                    let {
                        entries: t
                    } = e, n = a.map(t, "guild_scheduled_event");
                    for (let e of n) T(e), null != e.user_rsvp ? C(e.id, e.guild_id) : N(e.id, e.guild_id);
                    return m = n, !0
                },
                GUILD_SCHEDULED_EVENT_EXCEPTION_CREATE: y,
                GUILD_SCHEDULED_EVENT_EXCEPTION_UPDATE: y,
                GUILD_SCHEDULED_EVENT_EXCEPTION_DELETE: function(e) {
                    let {
                        eventException: t
                    } = e, n = h.get(t.event_id);
                    if (null == n) return !1;
                    let i = n.guild_scheduled_event_exceptions.filter(e => e.event_exception_id !== t.event_exception_id);
                    return T({
                        ...n,
                        guild_scheduled_event_exceptions: i
                    }), !0
                },
                LOGOUT: function() {
                    return h.clear(), !0
                }
            })
        },
        892692: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                commandName: function() {
                    return a
                },
                toPermissionKey: function() {
                    return l
                },
                keyPermissions: function() {
                    return s
                }
            });
            var i = n("798609");

            function a(e, t) {
                return e === i.ApplicationCommandType.CHAT ? "/" + t : t
            }

            function l(e, t) {
                return "".concat(e, ":").concat(t)
            }

            function s(e) {
                return Object.fromEntries(e.map(e => [l(e.id, e.type), e]))
            }
            n("524768")
        },
        468560: function(e, t, n) {
            "use strict";

            function i(e, t) {
                var n;
                let i = null == t ? void 0 : null === (n = t.replace(/-/g, "_")) || void 0 === n ? void 0 : n.toUpperCase();
                if (null != i && i in e) return e[i]
            }
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            })
        },
        89073: function(e, t, n) {
            "use strict";

            function i(e) {
                if (null == e) return !1;
                for (var t = 0; t < e.length; t++)
                    if (e[t].voiceState.selfStream) return !0;
                return !1
            }
            n.r(t), n.d(t, {
                hasStream: function() {
                    return i
                }
            })
        },
        44574: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useGuildUnreadsExperiment: function() {
                    return l
                },
                isGuildUnreadsExperimentEnabled: function() {
                    return s
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                kind: "user",
                id: "2022-08_guild_unreads",
                label: "Guild Unreads",
                defaultConfig: {
                    allowUnreadHighlightsOption: !1
                },
                treatments: [{
                    id: 1,
                    label: 'Allow "Highlights" as an Unreads Option',
                    config: {
                        allowUnreadHighlightsOption: !0
                    }
                }]
            });

            function l() {
                let {
                    allowUnreadHighlightsOption: e
                } = a.useExperiment({
                    location: "6728b0_1"
                }, {
                    autoTrackExposure: !1
                });
                return e
            }

            function s() {
                let {
                    allowUnreadHighlightsOption: e
                } = a.getCurrentConfig({
                    location: "6728b0_2"
                }, {
                    autoTrackExposure: !1
                });
                return e
            }
        },
        811400: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                calculateUnreadSetting: function() {
                    return E
                },
                useGuildUnreadSetting: function() {
                    return f
                },
                getGuildUnreadSetting: function() {
                    return h
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("446674"),
                s = n("755624"),
                r = n("233069"),
                u = n("42203"),
                o = n("282109"),
                d = n("44574"),
                c = n("627869"),
                _ = n("49111");

            function E(e) {
                let {
                    isExperimentEnabled: t,
                    hasUserEnabledGuildUnreads: n,
                    channelNotificationOverrides: i,
                    categoryNotificationOverrides: a,
                    unreadSetting: l,
                    hasJoinedThread: s
                } = e, r = null != i && i.message_notifications !== _.UserNotificationSettings.NULL || null != a && a.message_notifications !== _.UserNotificationSettings.NULL;
                return t && n && !s ? r ? null == l || l === c.UserUnreadSettings.NULL ? c.UserUnreadSettings.ALL_MESSAGES : l : null != l ? l : c.UserUnreadSettings.NULL : c.UserUnreadSettings.ALL_MESSAGES
            }

            function f(e) {
                let t = null == e ? void 0 : e.guild_id,
                    n = null == e ? void 0 : e.parent_id,
                    i = (0, l.useStateFromStores)([u.default], () => u.default.getChannel(n), [n]),
                    r = (null == e ? void 0 : e.isThread()) ? n : null == e ? void 0 : e.id;
                a(null != r, "parent_id cannot be null for threads");
                let _ = (null == e ? void 0 : e.isThread()) ? null == i ? void 0 : i.parent_id : n,
                    f = (0, d.useGuildUnreadsExperiment)(),
                    {
                        channelNotificationOverrides: h,
                        categoryNotificationOverrides: T,
                        unreadSetting: p,
                        hasUserEnabledGuildUnreads: S
                    } = (0, l.useStateFromStoresObject)([o.default], () => ({
                        channelNotificationOverrides: o.default.getChannelOverrides(t)[r],
                        categoryNotificationOverrides: null != _ ? o.default.getChannelOverrides(t)[_] : null,
                        unreadSetting: null != t ? o.default.getChannelUnreadSetting(t, r) : c.UserUnreadSettings.NULL,
                        hasUserEnabledGuildUnreads: null != t && o.default.isGuildUnreadSettingEnabled(t)
                    }), [t, r, _]),
                    I = (0, l.useStateFromStores)([s.default], () => (null == e ? void 0 : e.id) != null && s.default.hasJoined(e.id));
                return E({
                    isExperimentEnabled: f,
                    hasUserEnabledGuildUnreads: S,
                    channelNotificationOverrides: h,
                    categoryNotificationOverrides: T,
                    unreadSetting: p,
                    hasJoinedThread: I
                })
            }

            function h(e) {
                let t = e.guild_id,
                    n = u.default.getBasicChannel(e.parent_id),
                    i = (0, r.isThread)(e.type) ? e.parent_id : e.id;
                a(null != i, "parent_id cannot be null for threads");
                let l = (0, r.isThread)(e.type) ? null == n ? void 0 : n.parent_id : e.parent_id,
                    c = (0, d.isGuildUnreadsExperimentEnabled)(),
                    _ = o.default.isGuildUnreadSettingEnabled(t),
                    f = o.default.getChannelUnreadSetting(t, i),
                    h = o.default.getChannelOverrides(t)[i],
                    T = null != l ? o.default.getChannelOverrides(t)[l] : null,
                    p = s.default.hasJoined(e.id);
                return E({
                    isExperimentEnabled: c,
                    hasUserEnabledGuildUnreads: _,
                    channelNotificationOverrides: h,
                    categoryNotificationOverrides: T,
                    unreadSetting: f,
                    hasJoinedThread: p
                })
            }
        },
        704341: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("393414"),
                a = n("49111"),
                l = {
                    onOpenHubInvite(e) {
                        let {
                            guild: t
                        } = e;
                        null != t && (0, i.transitionTo)(a.Routes.GUILD_MEMBER_VERIFICATION_FOR_HUB(t.id, e.code))
                    }
                }
        },
        988415: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getCountryCodeByAlpha2: function() {
                    return r
                },
                getDefaultCountryCode: function() {
                    return u
                },
                getI18NCountryName: function() {
                    return d
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("592861"),
                s = n("782340");

            function r(e) {
                let t = l.default.find(t => t.alpha2 === e);
                if (null != t) return {
                    name: t.name,
                    code: t.phoneCountryCode,
                    alpha2: t.alpha2
                }
            }

            function u() {
                let e = function(e) {
                    let t = l.default.find(t => t.name === e);
                    if (null != t) return {
                        name: t.name,
                        code: t.phoneCountryCode,
                        alpha2: t.alpha2
                    }
                }("United States");
                return a(e, "Default country code cannot be missing."), e
            }
            let o = {
                AF: () => s.default.Messages.COUNTRY_NAME_AF,
                AX: () => s.default.Messages.COUNTRY_NAME_AX,
                AL: () => s.default.Messages.COUNTRY_NAME_AL,
                DZ: () => s.default.Messages.COUNTRY_NAME_DZ,
                AS: () => s.default.Messages.COUNTRY_NAME_AS,
                AD: () => s.default.Messages.COUNTRY_NAME_AD,
                AO: () => s.default.Messages.COUNTRY_NAME_AO,
                AI: () => s.default.Messages.COUNTRY_NAME_AI,
                AQ: () => s.default.Messages.COUNTRY_NAME_AQ,
                AG: () => s.default.Messages.COUNTRY_NAME_AG,
                AR: () => s.default.Messages.COUNTRY_NAME_AR,
                AM: () => s.default.Messages.COUNTRY_NAME_AM,
                AW: () => s.default.Messages.COUNTRY_NAME_AW,
                AC: () => s.default.Messages.COUNTRY_NAME_AC,
                AU: () => s.default.Messages.COUNTRY_NAME_AU,
                AT: () => s.default.Messages.COUNTRY_NAME_AT,
                AZ: () => s.default.Messages.COUNTRY_NAME_AZ,
                BS: () => s.default.Messages.COUNTRY_NAME_BS,
                BH: () => s.default.Messages.COUNTRY_NAME_BH,
                BD: () => s.default.Messages.COUNTRY_NAME_BD,
                BB: () => s.default.Messages.COUNTRY_NAME_BB,
                BY: () => s.default.Messages.COUNTRY_NAME_BY,
                BE: () => s.default.Messages.COUNTRY_NAME_BE,
                BZ: () => s.default.Messages.COUNTRY_NAME_BZ,
                BJ: () => s.default.Messages.COUNTRY_NAME_BJ,
                BM: () => s.default.Messages.COUNTRY_NAME_BM,
                BT: () => s.default.Messages.COUNTRY_NAME_BT,
                BO: () => s.default.Messages.COUNTRY_NAME_BO,
                BQ: () => s.default.Messages.COUNTRY_NAME_BQ,
                BA: () => s.default.Messages.COUNTRY_NAME_BA,
                BW: () => s.default.Messages.COUNTRY_NAME_BW,
                BV: () => s.default.Messages.COUNTRY_NAME_BV,
                BR: () => s.default.Messages.COUNTRY_NAME_BR,
                IO: () => s.default.Messages.COUNTRY_NAME_IO,
                BN: () => s.default.Messages.COUNTRY_NAME_BN,
                BG: () => s.default.Messages.COUNTRY_NAME_BG,
                BF: () => s.default.Messages.COUNTRY_NAME_BF,
                BI: () => s.default.Messages.COUNTRY_NAME_BI,
                KH: () => s.default.Messages.COUNTRY_NAME_KH,
                CM: () => s.default.Messages.COUNTRY_NAME_CM,
                CA: () => s.default.Messages.COUNTRY_NAME_CA,
                CV: () => s.default.Messages.COUNTRY_NAME_CV,
                KY: () => s.default.Messages.COUNTRY_NAME_KY,
                CF: () => s.default.Messages.COUNTRY_NAME_CF,
                TD: () => s.default.Messages.COUNTRY_NAME_TD,
                CL: () => s.default.Messages.COUNTRY_NAME_CL,
                CN: () => s.default.Messages.COUNTRY_NAME_CN,
                CX: () => s.default.Messages.COUNTRY_NAME_CX,
                CC: () => s.default.Messages.COUNTRY_NAME_CC,
                CO: () => s.default.Messages.COUNTRY_NAME_CO,
                KM: () => s.default.Messages.COUNTRY_NAME_KM,
                CG: () => s.default.Messages.COUNTRY_NAME_CG,
                CD: () => s.default.Messages.COUNTRY_NAME_CD,
                CK: () => s.default.Messages.COUNTRY_NAME_CK,
                CR: () => s.default.Messages.COUNTRY_NAME_CR,
                CI: () => s.default.Messages.COUNTRY_NAME_CI,
                HR: () => s.default.Messages.COUNTRY_NAME_HR,
                CU: () => s.default.Messages.COUNTRY_NAME_CU,
                CW: () => s.default.Messages.COUNTRY_NAME_CW,
                CY: () => s.default.Messages.COUNTRY_NAME_CY,
                CZ: () => s.default.Messages.COUNTRY_NAME_CZ,
                DK: () => s.default.Messages.COUNTRY_NAME_DK,
                DG: () => s.default.Messages.COUNTRY_NAME_DG,
                DJ: () => s.default.Messages.COUNTRY_NAME_DJ,
                DM: () => s.default.Messages.COUNTRY_NAME_DM,
                DO: () => s.default.Messages.COUNTRY_NAME_DO,
                TP: () => s.default.Messages.COUNTRY_NAME_TP,
                EC: () => s.default.Messages.COUNTRY_NAME_EC,
                EG: () => s.default.Messages.COUNTRY_NAME_EG,
                SV: () => s.default.Messages.COUNTRY_NAME_SV,
                GQ: () => s.default.Messages.COUNTRY_NAME_GQ,
                ER: () => s.default.Messages.COUNTRY_NAME_ER,
                EE: () => s.default.Messages.COUNTRY_NAME_EE,
                ET: () => s.default.Messages.COUNTRY_NAME_ET,
                FK: () => s.default.Messages.COUNTRY_NAME_FK,
                FO: () => s.default.Messages.COUNTRY_NAME_FO,
                FJ: () => s.default.Messages.COUNTRY_NAME_FJ,
                FI: () => s.default.Messages.COUNTRY_NAME_FI,
                FR: () => s.default.Messages.COUNTRY_NAME_FR,
                GF: () => s.default.Messages.COUNTRY_NAME_GF,
                PF: () => s.default.Messages.COUNTRY_NAME_PF,
                TF: () => s.default.Messages.COUNTRY_NAME_TF,
                GA: () => s.default.Messages.COUNTRY_NAME_GA,
                GM: () => s.default.Messages.COUNTRY_NAME_GM,
                GE: () => s.default.Messages.COUNTRY_NAME_GE,
                DE: () => s.default.Messages.COUNTRY_NAME_DE,
                GH: () => s.default.Messages.COUNTRY_NAME_GH,
                GI: () => s.default.Messages.COUNTRY_NAME_GI,
                GR: () => s.default.Messages.COUNTRY_NAME_GR,
                GL: () => s.default.Messages.COUNTRY_NAME_GL,
                GD: () => s.default.Messages.COUNTRY_NAME_GD,
                GP: () => s.default.Messages.COUNTRY_NAME_GP,
                GU: () => s.default.Messages.COUNTRY_NAME_GU,
                GT: () => s.default.Messages.COUNTRY_NAME_GT,
                GG: () => s.default.Messages.COUNTRY_NAME_GG,
                GN: () => s.default.Messages.COUNTRY_NAME_GN,
                GW: () => s.default.Messages.COUNTRY_NAME_GW,
                GY: () => s.default.Messages.COUNTRY_NAME_GY,
                HT: () => s.default.Messages.COUNTRY_NAME_HT,
                HM: () => s.default.Messages.COUNTRY_NAME_HM,
                VA: () => s.default.Messages.COUNTRY_NAME_VA,
                HN: () => s.default.Messages.COUNTRY_NAME_HN,
                HK: () => s.default.Messages.COUNTRY_NAME_HK,
                HU: () => s.default.Messages.COUNTRY_NAME_HU,
                IS: () => s.default.Messages.COUNTRY_NAME_IS,
                IN: () => s.default.Messages.COUNTRY_NAME_IN,
                ID: () => s.default.Messages.COUNTRY_NAME_ID,
                IR: () => s.default.Messages.COUNTRY_NAME_IR,
                IQ: () => s.default.Messages.COUNTRY_NAME_IQ,
                IE: () => s.default.Messages.COUNTRY_NAME_IE,
                IM: () => s.default.Messages.COUNTRY_NAME_IM,
                IL: () => s.default.Messages.COUNTRY_NAME_IL,
                IT: () => s.default.Messages.COUNTRY_NAME_IT,
                JM: () => s.default.Messages.COUNTRY_NAME_JM,
                JP: () => s.default.Messages.COUNTRY_NAME_JP,
                JE: () => s.default.Messages.COUNTRY_NAME_JE,
                JO: () => s.default.Messages.COUNTRY_NAME_JO,
                KZ: () => s.default.Messages.COUNTRY_NAME_KZ,
                KE: () => s.default.Messages.COUNTRY_NAME_KE,
                KI: () => s.default.Messages.COUNTRY_NAME_KI,
                XK: () => s.default.Messages.COUNTRY_NAME_XK,
                KP: () => s.default.Messages.COUNTRY_NAME_KP,
                KR: () => s.default.Messages.COUNTRY_NAME_KR,
                KW: () => s.default.Messages.COUNTRY_NAME_KW,
                KG: () => s.default.Messages.COUNTRY_NAME_KG,
                LA: () => s.default.Messages.COUNTRY_NAME_LA,
                LV: () => s.default.Messages.COUNTRY_NAME_LV,
                LB: () => s.default.Messages.COUNTRY_NAME_LB,
                LS: () => s.default.Messages.COUNTRY_NAME_LS,
                LR: () => s.default.Messages.COUNTRY_NAME_LR,
                LY: () => s.default.Messages.COUNTRY_NAME_LY,
                LI: () => s.default.Messages.COUNTRY_NAME_LI,
                LT: () => s.default.Messages.COUNTRY_NAME_LT,
                LU: () => s.default.Messages.COUNTRY_NAME_LU,
                MO: () => s.default.Messages.COUNTRY_NAME_MO,
                MK: () => s.default.Messages.COUNTRY_NAME_MK,
                MG: () => s.default.Messages.COUNTRY_NAME_MG,
                MW: () => s.default.Messages.COUNTRY_NAME_MW,
                MY: () => s.default.Messages.COUNTRY_NAME_MY,
                MV: () => s.default.Messages.COUNTRY_NAME_MV,
                ML: () => s.default.Messages.COUNTRY_NAME_ML,
                MT: () => s.default.Messages.COUNTRY_NAME_MT,
                MH: () => s.default.Messages.COUNTRY_NAME_MH,
                MQ: () => s.default.Messages.COUNTRY_NAME_MQ,
                MR: () => s.default.Messages.COUNTRY_NAME_MR,
                MU: () => s.default.Messages.COUNTRY_NAME_MU,
                YT: () => s.default.Messages.COUNTRY_NAME_YT,
                MX: () => s.default.Messages.COUNTRY_NAME_MX,
                FM: () => s.default.Messages.COUNTRY_NAME_FM,
                MI: () => s.default.Messages.COUNTRY_NAME_MI,
                MD: () => s.default.Messages.COUNTRY_NAME_MD,
                MC: () => s.default.Messages.COUNTRY_NAME_MC,
                MN: () => s.default.Messages.COUNTRY_NAME_MN,
                ME: () => s.default.Messages.COUNTRY_NAME_ME,
                MS: () => s.default.Messages.COUNTRY_NAME_MS,
                MA: () => s.default.Messages.COUNTRY_NAME_MA,
                MZ: () => s.default.Messages.COUNTRY_NAME_MZ,
                MM: () => s.default.Messages.COUNTRY_NAME_MM,
                NA: () => s.default.Messages.COUNTRY_NAME_NA,
                NR: () => s.default.Messages.COUNTRY_NAME_NR,
                NP: () => s.default.Messages.COUNTRY_NAME_NP,
                NL: () => s.default.Messages.COUNTRY_NAME_NL,
                AN: () => s.default.Messages.COUNTRY_NAME_AN,
                NC: () => s.default.Messages.COUNTRY_NAME_NC,
                NZ: () => s.default.Messages.COUNTRY_NAME_NZ,
                NI: () => s.default.Messages.COUNTRY_NAME_NI,
                NE: () => s.default.Messages.COUNTRY_NAME_NE,
                NG: () => s.default.Messages.COUNTRY_NAME_NG,
                NU: () => s.default.Messages.COUNTRY_NAME_NU,
                NF: () => s.default.Messages.COUNTRY_NAME_NF,
                MP: () => s.default.Messages.COUNTRY_NAME_MP,
                NO: () => s.default.Messages.COUNTRY_NAME_NO,
                OM: () => s.default.Messages.COUNTRY_NAME_OM,
                PK: () => s.default.Messages.COUNTRY_NAME_PK,
                PW: () => s.default.Messages.COUNTRY_NAME_PW,
                PS: () => s.default.Messages.COUNTRY_NAME_PS,
                PA: () => s.default.Messages.COUNTRY_NAME_PA,
                PG: () => s.default.Messages.COUNTRY_NAME_PG,
                PY: () => s.default.Messages.COUNTRY_NAME_PY,
                PE: () => s.default.Messages.COUNTRY_NAME_PE,
                PH: () => s.default.Messages.COUNTRY_NAME_PH,
                PN: () => s.default.Messages.COUNTRY_NAME_PN,
                PL: () => s.default.Messages.COUNTRY_NAME_PL,
                PT: () => s.default.Messages.COUNTRY_NAME_PT,
                PR: () => s.default.Messages.COUNTRY_NAME_PR,
                QA: () => s.default.Messages.COUNTRY_NAME_QA,
                RE: () => s.default.Messages.COUNTRY_NAME_RE,
                RO: () => s.default.Messages.COUNTRY_NAME_RO,
                RU: () => s.default.Messages.COUNTRY_NAME_RU,
                RW: () => s.default.Messages.COUNTRY_NAME_RW,
                BL: () => s.default.Messages.COUNTRY_NAME_BL,
                SH: () => s.default.Messages.COUNTRY_NAME_SH,
                KN: () => s.default.Messages.COUNTRY_NAME_KN,
                LC: () => s.default.Messages.COUNTRY_NAME_LC,
                MF: () => s.default.Messages.COUNTRY_NAME_MF,
                PM: () => s.default.Messages.COUNTRY_NAME_PM,
                VC: () => s.default.Messages.COUNTRY_NAME_VC,
                WS: () => s.default.Messages.COUNTRY_NAME_WS,
                SM: () => s.default.Messages.COUNTRY_NAME_SM,
                ST: () => s.default.Messages.COUNTRY_NAME_ST,
                SA: () => s.default.Messages.COUNTRY_NAME_SA,
                SN: () => s.default.Messages.COUNTRY_NAME_SN,
                RS: () => s.default.Messages.COUNTRY_NAME_RS,
                SC: () => s.default.Messages.COUNTRY_NAME_SC,
                SL: () => s.default.Messages.COUNTRY_NAME_SL,
                SG: () => s.default.Messages.COUNTRY_NAME_SG,
                SX: () => s.default.Messages.COUNTRY_NAME_SX,
                SK: () => s.default.Messages.COUNTRY_NAME_SK,
                SI: () => s.default.Messages.COUNTRY_NAME_SI,
                SB: () => s.default.Messages.COUNTRY_NAME_SB,
                SO: () => s.default.Messages.COUNTRY_NAME_SO,
                ZA: () => s.default.Messages.COUNTRY_NAME_ZA,
                GS: () => s.default.Messages.COUNTRY_NAME_GS,
                SS: () => s.default.Messages.COUNTRY_NAME_SS,
                ES: () => s.default.Messages.COUNTRY_NAME_ES,
                LK: () => s.default.Messages.COUNTRY_NAME_LK,
                SD: () => s.default.Messages.COUNTRY_NAME_SD,
                SR: () => s.default.Messages.COUNTRY_NAME_SR,
                SJ: () => s.default.Messages.COUNTRY_NAME_SJ,
                SZ: () => s.default.Messages.COUNTRY_NAME_SZ,
                SE: () => s.default.Messages.COUNTRY_NAME_SE,
                CH: () => s.default.Messages.COUNTRY_NAME_CH,
                SY: () => s.default.Messages.COUNTRY_NAME_SY,
                TW: () => s.default.Messages.COUNTRY_NAME_TW,
                TJ: () => s.default.Messages.COUNTRY_NAME_TJ,
                TZ: () => s.default.Messages.COUNTRY_NAME_TZ,
                TH: () => s.default.Messages.COUNTRY_NAME_TH,
                TL: () => s.default.Messages.COUNTRY_NAME_TL,
                TG: () => s.default.Messages.COUNTRY_NAME_TG,
                TK: () => s.default.Messages.COUNTRY_NAME_TK,
                TO: () => s.default.Messages.COUNTRY_NAME_TO,
                TT: () => s.default.Messages.COUNTRY_NAME_TT,
                TN: () => s.default.Messages.COUNTRY_NAME_TN,
                TR: () => s.default.Messages.COUNTRY_NAME_TR,
                TM: () => s.default.Messages.COUNTRY_NAME_TM,
                TC: () => s.default.Messages.COUNTRY_NAME_TC,
                TV: () => s.default.Messages.COUNTRY_NAME_TV,
                UG: () => s.default.Messages.COUNTRY_NAME_UG,
                UA: () => s.default.Messages.COUNTRY_NAME_UA,
                AE: () => s.default.Messages.COUNTRY_NAME_AE,
                GB: () => s.default.Messages.COUNTRY_NAME_GB,
                US: () => s.default.Messages.COUNTRY_NAME_US,
                UM: () => s.default.Messages.COUNTRY_NAME_UM,
                UY: () => s.default.Messages.COUNTRY_NAME_UY,
                UZ: () => s.default.Messages.COUNTRY_NAME_UZ,
                VU: () => s.default.Messages.COUNTRY_NAME_VU,
                VE: () => s.default.Messages.COUNTRY_NAME_VE,
                VN: () => s.default.Messages.COUNTRY_NAME_VN,
                VG: () => s.default.Messages.COUNTRY_NAME_VG,
                VI: () => s.default.Messages.COUNTRY_NAME_VI,
                WF: () => s.default.Messages.COUNTRY_NAME_WF,
                EH: () => s.default.Messages.COUNTRY_NAME_EH,
                YE: () => s.default.Messages.COUNTRY_NAME_YE,
                ZM: () => s.default.Messages.COUNTRY_NAME_ZM,
                ZW: () => s.default.Messages.COUNTRY_NAME_ZW
            };

            function d(e) {
                return o[e]()
            }
        },
        91366: function(e, t, n) {
            "use strict";
            var i, a, l, s, r, u, o, d;
            n.r(t), n.d(t, {
                InviteTypes: function() {
                    return a
                },
                InviteTargetTypes: function() {
                    return l
                },
                InstantInviteModalPages: function() {
                    return s
                }
            }), (r = i || (i = {})).SENDING = "sending", r.SENT = "sent", r.ERROR = "error", (u = a || (a = {}))[u.GUILD = 0] = "GUILD", u[u.GROUP_DM = 1] = "GROUP_DM", u[u.FRIEND = 2] = "FRIEND", (o = l || (l = {}))[o.STREAM = 1] = "STREAM", o[o.EMBEDDED_APPLICATION = 2] = "EMBEDDED_APPLICATION", o[o.ROLE_SUBSCRIPTIONS_PURCHASE = 3] = "ROLE_SUBSCRIPTIONS_PURCHASE", (d = s || (s = {})).MAIN = "main", d.SETTINGS = "settings", d.GUEST = "guest"
        },
        42793: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                InviteTypes: function() {
                    return l.InviteTypes
                },
                isGuildScheduledEventInviteEmbed: function() {
                    return s
                },
                isRoleSubscriptionInvite: function() {
                    return r
                },
                isStageInviteEmbed: function() {
                    return u
                },
                isStreamInvite: function() {
                    return o
                },
                isEmbeddedApplicationInvite: function() {
                    return d
                },
                getInviteType: function() {
                    return c
                }
            });
            var i = n("398604"),
                a = n("233069"),
                l = n("91366");

            function s(e) {
                let t = e.guild_scheduled_event;
                return null != t && (0, i.isEventUpcoming)(t)
            }

            function r(e) {
                return e.target_type === l.InviteTargetTypes.ROLE_SUBSCRIPTIONS_PURCHASE
            }

            function u(e) {
                return null != e.channel && null != e.stage_instance
            }

            function o(e) {
                return e.target_type === l.InviteTargetTypes.STREAM && null != e.target_user
            }

            function d(e) {
                return e.target_type === l.InviteTargetTypes.EMBEDDED_APPLICATION
            }

            function c(e) {
                var t, n;
                if ("number" == typeof e.type) return e.type;
                if ((t = e).type === l.InviteTypes.GROUP_DM || null != t.channel && (0, a.isMultiUserDM)(t.channel.type)) return l.InviteTypes.GROUP_DM;
                return (n = e).type === l.InviteTypes.FRIEND || null == n.guild && null != n.inviter ? l.InviteTypes.FRIEND : l.InviteTypes.GUILD
            }
        },
        487946: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return E
                }
            });
            var i = n("759843"),
                a = n("627929"),
                l = n("233069"),
                s = n("271938"),
                r = n("599110"),
                u = n("840707"),
                o = n("9294"),
                d = n("91366"),
                c = n("49111");

            function _(e) {
                let t = null;
                if (null != e && null != e.channel) {
                    let n = e.channel;
                    t = e.target_type === d.InviteTargetTypes.STREAM ? c.LoggingInviteTypes.STREAM : e.target_type === d.InviteTargetTypes.EMBEDDED_APPLICATION ? c.LoggingInviteTypes.APPLICATION : (0, l.isMultiUserDM)(n.type) ? c.LoggingInviteTypes.GDM_INVITE : null == n || (0, l.isPrivate)(n.type) ? c.LoggingInviteTypes.FRIEND_INVITE : c.LoggingInviteTypes.SERVER_INVITE
                }
                return t
            }

            function E(e, t, n) {
                r.default.track(c.AnalyticEvents.INVITE_OPENED, {
                    invite_code: e
                });
                let l = (0, o.parseExtraDataFromInviteKey)(e),
                    d = {
                        ...n,
                        with_counts: !0,
                        with_expiration: !0,
                        guild_scheduled_event_id: l.guildScheduledEventId
                    };
                return u.default.get({
                    url: c.Endpoints.INVITE(l.baseCode),
                    query: d,
                    oldFormErrors: !0,
                    trackedActionData: {
                        event: i.NetworkActionNames.INVITE_RESOLVE,
                        properties: e => {
                            var i, r, u, o, d, E;
                            let f = e.body,
                                h = (null === (i = e.body) || void 0 === i ? void 0 : i.code) === c.AbortCodes.USER_BANNED;
                            return (0, a.exact)({
                                resolved: e.ok,
                                guild_id: null == f ? void 0 : null === (r = f.guild) || void 0 === r ? void 0 : r.id,
                                channel_id: null == f ? void 0 : null === (u = f.channel) || void 0 === u ? void 0 : u.id,
                                channel_type: null == f ? void 0 : null === (o = f.channel) || void 0 === o ? void 0 : o.type,
                                inviter_id: null == f ? void 0 : null === (d = f.inviter) || void 0 === d ? void 0 : d.id,
                                code: l.baseCode,
                                input_value: null == n ? void 0 : n.inputValue,
                                location: t,
                                authenticated: s.default.isAuthenticated(),
                                size_total: null == f ? void 0 : f.approximate_member_count,
                                size_online: null == f ? void 0 : f.approximate_presence_count,
                                destination_user_id: null == f ? void 0 : null === (E = f.target_user) || void 0 === E ? void 0 : E.id,
                                invite_type: _(f),
                                user_banned: h
                            })
                        }
                    }
                }).then(i => {
                    let a = i.body;
                    if (null != t) r.default.track(c.AnalyticEvents.INVITE_RESOLVED, {
                        resolved: !0,
                        guild_id: null != a.guild ? a.guild.id : null,
                        channel_id: null != a.channel ? a.channel.id : null,
                        channel_type: null != a.channel ? a.channel.type : null,
                        inviter_id: a.inviter ? a.inviter.id : null,
                        code: l.baseCode,
                        input_value: null == n ? void 0 : n.inputValue,
                        location: t,
                        authenticated: s.default.isAuthenticated(),
                        size_total: a.approximate_member_count,
                        size_online: a.approximate_presence_count,
                        destination_user_id: null != a.target_user ? a.target_user.id : null,
                        invite_type: _(a)
                    }, {
                        flush: !0
                    });
                    return {
                        invite: a,
                        code: e
                    }
                }, i => {
                    let a = null != i.body && i.body.code === c.AbortCodes.USER_BANNED;
                    if (null != t) {
                        var u, o;
                        r.default.track(c.AnalyticEvents.INVITE_RESOLVED, {
                            resolved: !1,
                            code: l.baseCode,
                            input_value: null == n ? void 0 : n.inputValue,
                            location: t,
                            authenticated: s.default.isAuthenticated(),
                            user_banned: a,
                            error_code: null === (u = i.body) || void 0 === u ? void 0 : u.code,
                            error_message: null === (o = i.body) || void 0 === o ? void 0 : o.message
                        }, {
                            flush: !0
                        })
                    }
                    return {
                        invite: null,
                        code: e,
                        banned: a
                    }
                })
            }
        },
        871336: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return d
                }
            });
            var i, a, l, s, r = n("666038"),
                u = n("858619"),
                o = n("315102");
            (i = l || (l = {}))[i.GUILD = 0] = "GUILD", i[i.USER = 1] = "USER", (a = s || (s = {}))[a.DEFAULT = 48] = "DEFAULT";
            class d extends r.default {
                static fromServer(e) {
                    let t = {
                        id: e.id,
                        name: e.name,
                        icon: e.icon,
                        content: {
                            emojis: []
                        },
                        author: {
                            id: e.id,
                            type: l.GUILD
                        },
                        emojiById: {}
                    };
                    return e.content.emojis.forEach(n => {
                        let i = {
                            animated: n.animated,
                            available: n.available,
                            id: n.id,
                            name: n.name,
                            require_colons: n.require_colons,
                            url: o.default.getEmojiURL({
                                id: n.id,
                                animated: n.animated,
                                size: s.DEFAULT
                            }),
                            allNamesString: ":".concat(n.name, ":"),
                            type: u.EmojiTypes.PACK,
                            packId: e.id
                        };
                        t.emojiById[n.id] = i, t.content.emojis.push(i)
                    }), new d(t)
                }
                constructor(e) {
                    super(), this.id = e.id, this.name = e.name, this.icon = e.icon, this.author = e.author, this.content = e.content, this.emojiById = e.emojiById
                }
            }
        },
        630869: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("77078"),
                l = {
                    show(e) {
                        (0, a.openModalLazy)(async () => {
                            let {
                                default: t
                            } = await n.el("851172").then(n.bind(n, "851172"));
                            return n => (0, i.jsx)(t, {
                                ...n,
                                url: e
                            })
                        })
                    }
                }
        },
        537025: function(e, t, n) {
            "use strict";

            function i(e) {
                return !1
            }
            n.r(t), n.d(t, {
                shouldShowLinkNotDiscordWarning: function() {
                    return i
                }
            })
        },
        765089: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i, a, l = n("599110"),
                s = n("253981"),
                r = n("340454"),
                u = n("361572"),
                o = n("49111");
            (i = a || (a = {})).MESSAGE = "Discord Message Link", i.CHANNEL = "Discord Channel Link", i.SERVER_INVITE = "Discord Server Invite", i.GIFT = "Discord Gift Link", i.UNKNOWN = "Unknown";
            let d = [e => r.default.isInvite(e) ? a.SERVER_INVITE : null, e => {
                let t = s.default.safeParseWithQuery(e);
                if (null == t) return null;
                let n = (0, u.tryParseChannelPath)(t.path);
                return null == n ? null : c({
                    guildId: n.guildId,
                    channelId: n.channelId,
                    messageId: n.messageId
                })
            }];

            function c(e) {
                return null != e.guildId && null != e.channelId && null != e.messageId ? a.MESSAGE : null != e.guildId && null != e.channelId ? a.CHANNEL : a.UNKNOWN
            }
            var _ = {
                trackDiscordLinkClicked: function(e) {
                    l.default.track(o.AnalyticEvents.LINK_CLICKED, {
                        is_discord_link: !0,
                        discord_link_type: c(e)
                    })
                },
                trackLinkClicked: function(e, t) {
                    var n, i;
                    if (null == e && null == t) return;
                    let r = s.default.isDiscordUrl(e, !0) || null != t;
                    l.default.track(o.AnalyticEvents.LINK_CLICKED, {
                        is_discord_link: r,
                        discord_link_type: r ? (n = e, null == (i = t) && null == n ? a.UNKNOWN : null == i ? function(e) {
                            for (let t of d) {
                                let n = t(e);
                                if (null != n) return n
                            }
                            return a.UNKNOWN
                        }(n) : c(i)) : null
                    })
                },
                trackAnnouncementMessageLinkClicked: function(e) {
                    let {
                        messageId: t,
                        channelId: n,
                        guildId: i,
                        sourceChannelId: a,
                        sourceGuildId: s
                    } = e;
                    l.default.track(o.AnalyticEvents.ANNOUNCEMENT_MESSAGE_LINK_CLICKED, {
                        message_id: t,
                        channel_id: n,
                        guild_id: i,
                        source_channel_id: a,
                        source_guild_id: s
                    })
                }
            }
        },
        361572: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                CHANNEL_OR_MESSAGES_URL_RE: function() {
                    return h
                },
                MEDIA_POST_URL_RE: function() {
                    return T
                },
                tryParseChannelPath: function() {
                    return p
                },
                tryParseEventDetailsPath: function() {
                    return S
                },
                canViewChannel: function() {
                    return I
                },
                isAccessibleChannelPath: function() {
                    return A
                }
            });
            var i = n("42203"),
                a = n("305961"),
                l = n("957255"),
                s = n("655518"),
                r = n("49111"),
                u = n("724210");
            let o = Array.from(u.StaticChannelRoutes).map(e => s.default.escape(e)).join("|"),
                d = new RegExp("^/channels/(\\d+|".concat(r.ME, ")(?:/)?(\\d+|").concat(o, ")?")),
                c = new RegExp("^/channels/(\\d+|".concat(r.ME, ")(?:/)(\\d+|").concat(o, ")(?:/)(\\d+)")),
                _ = RegExp("^/channels/(\\d+)(?:/)(\\d+)(?:/threads/)(\\d+)(?:/)(\\d+)"),
                E = RegExp("^/guild-stages/(\\d+)(?:/)?(\\d+)?"),
                f = RegExp("^/events/(\\d+)(?:/)(\\d+)?((?:/)(\\d+))?"),
                h = new RegExp("^https://(?:canary\\.|ptb\\.)?discord.com/channels/(\\d+|".concat(r.ME, ")(?:/(\\d+|[a-zA-Z-]+))?(?:/(\\d+|[a-zA-Z-]+))?")),
                T = RegExp("^https://(?:canary\\.|ptb\\.)?discord.com/channels/(\\d+)(?:/)(\\d+)(?:/threads/)(\\d+)(?:/)(\\d+)");

            function p(e) {
                if (null == e) return null;
                let t = e.match(c);
                if (null != t && t.length > 3) return {
                    guildId: t[1],
                    channelId: t[2],
                    messageId: t[3]
                };
                let n = e.match(_);
                if (null != n && n.length > 4) return {
                    guildId: n[1],
                    channelId: n[2],
                    threadId: n[3],
                    messageId: n[4]
                };
                let i = e.match(d);
                if (null != i && i.length > 1) {
                    var a;
                    return {
                        guildId: i[1],
                        channelId: null !== (a = i[2]) && void 0 !== a ? a : void 0
                    }
                }
                let l = e.match(E);
                return null != l && l.length > 1 ? {
                    guildId: l[1]
                } : null
            }

            function S(e) {
                if (null == e) return null;
                let t = e.match(f);
                return null != t && t.length > 1 ? {
                    guildId: t[1],
                    guildEventId: t[2],
                    recurrenceId: t[3]
                } : null
            }

            function I(e) {
                return !!e.isPrivate() || l.default.can(r.Permissions.VIEW_CHANNEL, e)
            }

            function A(e) {
                let {
                    guildId: t,
                    channelId: n
                } = e;
                if (null == a.default.getGuild(t) && t !== r.ME) return !1;
                if (null == n) return !0;
                let l = i.default.getChannel(n);
                return null != l && I(l)
            }
        },
        232054: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return S
                }
            });
            var i = n("203288"),
                a = n("590260"),
                l = n("677315"),
                s = n("875229"),
                r = n("466818"),
                u = n("471706"),
                o = n("290886"),
                d = n("903724"),
                c = n("120252"),
                _ = n("42203"),
                E = n("305961"),
                f = n("449008"),
                h = n("361572"),
                T = n("49111"),
                p = n("724210");
            async function S(e) {
                let {
                    guildId: t,
                    channelId: n
                } = e, S = E.default.getGuild(t);
                if (null == S && t !== T.ME) return !1;
                if (null == n) return !0;
                if ((0, p.isStaticChannelRoute)(n)) switch (n) {
                    case p.StaticChannelRoute.ROLE_SUBSCRIPTIONS:
                        return (0, d.areRoleSubscriptionsVisibleInGuild)(t);
                    case p.StaticChannelRoute.GUILD_SHOP:
                        return (0, a.isGuildShopVisibleInGuild)(S);
                    case p.StaticChannelRoute.MEMBER_APPLICATIONS:
                        return (0, s.canReviewGuildMemberApplications)(t);
                    case p.StaticChannelRoute.GUILD_HOME:
                        return (0, l.canSeeGuildHome)(t) || (0, o.canSeeOnboardingHome)(t);
                    case p.StaticChannelRoute.CHANNEL_BROWSER:
                        return null != S && S.hasFeature(T.GuildFeatures.COMMUNITY);
                    case p.StaticChannelRoute.GUILD_ONBOARDING:
                        return u.default.shouldShowOnboarding(t);
                    case p.StaticChannelRoute.CUSTOMIZE_COMMUNITY:
                        return null != S && S.hasFeature(T.GuildFeatures.COMMUNITY);
                    case p.StaticChannelRoute.MEMBER_SAFETY:
                        return (0, r.canAccessMemberSafetyPage)(t);
                    default:
                        (0, f.assertNever)(n)
                }
                let I = _.default.getChannel(n);
                return (null != I || (await c.default.loadThread(n), null != (I = _.default.getChannel(n)))) && ((0, h.canViewChannel)(I) || i.default.isChannelGatedAndVisible(t, n))
            }
        },
        537325: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("551042"),
                l = n("565298"),
                s = n("393414"),
                r = n("239380"),
                u = n("42203"),
                o = n("361572"),
                d = n("232054"),
                c = n("49111");
            async function _(e, t, _) {
                let E = (0, o.tryParseChannelPath)(e);
                if (null != E && !await (0, d.default)(E)) {
                    (0, a.openModalLazy)(async () => {
                        let {
                            default: e
                        } = await n.el("657233").then(n.bind(n, "657233"));
                        return t => (0, i.jsx)(e, {
                            ...t
                        })
                    });
                    return
                }
                if (null == E) {
                    (0, s.transitionTo)(e);
                    return
                }
                let f = function(e) {
                    if (null == e.channelId) return e;
                    let t = u.default.getChannel(e.channelId);
                    if (null == t) return e;
                    let n = (0, l.getGuildIdForGenericRedirect)(t);
                    return {
                        ...e,
                        guildId: null != n ? n : c.ME
                    }
                }(E);
                if (null == f.channelId) {
                    (0, r.transitionToGuild)(f.guildId);
                    return
                }
                null != f.threadId ? (0, s.transitionTo)(c.Routes.CHANNEL_THREAD_VIEW(f.guildId, f.channelId, f.threadId, f.messageId), t, _) : (0, s.transitionTo)(c.Routes.CHANNEL(f.guildId, f.channelId, f.messageId), t, _)
            }
        },
        647374: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                punycodeLink: function() {
                    return S
                },
                default: function() {
                    return I
                }
            });
            var i = n("693566"),
                a = n.n(i);
            n("125601");
            var l = n("132710"),
                s = n.n(l),
                r = n("312016"),
                u = n("449008"),
                o = n("891137"),
                d = n("76216");
            let c = new a({
                max: 50
            });

            function _(e) {
                let t = c.get(e);
                if (null != t) return t;
                let n = (0, d.sanitizeWhitespace)(e),
                    i = (0, d.sanitizeUnicodeConfusables)(n),
                    a = {
                        whitespaceSanitized: n,
                        fullySanitized: i
                    };
                return c.set(e, a), a
            }
            let E = ["http:", "https:", "discord:"],
                f = [o.AST_KEY.TEXT, o.AST_KEY.UNDERLINE, o.AST_KEY.STRONG, o.AST_KEY.ITALICS, o.AST_KEY.STRIKETHROUGH, o.AST_KEY.INLINE_CODE, o.AST_KEY.SPOILER, o.AST_KEY.LINE_BREAK, o.AST_KEY.TIMESTAMP],
                h = [...f, o.AST_KEY.EMOJI, o.AST_KEY.CUSTOM_EMOJI],
                T = [o.AST_KEY.TEXT];

            function p(e, t) {
                for (let n of (!Array.isArray(e) && (e = [e]), e))
                    if (!t.includes(n.type) || n.type === o.AST_KEY.INLINE_CODE && null == p(n.validationChildContent, t) || Array.isArray(n.content) && null == p(n.content, t)) return null;
                return e
            }

            function S(e) {
                try {
                    var t;
                    let n = new URL(e),
                        i = null !== (t = n.protocol) && void 0 !== t ? t : "";
                    if (!E.includes(i.toLowerCase())) throw Error("Provided protocol is not allowed: " + i);
                    if (("http:" === i || "https:" === i) && (null == n.hostname || 0 === n.hostname.length)) throw Error("no hostname");
                    let a = (0, d.safelyMakeUrlHumanReadable)(n);
                    n.username = "", n.password = "";
                    let l = (0, d.safelyMakeUrlHumanReadable)(n);
                    return {
                        target: a,
                        displayTarget: l
                    }
                } catch (e) {
                    return null
                }
            }
            var I = {
                ...s.defaultRules.link,
                match: (e, t, n) => t.allowLinks ? s.defaultRules.link.match(e, t, n) : null,
                parse(e, t, n) {
                    let [i, a, l, d] = e, c = () => ({
                        type: o.AST_KEY.TEXT,
                        content: i
                    }), E = _(l), I = _(a), A = _(null != d ? d : ""), m = E.whitespaceSanitized, g = I.fullySanitized, C = A.fullySanitized, N = g.trim(), O = m.trim();
                    if (0 === O.length || 0 === N.length) return c();
                    let R = s.unescapeUrl(l),
                        v = S(R),
                        M = (0, r.default)(a).length > 0 || (0, r.default)(d).length > 0;
                    if (null == v || M) return c();
                    let y = {
                            ...n,
                            allowEscape: !1,
                            parseInlineCodeChildContent: !0
                        },
                        D = t(g, y),
                        L = t(C, y),
                        U = p(D, n.allowEmojiLinks ? h : f),
                        P = p(L, T);
                    if (null == U || null == P) return c();
                    let b = function e(t) {
                            let n = "";
                            for (let i of t) switch (i.type) {
                                case o.AST_KEY.TEXT:
                                case o.AST_KEY.INLINE_CODE:
                                    n += i.content;
                                    break;
                                case o.AST_KEY.CUSTOM_EMOJI:
                                    n += i.name;
                                    break;
                                case o.AST_KEY.EMOJI:
                                    n += i.surrogate;
                                    break;
                                case o.AST_KEY.LINE_BREAK:
                                    n += "\n";
                                    break;
                                case o.AST_KEY.TIMESTAMP:
                                    n += "<timestamp>";
                                    break;
                                case o.AST_KEY.STRONG:
                                case o.AST_KEY.ITALICS:
                                case o.AST_KEY.UNDERLINE:
                                case o.AST_KEY.STRIKETHROUGH:
                                case o.AST_KEY.SPOILER:
                                    n += e(i.content);
                                    break;
                                default:
                                    (0, u.assertNever)(i.type)
                            }
                            return n
                        }(U),
                        G = 0 === b.trim().length;
                    if (G) return c();
                    let k = t(I.whitespaceSanitized, y),
                        F = A.whitespaceSanitized,
                        {
                            target: w
                        } = v;
                    return {
                        content: k,
                        target: w,
                        title: F
                    }
                }
            }
        },
        891137: function(e, t, n) {
            "use strict";
            var i, a;
            n.r(t), n.d(t, {
                AST_KEY: function() {
                    return i
                }
            }), (a = i || (i = {})).TEXT = "text", a.STRIKETHROUGH = "s", a.UNDERLINE = "u", a.STRONG = "strong", a.ITALICS = "em", a.IMAGE = "image", a.EMOJI = "emoji", a.CUSTOM_EMOJI = "customEmoji", a.LINK = "link", a.URL = "url", a.AUTOLINK = "autolink", a.HIGHLIGHT = "highlight", a.PARAGRAPH = "paragraph", a.LINE_BREAK = "br", a.NEWLINE = "newline", a.ESCAPE = "escape", a.SPOILER = "spoiler", a.BLOCK_QUOTE = "blockQuote", a.INLINE_CODE = "inlineCode", a.CODE_BLOCK = "codeBlock", a.MENTION = "mention", a.CHANNEL_MENTION = "channelMention", a.CHANNEL = "channel", a.GUILD = "guild", a.SOUNDBOARD = "soundboard", a.STATIC_ROUTE_LINK = "staticRouteLink", a.ROLE_MENTION = "roleMention", a.COMMAND_MENTION = "commandMention", a.TIMESTAMP = "timestamp", a.LIST = "list", a.HEADING = "heading"
        },
        76216: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                sanitizeWhitespace: function() {
                    return a
                },
                sanitizeUnicodeConfusables: function() {
                    return r
                },
                safelyMakeUrlHumanReadable: function() {
                    return o
                }
            });
            let i = RegExp("".concat(/\p{Cf}|\p{Zl}|\p{Zp}|[^\P{Cc}\n]|[^\P{Zs} ]/gu.source, "|").concat("͏|឴|឵|ᅠ|ㅤ|ﾠ"), "gu");

            function a(e) {
                return e.replace(i, "")
            }
            let l = [{
                character: "h",
                matcher: s(["H", "һ", "հ", "Ꮒ", "ℎ", "\uD835\uDC21", "\uD835\uDC89", "\uD835\uDCBD", "\uD835\uDCF1", "\uD835\uDD25", "\uD835\uDD59", "\uD835\uDD8D", "\uD835\uDDC1", "\uD835\uDDF5", "\uD835\uDE29", "\uD835\uDE5D", "\uD835\uDE91", "ｈ"])
            }, {
                character: "t",
                matcher: s(["T", "\uD835\uDC2D", "\uD835\uDC61", "\uD835\uDC95", "\uD835\uDCC9", "\uD835\uDCFD", "\uD835\uDD31", "\uD835\uDD65", "\uD835\uDD99", "\uD835\uDDCD", "\uD835\uDE01", "\uD835\uDE35", "\uD835\uDE69", "\uD835\uDE9D"])
            }, {
                character: "p",
                matcher: s(["P", "ρ", "ϱ", "р", "⍴", "ⲣ", "\uD835\uDC29", "\uD835\uDC5D", "\uD835\uDC91", "\uD835\uDCC5", "\uD835\uDCF9", "\uD835\uDD2D", "\uD835\uDD61", "\uD835\uDD95", "\uD835\uDDC9", "\uD835\uDDFD", "\uD835\uDE31", "\uD835\uDE65", "\uD835\uDE99", "\uD835\uDED2", "\uD835\uDEE0", "\uD835\uDF0C", "\uD835\uDF1A", "\uD835\uDF46", "\uD835\uDF54", "\uD835\uDF80", "\uD835\uDF8E", "\uD835\uDFBA", "\uD835\uDFC8", "ｐ", "ҏ"])
            }, {
                character: "s",
                matcher: s(["S", "ƽ", "ѕ", "ꜱ", "ꮪ", "\uD801\uDC48", "\uD806\uDCC1", "\uD835\uDC2C", "\uD835\uDC60", "\uD835\uDC94", "\uD835\uDCC8", "\uD835\uDCFC", "\uD835\uDD30", "\uD835\uDD64", "\uD835\uDD98", "\uD835\uDDCC", "\uD835\uDE00", "\uD835\uDE34", "\uD835\uDE68", "\uD835\uDE9C", "ｓ"])
            }, {
                character: ":",
                matcher: s(["ː", "˸", "։", "׃", "܃", "܄", "ः", "ઃ", "᛬", "᠃", "᠉", "⁚", "∶", "ꓽ", "꞉", "︰", "：", ";", ";"])
            }, {
                character: "/",
                matcher: s(["᜵", "⁁", "⁄", "∕", "╱", "⟋", "⧸", "Ⳇ", "⼃", "〳", "ノ", "㇓", "丿", "\uD834\uDE3A"])
            }];

            function s(e) {
                return RegExp(e.join("|"), "gu")
            }

            function r(e) {
                let t = e;
                return l.forEach(e => {
                    t = t.replace(e.matcher, e.character)
                }), t
            }
            let u = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0];

            function o(e) {
                let t = function(e) {
                    let t = "null" === e.origin,
                        n = t && e.pathname.startsWith("//");
                    if (n) return e.protocol;
                    let i = "";
                    return "" !== e.username && (i += e.username), "" !== e.password && (i += ":" + e.password), "" !== i && (i += "@"), "".concat(e.protocol, "//").concat(i).concat(e.host)
                }(e);
                return t += d(e.pathname) + d(e.search) + d(e.hash)
            }

            function d(e) {
                let t;
                try {
                    t = decodeURIComponent(e)
                } catch {
                    return e
                }
                let n = "",
                    i = e,
                    a = t;
                for (; i.length > 0;) {
                    var l;
                    let e = i.codePointAt(0),
                        t = a.codePointAt(0);
                    if (e === t) {
                        let t = String.fromCodePoint(e);
                        n += t, i = i.substring(t.length), a = a.substring(t.length);
                        continue
                    }
                    let s = String.fromCodePoint(t),
                        r = encodeURIComponent(s),
                        o = r === s ? 3 : r.length;
                    n += ((l = t) >= 0 && l < 128 ? 1 !== u[l] : 8206 === l || 8207 === l || 8234 === l || 8235 === l || 8236 === l || 8237 === l || 8238 === l || 1564 === l || 8294 === l || 8295 === l || 8296 === l || 8297 === l || 128271 === l || 128272 === l || 128274 === l || 128275 === l || 133 === l || 160 === l || 5760 === l || 8192 === l || 8193 === l || 8194 === l || 8195 === l || 8196 === l || 8197 === l || 8198 === l || 8199 === l || 8200 === l || 8201 === l || 8202 === l || 8232 === l || 8233 === l || 8239 === l || 8287 === l || 12288 === l || 10240 === l || 173 === l || 847 === l || l >= 1536 && l <= 1541 || 1757 === l || 1807 === l || 2274 === l || 4447 === l || 4448 === l || 6068 === l || 6069 === l || 6155 === l || 6156 === l || 6157 === l || 6158 === l || 8203 === l || 8204 === l || 8205 === l || 8288 === l || 8289 === l || 8290 === l || 8291 === l || 8292 === l || 8293 === l || l >= 8298 && l <= 8303 || 12644 === l || l >= 65520 && l <= 65528 || l >= 65024 && l <= 65039 || 65279 === l || 65440 === l || 65529 === l || 65530 === l || 65531 === l || 69821 === l || 69837 === l || l >= 78896 && l <= 78904 || l >= 113824 && l <= 113827 || l >= 119155 && l <= 119162 || l >= 917504 && l <= 921599) ? r : s, i = i.substring(o), a = a.substring(s.length)
                }
                return n
            }
        },
        91984: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("77078"),
                l = {
                    show(e) {
                        let {
                            url: t,
                            trustUrl: l,
                            onConfirm: s,
                            isProtocol: r
                        } = e;
                        (0, a.openModalLazy)(async () => {
                            let {
                                default: e
                            } = await n.el("153128").then(n.bind(n, "153128"));
                            return n => (0, i.jsx)(e, {
                                ...n,
                                url: t,
                                isProtocol: r,
                                trustUrl: l,
                                onConfirm: s
                            })
                        })
                    }
                }
        },
        711326: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getMediaPostEmbedCommonData: function() {
                    return _
                },
                getMediaPostEmbedChannelPath: function() {
                    return E
                },
                canUseMediaPostEmbed: function() {
                    return f
                }
            });
            var i = n("312016"),
                a = n("361572"),
                l = n("305961"),
                s = n("315102"),
                r = n("387111"),
                u = n("856220"),
                o = n("49111"),
                d = n("894488"),
                c = n("782340");

            function _(e) {
                var t, n, i, a, l;
                let {
                    mediaPostEmbedData: o,
                    guild: _,
                    parentChannel: E,
                    postThread: f,
                    user: h,
                    selectedGuildId: T,
                    canAccess: p = !1
                } = e;
                if (null == o) return null;
                let S = (0, u.getThumbnailImage)(o.thumbnail),
                    I = !p && o.has_media_attachment,
                    A = p ? c.default.Messages.MEDIA_POST_EMBED_SUBSCRIBED_CTA : c.default.Messages.MEDIA_POST_EMBED_SUBSCRIBE_CTA,
                    m = null != h ? r.default.getName(o.guild_id, o.channel_id, h) : void 0,
                    g = null == h ? void 0 : h.getAvatarURL(null == _ ? void 0 : _.id, 40);
                (null == g || T !== o.guild_id) && (g = s.default.getGuildIconURL({
                    id: o.guild_id,
                    icon: o.guild_icon,
                    size: 40,
                    canAnimate: !1
                }));
                let C = function(e) {
                        if (null == e) return !1;
                        let {
                            height: t,
                            width: n
                        } = e;
                        return null != t && null != n && t >= n
                    }(o.thumbnail) && !I,
                    N = (null === (t = o.thumbnail) || void 0 === t ? void 0 : t.filename) != null && (null === (i = o.thumbnail) || void 0 === i ? void 0 : null === (n = i.filename) || void 0 === n ? void 0 : n.startsWith(d.SPOILER_ATTACHMENT_PREFIX));
                return {
                    title: null !== (a = o.title) && void 0 !== a ? a : "",
                    subtitle: o.description,
                    ctaText: A,
                    coverImage: S,
                    coverImageOverlayText: I ? c.default.Messages.MEDIA_POST_EMBED_BLURRED_THUMBNAIL_TEXT : void 0,
                    parentChannelId: o.parent_channel_id,
                    threadId: o.channel_id,
                    postThread: f,
                    messageId: o.message_id,
                    canAccess: p,
                    guildId: o.guild_id,
                    guildName: null !== (l = null == _ ? void 0 : _.name) && void 0 !== l ? l : o.guild_name,
                    authorId: null == o ? void 0 : o.author_id,
                    authorName: m,
                    channelName: null == E ? void 0 : E.name,
                    avatarUrl: g,
                    shouldShowBlurredThumbnailImage: I,
                    shouldContainMediaWithBackground: C,
                    shouldSpoiler: N,
                    obscureAwaitingScan: !1,
                    flags: o.flags,
                    contentScanVersion: o.content_scan_version
                }
            }

            function E(e) {
                if (null == e) return;
                let t = (0, i.parseURLSafely)(e);
                if (null == t) return;
                let n = (0, i.remainingPathFromDiscordHostMatch)(t);
                if (null != n) return (0, a.tryParseChannelPath)(n)
            }

            function f(e, t) {
                let n = l.default.getGuild(e);
                if (null == n || null == t) return !1;
                let i = n.hasFeature(o.GuildFeatures.CREATOR_MONETIZABLE) || n.hasFeature(o.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL),
                    a = !0 === t.isMediaChannel();
                return a && i
            }
        },
        856220: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                MAX_THUMBNAIL_COUNT: function() {
                    return a
                },
                getEmbedPreviewImageUrl: function() {
                    return l
                },
                getThumbnailImage: function() {
                    return s
                }
            });
            var i = n("651693");
            let a = 4;

            function l(e) {
                var t, n;
                if (null == e) return;
                let {
                    thumbnail: i,
                    image: a
                } = e;
                return null != i ? null !== (t = i.proxy_url) && void 0 !== t ? t : i.url : null != a ? null !== (n = a.proxy_url) && void 0 !== n ? n : a.url : void 0
            }

            function s(e) {
                if (null == e) return;
                let {
                    url: t,
                    proxy_url: n
                } = e;
                if (null != t && null != n) {
                    let e = (0, i.isVideoUrl)(t);
                    return e ? "".concat(n, "?format=jpeg") : n
                }
                return t
            }
        },
        288518: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return m
                }
            });
            var i = n("988415"),
                a = n("42203"),
                l = n("455079");
            let s = new Set,
                r = new Set,
                u = !1,
                o = null;

            function d(e) {
                return e.isMessageRequest && !e.isSpam
            }

            function c(e) {
                let t = !1;
                return d(e) && !s.has(e.id) && (s.add(e.id), t = !0), !d(e) && s.has(e.id) && (s.delete(e.id), t = !0), !d(e) && r.has(e.id) && (r.delete(e.id), t = !0), t
            }

            function _(e) {
                var t;
                null != e && (o = null !== (t = (0, i.getCountryCodeByAlpha2)(e)) && void 0 !== t ? t : (0, i.getDefaultCountryCode)())
            }

            function E(e) {
                "CONNECTION_OPEN" === e.type && _(e.countryCode), s.clear(), r.clear(), Object.values(a.default.getMutablePrivateChannels()).forEach(e => {
                    c(e)
                }), u = !0
            }

            function f(e) {
                let {
                    channelId: t
                } = e;
                r.add(t)
            }

            function h(e) {
                let {
                    channel: t
                } = e;
                return c(t)
            }

            function T(e) {
                let {
                    channels: t
                } = e;
                for (let e of t) c(e)
            }

            function p(e) {
                let {
                    channel: t
                } = e;
                return !!s.has(t.id) && (s.delete(t.id), !0)
            }

            function S(e) {
                let {
                    messageRequestChannelIds: t
                } = e;
                t.forEach(e => s.add(e))
            }

            function I(e) {
                let {
                    countryCode: t
                } = e;
                _(t)
            }
            class A extends l.default {
                takeSnapshot() {
                    return {
                        version: A.LATEST_SNAPSHOT_VERSION,
                        data: Array.from(s)
                    }
                }
                getMessageRequestChannelIds() {
                    return s
                }
                getMessageRequestsCount() {
                    return s.size
                }
                isMessageRequest(e) {
                    return s.has(e)
                }
                isAcceptedOptimistic(e) {
                    return r.has(e)
                }
                getUserCountryCode() {
                    return o
                }
                isReady() {
                    return u
                }
                constructor() {
                    super(), this.loadCache = () => {
                        let e = this.readSnapshot(A.LATEST_SNAPSHOT_VERSION);
                        null != e && (s = new Set(e))
                    }, this.registerActionHandlers({
                        CONNECTION_OPEN: E,
                        CONNECTION_OPEN_SUPPLEMENTAL: E,
                        CACHE_LOADED_LAZY: this.loadCache,
                        OVERLAY_INITIALIZE: S,
                        CHANNEL_CREATE: h,
                        CHANNEL_UPDATES: T,
                        CHANNEL_DELETE: p,
                        SET_LOCATION_METADATA: I,
                        MESSAGE_REQUEST_ACCEPT_OPTIMISTIC: f
                    }), this.waitFor(a.default)
                }
            }
            A.displayName = "MessageRequestStore", A.LATEST_SNAPSHOT_VERSION = 1;
            var m = new A
        },
        415435: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                filterOutMessageRequestsAndSpam: function() {
                    return l
                },
                filterOutMessageRequestsAndSpamById: function() {
                    return s
                },
                isMessageRequestOrSpamRequest: function() {
                    return r
                },
                shouldShowMessageRequests: function() {
                    return u
                }
            });
            var i = n("288518"),
                a = n("486503");

            function l(e) {
                let [t, n] = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [i.default, a.default], l = function(e) {
                    return Object.keys(e).map(t => [t, e[t]])
                }(e), s = l.filter(e => {
                    let [, i] = e;
                    return !t.isMessageRequest(i.id) && !n.isSpam(i.id)
                });
                return function(e) {
                    return Array.from(e).reduce((e, t) => {
                        let [n, i] = t;
                        return Object.assign(e, {
                            [n]: i
                        })
                    }, {})
                }(s)
            }

            function s(e) {
                let [t, n] = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [i.default, a.default];
                return e.filter(e => !t.isMessageRequest(e) && !n.isSpam(e))
            }

            function r(e) {
                let [t, n] = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [i.default, a.default];
                return t.isMessageRequest(e) || n.isSpam(e)
            }

            function u() {
                let [e, t] = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [i.default, a.default], n = t.getSpamChannelsCount(), l = e.getMessageRequestsCount();
                return l > 0 || n > 0
            }
        },
        486503: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return T
                }
            });
            var i = n("42203"),
                a = n("455079");
            let l = new Set,
                s = new Set,
                r = !1;

            function u(e) {
                return e.isSpam
            }

            function o(e) {
                let t = !1;
                if (e.isSpam && !l.has(e.id)) l.add(e.id), t = !0;
                if (!e.isSpam && l.has(e.id)) l.delete(e.id), t = !0;
                if (!e.isSpam && s.has(e.id)) s.delete(e.id), t = !0;
                return t
            }

            function d() {
                l.clear(), s.clear(), Object.values(i.default.getMutablePrivateChannels()).forEach(e => {
                    o(e)
                }), r = !0
            }

            function c(e) {
                let {
                    channelId: t
                } = e;
                s.add(t)
            }

            function _(e) {
                let {
                    channel: t
                } = e;
                return o(t)
            }

            function E(e) {
                let {
                    channels: t
                } = e;
                for (let e of t) o(e)
            }

            function f(e) {
                let {
                    channel: t
                } = e, n = !1;
                return l.has(t.id) && (l.delete(t.id), n = !0), n
            }
            class h extends a.default {
                takeSnapshot() {
                    return {
                        version: h.LATEST_SNAPSHOT_VERSION,
                        data: Array.from(l)
                    }
                }
                getSpamChannelIds() {
                    return l
                }
                getSpamChannelsCount() {
                    return l.size
                }
                isSpam(e) {
                    return l.has(e)
                }
                isAcceptedOptimistic(e) {
                    return s.has(e)
                }
                isReady() {
                    return r
                }
                constructor() {
                    super(), this.loadCache = () => {
                        let e = this.readSnapshot(h.LATEST_SNAPSHOT_VERSION);
                        null != e && (l = new Set(e))
                    }, this.registerActionHandlers({
                        CONNECTION_OPEN: d,
                        CONNECTION_OPEN_SUPPLEMENTAL: d,
                        CACHE_LOADED_LAZY: this.loadCache,
                        CHANNEL_CREATE: _,
                        CHANNEL_UPDATES: E,
                        CHANNEL_DELETE: f,
                        MESSAGE_REQUEST_ACCEPT_OPTIMISTIC: c
                    }), this.waitFor(i.default)
                }
            }
            h.displayName = "SpamMessageRequestStore", h.LATEST_SNAPSHOT_VERSION = 1;
            var T = new h
        },
        651693: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                isImageFile: function() {
                    return s
                },
                isAnimatedImageUrl: function() {
                    return u
                },
                isVideoUrl: function() {
                    return d
                },
                isVideoFile: function() {
                    return c
                }
            });
            var i = n("773336");
            let a = (e, t) => {
                    if (null == e) return !1;
                    let [n, i] = e.split(/\?/, 1);
                    return t.test(n)
                },
                l = /\.(png|jpe?g|webp|gif|heic|heif)$/i,
                s = e => null != e && l.test(e),
                r = /\.(webp|gif)$/i,
                u = e => a(e, r),
                o = (0, i.isIOS)() ? /\.(mp4|mov)$/i : ((0, i.isAndroid)(), /\.(mp4|webm|mov)$/i),
                d = e => a(e, o),
                c = e => null != e && o.test(e)
        },
        692038: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                createMessageRecord: function() {
                    return g
                },
                updateServerMessage: function() {
                    return C
                },
                updateMessageRecord: function() {
                    return N
                },
                canEditMessageWithStickers: function() {
                    return y
                }
            });
            var i = n("866227"),
                a = n.n(i),
                l = n("225664"),
                s = n("312016"),
                r = n("552310"),
                u = n("24373"),
                o = n("459018"),
                d = n("719926"),
                c = n("766274"),
                _ = n("271938"),
                E = n("42203"),
                f = n("27618"),
                h = n("697218"),
                T = n("240873");
            n("61069");
            var p = n("659632");
            n("773336"), n("158998");
            var S = n("406297");
            n("574073");
            var I = n("894488"),
                A = n("49111");
            n("782340");
            let m = new c.default({
                id: "???",
                username: "???"
            });

            function g(e) {
                var t, n, i, l, u, E, T, I, g;
                let {
                    reactions: C,
                    interactionData: N
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, y = null !== (l = null === (t = e.mentions) || void 0 === t ? void 0 : t.map(e => e.id)) && void 0 !== l ? l : [], D = null !== (u = e.mention_roles) && void 0 !== u ? u : [], L = null !== (E = e.mention_channels) && void 0 !== E ? E : [], U = e.message_reference, P = a(new Date(e.timestamp)), b = e.type === A.MessageTypes.THREAD_CREATED ? [] : (0, s.default)(e.content);
                let G = null == (I = e).author ? m : null != I.webhook_id ? new c.default(I.author) : null !== (g = h.default.getUser(I.author.id)) && void 0 !== g ? g : new c.default(I.author),
                    k = null == e ? void 0 : e.gift_info,
                    F = null != e.interaction ? o.default.createFromServer(e.interaction) : null,
                    w = e.type === A.MessageTypes.THREAD_STARTER_MESSAGE ? null === (i = e.referenced_message) || void 0 === i ? void 0 : null === (n = i.author) || void 0 === n ? void 0 : n.id : void 0,
                    H = e.type === A.MessageTypes.PREMIUM_REFERRAL ? e.content : void 0,
                    V = e.content;
                return e.type === A.MessageTypes.PREMIUM_REFERRAL && (V = ""), new d.default({
                    ...e,
                    author: G,
                    webhookId: e.webhook_id,
                    blocked: f.default.isBlocked(G.id) || null != w && f.default.isBlocked(w),
                    timestamp: P,
                    editedTimestamp: null != e.edited_timestamp ? a(new Date(e.edited_timestamp)) : null,
                    mentionEveryone: e.mention_everyone,
                    mentions: y,
                    mentionRoles: D,
                    mentionChannels: L,
                    messageReference: U,
                    mentioned: (0, S.isMentioned)({
                        userId: _.default.getId(),
                        channelId: e.channel_id,
                        mentionEveryone: null !== (T = e.mention_everyone) && void 0 !== T && T,
                        mentionUsers: y,
                        mentionRoles: D
                    }),
                    attachments: O(e),
                    embeds: v(e),
                    codedLinks: b,
                    giftCodes: (0, p.isGiftCodeEmbed)(e) ? (0, p.findGiftCodes)(null == e ? void 0 : e.embeds[0].url) : (0, p.findGiftCodes)(e.content),
                    content: V,
                    referralTrialOfferId: H,
                    call: R(e.call, P),
                    reactions: M(e.channel_id, null != C ? C : e.reactions),
                    interaction: F,
                    interactionData: null != N ? N : e.interaction_data,
                    roleSubscriptionData: e.role_subscription_data,
                    purchaseNotification: e.purchase_notification,
                    poll: null == e.poll ? void 0 : (0, r.default)(e.poll),
                    giftInfo: null == k ? void 0 : k
                })
            }

            function C(e, t) {
                return null != t.edited_timestamp ? {
                    ...t,
                    reactions: e.reactions,
                    interaction_data: e.interaction_data
                } : {
                    ...e,
                    ...t
                }
            }

            function N(e, t) {
                if (null != t.edited_timestamp) return g(t, {
                    reactions: e.reactions,
                    interactionData: e.interactionData
                });
                let n = e;
                if (null != t.call && (n = n.set("call", R(t.call, e.timestamp))), null != t.attachments && (n = n.set("attachments", O(t))), null != t.content && "" !== t.content && (n = n.set("content", t.content)), null != t.embeds && (n = n.set("embeds", v(t))), t.pinned !== n.pinned && (n = n.set("pinned", t.pinned)), null != n.webhookId && null != t.author && (n = n.set("author", new c.default(t.author))), null != t.flags && t.flags !== n.flags && (n = n.set("flags", t.flags)), null != t.components && (n = n.set("components", t.components)), null != t.role_subscription_data && (n = n.set("roleSubscriptionData", t.role_subscription_data)), null != t.reactions) {
                    var i;
                    n = n.set("reactions", M(e.channel_id, null !== (i = e.reactions) && void 0 !== i ? i : t.reactions))
                }
                return n
            }

            function O(e) {
                return null == e.attachments ? [] : e.attachments.map(e => ({
                    ...e,
                    spoiler: e.filename.startsWith(I.SPOILER_ATTACHMENT_PREFIX)
                }))
            }

            function R(e, t) {
                if (null != e) {
                    let n = null != e.ended_timestamp ? a(new Date(e.ended_timestamp)) : null,
                        i = null != n ? a.duration(n.diff(t)) : null;
                    return {
                        participants: e.participants,
                        endedTimestamp: n,
                        duration: i
                    }
                }
                return null
            }

            function v(e) {
                if (null == e.embeds) return [];
                let t = e.embeds.map(t => (0, T.sanitizeEmbed)(e.channel_id, e.id, t));
                return (0, T.mergeEmbedsOnURL)(t)
            }

            function M(e, t) {
                var n;
                if (null == t) return [];
                let i = E.default.getChannel(e),
                    {
                        enabled: a
                    } = l.default.getCurrentConfig({
                        guildId: null !== (n = null == i ? void 0 : i.getGuildId()) && void 0 !== n ? n : "",
                        location: "812691_1"
                    }),
                    {
                        enabled: s
                    } = l.BurstReactionsUserExperiment.getCurrentConfig({
                        location: "812691_2"
                    }, {
                        autoTrackExposure: !1
                    }),
                    r = a || s;
                return t.filter(e => {
                    var t, n;
                    let i = {
                        ...e
                    };
                    return (null == i ? void 0 : i.count_details) != null && (i.burst_count = null !== (t = i.count_details.burst) && void 0 !== t ? t : 0, i.count = null !== (n = i.count_details.normal) && void 0 !== n ? n : 0), (!(i.burst_count > 0) || !(i.count < 1) || !!r) && !0
                }).map(e => {
                    var t, n;
                    let i = {
                        ...e
                    };
                    return (null == i ? void 0 : i.count_details) != null && (i.burst_count = null !== (t = i.count_details.burst) && void 0 !== t ? t : 0, i.count = null !== (n = i.count_details.normal) && void 0 !== n ? n : 0), i.count < 0 && (i.count = 0), (i.burst_count < 0 || !a && !s) && (i.burst_count = 0), i
                })
            }
            let y = e => {
                let t = (0, u.getMessageStickers)(e);
                return 0 === t.length || "" !== e.content
            }
        },
        61400: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                }
            });
            var i = n("692038"),
                a = n("913491"),
                l = n("49111");

            function s(e, t) {
                return !(null == t || e.author.id !== t || e.state !== l.MessageStates.SENT || (0, a.default)(e) || !(0, i.canEditMessageWithStickers)(e) || e.hasFlag(l.MessageFlags.IS_VOICE_MESSAGE) || null != e.referralTrialOfferId || e.isPoll()) && !0
            }
        },
        406297: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                },
                isRawMessageMentioned: function() {
                    return r
                },
                isMentioned: function() {
                    return u
                }
            });
            var i = n("42203"),
                a = n("26989"),
                l = n("305961");

            function s(e) {
                let {
                    message: t,
                    userId: n,
                    suppressEveryone: i = !1,
                    suppressRoles: a = !1
                } = e;
                return u({
                    userId: n,
                    channelId: t.channel_id,
                    mentionEveryone: t.mentionEveryone,
                    mentionUsers: t.mentions,
                    mentionRoles: t.mentionRoles,
                    suppressEveryone: i,
                    suppressRoles: a
                })
            }

            function r(e) {
                var t, n, i, a;
                let {
                    rawMessage: l,
                    userId: s,
                    suppressEveryone: r = !1,
                    suppressRoles: o = !1
                } = e;
                return u({
                    userId: s,
                    channelId: l.channel_id,
                    mentionEveryone: null !== (n = l.mention_everyone) && void 0 !== n && n,
                    mentionUsers: null !== (i = null === (t = l.mentions) || void 0 === t ? void 0 : t.map(e => e.id)) && void 0 !== i ? i : [],
                    mentionRoles: null !== (a = l.mention_roles) && void 0 !== a ? a : [],
                    suppressEveryone: r,
                    suppressRoles: o
                })
            }

            function u(e) {
                let {
                    userId: t,
                    channelId: n,
                    mentionEveryone: s,
                    mentionUsers: r,
                    mentionRoles: u,
                    suppressEveryone: o = !1,
                    suppressRoles: d = !1
                } = e;
                if (s && !o || r.includes(t)) return !0;
                if (d || null == u || 0 === u.length) return !1;
                let c = i.default.getChannel(n);
                if (null == c) return !1;
                let _ = c.getGuildId();
                if (null == _) return !1;
                let E = l.default.getGuild(_);
                if (null == E) return !1;
                let f = a.default.getMember(_, t);
                return null != f && u.some(e => f.roles.includes(e))
            }
        },
        913491: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("637612");

            function a(e) {
                return !i.MessageTypesSets.USER_MESSAGE.has(e.type)
            }
        },
        574073: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                },
                useNullableMessageAuthor: function() {
                    return E
                },
                getMessageAuthor: function() {
                    return f
                },
                useNullableUserAuthor: function() {
                    return h
                },
                getUserAuthor: function() {
                    return T
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("446674"),
                s = n("42203"),
                r = n("26989"),
                u = n("305961"),
                o = n("27618"),
                d = n("697218"),
                c = n("158998");

            function _(e) {
                let t = E(e);
                return a(null != t, "Result cannot be null because the message is not null"), t
            }

            function E(e) {
                var t;
                let n = (0, l.useStateFromStores)([s.default], () => null == e ? null : s.default.getChannel(e.channel_id)),
                    i = null == e ? void 0 : null === (t = e.author) || void 0 === t ? void 0 : t.id,
                    a = null == n ? void 0 : n.guild_id,
                    _ = (0, l.useStateFromStores)([r.default], () => null == a || null == i ? null : r.default.getMember(a, i)),
                    E = (0, l.useStateFromStores)([d.default], () => d.default.getUser(i), [i]),
                    f = c.default.useName((null == e ? void 0 : e.author.bot) ? null == e ? void 0 : e.author : E),
                    h = (0, l.useStateFromStores)([u.default], () => u.default.getGuild(a)),
                    T = (0, l.useStateFromStores)([o.default], () => null != i && (null == n ? void 0 : n.isPrivate()) ? o.default.getNickname(i) : null);
                return null == e ? null : p({
                    user: e.author,
                    channel: n,
                    guild: h,
                    userName: f,
                    member: _,
                    friendNickname: T
                })
            }

            function f(e) {
                let t = s.default.getChannel(e.channel_id);
                return T(e.author, t)
            }

            function h(e, t) {
                let n = null == e ? void 0 : e.id,
                    i = null == t ? void 0 : t.guild_id,
                    a = (0, l.useStateFromStores)([r.default], () => null == i || null == n ? null : r.default.getMember(i, n)),
                    s = (0, l.useStateFromStores)([u.default], () => u.default.getGuild(i)),
                    d = (0, l.useStateFromStores)([o.default], () => null != n && (null == t ? void 0 : t.isPrivate()) ? o.default.getNickname(n) : null),
                    _ = c.default.useName(e);
                return p({
                    user: e,
                    channel: t,
                    guild: s,
                    member: a,
                    userName: _,
                    friendNickname: d
                })
            }

            function T(e, t) {
                let n = null == e ? void 0 : e.id,
                    i = null == t ? void 0 : t.guild_id,
                    a = u.default.getGuild(i),
                    l = null == i || null == n ? null : r.default.getMember(i, n),
                    s = null != n && null != t && t.isPrivate() ? o.default.getNickname(n) : null;
                return p({
                    user: e,
                    channel: t,
                    guild: a,
                    member: l,
                    friendNickname: s
                })
            }

            function p(e) {
                var t, n, i;
                let {
                    user: a,
                    channel: l,
                    guild: s,
                    member: r,
                    userName: u,
                    friendNickname: o
                } = e, d = null == a ? "???" : null != u ? u : c.default.getName(a);
                return (null == a ? void 0 : a.id) == null || null == l ? {
                    nick: d,
                    colorString: void 0
                } : (null == s ? void 0 : s.id) == null ? {
                    nick: null != o ? o : d,
                    colorString: void 0
                } : null == r ? {
                    nick: d,
                    colorString: void 0
                } : {
                    nick: null !== (n = r.nick) && void 0 !== n ? n : d,
                    colorString: null !== (i = r.colorString) && void 0 !== i ? i : void 0,
                    colorRoleName: null != r.colorRoleId ? null == s ? void 0 : null === (t = s.roles[r.colorRoleId]) || void 0 === t ? void 0 : t.name : void 0,
                    iconRoleId: r.iconRoleId,
                    guildMemberAvatar: r.avatar
                }
            }
        },
        155084: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return o
                }
            });
            var i = n("615361"),
                a = n("872717"),
                l = n("773336"),
                s = n("827032"),
                r = n("49111");
            let u = new Set(["darwin", "linux", "win32", "ios", "android"]);
            var o = new class e {
                increment(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        {
                            name: n,
                            tags: a
                        } = e,
                        r = {
                            name: n,
                            tags: (0, s.getGlobalTagsArray)()
                        };
                    null != a && a.forEach(e => {
                        r.tags.push(e)
                    });
                    let o = function() {
                        if ((0, l.isWeb)()) return "web";
                        {
                            let e = (0, l.getPlatformName)();
                            return u.has(e) ? e : null
                        }
                    }();
                    null != o && r.tags.push("platform:".concat(o));
                    let d = function() {
                        let e = "{{cf_shim}}RELEASE_CHANNEL{{/cf_shim}}";
                        return i.ReleaseChannelsSets.ALL.has(e) ? e : null
                    }();
                    null != d && r.tags.push("release_channel:".concat(d)), this._metrics.push(r), (t || this._metrics.length >= 100) && this._flush()
                }
                _flush() {
                    if (this._metrics.length > 0) {
                        let e = [...this._metrics];
                        a.default.post({
                            url: r.Endpoints.METRICS,
                            body: {
                                metrics: e
                            },
                            retries: 1
                        }).catch(t => {
                            this._metrics.length + e.length < 100 && (this._metrics = [...this._metrics, ...e])
                        })
                    }
                    this._metrics = []
                }
                constructor() {
                    this._metrics = [], this._intervalId = setInterval(() => {
                        this._flush()
                    }, 12e4)
                }
            }
        },
        618421: function(e, t, n) {
            "use strict";

            function i() {
                return !1
            }

            function a() {
                return null
            }
            n.r(t), n.d(t, {
                isSlowNetwork: function() {
                    return i
                },
                getSignalStrength: function() {
                    return a
                }
            })
        },
        913796: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useInDesktopNotificationCenterExperiment: function() {
                    return s
                },
                inDesktopNotificationCenterExperiment: function() {
                    return r
                }
            });
            var i = n("884691"),
                a = n("862205");
            let l = (0, a.createExperiment)({
                    kind: "user",
                    id: "2022-11_desktop_notification_center",
                    label: "Desktop notification center",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Notification center desktop enabled",
                        config: {
                            enabled: !0
                        }
                    }]
                }),
                s = () => {
                    let {
                        enabled: e
                    } = l.useExperiment({
                        location: "b8976e_1"
                    }, {
                        autoTrackExposure: !1
                    });
                    return i.useEffect(() => {
                        l.trackExposure({
                            location: "b8976e_2"
                        })
                    }, []), e
                },
                r = () => {
                    let {
                        enabled: e
                    } = l.getCurrentConfig({
                        location: "b8976e_3"
                    }, {
                        autoTrackExposure: !1
                    });
                    return e
                }
        },
        136511: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return M
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("398604");
            n("21121");
            var s = n("692038"),
                r = n("514933"),
                u = n("719926"),
                o = n("305961"),
                d = n("27618"),
                c = n("697218"),
                _ = n("299039"),
                E = n("159885"),
                f = n("158998"),
                h = n("360191"),
                T = n("342176"),
                p = n("49111"),
                S = n("782340");
            let I = {
                loading: !1,
                initialized: !1,
                errored: !1,
                isDataStale: !1,
                notifCenterItems: [],
                staleNotifCenterItems: [],
                notifCenterIds: new Set,
                notifCenterLocalItems: [],
                paginationHasMore: !0,
                paginationCursor: void 0,
                notifCenterActive: !1,
                notifCenterTabFocused: !1
            };

            function A(e) {
                return null != e.id && null != e.body && null != e.type
            }

            function m() {
                I = {
                    loading: !1,
                    initialized: !1,
                    errored: !1,
                    isDataStale: !1,
                    notifCenterItems: [],
                    staleNotifCenterItems: [],
                    notifCenterIds: new Set,
                    notifCenterLocalItems: [],
                    paginationHasMore: !0,
                    paginationCursor: void 0,
                    notifCenterActive: !1,
                    notifCenterTabFocused: !1
                }
            }

            function g(e) {
                var t, n;
                if ((0, r.isNotificationRedesignV2Enabled)() && e.type === h.NotificationCenterItems.FRIEND_SUGGESTION_CREATED && d.default.getRelationshipType(null !== (n = null === (t = e.other_user) || void 0 === t ? void 0 : t.id) && void 0 !== n ? n : "") === p.RelationshipTypes.PENDING_OUTGOING) {
                    let t = f.default.getName(e.other_user);
                    e = {
                        ...e,
                        body: S.default.Messages.NOTIF_CENTER_V2_ADD_FRIEND_REQUEST_SENT.format({
                            user: t
                        })
                    }
                }
                return {
                    ...e,
                    kind: "notification-center-item",
                    message: null != e.message ? (0, s.createMessageRecord)(e.message) : void 0
                }
            }

            function C(e) {
                let t = "NOTIFICATION_CENTER_ITEM_CREATE" === e.type ? g(e.item) : e.item;
                if (!I.initialized || !A(t) || I.notifCenterIds.has(t.id)) return !1;
                I.notifCenterIds.add(t.id), I.notifCenterItems = [t, ...I.notifCenterItems], I.notifCenterItems.sort((e, t) => _.default.compare(t.id, e.id))
            }

            function N(e, t) {
                I.notifCenterItems = I.notifCenterItems.map(n => e.includes(n.id) ? {
                    ...n,
                    acked: t
                } : n).filter(A)
            }

            function O(e, t, n) {
                var i;
                return e.type === t && (null === (i = e.other_user) || void 0 === i ? void 0 : i.id) === n
            }

            function R(e) {
                var t;
                if (!(0, l.isGuildEventEnded)(e)) return;
                let n = t => t.type === h.NotificationCenterItems.GUILD_SCHEDULED_EVENT_STARTED && t.guild_scheduled_event_id === e.id,
                    i = e.name,
                    a = null === (t = o.default.getGuild(e.guild_id)) || void 0 === t ? void 0 : t.name;
                I.notifCenterItems = I.notifCenterItems.map(e => n(e) ? {
                    ...e,
                    disable_action: !0,
                    body: (0, E.isNullOrEmpty)(a) || (0, E.isNullOrEmpty)(i) ? e.body : S.default.Messages.NOTIFICATION_CENTER_GUILD_SCHEDULED_EVENT_ENDED.format({
                        event_name: i,
                        guild_name: a
                    })
                } : e)
            }
            class v extends i.default.PersistedStore {
                initialize(e) {
                    if (this.waitFor(c.default), null != e) {
                        let t = e.notifCenterItems.map(e => ({
                            ...e,
                            message: null != e.message ? new u.default(e.message) : void 0
                        }));
                        t.length > 0 && (I = {
                            ...I,
                            initialized: !0,
                            isDataStale: !0,
                            notifCenterItems: [],
                            staleNotifCenterItems: t
                        })
                    }
                }
                getState() {
                    let e = e => ({
                        ...e,
                        message: null != e.message ? e.message.toJS() : void 0
                    });
                    return {
                        ...I,
                        notifCenterItems: I.notifCenterItems.map(e),
                        staleNotifCenterItems: I.staleNotifCenterItems.map(e)
                    }
                }
                get loading() {
                    return I.loading
                }
                get initialized() {
                    return I.initialized
                }
                get items() {
                    return I.isDataStale ? I.staleNotifCenterItems : I.notifCenterItems
                }
                get hasMore() {
                    return I.paginationHasMore
                }
                get cursor() {
                    return I.paginationCursor
                }
                get errored() {
                    return I.errored
                }
                get active() {
                    return I.notifCenterActive
                }
                get localItems() {
                    return I.notifCenterLocalItems
                }
                get tabFocused() {
                    return I.notifCenterTabFocused
                }
            }
            v.displayName = "NotificationCenterItemsStore", v.persistKey = "NotificationCenterItemsStore_v2";
            var M = new v(a.default, {
                CONNECTION_OPEN: function(e) {
                    !(0, r.isNotificationRedesignV2Enabled)() && m();
                    let t = [];
                    e.relationships.forEach(e => {
                        let {
                            type: n,
                            user: i,
                            since: a
                        } = e;
                        if (n !== p.RelationshipTypes.PENDING_INCOMING || null == i || null == a) return null;
                        let l = c.default.getUser(i.id);
                        if (null == l) return null;
                        let s = (0, T.incomingFriendRequestLocalItem)(l, a);
                        !(_.default.age(s.id) > 7776e6) && t.push(s)
                    }), e.guilds.forEach(e => {
                        e.guild_scheduled_events.forEach(e => {
                            R(e)
                        })
                    }), I.notifCenterLocalItems = t
                },
                LOGOUT: m,
                NOTIFICATION_CENTER_ITEMS_ACK: function(e) {
                    let {
                        ids: t
                    } = e;
                    N(t, !0)
                },
                NOTIFICATION_CENTER_ITEMS_ACK_FAILURE: function(e) {
                    let {
                        ids: t
                    } = e;
                    N(t, !1)
                },
                GUILD_SCHEDULED_EVENT_UPDATE: function(e) {
                    R(e.guildScheduledEvent)
                },
                NOTIFICATION_CENTER_ITEM_CREATE: C,
                NOTIFICATION_CENTER_ITEM_DELETE: function(e) {
                    let {
                        id: t
                    } = e;
                    if (!I.notifCenterIds.has(t)) return !1;
                    I.notifCenterIds.delete(t), I.notifCenterItems = I.notifCenterItems.filter(e => e.id !== t)
                },
                NOTIFICATION_CENTER_ITEM_DELETE_FAILURE: C,
                LOAD_NOTIFICATION_CENTER_ITEMS: function() {
                    I.loading = !0
                },
                LOAD_NOTIFICATION_CENTER_ITEMS_FAILURE: function() {
                    I.loading = !1, I.initialized = !0, I.errored = !0
                },
                LOAD_NOTIFICATION_CENTER_ITEMS_SUCCESS: function(e) {
                    let {
                        items: t,
                        hasMore: n,
                        cursor: i
                    } = e;
                    I.loading && (I.loading = !1, I.initialized = !0, I.errored = !1, I.isDataStale = !1, (null == i || !I.notifCenterIds.has(i)) && (I.paginationHasMore = t.length > 0 && n, I.paginationCursor = t.length > 0 ? i : void 0), I.notifCenterItems = [...I.notifCenterItems, ...t.map(g).filter(e => !I.notifCenterIds.has(e.id))], I.notifCenterItems.sort((e, t) => _.default.compare(t.id, e.id)), t.forEach(e => I.notifCenterIds.add(e.id)))
                },
                RESET_NOTIFICATION_CENTER: m,
                NOTIFICATION_CENTER_SET_ACTIVE: function(e) {
                    let {
                        active: t
                    } = e;
                    I.notifCenterActive = t
                },
                NOTIFICATION_CENTER_TAB_FOCUSED: function(e) {
                    let {
                        focused: t
                    } = e;
                    I.notifCenterTabFocused = t
                },
                RELATIONSHIP_ADD: function(e) {
                    if (e.relationship.type === p.RelationshipTypes.PENDING_INCOMING) {
                        let {
                            user: t,
                            since: n
                        } = e.relationship;
                        if (null == n) return null;
                        let i = c.default.getUser(t.id);
                        if (null == i) return null;
                        I.notifCenterLocalItems = [...I.notifCenterLocalItems, (0, T.incomingFriendRequestLocalItem)(i, n)]
                    }
                    e.relationship.type === p.RelationshipTypes.FRIEND && (I.notifCenterLocalItems = I.notifCenterLocalItems.map(t => O(t, h.NotificationCenterLocalItems.INCOMING_FRIEND_REQUESTS, e.relationship.user.id) ? {
                        ...t,
                        acked: !0,
                        forceUnacked: !1,
                        local_id: "incoming_friend_requests_accepted_".concat(e.relationship.user.id, "_").concat(t.id),
                        type: h.NotificationCenterLocalItems.INCOMING_FRIEND_REQUESTS_ACCEPTED,
                        body: S.default.Messages.NOTIFICATION_CENTER_INCOMING_FRIEND_REQUEST_ACCEPTED.format({
                            username: "**".concat(e.relationship.user.username, "**")
                        })
                    } : t))
                },
                RELATIONSHIP_REMOVE: function(e) {
                    I.notifCenterLocalItems = I.notifCenterLocalItems.filter(t => !(O(t, h.NotificationCenterLocalItems.INCOMING_FRIEND_REQUESTS, e.relationship.id) || O(t, h.NotificationCenterLocalItems.INCOMING_FRIEND_REQUESTS_ACCEPTED, e.relationship.id)) && !0)
                },
                NOTIFICATION_CENTER_ITEM_COMPLETED: function(e) {
                    let {
                        item_enum: t
                    } = e;
                    I.notifCenterItems = I.notifCenterItems.map(e => e.item_enum === t ? {
                        ...e,
                        completed: !0,
                        acked: !0
                    } : e).filter(A)
                },
                NOTIFICATION_CENTER_ITEM_UPDATE: function(e) {
                    let {
                        item: t
                    } = e;
                    I.notifCenterItems = I.notifCenterItems.map(e => e.id === t.id ? t : e).filter(A)
                },
                SET_RECENT_MENTIONS_FILTER: m
            })
        },
        360191: function(e, t, n) {
            "use strict";
            var i, a, l, s, r, u, o, d, c, _, E;
            n.r(t), n.d(t, {
                ItemEnum: function() {
                    return a
                },
                NotificationCenterActionTypes: function() {
                    return l
                },
                NotificationCenterTabs: function() {
                    return s
                },
                NotificationCenterItems: function() {
                    return r
                },
                NotificationCenterLocalItems: function() {
                    return u
                }
            }), (i || (i = {})).LANDING = "notification_center_landing", (o = a || (a = {}))[o.UPDATE_PROFILE = 0] = "UPDATE_PROFILE", o[o.FIND_FRIENDS = 1] = "FIND_FRIENDS", o[o.ADD_FRIEND = 2] = "ADD_FRIEND", o[o.FIRST_MESSAGE = 3] = "FIRST_MESSAGE", (d = l || (l = {})).MARK_ALL_READ = "mark_all_read", d.CLICKED = "clicked", d.FRIEND_REQUESTS_BUTTON_CLICK = "friend_requests_button_click", d.ACTION_BUTTON = "action_button", (c = s || (s = {})).ForYou = "ForYou", c.Mentions = "Mentions", c.MessageReminders = "MessageReminders", (_ = r || (r = {})).GO_LIVE_PUSH = "go_live_push", _.FRIEND_REQUEST_ACCEPTED = "friend_request_accepted", _.FRIEND_REQUEST_PENDING = "friend_request_pending", _.FRIEND_SUGGESTION_CREATED = "friend_suggestion_created", _.FRIEND_REQUEST_REMINDER = "friend_request_reminder", _.DM_FRIEND_NUDGE = "dm_friend_nudge", _.RECENT_MENTION = "recent_mention", _.REPLY_MENTION = "reply_mention", _.GUILD_SCHEDULED_EVENT_STARTED = "scheduled_guild_event_started", _.SYSTEM_DEMO = "system_demo", _.MISSED_MESSAGES = "missed_messages", _.TOP_MESSAGES = "top_messages", _.LIFECYCLE_ITEM = "lifecycle_item", _.TRENDING_CONTENT = "trending_content", (E = u || (u = {})).INCOMING_FRIEND_REQUESTS = "INCOMING_FRIEND_REQUESTS", E.INCOMING_FRIEND_REQUESTS_ACCEPTED = "INCOMING_FRIEND_REQUESTS_ACCEPTED", E.FRIEND_REQUESTS_GROUPED = "FRIEND_REQUESTS_GROUPED"
        },
        342176: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getRelativeTimestamp: function() {
                    return o
                },
                isRemoteAcked: function() {
                    return d
                },
                incomingFriendRequestLocalItem: function() {
                    return c
                },
                isMentionItem: function() {
                    return _
                },
                inNotificationCenterEnabled: function() {
                    return E
                }
            });
            var i = n("249654"),
                a = n("845579"),
                l = n("913796"),
                s = n("360191"),
                r = n("581091"),
                u = n("782340");
            let o = function(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                    return (0, r.default)({
                        since: e,
                        getFormatter: t ? r.getAbbreviatedFormatter : r.getFullFormatter
                    })
                },
                d = (e, t) => e.acked || t !== a.NOTIFICATION_CENTER_ACKED_BEFORE_ID_UNSET && i.default.compare(t, e.id) >= 0;

            function c(e, t) {
                let n = i.default.fromTimestamp(new Date(t).getTime());
                return {
                    acked: !1,
                    forceUnacked: !0,
                    other_user: e,
                    kind: "notification-center-item",
                    local_id: "incoming_friend_requests_".concat(e.id, "_").concat(n),
                    deeplink: "https://discord.com/users/".concat(e.id),
                    type: s.NotificationCenterLocalItems.INCOMING_FRIEND_REQUESTS,
                    id: n,
                    body: u.default.Messages.NOTIFICATION_CENTER_INCOMING_FRIEND_REQUEST.format({
                        username: "**".concat(e.username, "**")
                    })
                }
            }
            let _ = e => e.type === s.NotificationCenterItems.RECENT_MENTION || e.type === s.NotificationCenterItems.REPLY_MENTION;

            function E() {
                return (0, l.inDesktopNotificationCenterExperiment)()
            }
        },
        581091: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getAbbreviatedFormatter: function() {
                    return d
                },
                getFullFormatter: function() {
                    return c
                },
                default: function() {
                    return _
                }
            });
            var i = n("866227"),
                a = n.n(i),
                l = n("782340");
            let s = 3600,
                r = 24 * s,
                u = 30 * r,
                o = 12 * u,
                d = () => ({
                    minutes: l.default.Messages.DURATION_MINUTES_SHORT,
                    hours: l.default.Messages.DURATION_HOURS_SHORT,
                    days: l.default.Messages.DURATION_DAYS_SHORT,
                    months: l.default.Messages.DURATION_MONTHS_SHORT,
                    years: l.default.Messages.DURATION_YEARS_SHORT
                }),
                c = () => ({
                    minutes: l.default.Messages.DURATION_MINUTES_AGO,
                    hours: l.default.Messages.DURATION_HOURS_AGO,
                    days: l.default.Messages.DURATION_DAYS_AGO,
                    months: l.default.Messages.DURATION_MONTHS_AGO,
                    years: l.default.Messages.DURATION_YEARS_AGO
                });

            function _(e) {
                let {
                    since: t,
                    getFormatter: n
                } = e, i = a().diff(a(t), "s"), l = n(), d = a(t).format("LL");
                return d = i < 60 ? l.minutes.format({
                    minutes: 1
                }) : i < s ? l.minutes.format({
                    minutes: Math.floor(i / 60)
                }) : i < r ? l.hours.format({
                    hours: Math.floor(i / s)
                }) : i < u ? l.days.format({
                    days: Math.floor(i / r)
                }) : i < o ? l.months.format({
                    months: Math.floor(i / u)
                }) : l.years.format({
                    years: Math.floor(i / o)
                })
            }
        },
        514933: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useIsNotificationRedesignEnabled: function() {
                    return s
                },
                isNotificationRedesignV2Enabled: function() {
                    return r
                }
            });
            var i = n("862205"),
                a = n("21121"),
                l = n("460609");

            function s() {
                let {
                    enabled: e
                } = u.useExperiment({
                    location: "0721ad_1"
                }, {
                    autoTrackExposure: !0
                });
                return e
            }

            function r() {
                let e = (0, a.isInMainTabsExperiment)();
                return !!e && (!!(0, l.getCombinedMainTabsV2PhaseOneExperimentValue)("showNewNotificationCenter") || o.getCurrentConfig({
                    location: "0721ad_3"
                }, {
                    autoTrackExposure: !1
                }).enabled)
            }
            let u = (0, i.createExperiment)({
                    kind: "user",
                    id: "2022-11_notification_redesign",
                    label: "NotificationRedesign",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Notification Redesign Enabled",
                        config: {
                            enabled: !0
                        }
                    }]
                }),
                o = (0, i.createExperiment)({
                    kind: "user",
                    id: "2023-04_notification_redesign_v2",
                    label: "NotificationRedesignV2",
                    defaultConfig: {
                        enabled: !1
                    },
                    treatments: [{
                        id: 1,
                        label: "Notification Redesign V2 Enabled",
                        config: {
                            enabled: !0
                        }
                    }]
                })
        },
        872825: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                filterScopes: function() {
                    return d
                },
                parseOAuth2AuthorizeProps: function() {
                    return c
                }
            });
            var i = n("730290"),
                a = n("316693"),
                l = n("42203"),
                s = n("162771"),
                r = n("991170"),
                u = n("29479"),
                o = n("843455");

            function d(e) {
                let t = e.filter(e => !u.RemovedScopes.includes(e));
                return t.includes(o.OAuth2Scopes.BOT) && !t.includes(o.OAuth2Scopes.APPLICATIONS_COMMANDS) && t.push(o.OAuth2Scopes.APPLICATIONS_COMMANDS), t
            }

            function c(e) {
                var t, n, u, o, d, c;
                let _ = (0, i.parse)(e, {
                        arrayFormat: "bracket"
                    }),
                    E = r.default.NONE;
                try {
                    E = a.default.deserialize(null != _.permissions && "" !== _.permissions ? _.permissions : "0")
                } catch (e) {}
                let f = _.channel_id,
                    h = null !== (o = null !== (u = null !== (n = _.guild_id) && void 0 !== n ? n : null === (t = l.default.getChannel(f)) || void 0 === t ? void 0 : t.guild_id) && void 0 !== u ? u : s.default.getGuildId()) && void 0 !== o ? o : void 0;
                return {
                    clientId: null !== (d = _.client_id) && void 0 !== d ? d : "",
                    scopes: (null !== (c = _.scope) && void 0 !== c ? c : "").split(" ").filter(e => e.length > 0),
                    responseType: _.response_type,
                    redirectUri: _.redirect_uri,
                    codeChallenge: _.code_challenge,
                    codeChallengeMethod: _.code_challenge_method,
                    state: _.state,
                    permissions: E,
                    channelId: f,
                    guildId: h,
                    prompt: _.prompt,
                    disableGuildSelect: "true" === _.disable_guild_select,
                    userInstall: "true" === _.user_install
                }
            }
        },
        955145: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getApplicationDetailsText: function() {
                    return a
                }
            });
            var i = n("782340");

            function a(e) {
                if (null != e.privacy_policy_url && null != e.terms_of_service_url) return i.default.Messages.OAUTH2_DETAILS_PRIVACY_POLICY_WITH_LINKS.format({
                    application: e.name,
                    privacyPolicyURL: e.privacy_policy_url,
                    termsOfServiceURL: e.terms_of_service_url
                });
                if (null != e.privacy_policy_url) return i.default.Messages.OAUTH2_DETAILS_PRIVACY_POLICY_WITH_PRIVACY_POLICY_LINK.format({
                    application: e.name,
                    privacyPolicyURL: e.privacy_policy_url
                });
                if (null != e.terms_of_service_url) return i.default.Messages.OAUTH2_DETAILS_PRIVACY_POLICY_WITH_TERMS_OF_SERVICE_LINK.format({
                    application: e.name,
                    termsOfServiceURL: e.terms_of_service_url
                });
                return i.default.Messages.OAUTH2_DETAILS_PRIVACY_POLICY.format({
                    application: e.name
                })
            }
        },
        8222: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                acceptWhitelist: function() {
                    return r
                },
                authorize: function() {
                    return u
                },
                fetchAuthorization: function() {
                    return o
                },
                fetchChannels: function() {
                    return d
                },
                logoutWithRedirect: function() {
                    return c
                },
                verifyUserCode: function() {
                    return _
                },
                finishUserCode: function() {
                    return E
                },
                finishUserCodeTwoWayLinkError: function() {
                    return f
                }
            });
            var i = n("447669"),
                a = n("872717"),
                l = n("437822"),
                s = n("49111");

            function r(e) {
                return a.default.post({
                    url: s.Endpoints.OAUTH2_WHITELIST_ACCEPT,
                    query: {
                        token: e
                    },
                    oldFormErrors: !0
                })
            }
            async function u(e) {
                let {
                    authorize: t,
                    clientId: n,
                    scopes: i,
                    responseType: l,
                    redirectUri: r,
                    codeChallenge: u,
                    codeChallengeMethod: o,
                    state: d,
                    permissions: c,
                    guildId: _,
                    channelId: E,
                    userInstall: f
                } = e, h = await a.default.post({
                    url: s.Endpoints.OAUTH2_AUTHORIZE,
                    query: {
                        client_id: n,
                        response_type: l,
                        redirect_uri: r,
                        code_challenge: u,
                        code_challenge_method: o,
                        scope: i.join(" "),
                        state: d
                    },
                    body: {
                        guild_id: _,
                        webhook_channel_id: null != _ && null != E ? E : void 0,
                        channel_id: null == _ && null != E ? E : void 0,
                        permissions: c,
                        authorize: t,
                        user_install: f
                    },
                    oldFormErrors: !0
                });
                return h.body
            }
            async function o(e) {
                let {
                    clientId: t,
                    scopes: n,
                    responseType: i,
                    redirectUri: l,
                    codeChallenge: r,
                    codeChallengeMethod: u,
                    state: o,
                    userInstall: d
                } = e, c = await a.default.get({
                    url: s.Endpoints.OAUTH2_AUTHORIZE,
                    query: {
                        client_id: t,
                        response_type: i,
                        redirect_uri: l,
                        code_challenge: r,
                        code_challenge_method: u,
                        scope: n.join(" "),
                        state: o,
                        user_install: d
                    },
                    retries: 3,
                    oldFormErrors: !0
                });
                return c.body
            }
            async function d(e) {
                let {
                    body: t
                } = await a.default.get({
                    url: s.Endpoints.OAUTH2_AUTHORIZE_WEBHOOK_CHANNELS,
                    query: {
                        guild_id: e
                    },
                    oldFormErrors: !0
                });
                return t
            }

            function c(e) {
                l.default.logout((0, i.getLoginPath)(e.pathname + e.search, !1))
            }
            async function _(e) {
                return await a.default.post({
                    url: s.Endpoints.OAUTH2_DEVICE_VERIFY,
                    body: {
                        user_code: e
                    }
                })
            }
            async function E(e, t) {
                return await a.default.post({
                    url: s.Endpoints.OAUTH2_DEVICE_FINISH,
                    body: {
                        user_code: e,
                        result: t
                    }
                })
            }
            async function f(e, t, n) {
                return await a.default.post({
                    url: s.Endpoints.OAUTH2_DEVICE_FINISH,
                    body: {
                        user_code: e,
                        result: "two_way_link_error",
                        error_code: t,
                        error_source: n
                    }
                })
            }
        },
        164386: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                convertOAuth2Authorization: function() {
                    return a
                }
            });
            var i = n("316693");

            function a(e) {
                if (null == e.guilds) return e;
                return {
                    ...e,
                    guilds: e.guilds.map(e => ({
                        ...e,
                        permissions: i.default.deserialize(e.permissions)
                    }))
                }
            }
        },
        978970: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                OrderedPermissions: function() {
                    return s
                },
                containsDisallowedPermission: function() {
                    return r
                },
                getPermissionName: function() {
                    return o
                }
            });
            var i = n("316693"),
                a = n("49111"),
                l = n("782340");
            let s = [a.Permissions.ADMINISTRATOR, a.Permissions.MANAGE_GUILD, a.Permissions.MANAGE_ROLES, a.Permissions.MANAGE_CHANNELS, a.Permissions.KICK_MEMBERS, a.Permissions.BAN_MEMBERS, a.Permissions.CREATE_INSTANT_INVITE, a.Permissions.MANAGE_NICKNAMES, a.Permissions.CHANGE_NICKNAME, a.Permissions.MANAGE_GUILD_EXPRESSIONS, a.Permissions.CREATE_GUILD_EXPRESSIONS, a.Permissions.MANAGE_WEBHOOKS, a.Permissions.VIEW_AUDIT_LOG, a.Permissions.VIEW_CHANNEL, a.Permissions.MANAGE_EVENTS, a.Permissions.CREATE_EVENTS, a.Permissions.MODERATE_MEMBERS, a.Permissions.VIEW_GUILD_ANALYTICS, a.Permissions.VIEW_CREATOR_MONETIZATION_ANALYTICS, a.Permissions.SEND_MESSAGES, a.Permissions.SEND_MESSAGES_IN_THREADS, a.Permissions.CREATE_PUBLIC_THREADS, a.Permissions.CREATE_PRIVATE_THREADS, a.Permissions.SEND_TTS_MESSAGES, a.Permissions.MANAGE_MESSAGES, a.Permissions.MANAGE_THREADS, a.Permissions.EMBED_LINKS, a.Permissions.ATTACH_FILES, a.Permissions.READ_MESSAGE_HISTORY, a.Permissions.MENTION_EVERYONE, a.Permissions.ADD_REACTIONS, a.Permissions.USE_EXTERNAL_EMOJIS, a.Permissions.USE_EXTERNAL_STICKERS, a.Permissions.USE_APPLICATION_COMMANDS, a.Permissions.SEND_VOICE_MESSAGES, a.Permissions.USE_CLYDE_AI, a.Permissions.CONNECT, a.Permissions.SPEAK, a.Permissions.MUTE_MEMBERS, a.Permissions.DEAFEN_MEMBERS, a.Permissions.MOVE_MEMBERS, a.Permissions.USE_VAD, a.Permissions.PRIORITY_SPEAKER, a.Permissions.REQUEST_TO_SPEAK, a.Permissions.STREAM, a.Permissions.USE_EMBEDDED_ACTIVITIES, a.Permissions.USE_SOUNDBOARD, a.Permissions.USE_EXTERNAL_SOUNDS, a.Permissions.SET_VOICE_CHANNEL_STATUS];

            function r(e) {
                return Object.values(a.Permissions).some(t => i.default.has(e, t) && !s.includes(t))
            }
            let u = {
                [a.Permissions.ADMINISTRATOR.toString()]: () => l.default.Messages.ADMINISTRATOR,
                [a.Permissions.MANAGE_GUILD.toString()]: () => l.default.Messages.MANAGE_SERVER,
                [a.Permissions.MANAGE_ROLES.toString()]: () => l.default.Messages.MANAGE_ROLES,
                [a.Permissions.MANAGE_CHANNELS.toString()]: () => l.default.Messages.MANAGE_CHANNELS,
                [a.Permissions.KICK_MEMBERS.toString()]: () => l.default.Messages.KICK_MEMBERS,
                [a.Permissions.BAN_MEMBERS.toString()]: () => l.default.Messages.BAN_MEMBERS,
                [a.Permissions.CREATE_INSTANT_INVITE.toString()]: () => l.default.Messages.CREATE_INSTANT_INVITE,
                [a.Permissions.MANAGE_NICKNAMES.toString()]: () => l.default.Messages.MANAGE_NICKNAMES,
                [a.Permissions.CHANGE_NICKNAME.toString()]: () => l.default.Messages.CHANGE_NICKNAME,
                [a.Permissions.MANAGE_GUILD_EXPRESSIONS.toString()]: () => l.default.Messages.MANAGE_EXPRESSIONS,
                [a.Permissions.CREATE_GUILD_EXPRESSIONS.toString()]: () => l.default.Messages.CREATE_EXPRESSIONS,
                [a.Permissions.MANAGE_WEBHOOKS.toString()]: () => l.default.Messages.MANAGE_WEBHOOKS,
                [a.Permissions.VIEW_AUDIT_LOG.toString()]: () => l.default.Messages.VIEW_AUDIT_LOG,
                [a.Permissions.VIEW_CHANNEL.toString()]: () => l.default.Messages.READ_MESSAGES,
                [a.Permissions.SEND_MESSAGES.toString()]: () => l.default.Messages.SEND_MESSAGES,
                [a.Permissions.SEND_TTS_MESSAGES.toString()]: () => l.default.Messages.SEND_TTS_MESSAGES,
                [a.Permissions.MANAGE_MESSAGES.toString()]: () => l.default.Messages.MANAGE_MESSAGES,
                [a.Permissions.EMBED_LINKS.toString()]: () => l.default.Messages.EMBED_LINKS,
                [a.Permissions.ATTACH_FILES.toString()]: () => l.default.Messages.ATTACH_FILES,
                [a.Permissions.READ_MESSAGE_HISTORY.toString()]: () => l.default.Messages.READ_MESSAGE_HISTORY,
                [a.Permissions.MENTION_EVERYONE.toString()]: () => l.default.Messages.MENTION_EVERYONE,
                [a.Permissions.ADD_REACTIONS.toString()]: () => l.default.Messages.ADD_REACTIONS,
                [a.Permissions.USE_EXTERNAL_EMOJIS.toString()]: () => l.default.Messages.USE_EXTERNAL_EMOJIS,
                [a.Permissions.USE_EXTERNAL_STICKERS.toString()]: () => l.default.Messages.USE_EXTERNAL_STICKERS,
                [a.Permissions.USE_APPLICATION_COMMANDS.toString()]: () => l.default.Messages.USE_APPLICATION_COMMANDS,
                [a.Permissions.SEND_VOICE_MESSAGES.toString()]: () => l.default.Messages.SEND_VOICE_MESSAGE,
                [a.Permissions.CONNECT.toString()]: () => l.default.Messages.CONNECT,
                [a.Permissions.SPEAK.toString()]: () => l.default.Messages.SPEAK,
                [a.Permissions.MUTE_MEMBERS.toString()]: () => l.default.Messages.MUTE_MEMBERS,
                [a.Permissions.DEAFEN_MEMBERS.toString()]: () => l.default.Messages.DEAFEN_MEMBERS,
                [a.Permissions.MOVE_MEMBERS.toString()]: () => l.default.Messages.MOVE_MEMBERS,
                [a.Permissions.USE_VAD.toString()]: () => l.default.Messages.USE_VAD,
                [a.Permissions.PRIORITY_SPEAKER.toString()]: () => l.default.Messages.PRIORITY_SPEAKER,
                [a.Permissions.CREATE_PUBLIC_THREADS.toString()]: () => l.default.Messages.CREATE_PUBLIC_THREADS,
                [a.Permissions.CREATE_PRIVATE_THREADS.toString()]: () => l.default.Messages.CREATE_PRIVATE_THREADS,
                [a.Permissions.SEND_MESSAGES_IN_THREADS.toString()]: () => l.default.Messages.SEND_MESSAGES_IN_THREADS,
                [a.Permissions.MANAGE_THREADS.toString()]: () => l.default.Messages.MANAGE_THREADS,
                [a.Permissions.MANAGE_EVENTS.toString()]: () => l.default.Messages.MANAGE_EVENTS,
                [a.Permissions.CREATE_EVENTS.toString()]: () => l.default.Messages.CREATE_EVENTS,
                [a.Permissions.MODERATE_MEMBERS.toString()]: () => l.default.Messages.MODERATE_MEMBERS_PERMISSION_INTERNAL,
                [a.Permissions.REQUEST_TO_SPEAK.toString()]: () => l.default.Messages.REQUEST_TO_SPEAK,
                [a.Permissions.VIEW_GUILD_ANALYTICS.toString()]: () => l.default.Messages.VIEW_GUILD_ANALYTICS,
                [a.Permissions.VIEW_CREATOR_MONETIZATION_ANALYTICS.toString()]: () => l.default.Messages.VIEW_CREATOR_MONETIZATION_ANALYTICS,
                [a.Permissions.STREAM.toString()]: () => l.default.Messages.VIDEO,
                [a.Permissions.USE_EMBEDDED_ACTIVITIES.toString()]: () => l.default.Messages.USE_EMBEDDED_ACTIVITIES,
                [a.Permissions.USE_SOUNDBOARD.toString()]: () => l.default.Messages.USE_SOUNDBOARD,
                [a.Permissions.USE_EXTERNAL_SOUNDS.toString()]: () => l.default.Messages.USE_EXTERNAL_SOUNDS,
                [a.Permissions.USE_CLYDE_AI.toString()]: () => l.default.Messages.ROLE_PERMISSIONS_USE_CLYDE_AI,
                [a.Permissions.SET_VOICE_CHANNEL_STATUS.toString()]: () => l.default.Messages.VOICE_CHANNEL_STATUS_PERMISSION_TITLE
            };

            function o(e) {
                let t = e.toString(),
                    n = u[t];
                if (null == n) throw Error("Unknown permission. Did you provide a _single_ bit flag? Perm: ".concat(e));
                return n()
            }
        },
        29479: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                FAKE_SCOPES: function() {
                    return l
                },
                OrderedAccountScopes: function() {
                    return s
                },
                ValidScopes: function() {
                    return r
                },
                RemovedScopes: function() {
                    return u
                },
                getScopeName: function() {
                    return o
                },
                getSecurityMessage: function() {
                    return d
                }
            });
            var i = n("49111"),
                a = n("782340");
            let l = [() => a.default.Messages.OAUTH2_FAKE_SCOPE_1, () => a.default.Messages.OAUTH2_FAKE_SCOPE_2, () => a.default.Messages.OAUTH2_FAKE_SCOPE_3, () => a.default.Messages.OAUTH2_FAKE_SCOPE_4, () => a.default.Messages.OAUTH2_FAKE_SCOPE_5, () => a.default.Messages.OAUTH2_FAKE_SCOPE_6, () => a.default.Messages.OAUTH2_FAKE_SCOPE_7, () => a.default.Messages.OAUTH2_FAKE_SCOPE_8],
                s = [i.OAuth2Scopes.BOT, i.OAuth2Scopes.IDENTIFY, i.OAuth2Scopes.EMAIL, i.OAuth2Scopes.CONNECTIONS, i.OAuth2Scopes.MESSAGES_READ, i.OAuth2Scopes.GUILDS, i.OAuth2Scopes.GUILDS_JOIN, i.OAuth2Scopes.GUILDS_MEMBERS_READ, i.OAuth2Scopes.GDM_JOIN, i.OAuth2Scopes.RPC, i.OAuth2Scopes.RPC_NOTIFICATIONS_READ, i.OAuth2Scopes.RPC_VOICE_READ, i.OAuth2Scopes.RPC_VOICE_WRITE, i.OAuth2Scopes.RPC_VIDEO_READ, i.OAuth2Scopes.RPC_VIDEO_WRITE, i.OAuth2Scopes.RPC_SCREENSHARE_READ, i.OAuth2Scopes.RPC_SCREENSHARE_WRITE, i.OAuth2Scopes.RPC_ACTIVITIES_WRITE, i.OAuth2Scopes.APPLICATIONS_BUILDS_UPLOAD, i.OAuth2Scopes.APPLICATIONS_BUILDS_READ, i.OAuth2Scopes.APPLICATIONS_COMMANDS, i.OAuth2Scopes.APPLICATIONS_COMMANDS_UPDATE, i.OAuth2Scopes.APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE, i.OAuth2Scopes.APPLICATIONS_STORE_UPDATE, i.OAuth2Scopes.APPLICATIONS_ENTITLEMENTS, i.OAuth2Scopes.ACTIVITIES_READ, i.OAuth2Scopes.ACTIVITIES_WRITE, i.OAuth2Scopes.RELATIONSHIPS_READ, i.OAuth2Scopes.VOICE, i.OAuth2Scopes.DM_CHANNELS_READ, i.OAuth2Scopes.ROLE_CONNECTIONS_WRITE],
                r = s.concat([i.OAuth2Scopes.WEBHOOK_INCOMING, i.OAuth2Scopes.BOT]),
                u = ["rpc.api"];

            function o(e, t) {
                switch (e) {
                    case i.OAuth2Scopes.IDENTIFY:
                        return a.default.Messages.SCOPE_IDENTIFY;
                    case i.OAuth2Scopes.EMAIL:
                        return a.default.Messages.SCOPE_EMAIL;
                    case i.OAuth2Scopes.BOT:
                        return a.default.Messages.SCOPE_BOT;
                    case i.OAuth2Scopes.CONNECTIONS:
                        return a.default.Messages.SCOPE_CONNECTIONS;
                    case i.OAuth2Scopes.MESSAGES_READ:
                        return a.default.Messages.SCOPE_MESSAGES_READ;
                    case i.OAuth2Scopes.GUILDS:
                        return a.default.Messages.SCOPE_GUILDS;
                    case i.OAuth2Scopes.GUILDS_JOIN:
                        return a.default.Messages.SCOPE_GUILDS_JOIN;
                    case i.OAuth2Scopes.GUILDS_MEMBERS_READ:
                        if (t.includes(i.OAuth2Scopes.VOICE)) return a.default.Messages.SCOPE_GUILDS_MEMBERS_READ_VOICE;
                        return a.default.Messages.SCOPE_GUILDS_MEMBERS_READ;
                    case i.OAuth2Scopes.GDM_JOIN:
                        return a.default.Messages.SCOPE_GDM_JOIN;
                    case i.OAuth2Scopes.RPC:
                        return a.default.Messages.SCOPE_RPC;
                    case i.OAuth2Scopes.RPC_NOTIFICATIONS_READ:
                        return a.default.Messages.SCOPE_RPC_NOTIFICATIONS_READ;
                    case i.OAuth2Scopes.RPC_VOICE_WRITE:
                        return a.default.Messages.SCOPE_RPC_VOICE_WRITE;
                    case i.OAuth2Scopes.RPC_VIDEO_READ:
                        return a.default.Messages.SCOPE_RPC_VIDEO_READ;
                    case i.OAuth2Scopes.RPC_VIDEO_WRITE:
                        return a.default.Messages.SCOPE_RPC_VIDEO_WRITE;
                    case i.OAuth2Scopes.RPC_SCREENSHARE_READ:
                        return a.default.Messages.SCOPE_RPC_SCREENSHARE_READ;
                    case i.OAuth2Scopes.RPC_SCREENSHARE_WRITE:
                        return a.default.Messages.SCOPE_RPC_SCREENSHARE_WRITE;
                    case i.OAuth2Scopes.RPC_VOICE_READ:
                        return a.default.Messages.SCOPE_RPC_VOICE_READ;
                    case i.OAuth2Scopes.RPC_ACTIVITIES_WRITE:
                        return a.default.Messages.SCOPE_RPC_ACTIVITIES_WRITE;
                    case i.OAuth2Scopes.APPLICATIONS_BUILDS_UPLOAD:
                        return a.default.Messages.SCOPE_APPLICATIONS_BUILDS_UPLOAD;
                    case i.OAuth2Scopes.APPLICATIONS_BUILDS_READ:
                        return a.default.Messages.SCOPE_APPLICATIONS_BUILDS_READ;
                    case i.OAuth2Scopes.APPLICATIONS_COMMANDS:
                        return a.default.Messages.SCOPE_APPLICATIONS_COMMANDS;
                    case i.OAuth2Scopes.APPLICATIONS_COMMANDS_UPDATE:
                        return a.default.Messages.SCOPE_APPLICATIONS_COMMANDS_UPDATE;
                    case i.OAuth2Scopes.APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE:
                        return a.default.Messages.SCOPE_APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE;
                    case i.OAuth2Scopes.APPLICATIONS_STORE_UPDATE:
                        return a.default.Messages.SCOPE_APPLICATIONS_STORE_UPDATE;
                    case i.OAuth2Scopes.APPLICATIONS_ENTITLEMENTS:
                        return a.default.Messages.SCOPE_APPLICATIONS_ENTITLEMENTS;
                    case i.OAuth2Scopes.ACTIVITIES_READ:
                        return a.default.Messages.SCOPE_ACTIVITIES_READ;
                    case i.OAuth2Scopes.ACTIVITIES_WRITE:
                        return a.default.Messages.SCOPE_ACTIVITIES_WRITE;
                    case i.OAuth2Scopes.RELATIONSHIPS_READ:
                        return a.default.Messages.SCOPE_RELATIONSHIPS_READ;
                    case i.OAuth2Scopes.VOICE:
                        return a.default.Messages.SCOPE_VOICE;
                    case i.OAuth2Scopes.DM_CHANNELS_READ:
                        return a.default.Messages.SCOPE_DM_CHANNELS_READ;
                    case i.OAuth2Scopes.ROLE_CONNECTIONS_WRITE:
                        return a.default.Messages.SCOPE_ROLE_CONNECTIONS_WRITE;
                    default:
                        return e
                }
            }

            function d(e) {
                return e.includes(i.OAuth2Scopes.MESSAGES_READ) ? a.default.Messages.OAUTH2_CAN_READ_NOTICE.format() : a.default.Messages.OAUTH2_CANNOT_READ_SEND_NOTICE.format()
            }
        },
        357974: function(e, t, n) {
            "use strict";
            var i, a;
            n.r(t), n.d(t, {
                OAuth2Prompts: function() {
                    return i
                }
            }), (a = i || (i = {})).NONE = "none", a.CONSENT = "consent"
        },
        580363: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return m
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("414456"),
                l = n.n(a),
                s = n("577776"),
                r = n("841811"),
                u = n("338835"),
                o = n("83900"),
                d = n("45029"),
                c = n("71216"),
                _ = n("148337"),
                E = n("568734"),
                f = n("299039"),
                h = n("955145"),
                T = n("29479"),
                p = n("49111"),
                S = n("843455"),
                I = n("782340"),
                A = n("413973");

            function m(e) {
                var t;
                let n, {
                        application: a,
                        scopes: l,
                        redirectUri: s,
                        approximateGuildCount: m,
                        isEmbeddedFlow: C,
                        embeddedActivityConfig: N
                    } = e,
                    O = new Date(f.default.extractTimestamp(a.id)),
                    R = (0, T.getSecurityMessage)(l),
                    v = (0, E.hasFlag)(null !== (t = a.flags) && void 0 !== t ? t : 0, p.ApplicationFlags.EMBEDDED);
                if (null != s && !v && !C) {
                    let e = new URL(s);
                    n = null != e.host && e.host.length > 0 ? e.origin : e.href
                }
                return (0, i.jsxs)("div", {
                    className: A.applicationDetails,
                    children: [null != n ? (0, i.jsx)(g, {
                        className: A.redirectWarning,
                        icon: o.default,
                        text: I.default.Messages.OAUTH2_DETAILS_REDIRECT.format({
                            origin: n
                        })
                    }) : null, (0, i.jsx)(g, {
                        icon: d.default,
                        text: (0, h.getApplicationDetailsText)(a)
                    }), (0, i.jsx)(g, {
                        icon: r.default,
                        text: I.default.Messages.OAUTH2_DETAILS_CREATION_DATE.format({
                            date: O
                        })
                    }), l.includes(S.OAuth2Scopes.BOT) && null != m ? (0, i.jsx)(g, {
                        icon: c.default,
                        text: I.default.Messages.OAUTH2_DETAILS_GUILDS.format({
                            guildCount: m
                        })
                    }) : null, (0, i.jsx)(g, {
                        icon: _.default,
                        text: R
                    }), (null == N ? void 0 : N.has_csp_exception) ? (0, i.jsx)(g, {
                        icon: u.default,
                        text: I.default.Messages.OAUTH2_SCOPES_IP_LOCATION_SCOPE
                    }) : null]
                })
            }

            function g(e) {
                let {
                    icon: t,
                    text: n,
                    className: a
                } = e;
                return (0, i.jsxs)("div", {
                    className: l(A.entry, a),
                    children: [(0, i.jsx)(t, {
                        className: A.entryIcon
                    }), (0, i.jsx)(s.Text, {
                        variant: "text-xs/medium",
                        color: "text-muted",
                        className: A.entryInner,
                        children: n
                    })]
                })
            }
        },
        33942: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                OAuth2AuthorizePage: function() {
                    return z
                },
                OAuth2AuthorizeModal: function() {
                    return W
                },
                OAuth2Authorize: function() {
                    return q
                },
                useOAuth2AuthorizeForm: function() {
                    return Q
                },
                openOAuth2Modal: function() {
                    return Z
                },
                getOAuth2AuthorizeProps: function() {
                    return J
                }
            });
            var i, a, l, s, r = n("37983"),
                u = n("884691"),
                o = n("90915"),
                d = n("746379"),
                c = n("316693"),
                _ = n("446674"),
                E = n("271841"),
                f = n("551042"),
                h = n("670914"),
                T = n("242670"),
                p = n("84460"),
                S = n("191225"),
                I = n("716241"),
                A = n("148217"),
                m = n("970254"),
                g = n("393414"),
                C = n("766274"),
                N = n("271938"),
                O = n("449008"),
                R = n("991170"),
                v = n("253981"),
                M = n("872825"),
                y = n("8222"),
                D = n("164386"),
                L = n("978970"),
                U = n("29479"),
                P = n("357974"),
                b = n("580363"),
                G = n("613070"),
                k = n("530487"),
                F = n("638992"),
                w = n("223934"),
                H = n("267570"),
                V = n("941281"),
                B = n("49111"),
                x = n("954016"),
                Y = n("782340"),
                K = n("392507");
            let j = "oauth2-authorize-header-id";

            function z() {
                let e = (0, o.useLocation)(),
                    t = u.useMemo(() => (0, M.parseOAuth2AuthorizeProps)(e.search), [e.search]);
                return (0, A.default)(), (0, r.jsx)(H.OAuth2Page, {
                    children: (0, r.jsx)(q, {
                        ...t,
                        showLogout: !0
                    })
                })
            }

            function W(e) {
                let {
                    transitionState: t,
                    ...n
                } = e;
                return (0, r.jsx)(H.OAuth2Modal, {
                    transitionState: t,
                    "aria-labelledby": j,
                    children: (0, r.jsx)(q, {
                        ...n,
                        scrollable: !0
                    })
                })
            }

            function q(e) {
                let {
                    scrollable: t,
                    ...n
                } = e, {
                    header: i,
                    body: a,
                    footer: l,
                    nextStep: s,
                    appDetails: u
                } = Q(n), o = (0, r.jsxs)(r.Fragment, {
                    children: [(0, r.jsxs)("div", {
                        className: K.content,
                        children: [i, a, null == s ? u : null]
                    }), l]
                });
                return t ? (0, r.jsx)("div", {
                    className: K.authorize,
                    children: (0, r.jsx)(h.ScrollerThin, {
                        orientation: "auto",
                        children: o
                    })
                }) : (0, r.jsx)("div", {
                    className: K.authorize,
                    children: (0, r.jsx)("div", {
                        children: o
                    })
                })
            }

            function Q(e) {
                var t, n, i, a, f, h, A, H;
                let z, W, q, {
                        clientId: Q,
                        scopes: X,
                        responseType: Z,
                        redirectUri: J,
                        codeChallenge: $,
                        codeChallengeMethod: ee,
                        state: et,
                        guildId: en,
                        channelId: ei,
                        permissions: ea,
                        prompt: el,
                        disableGuildSelect: es,
                        showLogout: er = !1,
                        authorization: eu,
                        callback: eo,
                        callbackWithoutPost: ed,
                        onClose: ec,
                        cancelCompletesFlow: e_ = !0,
                        isTrustedName: eE = !1,
                        isEmbeddedFlow: ef = !1,
                        userInstall: eh = !1
                    } = e,
                    eT = u.useMemo(() => (0, M.filterScopes)(X), [X]),
                    ep = (0, o.useLocation)(),
                    eS = m.default.useExperiment({
                        location: "auth web"
                    }),
                    eI = eS.userAppsTreatment === m.UserAppsTreatment.ALLOWED;
                !eI && (eh = !1);
                let [eA, em] = u.useState(l.NOT_LOADED), [eg, eC] = u.useState(null), [eN, eO] = u.useState(R.default.NONE), [eR, ev] = u.useState(s.AUTHORIZE_SCOPES), [eM, ey] = u.useState(null), [eD] = u.useState(U.OrderedAccountScopes.filter(e => eT.includes(e))), [eL, eU] = u.useState(null != en ? en : null), [eP, eb] = u.useState(null != ei ? ei : null), [eG, ek] = u.useState(!1), eF = u.useMemo(() => {
                    var e;
                    return null == eg ? void 0 : null === (e = eg.guilds) || void 0 === e ? void 0 : e.find(e => e.id === eL)
                }, [null == eg ? void 0 : eg.guilds, eL]), ew = (0, _.useStateFromStoresObject)([p.default, S.default], () => {
                    var e, t;
                    let n;
                    let i = null === (e = S.default.getSelfEmbeddedActivities().values().next()) || void 0 === e ? void 0 : e.value,
                        a = p.default.getIsEnabled();
                    return (0, O.isNotNullish)(i) && (n = S.default.getShelfActivities(i.guildId).find(e => e.application_id === i.application_id), a && void 0 === n && (n = null === (t = p.default.getDeveloperShelfItems().find(e => e.id === i.application_id)) || void 0 === t ? void 0 : t.embeddedActivityConfig), (0, O.isNotNullish)(n)) ? {
                        ...x.DEFAULT_EMBEDDED_ACTIVITY_CONFIG,
                        ...n
                    } : {}
                }), eH = Object.keys(ew).length > 0 ? ew : null, eV = u.useCallback(async e => {
                    if (null != ed) {
                        ed(e);
                        return
                    }
                    if (!e && !e_) {
                        null != eo && (eo({
                            application: null == eg ? void 0 : eg.application,
                            guild: eF
                        }), null == ec || ec());
                        return
                    }
                    try {
                        ek(!0);
                        let t = await (0, y.authorize)({
                            authorize: e,
                            clientId: Q,
                            scopes: eT,
                            responseType: Z,
                            redirectUri: J,
                            codeChallenge: $,
                            codeChallengeMethod: ee,
                            state: et,
                            permissions: c.default.remove(null != ea ? ea : R.default.NONE, eN),
                            guildId: null == eL || eh ? void 0 : eL,
                            channelId: null != eP ? eP : void 0,
                            userInstall: eh
                        });
                        if (null != eo) eo({
                            application: null == eg ? void 0 : eg.application,
                            location: t.location,
                            guild: eF
                        }), null == ec || ec();
                        else if (null != t.location) {
                            let {
                                host: e,
                                path: n
                            } = d.parse(t.location);
                            v.default.isDiscordHostname(e) && n === B.Routes.OAUTH2_AUTHORIZED ? (0, g.transitionTo)(B.Routes.OAUTH2_AUTHORIZED, {
                                state: {
                                    application: null == eg ? void 0 : eg.application,
                                    guild: eF
                                }
                            }) : window.location = t.location
                        } else ek(!1)
                    } catch (t) {
                        let e = t.body;
                        (null == e ? void 0 : e.message) != null && "" !== e.message ? ey(Error(e.message)) : ey(e), ev(s.AUTHORIZE_SCOPES), em(l.LOADED), ek(!1)
                    }
                }, [eo, ed, Q, $, ee, eN, ec, ea, J, Z, eT, eL, eP, et, e_, null == eg ? void 0 : eg.application, eF, eh]), eB = u.useRef(!1), ex = u.useCallback(async () => {
                    if (eA === l.NOT_LOADED) {
                        if (em(l.LOADING), !N.default.isAuthenticated()) {
                            (0, y.logoutWithRedirect)(ep);
                            return
                        }
                        if (!eB.current) {
                            eB.current = !0;
                            try {
                                let e = null != eu ? eu : await (0, y.fetchAuthorization)({
                                    clientId: Q,
                                    scopes: eT,
                                    responseType: Z,
                                    redirectUri: J,
                                    codeChallenge: $,
                                    codeChallengeMethod: ee,
                                    state: et,
                                    userInstall: eI && eh
                                });
                                eC((0, D.convertOAuth2Authorization)(e)), el === P.OAuth2Prompts.NONE && e.authorized ? eV(!0) : em(l.LOADED), (0, I.trackWithMetadata)(B.AnalyticEvents.OAUTH2_AUTHORIZE_VIEWED, {
                                    application_id: e.application.id
                                })
                            } catch (n) {
                                let {
                                    status: e,
                                    body: t
                                } = n;
                                if (401 === e) {
                                    (0, y.logoutWithRedirect)(ep);
                                    return
                                }
                                ey(Error(null != t.message ? t.message : "".concat(Object.keys(t)[0], ": ").concat(Object.values(t)[0]))), em(l.LOADED)
                            } finally {
                                eB.current = !1
                            }
                        }
                    }
                }, [eu, Q, $, ee, eA, ep, el, J, Z, eT, eV, et, eh, eI]), eY = u.useCallback((e, t) => {
                    eO(n => e ? c.default.remove(n, t) : c.default.add(n, t))
                }, []);
                u.useEffect(() => {
                    let e = eT.filter(e => !U.ValidScopes.includes(e));
                    0 === eT.length ? (ey(Error("No scopes were provided.")), em(l.LOADED)) : e.length > 0 ? (ey(Error("Invalid scope: ".concat(e[0]))), em(l.LOADED)) : (0, L.containsDisallowedPermission)(null != ea ? ea : R.default.NONE) ? (ey(Error("Invalid permission(s) provided.")), em(l.LOADED)) : ex()
                }, [ex, eT, ea]);
                let eK = null != eP ? null == eg ? void 0 : null === (t = eg.channels) || void 0 === t ? void 0 : t.find(e => e.id === eP) : null,
                    ej = null != eL ? null == eg ? void 0 : null === (n = eg.guilds) || void 0 === n ? void 0 : n.find(e => e.id === eL) : null;
                if (u.useEffect(() => {
                        null != eg && (null != eK ? eU(null) : null == ej && (eU(null), eb(null)))
                    }, [eg, ej, eK]), eM instanceof Error) return {
                    body: (0, r.jsx)(V.OAuth2Error, {
                        message: eM.message
                    })
                };
                if (eA !== l.LOADED || null == eg) return {
                    body: (0, r.jsx)(T.Spinner, {})
                };
                let ez = new C.default(eg.user),
                    eW = null === (i = eg.bot) || void 0 === i ? void 0 : i.approximate_guild_count,
                    eq = !1;
                switch (eR) {
                    case s.AUTHORIZE_SCOPES:
                        let eQ = null == eM || eM instanceof Error ? {} : eM,
                            eX = null === (a = eg.guilds) || void 0 === a ? void 0 : a.sort((e, t) => e.name.toLowerCase().localeCompare(t.name.toLowerCase())),
                            eZ = eT.includes(B.OAuth2Scopes.BOT) || eT.includes(B.OAuth2Scopes.WEBHOOK_INCOMING) || eT.includes(B.OAuth2Scopes.APPLICATIONS_COMMANDS);
                        z = (0, r.jsxs)(r.Fragment, {
                            children: [(0, r.jsx)(G.default, {
                                application: eg.application,
                                accountScopes: eD,
                                errors: eQ,
                                isTrustedName: eE
                            }), null == eK && eZ && !eh ? (0, r.jsx)(F.GuildSelector, {
                                error: (null !== (h = null !== (f = eQ[B.OAuth2Scopes.BOT]) && void 0 !== f ? f : eQ[B.OAuth2Scopes.APPLICATIONS_COMMANDS]) && void 0 !== h ? h : [])[0],
                                selectedGuildId: eL,
                                onGuildChange: e => {
                                    eU(e)
                                },
                                guilds: null != eX ? eX : [],
                                disabled: "" !== eL && !0 === es
                            }) : null, eT.includes(B.OAuth2Scopes.WEBHOOK_INCOMING) ? (0, r.jsx)(F.WebhookGuildChannelSelector, {
                                error: (null !== (A = eQ[B.OAuth2Scopes.WEBHOOK_INCOMING]) && void 0 !== A ? A : [])[0],
                                selectedChannelId: eP,
                                selectedGuildId: eL,
                                onChannelChange: e => eb(e)
                            }) : null]
                        }), eT.includes(B.OAuth2Scopes.BOT) && !c.default.equals(ea, R.default.NONE) && (q = s.AUTHORIZE_BOT_PERMISSIONS);
                        let eJ = eZ && null == ej && null == eK,
                            e$ = null != ej && eT.includes(B.OAuth2Scopes.WEBHOOK_INCOMING) && null == eP;
                        eq = !eh && (eJ || e$);
                        break;
                    case s.AUTHORIZE_BOT_PERMISSIONS:
                        z = (0, r.jsx)(k.default, {
                            application: eg.application,
                            permissions: null != ea ? ea : R.default.NONE,
                            deniedPermissions: eN,
                            onPermissionsChange: eY,
                            guild: ej
                        }), W = s.AUTHORIZE_SCOPES
                }
                let e0 = (0, r.jsx)(b.default, {
                        embeddedActivityConfig: eH,
                        application: eg.application,
                        scopes: eT,
                        redirectUri: null !== (H = eg.redirect_uri) && void 0 !== H ? H : null,
                        approximateGuildCount: void 0 !== eW ? eW : null,
                        isEmbeddedFlow: ef
                    }),
                    e1 = (0, r.jsxs)("div", {
                        className: K.footer,
                        children: [null != W ? (0, r.jsx)(E.Button, {
                            look: E.Button.Looks.LINK,
                            color: E.Button.Colors.PRIMARY,
                            onClick: () => ev(W),
                            children: Y.default.Messages.BACK
                        }) : (0, r.jsx)(E.Button, {
                            look: E.Button.Looks.LINK,
                            color: E.Button.Colors.PRIMARY,
                            onClick: () => eV(!1),
                            children: Y.default.Messages.CANCEL
                        }), null != q ? (0, r.jsx)(E.Button, {
                            onClick: () => ev(q),
                            disabled: eq,
                            children: Y.default.Messages.CONTINUE
                        }) : (0, r.jsx)(E.Button, {
                            onClick: () => eV(!0),
                            disabled: eq,
                            submitting: eG,
                            children: Y.default.Messages.AUTHORIZE
                        })]
                    }),
                    e2 = (0, r.jsx)(w.default, {
                        id: j,
                        user: ez,
                        application: eg.application,
                        bot: eg.bot,
                        accountScopes: eD,
                        showLogout: er || !1,
                        location: ep,
                        isTrustedName: eE
                    });
                return {
                    header: e2,
                    body: z,
                    footer: e1,
                    nextStep: q,
                    appDetails: e0,
                    sendAuthorize: eV
                }
            }

            function X(e, t) {
                var n;
                if (null == t.location || null != e && e(t)) return;
                let {
                    host: i,
                    path: a,
                    query: l
                } = d.parse(t.location, !0), s = v.default.isDiscordHostname(i) || window.location.host === i;
                s && a === B.Routes.OAUTH2_AUTHORIZED ? (0, f.openModal)(e => (0, r.jsx)(H.OAuth2Modal, {
                    ...e,
                    "aria-labelledby": j,
                    children: (0, r.jsx)(V.OAuth2AuthorizedSuccess, {
                        guild: t.guild,
                        application: t.application,
                        onClose: e.onClose
                    })
                })) : s && (null == a ? void 0 : a.startsWith(B.Routes.OAUTH2_ERROR)) ? (0, f.openModal)(e => {
                    let t = l.error_description || l.error || Y.default.Messages.OAUTH2_UNKNOWN_ERROR;
                    return Array.isArray(t) && (t = t[0]), (0, r.jsxs)(H.OAuth2Modal, {
                        ...e,
                        "aria-labelledby": j,
                        children: [(0, r.jsx)(V.OAuth2Error, {
                            message: t,
                            onClose: e.onClose
                        }), ";"]
                    })
                }) : null === (n = window.open(t.location, "_blank")) || void 0 === n || n.focus()
            }

            function Z(e, t) {
                (0, f.openModal)(t => (0, r.jsx)(W, {
                    ...t,
                    ...e,
                    cancelCompletesFlow: !1,
                    callback: X.bind(null, e.callback)
                }), {
                    onCloseCallback: t
                })
            }

            function J(e) {
                let {
                    hostname: t = "",
                    host: n,
                    path: i,
                    query: a
                } = d.parse(e);
                return null != i && null != a && (v.default.isDiscordHostname(t) || n === window.location.host) && (i.startsWith("/api".concat(B.Endpoints.OAUTH2_AUTHORIZE)) || i.startsWith(B.Routes.OAUTH2_AUTHORIZE)) ? (0, M.parseOAuth2AuthorizeProps)(a) : null
            }(i = l || (l = {}))[i.NOT_LOADED = 0] = "NOT_LOADED", i[i.LOADING = 1] = "LOADING", i[i.LOADED = 2] = "LOADED", (a = s || (s = {}))[a.INSTALL_TYPE = 0] = "INSTALL_TYPE", a[a.AUTHORIZE_SCOPES = 1] = "AUTHORIZE_SCOPES", a[a.AUTHORIZE_BOT_PERMISSIONS = 2] = "AUTHORIZE_BOT_PERMISSIONS"
        },
        613070: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("775560"),
                l = n("605451"),
                s = n("577776"),
                r = n("36694"),
                u = n("945330"),
                o = n("29479"),
                d = n("782340"),
                c = n("814288");

            function _(e) {
                var t;
                let {
                    application: n,
                    accountScopes: _,
                    errors: E,
                    isTrustedName: f = !1
                } = e, h = (0, a.useLazyValue)(() => o.FAKE_SCOPES[Math.floor(Math.random() * o.FAKE_SCOPES.length)]);
                if (0 === _.length) return null;
                let T = _.map(e => {
                        var t;
                        let n = (0, o.getScopeName)(e, _),
                            [a] = null !== (t = null == E ? void 0 : E[e]) && void 0 !== t ? t : [];
                        return (0, i.jsxs)("div", {
                            className: c.scope,
                            children: [(0, i.jsx)("div", {
                                className: c.scopeCheck,
                                children: (0, i.jsx)(r.default, {
                                    className: c.icon
                                })
                            }), (0, i.jsxs)("div", {
                                className: c.scopeInner,
                                children: [(0, i.jsx)(s.Text, {
                                    variant: "text-md/medium",
                                    children: n
                                }), null != a ? (0, i.jsx)(s.Text, {
                                    variant: "text-xs/normal",
                                    color: "text-danger",
                                    children: a
                                }) : null]
                            })]
                        }, e)
                    }),
                    p = (0, i.jsxs)("div", {
                        className: c.scope,
                        children: [(0, i.jsx)("div", {
                            className: c.scopeTimes,
                            children: (0, i.jsx)(u.default, {
                                className: c.icon
                            })
                        }), (0, i.jsx)("div", {
                            className: c.scopeInner,
                            children: (0, i.jsx)(s.Text, {
                                variant: "text-md/normal",
                                className: c.scopeName,
                                children: h()
                            })
                        })]
                    }),
                    S = f ? d.default.Messages.OAUTH2_SCOPES_LABEL_TRUSTED_NAME : d.default.Messages.OAUTH2_SCOPES_LABEL;
                return (0, i.jsxs)("div", {
                    className: c.scopes,
                    children: [(0, i.jsx)(l.Heading, {
                        variant: "heading-deprecated-12/semibold",
                        className: c.sectionLabel,
                        children: S.format({
                            application: null !== (t = null == n ? void 0 : n.name) && void 0 !== t ? t : ""
                        })
                    }), T, p]
                })
            }
        },
        530487: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return E
                }
            });
            var i = n("37983"),
                a = n("884691"),
                l = n("316693"),
                s = n("685698"),
                r = n("577776"),
                u = n("945330"),
                o = n("991170"),
                d = n("978970"),
                c = n("782340"),
                _ = n("190148");

            function E(e) {
                let {
                    application: t,
                    permissions: n,
                    deniedPermissions: E,
                    onPermissionsChange: f,
                    guild: h
                } = e, [T, p] = a.useState(o.default.NONE);
                a.useEffect(() => {
                    f(!0, n), p(l.default.invert(h.permissions)), f(!1, l.default.invert(h.permissions))
                }, [h, f, n]);
                let S = d.OrderedPermissions.filter(e => l.default.has(n, e)),
                    I = S.filter(e => !l.default.has(T, e)).map(e => {
                        let t = (0, d.getPermissionName)(e),
                            n = !l.default.has(E, e);
                        return (0, i.jsx)("li", {
                            className: _.permission,
                            children: (0, i.jsx)(s.Checkbox, {
                                value: n,
                                onChange: (t, n) => f(n, e),
                                type: s.Checkbox.Types.INVERTED,
                                children: (0, i.jsx)(r.Text, {
                                    variant: "text-md/normal",
                                    children: t
                                })
                            })
                        }, String(e))
                    }),
                    A = S.filter(e => l.default.has(T, e)).map(e => {
                        let t = (0, d.getPermissionName)(e);
                        return (0, i.jsxs)("li", {
                            className: _.permission,
                            children: [(0, i.jsx)("div", {
                                className: _.disabledPermissionIcon,
                                children: (0, i.jsx)(u.default, {
                                    className: _.icon
                                })
                            }), (0, i.jsx)(r.Text, {
                                variant: "text-md/normal",
                                children: t
                            })]
                        }, String(e))
                    });
                return (0, i.jsxs)("div", {
                    className: _.botPermissions,
                    children: [(0, i.jsx)(r.Text, {
                        variant: "text-sm/medium",
                        color: "header-secondary",
                        className: _.permissionsLabel,
                        children: c.default.Messages.OAUTH2_CONFIRM_BOT_PERMISSIONS.format({
                            applicationName: t.name,
                            guildName: h.name
                        })
                    }), (0, i.jsx)("ul", {
                        className: _.permissionsList,
                        children: I
                    }), A.length > 0 ? (0, i.jsxs)(i.Fragment, {
                        children: [(0, i.jsx)(r.Text, {
                            variant: "text-sm/medium",
                            color: "header-secondary",
                            className: _.disabledPermissionsLabel,
                            children: c.default.Messages.OAUTH2_DISABLED_PERMISSIONS.format({
                                applicationName: t.name
                            })
                        }), (0, i.jsx)("ul", {
                            className: _.permissionsList,
                            children: A
                        })]
                    }) : null]
                })
            }
        },
        638992: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                GuildSelector: function() {
                    return E
                },
                WebhookGuildChannelSelector: function() {
                    return f
                }
            });
            var i = n("37983"),
                a = n("884691"),
                l = n("316693"),
                s = n("605451"),
                r = n("774811"),
                u = n("577776"),
                o = n("8222"),
                d = n("49111"),
                c = n("782340"),
                _ = n("246097");

            function E(e) {
                let {
                    error: t,
                    selectedGuildId: n,
                    onGuildChange: a,
                    guilds: o,
                    disabled: E = !1
                } = e, f = o.filter(e => l.default.has(e.permissions, d.Permissions.MANAGE_GUILD)).map(e => ({
                    value: e.id,
                    label: e.name
                }));
                return (0, i.jsxs)("div", {
                    className: _.selectorGroup,
                    children: [(0, i.jsx)(s.Heading, {
                        variant: "heading-deprecated-12/semibold",
                        className: _.sectionLabel,
                        children: c.default.Messages.OAUTH2_ADD_TO_GUILD
                    }), null != t && "" !== t ? (0, i.jsx)(u.Text, {
                        variant: "text-xs/normal",
                        color: "text-danger",
                        children: t
                    }) : null, (0, i.jsx)(r.SearchableSelect, {
                        wrapperClassName: _.wrapper,
                        className: _.select,
                        maxVisibleItems: 5,
                        value: n,
                        placeholder: c.default.Messages.OAUTH2_ADD_TO_GUILD_PLACEHOLDER,
                        options: f,
                        onChange: e => {
                            a(e)
                        },
                        isDisabled: E
                    }), (0, i.jsx)(u.Text, {
                        variant: "text-xs/medium",
                        color: "header-secondary",
                        className: _.label,
                        children: c.default.Messages.OAUTH2_ADD_TO_GUILD_DESCRIPTION.format()
                    })]
                })
            }

            function f(e) {
                let {
                    selectedGuildId: t,
                    selectedChannelId: n,
                    onChannelChange: l,
                    error: d
                } = e, [E, f] = a.useState(null);
                a.useEffect(() => {
                    (async function e() {
                        if (null != t) {
                            let e = await (0, o.fetchChannels)(t);
                            f(e)
                        }
                    })()
                }, [t]), a.useEffect(() => {
                    null != E && null != n && null == E.find(e => e.id === n) && l(null)
                }, [E, l, n]);
                let h = (null != E ? E : []).map(e => ({
                    value: e.id,
                    label: e.name
                }));
                return null == t ? null : (0, i.jsxs)("div", {
                    className: _.selectorGroup,
                    children: [(0, i.jsx)(s.Heading, {
                        variant: "heading-deprecated-12/semibold",
                        className: _.sectionLabel,
                        children: c.default.Messages.OAUTH2_ADD_WEBHOOK_INCOMING
                    }), null != d && "" !== d ? (0, i.jsx)(u.Text, {
                        variant: "text-xs/normal",
                        color: "text-danger",
                        children: d
                    }) : null, (0, i.jsx)(r.SearchableSelect, {
                        wrapperClassName: _.wrapper,
                        className: _.select,
                        maxVisibleItems: 5,
                        onChange: e => {
                            l(e)
                        },
                        placeholder: c.default.Messages.SCOPE_WEBHOOK_INCOMING_CHANNEL_PLACEHOLDER,
                        value: n,
                        options: h
                    }), (0, i.jsx)(u.Text, {
                        variant: "text-xs/normal",
                        color: "header-secondary",
                        className: _.label,
                        children: c.default.Messages.SCOPE_WEBHOOK_INCOMING_DESCRIPTION
                    })]
                })
            }
        },
        223934: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return h
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("913365"),
                l = n("227645"),
                s = n("577776"),
                r = n("79798"),
                u = n("315102"),
                o = n("568734"),
                d = n("8222"),
                c = n("49111"),
                _ = n("52904"),
                E = n("782340"),
                f = n("347819");

            function h(e) {
                let {
                    id: t,
                    user: n,
                    application: h,
                    bot: T,
                    accountScopes: p,
                    showLogout: S,
                    location: I,
                    isTrustedName: A
                } = e, m = u.default.getApplicationIconURL({
                    id: h.id,
                    icon: h.icon
                }), g = u.default.getUserAvatarURL(n);
                return (0, i.jsxs)("header", {
                    id: t,
                    className: f.header,
                    children: [(0, i.jsxs)("div", {
                        className: f.headerIcons,
                        children: [(0, i.jsx)(a.Avatar, {
                            src: m,
                            size: _.AvatarSizes.SIZE_80,
                            "aria-label": h.name
                        }), (0, i.jsxs)("div", {
                            className: f.ellipseGroup,
                            children: [(0, i.jsx)("div", {
                                className: f.ellipse
                            }), (0, i.jsx)("div", {
                                className: f.ellipse
                            }), (0, i.jsx)("div", {
                                className: f.ellipse
                            })]
                        }), (0, i.jsx)(a.Avatar, {
                            src: g,
                            size: _.AvatarSizes.SIZE_80,
                            "aria-label": n.username
                        })]
                    }), !A && (0, i.jsx)(s.Text, {
                        variant: "text-md/medium",
                        color: "header-secondary",
                        className: f.label,
                        children: E.default.Messages.OAUTH2_THIRD_PARTY_APPLICATION
                    }), (0, i.jsxs)(s.Text, {
                        variant: "text-lg/bold",
                        color: "header-primary",
                        children: [h.name, null != T ? (0, i.jsx)(r.default, {
                            className: f.botTag,
                            verified: null != T.public_flags && (0, o.hasFlag)(T.public_flags, c.UserFlags.VERIFIED_BOT)
                        }) : null]
                    }), p.length > 0 ? (0, i.jsx)(s.Text, {
                        variant: "text-md/normal",
                        color: "header-secondary",
                        className: f.label,
                        children: E.default.Messages.OAUTH2_REQUESTS_ACCOUNT_ACCESS
                    }) : (0, i.jsx)(s.Text, {
                        variant: "text-md/normal",
                        color: "header-secondary",
                        className: f.label,
                        children: E.default.Messages.OAUTH2_CONNECT_TO_DISCORD
                    }), S ? (0, i.jsx)("div", {
                        className: f.currentUser,
                        children: (0, i.jsxs)(s.Text, {
                            variant: "text-sm/normal",
                            color: "text-muted",
                            children: [E.default.Messages.OAUTH2_SIGNED_IN_AS.format({
                                userHook: () => (0, i.jsxs)(s.Text, {
                                    className: f.currentUserTag,
                                    variant: "text-sm/normal",
                                    children: [n.username, !n.isPomelo() && (0, i.jsx)(s.Text, {
                                        className: f.currentUserDiscriminator,
                                        variant: "text-sm/normal",
                                        children: "#".concat(n.discriminator)
                                    })]
                                }, n.id)
                            }), (0, i.jsx)(l.Clickable, {
                                tag: "a",
                                className: f.logoutLink,
                                onClick: () => (0, d.logoutWithRedirect)(I),
                                children: E.default.Messages.OAUTH2_LOGOUT
                            })]
                        })
                    }) : null]
                })
            }
        },
        267570: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                OAuth2Page: function() {
                    return p
                },
                OAuth2Modal: function() {
                    return S
                }
            });
            var i = n("37983"),
                a = n("884691"),
                l = n("414456"),
                s = n.n(l),
                r = n("516256"),
                u = n("77078"),
                o = n("69927"),
                d = n("554054"),
                c = n("831588"),
                _ = n("439932"),
                E = n("49111"),
                f = n("289382"),
                h = n("782340"),
                T = n("316618");

            function p(e) {
                let {
                    children: t,
                    wrapperClassName: n,
                    embedded: l
                } = e, [r, p] = a.useState(f.WaveStates.INITIAL), S = a.useCallback(e => {
                    p(t => Math.max(t, e))
                }, []);
                return (0, o.usePageTitle)({
                    location: h.default.Messages.OAUTH2_TITLE
                }), (0, i.jsx)(u.ThemeContextProvider, {
                    theme: E.ThemeTypes.DARK,
                    children: (0, i.jsx)(d.default, {
                        embedded: l,
                        className: s((0, _.getThemeClass)(E.ThemeTypes.DARK), T.wave),
                        splash: (0, c.getArtForPath)(),
                        waveState: r,
                        showLogo: !0,
                        updateWaveState: S,
                        children: (0, i.jsx)("div", {
                            className: s(T.oauth2Wrapper, n),
                            children: t
                        })
                    })
                })
            }

            function S(e) {
                let {
                    children: t,
                    transitionState: n,
                    ...a
                } = e;
                return (0, i.jsx)(r.ModalRoot, {
                    size: r.ModalSize.DYNAMIC,
                    transitionState: n,
                    className: T.oauth2Wrapper,
                    ...a,
                    children: t
                })
            }
        },
        941281: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return g
                },
                OAuth2Success: function() {
                    return C
                },
                OAuth2AuthorizedSuccess: function() {
                    return N
                },
                OAuth2Error: function() {
                    return O
                },
                OAuth2AuthorizedPage: function() {
                    return R
                },
                OAuth2ErrorPage: function() {
                    return v
                }
            });
            var i = n("37983"),
                a = n("884691"),
                l = n("414456"),
                s = n.n(l),
                r = n("730290"),
                u = n("90915"),
                o = n("746379"),
                d = n("516256"),
                c = n("242670"),
                _ = n("577776"),
                E = n("77078"),
                f = n("69927"),
                h = n("393414"),
                T = n("239380"),
                p = n("599110"),
                S = n("267570"),
                I = n("49111"),
                A = n("782340"),
                m = n("223003");

            function g(e) {
                let {
                    message: t,
                    footer: n,
                    headerClassName: a,
                    showsCloseWindowText: l,
                    spinner: r,
                    onClose: u
                } = e;
                return (0, f.usePageTitle)({
                    location: A.default.Messages.OAUTH2_TITLE
                }), (0, i.jsxs)(i.Fragment, {
                    children: [null != u ? (0, i.jsx)(d.ModalCloseButton, {
                        onClick: u,
                        className: m.closeButton
                    }) : null, (0, i.jsxs)("div", {
                        className: m.wrapper,
                        children: [r ? (0, i.jsx)(c.Spinner, {}) : null, (0, i.jsx)("div", {
                            className: s(m.header, a)
                        }), (0, i.jsx)(_.Text, {
                            variant: "text-md/normal",
                            className: m.text,
                            children: t
                        }), null != n ? n : null, l ? (0, i.jsx)(_.Text, {
                            variant: "text-xs/normal",
                            color: "text-muted",
                            className: m.cta,
                            children: A.default.Messages.OAUTH2_MESSAGE_CTA
                        }) : null]
                    })]
                })
            }

            function C(e) {
                return (0, i.jsx)(g, {
                    ...e,
                    headerClassName: m.headerSuccess
                })
            }

            function N(e) {
                let {
                    guild: t,
                    application: n,
                    ...l
                } = e, {
                    onClose: s
                } = l, r = A.default.Messages.AUTHORIZED_SUCCESS, u = a.useCallback(() => {
                    (null == t ? void 0 : t.id) != null && ((0, T.transitionToGuild)(null == t ? void 0 : t.id), null == s || s(), p.default.track(I.AnalyticEvents.OAUTH2_AUTHORIZE_SUCCESS_GO_TO_GUILD_CLICKED, {
                        application_id: null == n ? void 0 : n.id,
                        guild_id: null == t ? void 0 : t.id
                    }))
                }, [s, null == n ? void 0 : n.id, null == t ? void 0 : t.id]), o = a.useCallback(() => {
                    null == s || s(), p.default.track(I.AnalyticEvents.OAUTH2_AUTHORIZE_SUCCESS_CLOSE_CLICKED, {
                        application_id: null == n ? void 0 : n.id
                    })
                }, [s, null == n ? void 0 : n.id]), d = a.useMemo(() => {
                    if (null != n) return null != t ? A.default.Messages.AUTHORIZED_APP_TO_SERVER.format({
                        installedApplicationName: null == n ? void 0 : n.name,
                        guildName: null == t ? void 0 : t.name
                    }) : A.default.Messages.AUTHORIZED_APP.format({
                        installedApplicationName: null == n ? void 0 : n.name
                    });
                    return A.default.Messages.AUTHORIZED_GENERIC
                }, [n, t]), c = (0, i.jsxs)(i.Fragment, {
                    children: [(0, i.jsx)(_.Text, {
                        variant: "text-sm/normal",
                        className: m.authorizedSuccessSubtext,
                        children: d
                    }), (null != t || null != s) && (0, i.jsxs)("div", {
                        className: m.buttonsContainer,
                        children: [null != t && (0, i.jsx)(E.Button, {
                            fullWidth: !0,
                            color: E.Button.Colors.BRAND,
                            onClick: u,
                            className: m.button,
                            children: A.default.Messages.OAUTH2_GO_TO_SERVER_NAME_CTA.format({
                                guildName: null == t ? void 0 : t.name
                            })
                        }), null != s && (0, i.jsx)(E.Button, {
                            fullWidth: !0,
                            color: E.Button.Colors.PRIMARY,
                            onClick: o,
                            className: m.button,
                            children: A.default.Messages.CLOSE
                        })]
                    })]
                });
                return a.useEffect(() => {
                    p.default.track(I.AnalyticEvents.OAUTH2_AUTHORIZE_SUCCESS_VIEWED, {
                        application_id: null == n ? void 0 : n.id
                    })
                }, [null == n ? void 0 : n.id]), (0, i.jsx)("div", {
                    className: m.authorizedSuccessWrapper,
                    children: (0, i.jsx)(C, {
                        message: r,
                        footer: c,
                        ...l
                    })
                })
            }

            function O(e) {
                return (0, i.jsx)(g, {
                    ...e,
                    headerClassName: m.headerFailure
                })
            }

            function R() {
                var e, t;
                let n = (0, u.useLocation)();
                return (0, i.jsx)(S.OAuth2Page, {
                    children: (0, i.jsx)(N, {
                        guild: null === (e = n.state) || void 0 === e ? void 0 : e.guild,
                        application: null === (t = n.state) || void 0 === t ? void 0 : t.application,
                        showsCloseWindowText: !0
                    })
                })
            }

            function v(e) {
                var t, n;
                let {
                    location: l
                } = e;
                a.useEffect(() => {
                    if (null == l) return;
                    let e = null != document.referrer && "" !== document.referrer ? o.parse(document.referrer) : null;
                    (null == e || e.host !== window.location.host || e.pathname !== I.Routes.OAUTH2_AUTHORIZE) && (0, h.transitionTo)(I.Routes.INDEX)
                }, [l]);
                let s = null != l ? (0, r.parse)(l.search) : {},
                    u = null !== (n = null !== (t = s.error_description) && void 0 !== t ? t : s.error) && void 0 !== n ? n : A.default.Messages.OAUTH2_UNKNOWN_ERROR;
                return (0, i.jsx)(S.OAuth2Page, {
                    children: (0, i.jsx)(O, {
                        message: u,
                        showsCloseWindowText: !0
                    })
                })
            }
        },
        512395: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useOptInEnabledForGuild: function() {
                    return d
                },
                isOptInEnabledForGuild: function() {
                    return c
                },
                useChannelHighlightsEnabledForGuild: function() {
                    return _
                },
                isChannelHighlightsEnabledForGuild: function() {
                    return E
                },
                useShouldShowOnboardingAdminUpsellForGuild: function() {
                    return f
                }
            });
            var i = n("446674"),
                a = n("481555"),
                l = n("305961"),
                s = n("957255"),
                r = n("282109"),
                u = n("697218"),
                o = n("49111");

            function d(e) {
                let t = (0, i.useStateFromStores)([r.default], () => r.default.isOptInEnabled(e)),
                    n = (0, i.useStateFromStores)([l.default], () => l.default.getGuild(e)),
                    a = (0, i.useStateFromStores)([u.default], () => u.default.getCurrentUser());
                return null != e && null != n && null != a && (n.hasFeature(o.GuildFeatures.COMMUNITY) || a.isStaff()) && t
            }

            function c(e) {
                let t = l.default.getGuild(e),
                    n = u.default.getCurrentUser();
                return null != e && null != t && null != n && (t.hasFeature(o.GuildFeatures.COMMUNITY) || n.isStaff()) && r.default.isOptInEnabled(e)
            }

            function _(e) {
                return (0, a.useChannelHighlightsExperiment)()
            }

            function E(e) {
                return (0, a.isChannelHighlightsExperimentEnabled)()
            }

            function f(e) {
                let t = (0, i.useStateFromStores)([l.default], () => l.default.getGuild(e)),
                    {
                        canManageGuild: n,
                        canManageRoles: a
                    } = (0, i.useStateFromStoresObject)([s.default], () => ({
                        canManageGuild: s.default.can(o.Permissions.MANAGE_GUILD, t),
                        canManageRoles: s.default.can(o.Permissions.MANAGE_ROLES, t)
                    }));
                if (null == t) return !1;
                let r = t.hasFeature(o.GuildFeatures.GUILD_ONBOARDING_EVER_ENABLED);
                return n && a && !r
            }
        },
        614305: function(e, t, n) {
            "use strict";

            function i() {
                return !1
            }
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            })
        },
        132774: function(e, t, n) {
            "use strict";

            function i(e) {
                {
                    let t = n("801373").default;
                    t(e)
                }
            }
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            })
        },
        801373: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("551042");

            function l(e) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await n.el("758881").then(n.bind(n, "758881"));
                    return n => (0, i.jsx)(t, {
                        ...n,
                        incomingRequestCount: e
                    })
                })
            }
        },
        552310: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("866227"),
                a = n.n(i);

            function l(e) {
                return {
                    ...e,
                    expiry: a(e.expiry)
                }
            }
        },
        383294: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                open: function() {
                    return l
                },
                openChannelCallPopout: function() {
                    return s
                },
                close: function() {
                    return r
                },
                setAlwaysOnTop: function() {
                    return u
                }
            });
            var i = n("913144");
            let a = {
                menubar: !1,
                toolbar: !1,
                location: !1,
                directories: !1
            };

            function l(e, t, n) {
                return i.default.dispatch({
                    type: "POPOUT_WINDOW_OPEN",
                    key: e,
                    features: {
                        ...a,
                        ...n
                    },
                    render: t
                })
            }

            function s(e) {
                return i.default.dispatch({
                    type: "CHANNEL_CALL_POPOUT_WINDOW_OPEN",
                    channel: e
                })
            }

            function r(e) {
                return i.default.dispatch({
                    type: "POPOUT_WINDOW_CLOSE",
                    key: e
                })
            }

            function u(e, t) {
                return i.default.dispatch({
                    type: "POPOUT_WINDOW_SET_ALWAYS_ON_TOP",
                    alwaysOnTop: t,
                    key: e
                })
            }
        },
        677156: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                CustomGiftExperiment: function() {
                    return a
                }
            });
            var i = n("862205");
            let a = (0, i.createExperiment)({
                kind: "user",
                id: "2023-08_custom_gift",
                label: "Custom Gift Experiment",
                defaultConfig: {
                    enabled: !1
                },
                treatments: [{
                    id: 1,
                    label: "Show gift purchaser custom gift flow",
                    config: {
                        enabled: !0
                    }
                }]
            })
        },
        140596: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                FetchState: function() {
                    return a
                },
                default: function() {
                    return p
                }
            });
            var i, a, l = n("446674"),
                s = n("913144"),
                r = n("653047"),
                u = n("946028");
            (i = a || (a = {}))[i.NOT_FETCHED = 0] = "NOT_FETCHED", i[i.FETCHING = 1] = "FETCHING", i[i.FETCHED = 2] = "FETCHED", i[i.FETCH_FAILED = 3] = "FETCH_FAILED";
            let o = new Map,
                d = new Map,
                c = [],
                _ = a.NOT_FETCHED,
                E = [];
            class f extends l.default.Store {
                getIntegrations(e) {
                    var t;
                    return null !== (t = o.get(e)) && void 0 !== t ? t : E
                }
                getIntegration(e, t) {
                    var n;
                    return null === (n = o.get(e)) || void 0 === n ? void 0 : n.find(e => e.application.id === t)
                }
                getAllIntegrations() {
                    return o
                }
                getIntegrationsFetchState(e) {
                    var t;
                    return null !== (t = d.get(e)) && void 0 !== t ? t : a.NOT_FETCHED
                }
                getApplicationsShelfFetchState() {
                    return _
                }
                getApplicationsShelf() {
                    return c
                }
            }

            function h(e) {
                return e.sort((e, t) => e.application.name.localeCompare(t.application.name))
            }
            f.displayName = "PrivateChannelIntegrationStore";
            let T = new f(s.default, {
                LOGOUT() {
                    o.clear()
                },
                CONNECTION_OPEN() {
                    o.clear(), d.clear()
                },
                CHANNEL_SELECT(e) {
                    let {
                        channelId: t
                    } = e;
                    if (null == t || d.get(t) !== a.FETCH_FAILED) return !1;
                    d.set(t, a.NOT_FETCHED)
                },
                APPLICATIONS_SHELF_FETCH_START() {
                    _ = a.FETCHING
                },
                APPLICATIONS_SHELF_FETCH_SUCCESS(e) {
                    let {
                        applications: t
                    } = e;
                    c = t.map(r.default.createFromServer).sort((e, t) => e.name.localeCompare(t.name)), _ = a.FETCHED
                },
                APPLICATIONS_SHELF_FETCH_FAIL() {
                    _ = a.FETCH_FAILED
                },
                FETCH_PRIVATE_CHANNEL_INTEGRATIONS_START(e) {
                    let {
                        channelId: t
                    } = e;
                    o.set(t, null), d.set(t, a.FETCHING)
                },
                FETCH_PRIVATE_CHANNEL_INTEGRATIONS_SUCCESS(e) {
                    let {
                        channelId: t,
                        integrations: n
                    } = e;
                    o.set(t, h(n.map(u.createPrivateChannelIntegration))), d.set(t, a.FETCHED)
                },
                FETCH_PRIVATE_CHANNEL_INTEGRATIONS_FAIL(e) {
                    let {
                        channelId: t
                    } = e;
                    d.set(t, a.FETCH_FAILED)
                },
                PRIVATE_CHANNEL_INTEGRATION_CREATE(e) {
                    let {
                        integration: t
                    } = e, n = o.get(t.channel_id);
                    if (null == n) return !1;
                    o.set(t.channel_id, h([...n, (0, u.createPrivateChannelIntegration)(t)]))
                },
                PRIVATE_CHANNEL_INTEGRATION_UPDATE(e) {
                    let {
                        integration: t
                    } = e, n = o.get(t.channel_id);
                    if (null == n) return !1;
                    let i = (0, u.createPrivateChannelIntegration)(t),
                        a = n.findIndex(e => e.application.id === i.application.id),
                        l = [...n]; - 1 === a ? l.push(i) : l[a] = i, o.set(i.channel_id, h(l))
                },
                PRIVATE_CHANNEL_INTEGRATION_DELETE(e) {
                    let {
                        channelId: t,
                        applicationId: n
                    } = e, i = o.get(t);
                    if (null == i) return !1;
                    o.set(t, i.filter(e => e.application.id !== n))
                },
                CHANNEL_DELETE(e) {
                    let {
                        channel: t
                    } = e;
                    return o.delete(t.id)
                }
            });
            var p = T
        },
        432173: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getReactionEmojiName: function() {
                    return h
                },
                getAccessibleEmojiDisplayName: function() {
                    return T
                },
                toReactionEmoji: function() {
                    return p
                },
                emojiEquals: function() {
                    return S
                },
                BurstRefillTierAmounts: function() {
                    return a
                },
                getBurstRefillAmount: function() {
                    return A
                },
                getBurstAnalyticsSection: function() {
                    return m
                },
                useNextReplenishmentMessage: function() {
                    return g
                },
                useTooltipReplenishmentMessage: function() {
                    return C
                },
                shouldApplyReaction: function() {
                    return N
                }
            });
            var i, a, l = n("866227"),
                s = n.n(l),
                r = n("65597");
            n("225664");
            var u = n("867805"),
                o = n("692171"),
                d = n("271938");
            n("697218");
            var c = n("764364"),
                _ = n("49111"),
                E = n("646718"),
                f = n("782340");

            function h(e) {
                return null == e.id ? u.default.convertSurrogateToName(e.name) : ":".concat(e.name, ":")
            }

            function T(e, t, n, i) {
                var a, l, s;
                let r;
                r = i ? e ? f.default.Messages.SUPER_REACT_REMOVE_WITH_COUNT_A11Y_LABEL : f.default.Messages.SUPER_REACT_WITH_COUNT_A11Y_LABEL : e ? f.default.Messages.REACT_REMOVE_WITH_COUNT_A11Y_LABEL : f.default.Messages.REACT_WITH_COUNT_A11Y_LABEL;
                let u = r.format({
                    reactions: t,
                    emojiName: null !== (s = null === (l = h(n)) || void 0 === l ? void 0 : null === (a = l.replace(/[:_]/g, " ")) || void 0 === a ? void 0 : a.trim()) && void 0 !== s ? s : ""
                });
                return u
            }

            function p(e) {
                var t, n, i;
                return {
                    id: null !== (t = e.id) && void 0 !== t ? t : null,
                    name: null !== (i = null !== (n = null != e.id ? e.name : e.optionallyDiverseSequence) && void 0 !== n ? n : e.name) && void 0 !== i ? i : "",
                    animated: !!e.animated
                }
            }

            function S(e, t) {
                return null != t.id ? t.id === e.id : null == e.id && t.name === e.name
            }

            function I() {
                let e = (0, r.default)([o.default], () => o.default.nextReplenishAt);
                return null == e ? 7 : Math.max(0, Math.ceil(s(e).diff(s().utc(), "days", !0)))
            }

            function A(e) {
                if (null == e || !(0, c.isPremium)(e)) return 0;
                switch (e.premiumType) {
                    case E.PremiumTypes.TIER_0:
                        return a.TIER_0;
                    case E.PremiumTypes.TIER_1:
                        return a.TIER_1;
                    case E.PremiumTypes.TIER_2:
                        return a.TIER_2;
                    default:
                        return 0
                }
            }

            function m(e) {
                if (e.isThread()) return _.AnalyticsSections.THREAD_TEXT_AREA;
                if (e.isForumPost()) return _.AnalyticsSections.FORUM_CHANNEL_TEXT_AREA;
                if (e.isGuildVocal()) return _.AnalyticsSections.TEXT_IN_VOICE;
                return _.AnalyticsSections.CHANNEL_TEXT_AREA
            }

            function g() {
                let e = I();
                return 0 === e ? f.default.Messages.SUPER_REACTIONS_OUT_OF_BURSTS_SIMPLE_SOON : f.default.Messages.SUPER_REACTIONS_OUT_OF_BURSTS_SIMPLE.format({
                    n: e
                })
            }

            function C() {
                let e = I();
                return 0 === e ? f.default.Messages.SUPER_REACTIONS_TAB_TOOLTIP_SOON : f.default.Messages.SUPER_REACTIONS_TAB_TOOLTIP.format({
                    n: e
                })
            }

            function N(e) {
                let {
                    userId: t,
                    optimistic: n
                } = e, i = d.default.getId() === t;
                return (!n || !!i) && !0
            }(i = a || (a = {}))[i.TIER_0 = 2] = "TIER_0", i[i.TIER_1 = 2] = "TIER_1", i[i.TIER_2 = 5] = "TIER_2"
        },
        133335: function(e, t, n) {
            "use strict";
            var i, a;
            n.r(t), n.d(t, {
                ReadStateTypes: function() {
                    return i
                }
            }), (a = i || (i = {}))[a.CHANNEL = 0] = "CHANNEL", a[a.GUILD_EVENT = 1] = "GUILD_EVENT", a[a.NOTIFICATION_CENTER = 2] = "NOTIFICATION_CENTER", a[a.GUILD_HOME = 3] = "GUILD_HOME", a[a.GUILD_ONBOARDING_QUESTION = 4] = "GUILD_ONBOARDING_QUESTION"
        },
        925880: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("714617"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("77173");
            let u = [r.default],
                o = [];

            function d() {
                let e = [];
                for (let t of u) {
                    let n = t.getActivity();
                    null != n && e.push(n)
                }
                return !a(e, o) && (o = e, !0)
            }
            class c extends l.default.Store {
                initialize() {
                    this.syncWith(u, d)
                }
                getActivities() {
                    return o
                }
            }
            c.displayName = "FirstPartyRichPresenceStore";
            var _ = new c(s.default)
        },
        144491: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                transitionToChannel: function() {
                    return d
                },
                transitionToThread: function() {
                    return c
                },
                transitionToThreadMessage: function() {
                    return _
                },
                transitionToMessage: function() {
                    return E
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("450911"),
                s = n("565298"),
                r = n("42203"),
                u = n("393414"),
                o = n("49111");

            function d(e, t, n) {
                let i = r.default.getChannel(e);
                if (null == i) return;
                let a = (0, s.getGuildIdForGenericRedirect)(i);
                l.default.preload(i.guild_id, i.id), (0, u.transitionTo)(o.Routes.CHANNEL(a, i.id), t, n)
            }

            function c(e, t) {
                a(null != e.parent_id, "Thread must have a parent ID.");
                let n = (0, s.getGuildIdForGenericRedirect)(e);
                (0, u.transitionTo)(o.Routes.CHANNEL(n, e.id), void 0, t)
            }

            function _(e, t, n) {
                a(null != e.parent_id, "Thread must have a parent ID.");
                let i = (0, s.getGuildIdForGenericRedirect)(e);
                (0, u.transitionTo)(o.Routes.CHANNEL(i, e.id, t), void 0, n)
            }

            function E(e, t, n, i) {
                let a = r.default.getChannel(e);
                if (null == a) return;
                let l = (0, s.getGuildIdForGenericRedirect)(a);
                (0, u.transitionTo)(o.Routes.CHANNEL(l, a.id, t), n, i)
            }
        },
        582713: function(e, t, n) {
            "use strict";
            var i, a, l, s, r, u;
            n.r(t), n.d(t, {
                SidebarType: function() {
                    return i
                },
                GuildSidebarType: function() {
                    return a
                },
                SidebarOpenDetailsType: function() {
                    return l
                }
            }), (s = i || (i = {}))[s.CREATE_THREAD = 0] = "CREATE_THREAD", s[s.VIEW_THREAD = 1] = "VIEW_THREAD", s[s.VIEW_CHANNEL = 2] = "VIEW_CHANNEL", s[s.VIEW_MESSAGE_REQUEST = 3] = "VIEW_MESSAGE_REQUEST", (r = a || (a = {}))[r.GUILD_MEMBER_MOD_VIEW = 4] = "GUILD_MEMBER_MOD_VIEW", (u = l || (l = {})).THREAD = "thread", u.MESSAGE_REQUEST = "message-request", u.HOME = "home", u.GUILD_MEMBER_MOD_VIEW = "guild-member-mod-view"
        },
        613691: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                SpotifyAPI: function() {
                    return _
                },
                getAccessToken: function() {
                    return E
                },
                subscribePlayerStateNotifications: function() {
                    return function e(t, n, i) {
                        let l = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 2;
                        return _.put(t, n, {
                            url: o.SpotifyEndpoints.NOTIFICATIONS_PLAYER,
                            query: {
                                connection_id: i
                            }
                        }).catch(s => l <= 0 ? Promise.reject(s) : (0, a.timeoutPromise)(5e3).then(() => e(t, n, i, l - 1)))
                    }
                },
                getProfile: function() {
                    return f
                },
                getDevices: function() {
                    return h
                },
                play: function() {
                    return T
                },
                pause: function() {
                    return p
                },
                fetchIsSpotifyProtocolRegistered: function() {
                    return S
                },
                setActiveDevice: function() {
                    return I
                }
            });
            var i = n("872717"),
                a = n("862337"),
                l = n("913144"),
                s = n("269180"),
                r = n("773336"),
                u = n("155815"),
                o = n("450484"),
                d = n("49111");

            function c(e, t, n, i) {
                let l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;
                return e(i = {
                    ...i,
                    headers: {
                        authorization: "Bearer ".concat(n)
                    }
                }).then(e => 202 === e.status ? Promise.reject(e) : e).catch(n => {
                    let s = !0 !== i.onlyRetryOnAuthorizationErrors && 202 === n.status;
                    return (401 === n.status || s) && l > 0 ? (202 === n.status ? (0, a.timeoutPromise)(5e3) : Promise.resolve()).then(() => E(t)).then(n => {
                        let {
                            body: {
                                access_token: a
                            }
                        } = n;
                        return c(e, t, a, i, l - 1)
                    }).then(e => new Promise(t => setImmediate(() => t(e)))) : Promise.reject(n)
                })
            }
            let _ = {
                get: c.bind(null, i.default.get),
                put: c.bind(null, i.default.put)
            };

            function E(e) {
                return i.default.get({
                    url: d.Endpoints.CONNECTION_ACCESS_TOKEN(d.PlatformTypes.SPOTIFY, e),
                    oldFormErrors: !0
                }).catch(t => {
                    if (401 === t.status) l.default.dispatch({
                        type: "SPOTIFY_ACCOUNT_ACCESS_TOKEN_REVOKE",
                        accountId: e
                    });
                    else if (429 === t.status) {
                        let n = 1e3 * t.headers["retry-after"],
                            i = isNaN(n) || 0 === n ? 5e3 : n;
                        return (0, a.timeoutPromise)(i).then(() => E(e))
                    }
                    return Promise.reject(t)
                }).then(t => {
                    let {
                        access_token: n
                    } = t.body;
                    return l.default.dispatch({
                        type: "SPOTIFY_ACCOUNT_ACCESS_TOKEN",
                        accountId: e,
                        accessToken: n
                    }), t
                })
            }

            function f(e, t) {
                return _.get(e, t, {
                    url: o.SpotifyEndpoints.PROFILE
                }).then(t => (l.default.dispatch({
                    type: "SPOTIFY_PROFILE_UPDATE",
                    accountId: e,
                    isPremium: "premium" === t.body.product
                }), t))
            }

            function h(e, t) {
                return _.get(e, t, {
                    url: o.SpotifyEndpoints.PLAYER_DEVICES
                }).then(t => (t.body && l.default.dispatch({
                    type: "SPOTIFY_SET_DEVICES",
                    accountId: e,
                    devices: t.body.devices
                }), t))
            }

            function T(e, t, n) {
                let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
                    a = o.SpotifyEndpoints.PLAYER_OPEN(o.SpotifyResourceTypes.TRACK, n, !1),
                    {
                        deviceId: s,
                        position: r,
                        contextUri: u,
                        repeat: d
                    } = i;
                return _.put(e, t, {
                    url: o.SpotifyEndpoints.PLAYER_PLAY,
                    query: {
                        device_id: s
                    },
                    body: {
                        context_uri: null != u ? u : void 0,
                        uris: null == u ? [a] : void 0,
                        offset: null != u ? {
                            uri: a
                        } : void 0,
                        position_ms: null != r ? r : 0
                    }
                }).then(n => null == d ? n : _.put(e, t, {
                    url: o.SpotifyEndpoints.PLAYER_REPEAT,
                    query: {
                        device_id: s,
                        state: d ? "context" : "off"
                    }
                })).then(e => (l.default.dispatch({
                    type: "SPOTIFY_PLAYER_PLAY",
                    id: n,
                    position: null != r ? r : 0
                }), e))
            }

            function p(e, t) {
                return _.put(e, t, {
                    url: o.SpotifyEndpoints.PLAYER_PAUSE
                }).then(e => (l.default.dispatch({
                    type: "SPOTIFY_PLAYER_PAUSE"
                }), e))
            }

            function S() {
                !u.default.isProtocolRegistered() && (0, r.isDesktop)() && s.default.isProtocolRegistered(o.SPOTIFY_APP_PROTOCOL).then(e => {
                    l.default.dispatch({
                        type: "SPOTIFY_SET_PROTOCOL_REGISTERED",
                        isRegistered: e
                    })
                })
            }

            function I(e, t) {
                l.default.dispatch({
                    type: "SPOTIFY_SET_ACTIVE_DEVICE",
                    accountId: e,
                    deviceId: t
                })
            }
        },
        450484: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                SPOTIFY_APP_PROTOCOL: function() {
                    return d
                },
                SPOTIFY_PARTY_PREFIX: function() {
                    return c
                },
                SPOTIFY_PLATFORM_NAME: function() {
                    return _
                },
                isSpotifyParty: function() {
                    return E
                },
                SpotifyResourceTypes: function() {
                    return l
                },
                SpotifyActionTypes: function() {
                    return s
                },
                SPOTIFY_HOSTNAMES: function() {
                    return f
                },
                SpotifyEndpoints: function() {
                    return p
                }
            });
            var i, a, l, s, r = n("376556"),
                u = n("773336"),
                o = n("49111");
            let d = "spotify",
                c = "spotify:",
                _ = r.default.get(o.PlatformTypes.SPOTIFY).name;

            function E(e) {
                return null != e && e.startsWith(c)
            }(i = l || (l = {})).TRACK = "track", i.ARTIST = "artist", i.ALBUM = "album", i.PLAYLIST = "playlist", (a = s || (s = {})).USER_ACTIVITY_PLAY = "user_activity_play", a.USER_ACTIVITY_SYNC = "user_activity_sync", a.EMBED_SYNC = "embed_sync";
            let f = ["open.spotify.com", "www.spotify.com"],
                h = "https://api.spotify.com/v1",
                T = e => "?utm_source=discord&utm_medium=".concat(e),
                p = Object.freeze({
                    PROFILE: "".concat(h, "/me"),
                    NOTIFICATIONS_PLAYER: "".concat(h, "/me/notifications/player"),
                    PLAYER: "".concat(h, "/me/player"),
                    PLAYER_DEVICES: "".concat(h, "/me/player/devices"),
                    PLAYER_PLAY: "".concat(h, "/me/player/play"),
                    PLAYER_PAUSE: "".concat(h, "/me/player/pause"),
                    PLAYER_REPEAT: "".concat(h, "/me/player/repeat"),
                    WEB_OPEN: function(e, t) {
                        let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "desktop";
                        return "https://open.spotify.com/".concat(encodeURIComponent(e), "/").concat(encodeURIComponent(t)).concat(T(n))
                    },
                    EMBED: function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "desktop";
                        return "https://open.spotify.com/embed".concat(e).concat(T(t))
                    },
                    PLAYER_OPEN: function(e, t) {
                        let n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2],
                            i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "desktop";
                        return "".concat(d, ":").concat(encodeURIComponent(e), ":").concat(encodeURIComponent(t)).concat(n ? T(i) : "")
                    },
                    PREMIUM_SITE: "https://www.spotify.com/premium/".concat(T("desktop")),
                    INSTALL_ATTRIBUTION: e => "https://app.adjust.com/bdyga9?campaign=".concat(e),
                    APP_STORE: (0, u.isAndroid)() ? "https://play.google.com/store/apps/details?id=com.spotify.music&hl=en_US&gl=US" : "https://itunes.apple.com/us/app/spotify-music/id324684580?mt=8",
                    IOS_APP_STORE: "https://itunes.apple.com/us/app/spotify-music/id324684580?mt=8"
                })
        },
        155815: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return r
                }
            });
            var i = n("446674"),
                a = n("913144");
            let l = !1;
            class s extends i.default.Store {
                isProtocolRegistered() {
                    return l
                }
            }
            s.displayName = "SpotifyProtocolStore";
            var r = new s(a.default, {
                SPOTIFY_SET_PROTOCOL_REGISTERED: function(e) {
                    let {
                        isRegistered: t
                    } = e;
                    l = t
                }
            })
        },
        662285: function(e, t, n) {
            "use strict";
            let i, a, l;
            n.r(t), n.d(t, {
                default: function() {
                    return eo
                }
            });
            var s, r, u = n("917351"),
                o = n.n(u),
                d = n("981980"),
                c = n("446674"),
                _ = n("233736"),
                E = n("862337"),
                f = n("913144"),
                h = n("899633"),
                T = n("376556"),
                p = n("823704"),
                S = n("605250"),
                I = n("271938"),
                A = n("47319"),
                m = n("603699"),
                g = n("824563"),
                C = n("568307"),
                N = n("280168"),
                O = n("800762"),
                R = n("599110"),
                v = n("550368"),
                M = n("613691"),
                y = n("450484"),
                D = n("49111");
            let L = T.default.get(D.PlatformTypes.SPOTIFY),
                U = "hm://pusher/v1/connections/";
            (s = r || (r = {})).PLAYER_STATE_CHANGED = "PLAYER_STATE_CHANGED", s.DEVICE_STATE_CHANGED = "DEVICE_STATE_CHANGED";
            let P = {
                    MESSAGE: "message",
                    PING: "ping",
                    PONG: "pong"
                },
                b = {
                    SINGLE: "single"
                },
                G = new S.default("Spotify"),
                k = new E.Timeout,
                F = new E.Timeout,
                w = new E.Timeout,
                H = new E.Timeout,
                V = new E.Timeout,
                B = {},
                x = {},
                Y = {},
                K = !1,
                j = null;

            function z() {
                for (let e in B) {
                    let t = B[e];
                    if (!t.connected || null == x[e]) continue;
                    let n = x[e].find(e => e.is_active);
                    if (null != n) return {
                        socket: t,
                        device: n
                    }
                }
            }

            function W(e) {
                f.default.dispatch({
                    type: "SPOTIFY_PLAYER_STATE",
                    accountId: e,
                    track: null,
                    volumePercent: 0,
                    isPlaying: !1,
                    repeat: !1,
                    position: 0,
                    context: null
                })
            }

            function q(e) {
                return g.default.findActivity(e, e => null != e.party && null != e.party.id && (0, y.isSpotifyParty)(e.party.id))
            }
            let Q = new Set([WebSocket.CONNECTING, WebSocket.OPEN]);
            class X {
                get connected() {
                    return null != this.socket && Q.has(this.socket.readyState)
                }
                connect() {
                    !this.connected && !this._requestedConnect && (G.info("WS Connecting"), this._requestedDisconnect = !1, this._requestedConnect = !0, es(this.accountId, this.accessToken).then(() => {
                        this._requestedConnect = !1, this.socket = new WebSocket("".concat("wss://dealer.spotify.com/?access_token=").concat(this.accessToken)), this.socket.onopen = this.handleOpen.bind(this), this.socket.onmessage = this.handleMessage.bind(this), this.socket.onclose = this.socket.onerror = this.handleClose.bind(this)
                    }).catch(e => {
                        G.error(e), this._requestedConnect = !1, this.handleClose()
                    }))
                }
                disconnect() {
                    this._requestedDisconnect = !0, this.backoff.cancel();
                    try {
                        var e;
                        null === (e = this.socket) || void 0 === e || e.close()
                    } catch (e) {}
                }
                ping() {
                    var e;
                    this.connected && (null === (e = this.socket) || void 0 === e || e.send(JSON.stringify({
                        type: P.PING
                    })))
                }
                handleOpen() {
                    G.info("WS Connected"), this.backoff.succeed(), this.pingInterval.start(3e4, () => this.ping()), (0, M.getProfile)(this.accountId, this.accessToken), (0, M.getDevices)(this.accountId, this.accessToken)
                }
                handleMessage(e) {
                    let {
                        data: t
                    } = e;
                    if ("string" != typeof t) return;
                    let {
                        type: n,
                        uri: i,
                        payloads: a
                    } = JSON.parse(t);
                    switch (n) {
                        case P.MESSAGE:
                            if ("string" == typeof i && i.startsWith(U)) this.connectionId = decodeURIComponent(i.split(U)[1]), (0, M.subscribePlayerStateNotifications)(this.accountId, this.accessToken, this.connectionId);
                            else if (Array.isArray(a)) {
                                for (let {
                                        events: e
                                    }
                                    of a)
                                    if (null != e)
                                        for (let t of e) this.handleEvent(t)
                            }
                        case P.PONG:
                    }
                }
                handleClose() {
                    if (this.pingInterval.stop(), !this._requestedDisconnect) try {
                        let e = this.backoff.fail(() => {
                            !this._requestedDisconnect && this.connect()
                        });
                        G.info("WS Disconnected. Next retry in ".concat(Math.round(e), "ms"))
                    } catch (e) {}
                }
                handleEvent(e) {
                    let {
                        type: t,
                        event: n
                    } = e;
                    switch (t) {
                        case r.PLAYER_STATE_CHANGED:
                            null != n && null != n.state && el(this.accountId, this.accessToken, n.state);
                            break;
                        case r.DEVICE_STATE_CHANGED:
                            this.handleDeviceStateChange()
                    }
                }
                constructor(e, t) {
                    this._requestedDisconnect = !1, this._requestedConnect = !1, this.handleDeviceStateChange = o.throttle(() => {
                        (0, M.getDevices)(this.accountId, this.accessToken), es(this.accountId, this.accessToken)
                    }, 3e3), this.accountId = e, this.accessToken = t, this.pingInterval = new E.Interval, this.backoff = new d.default(void 0, 6e4), this.connect()
                }
            }

            function Z(e, t) {
                e in B ? (B[e].accessToken = t, G.info("Updated account access token: ".concat(e))) : (B[e] = new X(e, t), G.info("Added account: ".concat(e)))
            }

            function J(e) {
                if (!(e in B)) return;
                B[e].disconnect(), delete B[e];
                let t = Y[e];
                null != t && null != i && t.track.id === i.track.id && (i = null), delete Y[e], G.info("Removed account: ".concat(e))
            }

            function $(e, t) {
                for (let n of x[e]) n.is_active = n.id === t
            }

            function ee(e, t, n) {
                let i = z();
                if (null == i) return !1;
                let {
                    socket: l,
                    device: s
                } = i, {
                    sync_id: r,
                    party: u,
                    timestamps: o
                } = t;
                if (null == r || null == u || null == u.id || !(0, y.isSpotifyParty)(u.id)) return !1;
                let d = null != o && null != o.start ? o.start : Date.now(),
                    c = Math.max(0, Date.now() - d),
                    _ = !1,
                    E = Y[l.accountId];
                null != E && !1 === E.repeat && (_ = null), (0, M.play)(l.accountId, l.accessToken, r, {
                    position: +c,
                    deviceId: s.id,
                    repeat: _
                }), a = {
                    userId: e,
                    partyId: u.id,
                    trackId: r,
                    startTime: d
                };
                let f = "presence change";
                n && (f = "started", R.default.track(D.AnalyticEvents.SPOTIFY_LISTEN_ALONG_STARTED, {
                    party_id: u.id,
                    other_user_id: e
                })), G.info("Listen along ".concat(f, ": ").concat(l.accountId, " to ").concat(e, " playing ").concat(r, " on ").concat(s.name))
            }

            function et() {
                R.default.track(D.AnalyticEvents.SPOTIFY_LISTEN_ALONG_ENDED, {
                    party_id: null != a ? a.partyId : null,
                    other_user_id: null != a ? a.userId : null
                });
                let e = null != a ? a.trackId : null;
                a = null, G.info("Listen along stopped");
                let t = z();
                if (null == t) return;
                let {
                    socket: n
                } = t, i = Y[n.accountId];
                null != i && i.track.id === e && (0, M.pause)(n.accountId, n.accessToken)
            }

            function en() {
                let e = Object.keys(B),
                    t = A.default.getAccounts().filter(e => {
                        let {
                            type: t
                        } = e;
                        return t === D.PlatformTypes.SPOTIFY
                    });
                if (null == t) return !1;
                let n = t.map(e => {
                    let {
                        id: t
                    } = e;
                    return t
                });
                for (let t of e) !n.includes(t) && J(t);
                let a = !1;
                for (let n of t)
                    if (null != i && i.account.id === n.id && (i.account = n, a = !0), !e.includes(n.id)) {
                        if (null != n.accessToken) {
                            Z(n.id, n.accessToken);
                            continue
                        }(0, M.getAccessToken)(n.id)
                    } return a
            }

            function ei() {
                if (null == i) return;
                let e = z();
                if (null == e) return;
                let {
                    socket: t
                } = e;
                K = !0, (0, M.pause)(t.accountId, t.accessToken), R.default.track(D.AnalyticEvents.SPOTIFY_AUTO_PAUSED), G.info("Playback auto paused")
            }

            function ea(e) {
                if (e === I.default.getId()) {
                    let t = O.default.isCurrentClientInVoiceChannel(),
                        n = (0, h.getIsSpeaking)({
                            userId: e,
                            checkSoundSharing: !0,
                            checkSoundboardSounds: !1
                        });
                    t && n && null != i ? (k.start(3e4, ei, !1), F.stop()) : F.start(100, () => k.stop(), !1)
                }
                return !1
            }

            function el(e, t, n) {
                let i, a, {
                    device: l,
                    progress_ms: s,
                    is_playing: r,
                    repeat_state: u,
                    item: o,
                    context: d
                } = n;
                if (null != o && o.type === y.SpotifyResourceTypes.TRACK) {
                    let e = o.id;
                    null != o.linked_from && null != o.linked_from.id && (e = o.linked_from.id), i = {
                        id: e,
                        name: o.name,
                        duration: o.duration_ms,
                        album: {
                            id: o.album.id,
                            name: o.album.name,
                            image: o.album.images[0]
                        },
                        artists: o.artists,
                        isLocal: o.is_local || !1
                    }
                }
                if (null != l && !0 !== l.is_active && (l = {
                        ...l,
                        is_active: !0
                    }), null != d && [y.SpotifyResourceTypes.PLAYLIST, y.SpotifyResourceTypes.ALBUM].includes(d.type)) {
                    let n = eu.getPlayerState(e);
                    a = null != n && null != n.context && n.context.uri === d.uri ? Promise.resolve(n.context) : d.type === y.SpotifyResourceTypes.ALBUM ? Promise.resolve(d) : M.SpotifyAPI.get(e, t, {
                        url: d.href
                    }).then(e => {
                        let {
                            body: t
                        } = e;
                        return t
                    }).catch(e => {
                        if (e && 404 === e.status) return null;
                        throw e
                    })
                } else a = Promise.resolve(void 0);
                return a.then(t => {
                    null != t && t.type === y.SpotifyResourceTypes.PLAYLIST && !t.public && (t = null), f.default.dispatch({
                        type: "SPOTIFY_PLAYER_STATE",
                        accountId: e,
                        track: i,
                        volumePercent: null != l ? l.volume_percent : 0,
                        isPlaying: r,
                        repeat: "off" !== u,
                        position: s,
                        context: t,
                        device: l
                    })
                })
            }

            function es(e, t) {
                return M.SpotifyAPI.get(e, t, {
                    url: y.SpotifyEndpoints.PLAYER,
                    onlyRetryOnAuthorizationErrors: !0
                }).then(n => {
                    let i = n.body;
                    null != i ? el(e, t, i).then(() => n) : W(e)
                }).catch(() => W(e))
            }
            class er extends c.default.Store {
                initialize() {
                    this.waitFor(A.default, N.default), this.syncWith([g.default], () => (function() {
                        if (null == a) return !1;
                        let e = z();
                        if (null == e) return !1;
                        let {
                            userId: t
                        } = a, n = q(t);
                        if (null == n) return w.start(3e5, () => {
                            null != a && a.userId === t && (0, p.default)()
                        }), !1;
                        w.stop();
                        let {
                            sync_id: i,
                            timestamps: l,
                            party: s
                        } = n, r = null != i && a.trackId !== i, u = null != l && a.startTime !== l.start;
                        return r || u ? ee(t, n, !1) : null != s && s.id !== a.partyId && (a.partyId = s.id, !0)
                    })()), (0, M.fetchIsSpotifyProtocolRegistered)()
                }
                hasConnectedAccount() {
                    return Object.keys(B).length > 0
                }
                getActiveSocketAndDevice() {
                    return z()
                }
                getPlayableComputerDevices() {
                    let e = [];
                    for (let t in B) {
                        let n = B[t];
                        if (!n.connected || null == x[t]) continue;
                        let i = x[t].find(e => !e.is_restricted && "Computer" === e.type);
                        null != i && e.push({
                            socket: n,
                            device: i
                        })
                    }
                    return e
                }
                canPlay(e) {
                    let {
                        sync_id: t,
                        party: n
                    } = e;
                    return null != z() && null != t && null != n && null != n.id && (0, y.isSpotifyParty)(n.id)
                }
                getSyncingWith() {
                    return a
                }
                wasAutoPaused() {
                    return K
                }
                getLastPlayedTrackId() {
                    return l
                }
                getTrack() {
                    return null != i ? i.track : null
                }
                getPlayerState(e) {
                    return Y[e]
                }
                shouldShowActivity() {
                    return null != i && i.account.showActivity && !m.default.isIdle()
                }
                getActivity() {
                    let e, t, n;
                    if (null == i) return null != a ? q(a.userId) : null;
                    let {
                        track: {
                            artists: l,
                            album: s,
                            name: r,
                            id: u,
                            duration: o,
                            isLocal: d
                        },
                        startTime: c,
                        context: _
                    } = i, E = l.slice(0, 5);
                    l.length > 0 && (e = E.map(e => {
                        let {
                            name: t
                        } = e;
                        return t.replace(/;/g, "")
                    }).join("; "));
                    let f = {},
                        h = null != s.image ? (0, v.getAssetFromImageURL)(D.PlatformTypes.SPOTIFY, s.image.url) : null;
                    null != s.image && null != h && (f.large_image = h), "single" !== s.type && (f.large_text = s.name), null != _ && (t = _.uri), n = null != a && null != a.partyId ? a.partyId : "".concat(y.SPOTIFY_PARTY_PREFIX).concat(I.default.getId());
                    let T = r.length > 128 ? r.substring(0, 125) + "..." : r,
                        p = {
                            name: L.name,
                            assets: f,
                            details: T,
                            state: e,
                            timestamps: {
                                start: c,
                                end: c + o
                            },
                            party: {
                                id: n
                            }
                        };
                    return !d && (p.sync_id = u, p.flags = D.ActivityFlags.PLAY | D.ActivityFlags.SYNC, p.metadata = {
                        context_uri: t,
                        album_id: s.id,
                        artist_ids: E.map(e => {
                            let {
                                id: t
                            } = e;
                            return t
                        })
                    }), p
                }
            }
            er.displayName = "SpotifyStore";
            let eu = new er(f.default, {
                USER_CONNECTIONS_UPDATE: en,
                CONNECTION_OPEN: en,
                SPOTIFY_ACCOUNT_ACCESS_TOKEN: function(e) {
                    let {
                        accountId: t,
                        accessToken: n
                    } = e;
                    return Z(t, n), !1
                },
                SPOTIFY_ACCOUNT_ACCESS_TOKEN_REVOKE: function(e) {
                    let {
                        accountId: t
                    } = e;
                    J(t)
                },
                SPOTIFY_PROFILE_UPDATE: function(e) {
                    let {
                        accountId: t,
                        isPremium: n
                    } = e, i = B[t];
                    if (null == i) return !1;
                    i.isPremium = n, G.info("Profile updated for ".concat(t, ": isPremium = ").concat(n))
                },
                SPOTIFY_PLAYER_STATE: function(e) {
                    var t, n;
                    let {
                        accountId: l,
                        isPlaying: s,
                        repeat: r,
                        track: u,
                        position: d,
                        device: c,
                        context: E
                    } = e, f = !1;
                    if (null != c) {
                        if (null != x[l]) {
                            let e = x[l].find(e => {
                                let {
                                    id: t
                                } = e;
                                return t === c.id
                            });
                            null == e ? (x[l].push(c), f = !0) : !(0, _.default)(e, c) && (Object.assign(e, c), f = !0), $(l, c.id)
                        } else x[l] = [c], f = !0
                    }
                    s ? null === (n = j) || void 0 === n || n.start(3e4, ei) : (u = null, null === (t = j) || void 0 === t || t.stop());
                    let h = A.default.getAccount(l, D.PlatformTypes.SPOTIFY);
                    if (null == h) return f;
                    let T = Y[l],
                        S = null != u ? {
                            account: h,
                            track: u,
                            startTime: function(e, t) {
                                let n = Date.now(),
                                    i = null != e ? e.startTime : 0,
                                    a = n - t;
                                return Math.abs(a - i) > 1500 ? a : i
                            }(T, d),
                            context: E,
                            repeat: r
                        } : null,
                        m = null != c && null != a && 0 === d && !s;
                    !m && (Y[l] = S);
                    let g = i;
                    if (i = o.values(Y).find(e => null != e), ea(I.default.getId()), null == u || m ? H.stop() : H.start(u.duration - d + 5e3, () => W(h.id)), null != a && (!s && d > 0 || null == c || null != S && a.trackId !== S.track.id) ? (G.info("Listen along active but playback stopped or track changed. Stopping listen along in ".concat(5e3, "ms")), V.start(5e3, () => {
                            G.info("Stopping listening along"), (0, p.default)(), W(h.id)
                        })) : V.isStarted() && (G.info("Listen along stop cancelled as playback of track resumed"), V.stop()), g === i || null == T && null == S || null != T && null != S && T.track.id === S.track.id && T.startTime === S.startTime) return f;
                    null != u && R.default.track(D.AnalyticEvents.ACTIVITY_UPDATED, {
                        party_platform: D.PlatformTypes.SPOTIFY,
                        track_id: u.id,
                        has_images: !0
                    })
                },
                SPOTIFY_PLAYER_PLAY: function(e) {
                    let {
                        id: t
                    } = e;
                    l = t
                },
                ACTIVITY_PLAY: function(e) {
                    let t, {
                            activity: n,
                            metadata: i
                        } = e,
                        l = z();
                    if (null == l) return !1;
                    let {
                        socket: s,
                        device: r
                    } = l, {
                        sync_id: u,
                        party: o
                    } = n;
                    if (null == u || null == o || null == o.id || !(0, y.isSpotifyParty)(o.id)) return !1;
                    null != i && (t = i.context_uri), null != a && et(), (0, M.play)(s.accountId, s.accessToken, u, {
                        contextUri: t,
                        deviceId: r.id
                    }), G.info("Play started: ".concat(s.accountId, " playing ").concat(u, " on ").concat(r.name))
                },
                ACTIVITY_SYNC: function(e) {
                    let {
                        activity: t,
                        userId: n
                    } = e;
                    return ee(n, t, !0)
                },
                ACTIVITY_SYNC_STOP: et,
                SPOTIFY_SET_DEVICES: function(e) {
                    let {
                        accountId: t,
                        devices: n
                    } = e;
                    x[t] = n, G.info("Devices updated for ".concat(t, ":"), n)
                },
                SPOTIFY_SET_ACTIVE_DEVICE: function(e) {
                    let {
                        accountId: t,
                        deviceId: n
                    } = e;
                    $(t, n)
                },
                SPEAKING: function(e) {
                    let {
                        userId: t
                    } = e;
                    return ea(t)
                },
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t
                    } = e;
                    return t.reduce((e, t) => {
                        let {
                            userId: n
                        } = t;
                        return ea(n) || e
                    }, !1)
                },
                MEDIA_ENGINE_SET_GO_LIVE_SOURCE: function(e) {
                    var t;
                    let {
                        settings: n
                    } = e;
                    if ((null == n ? void 0 : n.desktopSettings) != null) {
                        null === (t = j) || void 0 === t || t.stop();
                        let {
                            sourceId: e,
                            sound: i
                        } = null == n ? void 0 : n.desktopSettings, a = null != e && C.default.getObservedAppNameForWindow(e) === L.name;
                        a && i ? (j = new E.Interval).start(3e4, ei) : j = null
                    }
                }
            });
            var eo = eu
        },
        751661: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                openStageChannelSettings: function() {
                    return E
                },
                openEndGuildEventConfirmationModal: function() {
                    return f
                },
                openStageChannelAudienceNoticeModal: function() {
                    return h
                },
                openStageBlockedUsersSheet: function() {
                    return T
                },
                openEndStageModal: function() {
                    return p
                },
                shouldShowBlockedUsers: function() {
                    return S
                },
                navigateToStage: function() {
                    return I
                },
                showChannelChangeConfirmationAlert: function() {
                    return A
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("551042"),
                l = n("144491"),
                s = n("271938"),
                r = n("325861"),
                u = n("834052"),
                o = n("534471"),
                d = n("151642"),
                c = n("49111"),
                _ = n("625611");

            function E(e, t) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await n.el("435768").then(n.bind(n, "435768"));
                    return n => (0, i.jsx)(t, {
                        ...n,
                        channel: e
                    })
                }, {
                    contextKey: t === c.AppContext.POPOUT ? _.POPOUT_MODAL_CONTEXT : _.DEFAULT_MODAL_CONTEXT
                })
            }

            function f(e, t) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await n.el("312953").then(n.bind(n, "312953"));
                    return n => (0, i.jsx)(t, {
                        ...n,
                        channel: e
                    })
                }, {
                    contextKey: t === c.AppContext.POPOUT ? _.POPOUT_MODAL_CONTEXT : _.DEFAULT_MODAL_CONTEXT
                })
            }

            function h(e) {}

            function T(e, t) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: a
                    } = await n.el("203966").then(n.bind(n, "203966"));
                    return n => (0, i.jsx)(a, {
                        ...n,
                        channel: e,
                        onAccept: t
                    })
                })
            }

            function p(e, t) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await n.el("281645").then(n.bind(n, "281645"));
                    return n => (0, i.jsx)(t, {
                        ...n,
                        channel: e
                    })
                }, {
                    contextKey: t === c.AppContext.POPOUT ? _.POPOUT_MODAL_CONTEXT : _.DEFAULT_MODAL_CONTEXT
                })
            }

            function S(e) {
                let t = s.default.getId(),
                    n = (0, d.getStageBlockedUsersCount)(e),
                    i = r.default.isModerator(t, e);
                return !i && n > 0
            }

            function I(e, t) {
                var d;
                let c = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
                t !== e.id && (0, o.setIsOnStartStageScreen)(!0), d = e, (0, l.transitionToChannel)(d.id), t !== e.id && c && ! function(e) {
                    let t = s.default.getId(),
                        l = r.default.isModerator(t, e.id),
                        o = u.default.isLive(e.id);
                    l && !o ? E(e) : l && o && function(e) {
                        (0, a.openModalLazy)(async () => {
                            let {
                                default: t
                            } = await n.el("337649").then(n.bind(n, "337649"));
                            return n => (0, i.jsx)(t, {
                                ...n,
                                channel: e
                            })
                        })
                    }(e)
                }(e)
            }

            function A(e, t) {
                return (0, a.openModalLazy)(async () => {
                    let {
                        default: a
                    } = await n.el("371895").then(n.bind(n, "371895"));
                    return n => (0, i.jsx)(a, {
                        channel: e,
                        onConfirm: t,
                        ...n
                    })
                }), !0
            }
        },
        569182: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                openStageChannelAudienceNoticeModal: function() {
                    return a
                }
            });
            var i = n("751661");

            function a(e) {
                i.openStageChannelAudienceNoticeModal(e)
            }
        },
        716214: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                connectOrLurkStage: function() {
                    return p
                },
                connectToStage: function() {
                    return S
                },
                connectAndOpen: function() {
                    return I
                },
                navigateToStage: function() {
                    return A
                }
            });
            var i = n("851387"),
                a = n("987317"),
                l = n("990766"),
                s = n("792367"),
                r = n("248967"),
                u = n("373469"),
                o = n("42203"),
                d = n("305961"),
                c = n("957255"),
                _ = n("18494"),
                E = n("751661"),
                f = n("27822"),
                h = n("923510"),
                T = n("30577");

            function p(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                return new Promise(async a => {
                    let l = o.default.getChannel(t);
                    if (null != l) return S(l, n), a(l);
                    await (0, r.stopLurkingAll)([e]), await i.default.joinGuild(e, {
                        lurker: !0
                    }), d.default.addConditionalChangeListener(() => {
                        let e = o.default.getChannel(t);
                        return null == e || (S(e), T.default.initialize(), a(e), !1)
                    })
                })
            }

            function S(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    n = _.default.getVoiceChannelId();
                if (!t && ! function(e, t) {
                        let n = c.default.can(h.JOIN_VOCAL_CHANNEL_PERMISSIONS, e);
                        return !!n && (!E.shouldShowBlockedUsers(e.id) || t === e.id || (E.openStageBlockedUsersSheet(e, () => I(e, !0)), !1))
                    }(e, n)) return !1;
                if (f.default.initialize(), a.default.selectVoiceChannel(e.id), (n = _.default.getVoiceChannelId()) !== e.id) return !1;
                let i = u.default.getAllApplicationStreamsForChannel(e.id);
                return i.length > 0 && (0, l.watchStream)(i[0], {
                    noFocus: !1
                }), !0
            }

            function I(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                    i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
                    a = _.default.getVoiceChannelId();
                if (!i && a !== e.id && (0, s.shouldShowVoiceChannelChangeConfirmation)(e) && E.showChannelChangeConfirmationAlert(e, () => I(e, t, n, !0))) return;
                let l = S(e, t);
                l && A(e, a, n)
            }

            function A(e, t) {
                let n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
                E.navigateToStage(e, t, n)
            }
        },
        27822: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("95410"),
                a = n("913144"),
                l = n("316272"),
                s = n("271938"),
                r = n("18494"),
                u = n("569182"),
                o = n("325861"),
                d = n("837979");
            class c extends l.default {
                _initialize() {
                    a.default.subscribe("VOICE_STATE_UPDATES", this.handleVoiceStateUpdates)
                }
                _terminate() {
                    a.default.unsubscribe("VOICE_STATE_UPDATES", this.handleVoiceStateUpdates)
                }
                constructor(...e) {
                    super(...e), this.handleVoiceStateUpdates = e => {
                        let {
                            voiceStates: t
                        } = e;
                        t.forEach(e => {
                            if (null == e.channelId || e.userId !== s.default.getId()) return;
                            if (this.terminate(), i.default.get(d.STAGE_AUDIENCE_NOTICE_SHOWN_STORAGE_KEY, !1)) return;
                            let t = r.default.getVoiceChannelId();
                            if (null != t) e.channelId === t && o.default.isAudienceMember(e.userId, t) && (i.default.set(d.STAGE_AUDIENCE_NOTICE_SHOWN_STORAGE_KEY, !0), u.openStageChannelAudienceNoticeModal(t))
                        })
                    }
                }
            }
            var _ = new c
        },
        488464: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return K
                }
            });
            var i = n("714617"),
                a = n.n(i),
                l = n("917351"),
                s = n.n(l),
                r = n("446674"),
                u = n("407846"),
                o = n("913144"),
                d = n("374014"),
                c = n("373469"),
                _ = n("271938"),
                E = n("42203"),
                f = n("305961"),
                h = n("957255"),
                T = n("27618"),
                p = n("280168"),
                S = n("697218"),
                I = n("800762"),
                A = n("316133"),
                m = n("998716"),
                g = n("325861"),
                C = n("834052");
            let N = "NO_GUILD",
                O = new u.default(e => [function(e) {
                    var t;
                    return null !== (t = e.getGuildId()) && void 0 !== t ? t : N
                }(e)], e => e.id),
                R = new Set,
                v = {};

            function M(e) {
                return O.values(null != e ? e : void 0, !0).map(e => {
                    let {
                        id: t
                    } = e;
                    return t
                })
            }

            function y(e) {
                !R.has(e) && (R.add(e), s(E.default.getMutableGuildChannelsForGuild(e)).values().forEach(e => {
                    U(e) && O.set(e.id, e)
                }))
            }

            function D(e) {
                let t = v[e];
                if (null != t) return t;
                let n = E.default.getChannel(e);
                return null != n && n.isGuildStageVoice() ? (y(n.guild_id), U(n)) ? L(e) : null : null
            }

            function L(e) {
                let t = v[e];
                return null == t && (t = new m.default(e), v[e] = t, t.rebuild()), t
            }

            function U(e) {
                return null != e && e.isGuildStageVoice() && A.default.countVoiceStatesForChannel(e.id) > 0
            }

            function P(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : M();
                return t.reduce((t, n) => {
                    let i = L(n),
                        a = e(i);
                    return a ? (! function(e, t) {
                        let n = E.default.getChannel(e);
                        null != n && n.isGuildStageVoice() ? 0 === t.size() ? G(n.id) : null == O.get(n.id) && O.set(n.id, n) : G(e)
                    }(n, i), !0) : t
                }, !1)
            }

            function b(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : M();
                return P(t => t.updateParticipant(e), t)
            }

            function G(e) {
                return null != e && (delete v[e], O.delete(e), !0)
            }

            function k() {
                R.clear(), O.clear(), v = {}
            }

            function F(e, t, n) {
                if (null == n || e.has(n)) return;
                let i = E.default.getChannel(n);
                (null == i ? void 0 : i.isGuildStageVoice()) && (t.add(n), e.add(n))
            }

            function w(e) {
                let {
                    user: t
                } = e;
                return b(t.id)
            }

            function H(e) {
                let {
                    relationship: t
                } = e;
                return b(t.id)
            }

            function V(e) {
                let {
                    guild: t
                } = e;
                ! function(e) {
                    let t = O.values(e);
                    for (let e of t) O.delete(e.id), delete v[e.id];
                    R.delete(e)
                }(t.id)
            }

            function B(e) {
                let {
                    streamKey: t
                } = e, {
                    channelId: n,
                    guildId: i,
                    ownerId: a
                } = (0, d.decodeStreamKey)(t);
                return !!(null != i && R.has(i)) && b(a, [n])
            }
            let x = [];
            class Y extends r.default.Store {
                initialize() {
                    this.waitFor(_.default, S.default, E.default, p.default, I.default, h.default, A.default, f.default, g.default, T.default, C.default, c.default)
                }
                getParticipantsVersion(e) {
                    var t, n;
                    return null == e ? -1 : null !== (n = null === (t = D(e)) || void 0 === t ? void 0 : t.version) && void 0 !== n ? n : -1
                }
                getMutableParticipants(e, t) {
                    var n, i;
                    return null == e ? x : null !== (i = null === (n = D(e)) || void 0 === n ? void 0 : n.toArray(t)) && void 0 !== i ? i : x
                }
                getMutableRequestToSpeakParticipants(e) {
                    var t, n;
                    return null !== (n = null === (t = D(e)) || void 0 === t ? void 0 : t.getRequestToSpeakParticipants()) && void 0 !== n ? n : x
                }
                getRequestToSpeakParticipantsVersion(e) {
                    var t, n;
                    return null !== (n = null === (t = D(e)) || void 0 === t ? void 0 : t.requestToSpeakVersion) && void 0 !== n ? n : -1
                }
                getParticipantCount(e, t) {
                    var n, i;
                    return null !== (i = null === (n = D(e)) || void 0 === n ? void 0 : n.size(t)) && void 0 !== i ? i : 0
                }
                getChannels(e) {
                    return y(null != e ? e : N), O.values(null != e ? e : N)
                }
                getChannelsVersion() {
                    return O.version
                }
                getParticipant(e, t) {
                    var n, i;
                    return null !== (i = null === (n = D(e)) || void 0 === n ? void 0 : n.getParticipant(t)) && void 0 !== i ? i : null
                }
            }
            Y.displayName = "StageChannelParticipantStore";
            var K = new Y(o.default, {
                CONNECTION_OPEN: k,
                OVERLAY_INITIALIZE: k,
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t
                    } = e, n = new Set;
                    return t.reduce((e, t) => {
                        if (null == t.guildId || !R.has(t.guildId)) return e;
                        let i = new Set;
                        return (F(n, i, t.oldChannelId), F(n, i, t.channelId), 0 === i.size) ? e : b(t.userId, Array.from(i)) || e
                    }, !1)
                },
                CHANNEL_DELETE: function(e) {
                    let {
                        channel: {
                            id: t
                        }
                    } = e;
                    return G(t)
                },
                GUILD_MEMBERS_CHUNK: function(e) {
                    let {
                        members: t
                    } = e, n = !1;
                    for (let e of t) n = b(e.user.id) || n;
                    return n
                },
                USER_UPDATE: w,
                GUILD_MEMBER_REMOVE: w,
                GUILD_MEMBER_UPDATE: w,
                CHANNEL_UPDATES: function(e) {
                    let {
                        channels: t
                    } = e, n = t.reduce((e, t) => {
                        if (!t.isGuildStageVoice() || !R.has(t.guild_id)) return e;
                        let n = O.get(t.id);
                        return null == n || a(t.permissionOverwrites, n.permissionOverwrites) ? e : (e.push(t.id), O.set(t.id, t), e)
                    }, []);
                    return P(e => e.rebuild(), n), n.length > 0
                },
                GUILD_ROLE_UPDATE: function(e) {
                    let {
                        guildId: t
                    } = e;
                    if (R.has(t)) return P(e => e.rebuild(), M(t))
                },
                RTC_CONNECTION_VIDEO: function(e) {
                    let {
                        channelId: t,
                        guildId: n,
                        userId: i
                    } = e;
                    return !!(null != n && R.has(n)) && b(i, [t])
                },
                STREAM_CLOSE: B,
                STREAM_DELETE: B,
                RELATIONSHIP_ADD: H,
                RELATIONSHIP_REMOVE: H,
                GUILD_CREATE: V,
                GUILD_DELETE: V,
                PASSIVE_UPDATE_V1: function(e) {
                    let t = !1;
                    for (let n of M(e.guildId)) t = L(n).rebuild() || t;
                    return t
                }
            })
        },
        998716: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                StageChannelParticipantNamedIndex: function() {
                    return l
                },
                StageChannelParticipantTypes: function() {
                    return s
                },
                default: function() {
                    return v
                }
            });
            var i, a, l, s, r = n("407846"),
                u = n("246846"),
                o = n("374014"),
                d = n("373469"),
                c = n("42203"),
                _ = n("124948"),
                E = n("26989"),
                f = n("27618"),
                h = n("697218"),
                T = n("800762"),
                p = n("387111"),
                S = n("325861"),
                I = n("834052"),
                A = n("808422"),
                m = n("922673"),
                g = n("49111");

            function C(e) {
                var t;
                let {
                    speaker: n,
                    role: i,
                    user: a,
                    userNick: l,
                    connectedOn: r,
                    voiceState: o,
                    type: d
                } = e, c = d === s.STREAM ? "\x00" : "\x01", _ = o.selfMute ? "\x01" : "\x00", E = o.selfVideo ? "\x00" : "\x01", f = "".concat(null !== (t = null == i ? void 0 : i.position) && void 0 !== t ? t : 999).padStart(3, "0");
                return "".concat(n ? "\x00" : "\x01").concat(c).concat(_).concat(E).concat(f).concat(r).concat((0, u.default)(l, a))
            }

            function N(e) {
                let {
                    user: t,
                    voiceState: n
                } = e, i = n.requestToSpeakTimestamp;
                return null == i ? t.id : "".concat(Date.parse(i)).concat(t.id)
            }

            function O(e) {
                return e === A.RequestToSpeakStates.REQUESTED_TO_SPEAK || e === A.RequestToSpeakStates.REQUESTED_TO_SPEAK_AND_AWAITING_USER_ACK
            }

            function R(e) {
                let {
                    speaker: t,
                    role: n,
                    rtsState: i,
                    blocked: a,
                    isFriend: s
                } = e, r = [];
                return O(i) && r.push(l.ALL_REQUESTED_TO_SPEAK), i === A.RequestToSpeakStates.REQUESTED_TO_SPEAK && r.push(l.REQUESTED_TO_SPEAK_ONLY), t ? r.push(l.SPEAKER) : (null != n ? r.push(n.id) : r.push(l.NO_ROLE), r.push(l.AUDIENCE)), a && r.push(l.BLOCKED), s && r.push(l.FRIEND), r
            }(i = l || (l = {})).SPEAKER = "SPEAKER", i.AUDIENCE = "AUDIENCE", i.NO_ROLE = "NO_ROLE", i.ALL_REQUESTED_TO_SPEAK = "ALL_REQUESTED_TO_SPEAK", i.REQUESTED_TO_SPEAK_ONLY = "REQUESTED_TO_SPEAK_ONLY", i.BLOCKED = "BLOCKED", i.FRIEND = "FRIEND", i.SELECTED = "SELECTED", i.MEDIA = "MEDIA", (a = s || (s = {})).VOICE = "VOICE", a.STREAM = "STREAM";
            class v {
                _getParticipantsForUser(e, t) {
                    var n, i;
                    let a;
                    let l = [],
                        r = T.default.getVoiceStateForChannel(this.channelId, e);
                    if (null == r) return l;
                    let u = h.default.getUser(e);
                    if (null == u) return null != this.guildId && I.default.isPublic(this.channelId) && _.default.requestMember(this.guildId, e), l;
                    let c = null != t ? t[0] : null,
                        C = {
                            user: u,
                            userNick: p.default.getName(this.guildId, this.channelId, u),
                            voiceState: r,
                            role: (0, m.getHighestHoistedRole)(this.guildId, e),
                            speaker: S.default.isSpeaker(e, this.channelId),
                            member: null != this.guildId ? E.default.getMember(this.guildId, e) : null,
                            blocked: f.default.getRelationships()[u.id] === g.RelationshipTypes.BLOCKED,
                            isFriend: f.default.isFriend(u.id),
                            connectedOn: null !== (n = null == c ? void 0 : c.connectedOn) && void 0 !== n ? n : Date.now()
                        },
                        N = {
                            ...C,
                            type: s.VOICE,
                            id: u.id,
                            rtsState: (0, A.getAudienceRequestToSpeakState)(r)
                        };
                    l.push(N);
                    let O = null !== (i = d.default.getStreamForUser(e, this.guildId)) && void 0 !== i ? i : d.default.getActiveStreamForUser(e, this.guildId);
                    if (null != O && O.channelId === this.channelId) {
                        let e = (0, o.encodeStreamKey)(O);
                        a = {
                            ...C,
                            id: e,
                            type: s.STREAM,
                            rtsState: A.RequestToSpeakStates.NONE
                        }, l.push(a)
                    }
                    return l
                }
                updateParticipant(e) {
                    let t = this.participants[e],
                        n = this._getParticipantsForUser(e, t);
                    return (null != t || 0 !== n.length) && (null == t || t.forEach(e => {
                        this._participantsIndex.delete(e.id), this._requestToSpeakIndex.delete(e.id)
                    }), n.forEach(t => {
                        this._participantsIndex.set(t.id, t), t.id === e && O(t.rtsState) ? this._requestToSpeakIndex.set(e, t) : this._requestToSpeakIndex.delete(e)
                    }), this.participants[e] = n, !0)
                }
                rebuild() {
                    let e = c.default.getChannel(this.channelId);
                    if (null == e || !e.isGuildStageVoice()) return !1;
                    let t = new Set(Object.keys(T.default.getVoiceStatesForChannel(e.id)));
                    return this._participantsIndex.clear(), this._requestToSpeakIndex.clear(), this.participants = {}, t.forEach(e => this.updateParticipant(e)), !0
                }
                get version() {
                    return this._participantsIndex.version
                }
                size(e) {
                    return this._participantsIndex.size(e)
                }
                toArray(e) {
                    return this._participantsIndex.values(e, !0)
                }
                getParticipant(e) {
                    var t;
                    return null !== (t = this._participantsIndex.get(e)) && void 0 !== t ? t : null
                }
                get requestToSpeakVersion() {
                    return this._requestToSpeakIndex.version
                }
                getRequestToSpeakParticipants() {
                    return this._requestToSpeakIndex.values(void 0, !0)
                }
                constructor(e) {
                    var t;
                    this.participants = {}, this._participantsIndex = new r.default(R, C), this._requestToSpeakIndex = new r.default(() => [], N), this.channelId = e, this.guildId = null === (t = c.default.getChannel(e)) || void 0 === t ? void 0 : t.getGuildId()
                }
            }
        },
        619395: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                removeModeratorOverwrite: function() {
                    return E
                },
                isEmptyOverwrite: function() {
                    return f
                },
                useCanUpdateStageChannelModerators: function() {
                    return h
                },
                useCanModerateRequestToSpeak: function() {
                    return T
                },
                canLurkerListen: function() {
                    return p
                }
            });
            var i = n("316693"),
                a = n("446674"),
                l = n("267567");
            n("271938");
            var s = n("42203"),
                r = n("305961"),
                u = n("957255"),
                o = n("991170"),
                d = n("923510"),
                c = n("834052"),
                _ = n("49111");

            function E(e, t, n) {
                var a, l;
                let s = null == n ? void 0 : n.permissionOverwrites[e];
                return {
                    id: e,
                    type: t,
                    deny: null !== (a = null == s ? void 0 : s.deny) && void 0 !== a ? a : o.default.NONE,
                    allow: i.default.remove(null !== (l = null == s ? void 0 : s.allow) && void 0 !== l ? l : o.default.NONE, d.MODERATE_STAGE_CHANNEL_PERMISSIONS)
                }
            }

            function f(e) {
                let {
                    allow: t,
                    deny: n
                } = e;
                return i.default.equals(t, o.default.NONE) && i.default.equals(n, o.default.NONE)
            }

            function h(e) {
                return (0, a.useStateFromStores)([u.default, r.default, s.default], () => {
                    let t = s.default.getChannel(e),
                        n = r.default.getGuild(null == t ? void 0 : t.getGuildId());
                    return !!(u.default.can(_.Permissions.ADMINISTRATOR, n) || u.default.can(_.Permissions.MANAGE_ROLES, t, void 0, void 0, !0) || u.default.can(d.UPDATE_STAGE_CHANNEL_MODERATOR_PERMISSIONS, t)) || !1
                }, [e])
            }

            function T(e) {
                return (0, a.useStateFromStores)([s.default, u.default], () => null != e && u.default.can(_.Permissions.MUTE_MEMBERS, s.default.getChannel(e)), [e])
            }

            function p(e) {
                return !!(null != e && e.isGuildStageVoice() && l.default.isLurking(e.guild_id) && c.default.isPublic(e.id)) && u.default.can(d.JOIN_VOCAL_CHANNEL_PERMISSIONS, e)
            }
        },
        118033: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                packStageChannelPartyId: function() {
                    return d
                },
                unpackStageChannelParty: function() {
                    return c
                },
                isStageActivity: function() {
                    return _
                },
                shouldShowActivity: function() {
                    return E
                }
            });
            var i = n("271938"),
                a = n("42203"),
                l = n("305961"),
                s = n("325861"),
                r = n("837979"),
                u = n("49111");
            let o = "stage:";

            function d(e, t) {
                let n = 0,
                    a = i.default.getId(),
                    r = s.default.isSpeaker(a, e.id);
                r && (n |= 1);
                let d = l.default.getGuild(e.getGuildId());
                null != d && (d.hasFeature(u.GuildFeatures.PARTNERED) && (n |= 2), d.hasFeature(u.GuildFeatures.VERIFIED) && (n |= 4));
                let c = n.toString(16);
                return "".concat(o).concat(e.guild_id, ":").concat(e.id, ":").concat(c, ":").concat(t.id)
            }

            function c(e) {
                if (null == e || null == e.party) return;
                let {
                    id: t,
                    size: n
                } = e.party;
                try {
                    if (null == t || !t.startsWith(o)) return;
                    let [, e, i, a, l] = t.split(":"), s = parseInt(a, 16);
                    return {
                        guildId: e,
                        channelId: i,
                        size: n,
                        userIsSpeaker: (1 & s) != 0,
                        guildIsPartnered: (2 & s) != 0,
                        guildIsVerified: (4 & s) != 0,
                        stageInstanceId: l
                    }
                } catch (e) {
                    return null
                }
            }

            function _(e) {
                return (null == e ? void 0 : e.application_id) === r.STAGE_APPLICATION_ID
            }

            function E(e) {
                let t = c(e);
                if (null == t) return !1;
                let {
                    channelId: n
                } = t, i = a.default.getChannel(n);
                return null != i
            }
        },
        325861: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return R
                }
            });
            var i, a, l = n("917351"),
                s = n.n(l),
                r = n("446674"),
                u = n("913144"),
                o = n("42203"),
                d = n("923959"),
                c = n("26989"),
                _ = n("305961"),
                E = n("697218"),
                f = n("800762"),
                h = n("991170"),
                T = n("923510"),
                p = n("808422");
            (i = a || (a = {})).SPEAKER = "speaker", i.MODERATOR = "moderator";
            let S = {},
                I = {
                    [a.SPEAKER]: !1,
                    [a.MODERATOR]: !1
                };

            function A(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                null == S[t] && (S[t] = {});
                let i = function(e, t) {
                    var n, i, l;
                    let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                        r = o.default.getChannel(t),
                        u = null == r ? void 0 : r.getGuildId(),
                        d = _.default.getGuild(u);
                    if (null == d || null == r || !r.isGuildStageVoice()) return I;
                    return {
                        [a.SPEAKER]: function(e, t) {
                            let n = f.default.getVoiceStateForChannel(t, e);
                            return (0, p.getAudienceRequestToSpeakState)(n) === p.RequestToSpeakStates.ON_STAGE
                        }(e, t),
                        [a.MODERATOR]: s ? (n = e, i = d, l = r, h.default.can({
                            permission: T.MODERATE_STAGE_CHANNEL_PERMISSIONS,
                            user: n,
                            context: i,
                            overwrites: l.permissionOverwrites,
                            roles: i.roles
                        })) : null
                    }
                }(e, t, n);
                return S[t][e] = i, i
            }

            function m(e, t) {
                var n;
                if (null == t) return !1;
                let i = o.default.getChannel(t);
                return !!(null != i && i.isGuildStageVoice()) && (null === (n = S[t]) || void 0 === n || delete n[e], !0)
            }

            function g(e) {
                let t = d.default.getChannels(e)[d.GUILD_VOCAL_CHANNELS_KEY].filter(e => {
                    let {
                        channel: t
                    } = e;
                    return t.isGuildStageVoice()
                });
                for (let {
                        channel: e
                    }
                    of t) delete S[e.id];
                return t.length > 0
            }

            function C(e) {
                let {
                    guildId: t,
                    user: n
                } = e;
                return null != n && null != t && function(e, t) {
                    for (let n in S) {
                        let i = o.default.getBasicChannel(n);
                        if (null != i) i.guild_id === t && delete S[n][e]
                    }
                    return !0
                }(n.id, t)
            }

            function N(e) {
                let {
                    guild: t
                } = e;
                for (let e in S) {
                    let n = o.default.getBasicChannel(e);
                    (null == n || n.guild_id === t.id) && delete S[e]
                }
            }
            class O extends r.default.Store {
                initialize() {
                    this.waitFor(c.default, o.default, _.default, E.default, f.default)
                }
                isSpeaker(e, t) {
                    return this.getPermissionsForUser(e, t)[a.SPEAKER]
                }
                isModerator(e, t) {
                    var n;
                    return null !== (n = this.getPermissionsForUser(e, t, !0)[a.MODERATOR]) && void 0 !== n && n
                }
                isAudienceMember(e, t) {
                    let n = this.getPermissionsForUser(e, t);
                    return !n[a.SPEAKER] && !n[a.MODERATOR]
                }
                getPermissionsForUser(e, t) {
                    var n;
                    let i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    if (null == e || null == t) return I;
                    let l = null === (n = S[t]) || void 0 === n ? void 0 : n[e];
                    if (null != l) return i && null == l[a.MODERATOR] ? A(e, t, !0) : l;
                    return A(e, t, i)
                }
            }
            O.displayName = "StageChannelRoleStore";
            var R = new O(u.default, {
                CHANNEL_UPDATES: function(e) {
                    let {
                        channels: t
                    } = e;
                    for (let e of t) delete S[e.id]
                },
                CONNECTION_OPEN: function() {
                    S = {}
                },
                GUILD_MEMBER_REMOVE: C,
                GUILD_MEMBER_UPDATE: C,
                GUILD_ROLE_UPDATE: function(e) {
                    let {
                        guildId: t
                    } = e;
                    g(t)
                },
                PASSIVE_UPDATE_V1: function(e) {
                    var t;
                    let n = g(e.guildId);
                    for (let i of null !== (t = e.voiceStates) && void 0 !== t ? t : []) n = m(i.userId, i.channelId) || n;
                    return n
                },
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t
                    } = e;
                    return !s.isEmpty(S) && t.reduce((e, t) => {
                        let {
                            userId: n,
                            channelId: i
                        } = t;
                        return m(n, i) || e
                    }, !1)
                },
                GUILD_CREATE: N,
                GUILD_DELETE: N
            })
        },
        77173: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return g
                }
            });
            var i = n("714617"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("42203"),
                u = n("305961"),
                o = n("945956"),
                d = n("18494"),
                c = n("991170"),
                _ = n("488464"),
                E = n("998716"),
                f = n("118033"),
                h = n("834052"),
                T = n("819450"),
                p = n("837979"),
                S = n("49111");
            let I = null;

            function A() {
                let e = function() {
                    var e, t, n, i, a, l, s, o;
                    let A = d.default.getVoiceChannelId();
                    if (null == A) return null;
                    let m = h.default.getStageInstanceByChannel(A);
                    if (null == m) return null;
                    let g = r.default.getChannel(A);
                    if (null == g || !c.default.canEveryone(S.Permissions.VIEW_CHANNEL, g)) return null;
                    let C = u.default.getGuild(g.getGuildId());
                    if (null == C || !C.hasFeature(S.GuildFeatures.DISCOVERABLE)) return null;
                    let N = (0, f.packStageChannelPartyId)(g, m),
                        O = (null === (t = I) || void 0 === t ? void 0 : null === (e = t.party) || void 0 === e ? void 0 : e.id) === N ? I : null,
                        R = _.default.getMutableParticipants(g.id, E.StageChannelParticipantNamedIndex.SPEAKER),
                        v = R.filter(e => e.type === E.StageChannelParticipantTypes.STREAM).length,
                        M = R.length - v,
                        y = _.default.getParticipantCount(A) - v,
                        D = (null == O ? void 0 : null === (n = O.party) || void 0 === n ? void 0 : n.size) != null ? O.party.size[1] : 0;
                    return {
                        application_id: p.STAGE_APPLICATION_ID,
                        name: null !== (l = null !== (a = m.topic) && void 0 !== a ? a : g.topic) && void 0 !== l ? l : g.name,
                        type: (0, T.getStageHasMedia)(g.id) ? S.ActivityTypes.WATCHING : S.ActivityTypes.LISTENING,
                        timestamps: {
                            start: null !== (s = null == O ? void 0 : null === (i = O.timestamps) || void 0 === i ? void 0 : i.start) && void 0 !== s ? s : new Date().getTime()
                        },
                        assets: {
                            small_image: null !== (o = C.icon) && void 0 !== o ? o : void 0,
                            small_text: C.name
                        },
                        party: {
                            id: N,
                            size: [M, Math.max(y, D)]
                        }
                    }
                }();
                return !a(e, I) && (I = e, !0)
            }
            class m extends l.default.Store {
                initialize() {
                    this.waitFor(r.default, d.default, h.default, o.default)
                }
                getActivity() {
                    return I
                }
            }
            m.displayName = "StageChannelSelfRichPresenceStore";
            var g = new m(s.default, {
                CONNECTION_OPEN: A,
                STAGE_INSTANCE_CREATE: A,
                STAGE_INSTANCE_UPDATE: A,
                STAGE_INSTANCE_DELETE: A,
                VOICE_CHANNEL_SELECT: A,
                RTC_CONNECTION_STATE: function(e) {
                    var t, n, i, a;
                    let {
                        state: l
                    } = e, s = null !== (a = null === (i = I) || void 0 === i ? void 0 : null === (n = i.party) || void 0 === n ? void 0 : null === (t = n.size) || void 0 === t ? void 0 : t[1]) && void 0 !== a ? a : 0;
                    return l === S.RTCConnectionStates.RTC_CONNECTED && !(s > 0) && A()
                },
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t
                    } = e;
                    if (null == I) return;
                    let n = (0, f.unpackStageChannelParty)(I);
                    null != n && null != t.find(e => e.channelId === n.channelId) && A()
                }
            })
        },
        837979: function(e, t, n) {
            "use strict";
            var i, a, l, s;
            n.r(t), n.d(t, {
                MAX_STAGE_TOPIC_LENGTH: function() {
                    return r
                },
                STAGE_APPLICATION_ID: function() {
                    return u
                },
                STAGE_INVITE_STATE_KEY: function() {
                    return o
                },
                STAGE_AUDIENCE_NOTICE_SHOWN_STORAGE_KEY: function() {
                    return d
                },
                RequestToSpeakPermissionStates: function() {
                    return i
                },
                StartStageSteps: function() {
                    return a
                }
            }), n("701909"), n("49111"), n("782340");
            let r = 240,
                u = "834488117758001152",
                o = "stage-invite",
                d = "stage-channel-audience-notice-shown";
            (l = i || (i = {}))[l.EVERYONE = 1] = "EVERYONE", l[l.NO_ONE = 2] = "NO_ONE", l[l.ROLES = 3] = "ROLES", (s = a || (a = {}))[s.GUILD_SELECTION = 0] = "GUILD_SELECTION", s[s.STAGE_CHANNEL_SETTINGS = 1] = "STAGE_CHANNEL_SETTINGS", s[s.PUBLIC_STAGE_PREVIEW = 2] = "PUBLIC_STAGE_PREVIEW"
        },
        30577: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return d
                }
            });
            var i = n("913144"),
                a = n("316272"),
                l = n("248967"),
                s = n("42203"),
                r = n("162771"),
                u = n("449008");
            class o extends a.default {
                _initialize() {
                    i.default.subscribe("VOICE_CHANNEL_SELECT", this.handleVoiceChannelSelect), i.default.subscribe("LOGOUT", this.handleLogout)
                }
                _terminate() {
                    i.default.unsubscribe("VOICE_CHANNEL_SELECT", this.handleVoiceChannelSelect), i.default.unsubscribe("LOGOUT", this.handleLogout)
                }
                constructor(...e) {
                    super(...e), this.handleVoiceChannelSelect = e => {
                        let {
                            channelId: t,
                            guildId: n
                        } = e;
                        if (null != t) {
                            let e = s.default.getChannel(t),
                                n = null == e || e.isGuildStageVoice();
                            if (n) return
                        }
                        this.terminate();
                        let i = null == t ? null : null != n ? n : null;
                        this.handleDisconnectFromStageChannel(i)
                    }, this.handleDisconnectFromStageChannel = e => {
                        let t = r.default.getGuildId();
                        (0, l.stopLurkingAll)([t, e].filter(u.isNotNullish))
                    }, this.handleLogout = () => {
                        this.terminate(), this.handleDisconnectFromStageChannel(null)
                    }
                }
            }
            var d = new o
        },
        819450: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useStageHasMedia: function() {
                    return u
                },
                getStageHasMedia: function() {
                    return o
                },
                isStageVideoEnabled: function() {
                    return d
                }
            });
            var i = n("446674"),
                a = n("305961"),
                l = n("800762"),
                s = n("488464"),
                r = n("998716");

            function u(e) {
                return (0, i.useStateFromStores)([s.default, l.default], () => {
                    let t = s.default.getMutableParticipants(e, r.StageChannelParticipantNamedIndex.SPEAKER),
                        n = null != t.find(e => e.type === r.StageChannelParticipantTypes.STREAM);
                    return n || l.default.hasVideo(e)
                }, [e])
            }

            function o(e) {
                let t = s.default.getMutableParticipants(e, r.StageChannelParticipantNamedIndex.SPEAKER),
                    n = null != t.find(e => e.type === r.StageChannelParticipantTypes.STREAM);
                return n || l.default.hasVideo(e)
            }

            function d(e) {
                var t;
                let n = a.default.getGuild(e);
                return null != n && (null !== (t = null == n ? void 0 : n.maxStageVideoChannelUsers) && void 0 !== t ? t : 0) > 0
            }
        },
        808422: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                RequestToSpeakStates: function() {
                    return a
                },
                getAudienceRequestToSpeakState: function() {
                    return r
                },
                default: function() {
                    return u
                }
            });
            var i, a, l = n("446674"),
                s = n("800762");

            function r(e) {
                if (null == e) return a.NONE;
                if (e.suppress && null != e.requestToSpeakTimestamp) return a.REQUESTED_TO_SPEAK;
                if (!e.suppress && null != e.requestToSpeakTimestamp) return a.REQUESTED_TO_SPEAK_AND_AWAITING_USER_ACK;
                if (!e.suppress && null == e.requestToSpeakTimestamp) return a.ON_STAGE;
                return a.NONE
            }

            function u(e, t) {
                return (0, l.useStateFromStores)([s.default], () => {
                    if (null == e || null == t) return a.NONE;
                    let n = s.default.getVoiceStateForChannel(t, e);
                    return r(n)
                }, [e, t])
            }(i = a || (a = {}))[i.NONE = 0] = "NONE", i[i.REQUESTED_TO_SPEAK = 1] = "REQUESTED_TO_SPEAK", i[i.REQUESTED_TO_SPEAK_AND_AWAITING_USER_ACK = 2] = "REQUESTED_TO_SPEAK_AND_AWAITING_USER_ACK", i[i.ON_STAGE = 3] = "ON_STAGE"
        },
        922673: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getHighestHoistedRole: function() {
                    return s
                }
            }), n("446674");
            var i = n("26989"),
                a = n("305961"),
                l = n("991170");
            let s = function(e, t) {
                let [n, s] = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [a.default, i.default];
                if (null == e || null == t) return null;
                let r = n.getGuild(e);
                if (null == r) return null;
                let u = s.getMember(r.id, t);
                return null == u ? null : l.default.getHighestHoistedRole(r, u)
            }
        },
        534471: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return c
                },
                setIsOnStartStageScreen: function() {
                    return _
                },
                useUpdateIsOnStartStageScreenEffect: function() {
                    return E
                }
            });
            var i = n("884691"),
                a = n("308503"),
                l = n("446674"),
                s = n("957255"),
                r = n("18494"),
                u = n("923510"),
                o = n("58763");
            let d = (0, a.default)(e => ({
                isOnStartStageScreen: !0
            }));
            var c = d;

            function _(e) {
                d.setState({
                    isOnStartStageScreen: e
                })
            }

            function E(e) {
                let t = (0, l.useStateFromStores)([r.default], () => r.default.getVoiceChannelId() === e.id),
                    n = (0, l.useStateFromStores)([s.default], () => s.default.can(u.MODERATE_STAGE_CHANNEL_PERMISSIONS, e), [e]),
                    a = (0, o.default)(e.id),
                    d = n && !a;
                i.useEffect(() => {
                    t ? !d && _(!1) : _(d)
                }, [t, d])
            }
        },
        151642: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                useStageBlockedUsersCount: function() {
                    return s
                },
                getStageBlockedUsersCount: function() {
                    return r
                },
                useStageBlockedUsers: function() {
                    return u
                }
            });
            var i = n("446674"),
                a = n("488464"),
                l = n("998716");

            function s(e) {
                return (0, i.useStateFromStores)([a.default], () => null != e ? a.default.getParticipantCount(e, l.StageChannelParticipantNamedIndex.BLOCKED) : 0, [e])
            }

            function r(e) {
                var t;
                return null !== (t = a.default.getParticipantCount(e, l.StageChannelParticipantNamedIndex.BLOCKED)) && void 0 !== t ? t : 0
            }

            function u(e) {
                return (0, i.useStateFromStores)([a.default], () => a.default.getMutableParticipants(e, l.StageChannelParticipantNamedIndex.BLOCKED), [e])
            }
        },
        58763: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("446674"),
                a = n("834052");

            function l(e) {
                return (0, i.useStateFromStores)([a.default], () => a.default.isLive(e), [e])
            }
        },
        328511: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return d
                }
            });
            var i = n("35092"),
                a = n("913144"),
                l = n("474643");
            let s = {},
                r = {};
            class u extends i.default.Store {
                getStickerPreview(e, t) {
                    let n = t === l.DraftType.FirstThreadMessage ? r : s;
                    return n[e]
                }
            }
            u.displayName = "StickerMessagePreviewStore";
            let o = new u(a.default, {
                ADD_STICKER_PREVIEW: function(e) {
                    let {
                        channelId: t,
                        sticker: n,
                        draftType: i
                    } = e, a = i === l.DraftType.FirstThreadMessage ? r : s;
                    a[t] = [n]
                },
                CLEAR_STICKER_PREVIEW: function(e) {
                    let {
                        channelId: t,
                        draftType: n
                    } = e, i = n === l.DraftType.FirstThreadMessage ? r : s;
                    null != i[t] && delete i[t]
                },
                LOGOUT: function() {
                    s = {}, r = {}
                }
            });
            var d = o
        },
        364685: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return k
                }
            });
            var i, a, l = n("102053"),
                s = n("446674"),
                r = n("913144"),
                u = n("802493"),
                o = n("595525"),
                d = n("212084"),
                c = n("867805"),
                _ = n("267567"),
                E = n("813006"),
                f = n("778689"),
                h = n("305961"),
                T = n("161585"),
                p = n("24373"),
                S = n("49111");
            (i = a || (a = {}))[i.Unloaded = 0] = "Unloaded", i[i.MaybeLoaded = 1] = "MaybeLoaded", i[i.Loaded = 2] = "Loaded";
            let I = 2,
                A = new Map,
                m = new Map,
                g = null,
                C = [],
                N = null,
                O = !1,
                R = new Map,
                v = (e, t) => {
                    R = new Map(R.set(e, t))
                },
                M = 1e3 * S.Durations.HOUR,
                y = () => {
                    if (0 !== I) return;
                    let e = u.default.database();
                    if (null == e) return;
                    I = 2;
                    let t = (0, o.tryLoadOrResetCacheGateway)("StickerStore.loadSavedGuildStickers", () => l.default.time("\uD83D\uDCBE", "loadSavedGuildStickers", () => d.default.getSync(e)));
                    if (null != t) {
                        for (let [e, n] of t)
                            if (f.default.isMember(e) && !R.has(e)) {
                                for (let t of n) D(t, !0, h.default.getGuild(e));
                                v(e, n)
                            }
                    }
                },
                D = function(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
                        n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                    m.set(e.id, e), t && L(e, n)
                },
                L = function(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                    if (null == g) return;
                    let {
                        tags: n
                    } = e, i = {
                        type: T.StickerMetadataTypes.STICKER_NAME,
                        value: e.name.trim().toLocaleLowerCase()
                    };
                    if ((0, p.isStandardSticker)(e)) {
                        let t = C.find(t => t.id === e.pack_id),
                            a = [i, ...(null != n ? n : "").split(",").map(e => ({
                                type: T.StickerMetadataTypes.TAG,
                                value: e.trim().toLocaleLowerCase()
                            }))];
                        null != t && a.push({
                            type: T.StickerMetadataTypes.PACK_NAME,
                            value: t.name
                        }), g.set(e.id, a)
                    } else if ((0, p.isGuildSticker)(e) && null != n) {
                        let a = c.default.getByName(n),
                            l = {
                                type: T.StickerMetadataTypes.TAG,
                                value: n.trim().toLocaleLowerCase()
                            },
                            s = [i, l];
                        if (null != t) {
                            let e = (t instanceof(0, E.default) ? t.name : t.properties.name).trim().toLocaleLowerCase();
                            null != e && "" !== e && s.push({
                                type: T.StickerMetadataTypes.GUILD_NAME,
                                value: e
                            })
                        }
                        if (null == a) {
                            g.set(e.id, s);
                            return
                        }
                        s.push({
                            type: T.StickerMetadataTypes.CORRELATED_EMOJI,
                            value: a.surrogates
                        }), a.forEachDiversity(e => s.push({
                            type: T.StickerMetadataTypes.CORRELATED_EMOJI,
                            value: e.surrogates
                        })), g.set(e.id, s)
                    }
                },
                U = (e, t, n) => {
                    A.set(e.id, e);
                    let i = [...C];
                    if (t) {
                        let t = i.findIndex(t => t.id === e.id); - 1 !== t ? i[t] = e : i.push(e), C = i
                    }(t || n) && e.stickers.forEach(e => D(e))
                },
                P = () => {
                    R.forEach((e, t) => {
                        let n = h.default.getGuild(t);
                        null != n && e.forEach(e => L(e, n))
                    }), C.forEach(e => {
                        e.stickers.forEach(e => L(e))
                    })
                };

            function b(e) {
                null != e.stickers && (e.stickers.forEach(t => D(t, !0, e)), v(e.id, e.stickers))
            }
            class G extends s.default.Store {
                initialize() {
                    this.waitFor(u.default, f.default, h.default)
                }
                get isLoaded() {
                    return 0 !== I
                }
                get stickerMetadata() {
                    return y(), null == g && (g = new Map, P()), g
                }
                get hasLoadedStickerPacks() {
                    return null != N && N + M > Date.now()
                }
                get isFetchingStickerPacks() {
                    return O
                }
                getStickerById(e) {
                    return !m.has(e) && y(), m.get(e)
                }
                getStickerPack(e) {
                    return A.get(e)
                }
                getPremiumPacks() {
                    return C
                }
                isPremiumPack(e) {
                    return C.some(t => t.id === e)
                }
                getRawStickersByGuild() {
                    return R
                }
                getAllStickersIterator() {
                    return y(), m.values()
                }
                getAllGuildStickers() {
                    return y(), R
                }
                getStickersByGuildId(e) {
                    return y(), R.get(e)
                }
            }
            G.displayName = "StickersStore";
            var k = new G(r.default, {
                BACKGROUND_SYNC: () => {
                    g = null, m = new Map, R = new Map, I = 0
                },
                CONNECTION_OPEN: e => {
                    let {
                        guilds: t
                    } = e;
                    g = null, m = new Map, R = new Map, t.forEach(b), I = t.every(e => null != e.stickers) ? 1 : 0
                },
                GUILD_CREATE: function(e) {
                    let {
                        guild: t
                    } = e;
                    !_.default.isLurking(t.id) && (b(t), 1 === I && null == t.stickers && null != t.stickerUpdates && (I = 0))
                },
                GUILD_DELETE: function(e) {
                    var t;
                    let {
                        guild: n
                    } = e, i = null !== (t = R.get(n.id)) && void 0 !== t ? t : [];
                    i.forEach(e => {
                        null != g && g.delete(e.id), m.delete(e.id)
                    }), R.delete(n.id), R = new Map(R)
                },
                LOGOUT: () => {
                    I = 0, C = [], m.clear(), A.clear(), g = null, R.clear(), R = new Map(R), O = !1, N = null
                },
                STICKER_PACKS_FETCH_START: () => {
                    O = !0
                },
                STICKER_PACKS_FETCH_SUCCESS: e => {
                    let {
                        packs: t
                    } = e;
                    t.forEach(e => U(e, !0)), N = Date.now(), O = !1
                },
                STICKER_PACK_FETCH_SUCCESS: e => {
                    let {
                        pack: t,
                        ingestStickers: n
                    } = e;
                    U(t, !1, n)
                },
                GUILD_STICKERS_FETCH_SUCCESS: e => {
                    let {
                        guildId: t,
                        stickers: n
                    } = e;
                    n.forEach(e => D(e)), v(t, n)
                },
                GUILD_STICKERS_CREATE_SUCCESS: e => {
                    var t, n;
                    let {
                        guildId: i,
                        sticker: a
                    } = e, l = null !== (t = R.get(i)) && void 0 !== t ? t : [];
                    v(i, [...null !== (n = l.filter(e => e.id !== a.id)) && void 0 !== n ? n : [], a]), D(a)
                },
                STICKER_FETCH_SUCCESS: e => {
                    let {
                        sticker: t
                    } = e;
                    D(t, !1)
                },
                GUILD_STICKERS_UPDATE: e => {
                    var t;
                    let {
                        guildId: n,
                        stickers: i
                    } = e, a = e => {
                        let t;
                        let n = m.get(e.id);
                        return null != n && (0, p.isGuildSticker)(n) && (t = null != n.user ? n.user : void 0), {
                            ...e,
                            user: t
                        }
                    }, l = null !== (t = R.get(n)) && void 0 !== t ? t : [], s = l.filter(e => null == i.find(t => t.id === e.id));
                    s.forEach(e => {
                        m.delete(e.id), null != g && g.delete(e.id)
                    });
                    let r = i.map(e => a(e));
                    r.forEach(e => D(e)), v(n, r)
                }
            })
        },
        161585: function(e, t, n) {
            "use strict";
            var i, a, l, s, r, u, o, d, c, _, E, f, h, T;
            n.r(t), n.d(t, {
                StickerFormat: function() {
                    return i
                },
                MetaStickerType: function() {
                    return a
                },
                StickerExtensions: function() {
                    return l
                },
                isAnimatedSticker: function() {
                    return p
                },
                isCustomSticker: function() {
                    return S
                },
                StickerGridItemTypes: function() {
                    return s
                },
                StickerCategoryTypes: function() {
                    return r
                },
                StickerMetadataTypes: function() {
                    return u
                },
                StickerSelectLocation: function() {
                    return o
                }
            }), (d = i || (i = {}))[d.PNG = 1] = "PNG", d[d.APNG = 2] = "APNG", d[d.LOTTIE = 3] = "LOTTIE", d[d.GIF = 4] = "GIF", (c = a || (a = {}))[c.STANDARD = 1] = "STANDARD", c[c.GUILD = 2] = "GUILD", (_ = l || (l = {})).PNG = "png", _.APNG = "png", _.LOTTIE = "json", _.WEBP = "webp", _.GIF = "gif";
            let p = e => e !== i.PNG,
                S = e => e !== a.STANDARD;
            (E = s || (s = {}))[E.STICKER = 0] = "STICKER", E[E.CREATE_STICKER = 1] = "CREATE_STICKER", (f = r || (r = {})).PACK = "PACK", f.FAVORITE = "FAVORITE", f.RECENT = "RECENT", f.SEARCH_RESULTS = "SEARCH_RESULTS", f.SEARCH_SUGGESTIONS = "SEARCH_SUGGESTIONS", f.GUILD = "GUILD", f.EMPTY_GUILD_UPSELL = "EMPTY_GUILD_UPSELL", f.CREATE_STICKER = "CREATE_STICKER", (h = u || (u = {}))[h.STICKER_NAME = 0] = "STICKER_NAME", h[h.TAG = 1] = "TAG", h[h.CORRELATED_EMOJI = 2] = "CORRELATED_EMOJI", h[h.GUILD_NAME = 3] = "GUILD_NAME", h[h.PACK_NAME = 4] = "PACK_NAME", (T = o || (o = {}))[T.STICKER_PICKER = 0] = "STICKER_PICKER", T[T.EXPRESSION_SUGGESTIONS = 1] = "EXPRESSION_SUGGESTIONS", T[T.AUTOCOMPLETE = 2] = "AUTOCOMPLETE"
        },
        24373: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getStickerPackPreviewSticker: function() {
                    return g
                },
                getStickerFormatTypeFromFileType: function() {
                    return N
                },
                getFilenameForSticker: function() {
                    return O
                },
                getStickerAssetUrl: function() {
                    return R
                },
                getStickerPackBannerAssetUrl: function() {
                    return v
                },
                isStickerAssetUrl: function() {
                    return M
                },
                isStickerPackAnimated: function() {
                    return y
                },
                createStickerPackCategory: function() {
                    return D
                },
                shouldAnimateSticker: function() {
                    return L
                },
                shouldAttachSticker: function() {
                    return U
                },
                isGuildSticker: function() {
                    return P
                },
                isStandardSticker: function() {
                    return b
                },
                getMessageStickers: function() {
                    return G
                },
                isAvailableGuildSticker: function() {
                    return k
                }
            });
            var i = n("171209"),
                a = n("407063"),
                l = n("305961"),
                s = n("585722"),
                r = n("315102"),
                u = n("773336"),
                o = n("328511"),
                d = n("161585"),
                c = n("560241"),
                _ = n("49111");
            let {
                API_ENDPOINT: E,
                MEDIA_PROXY_ENDPOINT: f,
                PROJECT_ENV: h,
                ASSET_ENDPOINT: T,
                CDN_HOST: p
            } = window.GLOBAL_ENV, S = Object.values(d.StickerExtensions), I = decodeURIComponent(_.Endpoints.STICKER_ASSET("[\\d]+", "(".concat(S.join("|"), ")"))), A = RegExp("(".concat(location.protocol).concat(T, "|").concat(location.protocol).concat(f, ")(").concat(I, ")"), "ig"), m = RegExp("".concat(location.protocol).concat(E, "(").concat(I, ")"), "ig"), g = e => {
                if (null != e.cover_sticker_id) {
                    let t = e.stickers.find(t => t.id === e.cover_sticker_id);
                    if (null != t) return t
                }
                return e.stickers[0]
            }, C = e => {
                switch (e) {
                    case d.StickerFormat.PNG:
                        return r.SUPPORTS_WEBP ? d.StickerExtensions.WEBP : d.StickerExtensions.PNG;
                    case d.StickerFormat.APNG:
                        return d.StickerExtensions.APNG;
                    case d.StickerFormat.LOTTIE:
                        return d.StickerExtensions.LOTTIE;
                    case d.StickerFormat.GIF:
                        return d.StickerExtensions.GIF;
                    default:
                        throw Error("Unexpected format type: ".concat(e))
                }
            }, N = e => {
                switch (e) {
                    case "application/json":
                        return d.StickerFormat.LOTTIE;
                    case "image/apng":
                        return d.StickerFormat.APNG;
                    case "image/png":
                    case "image/webp":
                        return d.StickerFormat.PNG;
                    case "image/gif":
                        return d.StickerFormat.GIF;
                    default:
                        throw Error("Unexpected file type: ".concat(e))
                }
            }, O = e => null == e ? null : "".concat(e.name, ".").concat(C(e.format_type)), R = function(e) {
                let {
                    isPreview: t = !1,
                    size: n = c.DEFAULT_STICKER_DIMENSIONS
                } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (null == e.format_type) return null;
                let i = _.Endpoints.STICKER_ASSET(e.id, C(e.format_type));
                if ("development" !== h) {
                    if (e.format_type === d.StickerFormat.LOTTIE) return "".concat(location.protocol).concat(T).concat(i);
                    let l = e.format_type === d.StickerFormat.APNG && t && !(0, u.isAndroid)() ? "&passthrough=false" : "",
                        s = Math.min(2, (0, a.getDevicePixelRatio)());
                    return "".concat(location.protocol).concat(f).concat(i, "?size=").concat((0, a.getBestMediaProxySize)(n * s)).concat(l)
                }
                return "".concat(location.protocol).concat(E).concat(i)
            }, v = (e, t) => {
                let n;
                let i = e.banner_asset_id;
                if (null == i) return null;
                let l = r.SUPPORTS_WEBP ? "webp" : "png";
                return n = null != p ? "".concat(location.protocol, "//").concat(p, "/app-assets/").concat(c.STICKER_APPLICATION_ID, "/store/").concat(i, ".").concat(l) : "".concat(location.protocol).concat(E).concat(_.Endpoints.STORE_ASSET(c.STICKER_APPLICATION_ID, i, l)), null != t && (n += "?size=".concat((0, a.getBestMediaProxySize)(t))), n
            }, M = e => e.match("development" !== h ? A : m), y = e => e.stickers.some(e => {
                let {
                    format_type: t
                } = e;
                return t === d.StickerFormat.APNG || t === d.StickerFormat.LOTTIE || t === d.StickerFormat.GIF
            }), D = e => ({
                type: d.StickerCategoryTypes.PACK,
                id: e.id,
                name: e.name,
                stickers: e.stickers,
                previewSticker: g(e)
            }), L = (e, t) => e === c.StickerAnimationSettings.ANIMATE_ON_INTERACTION ? t : e !== c.StickerAnimationSettings.NEVER_ANIMATE, U = (e, t, n, a) => {
                let l = s.default.getUploadCount(n, a);
                if (l > 0) return !0;
                let r = o.default.getStickerPreview(n, a),
                    u = null != r && r.length > 0;
                if (u) return !0;
                switch (e) {
                    case d.StickerSelectLocation.STICKER_PICKER:
                        return "" !== t.trim();
                    case d.StickerSelectLocation.AUTOCOMPLETE:
                    case d.StickerSelectLocation.EXPRESSION_SUGGESTIONS:
                        return (0, i.getQueriesFromUserInput)(t).length > 1;
                    default:
                        return !1
                }
            }, P = e => e.type === d.MetaStickerType.GUILD, b = e => e.type === d.MetaStickerType.STANDARD, G = e => e.stickerItems.length > 0 ? e.stickerItems : e.stickers.length > 0 ? e.stickers : [], k = e => {
                if (null === e) return !1;
                let t = e.guild_id;
                return void 0 !== l.default.getGuild(t)
            }
        },
        835174: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("551042"),
                l = {
                    show(e) {
                        (0, a.openModalLazy)(async () => {
                            let {
                                default: t
                            } = await n.el("536071").then(n.bind(n, "536071"));
                            return n => (0, i.jsx)(t, {
                                ...n,
                                href: e
                            })
                        })
                    }
                }
        },
        566271: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                isSuspiciousDownload: function() {
                    return r
                }
            });
            var i = n("746379"),
                a = n("555919");
            let l = new Set(a),
                s = {
                    "github.com": RegExp("\\/releases\\S*\\/download"),
                    "bitbucket.org": RegExp("\\/downloads\\S*\\/[^\\/]*"),
                    "gitlab.com": RegExp("\\/downloads\\S*\\/[^\\/]*")
                };

            function r(e) {
                var t;
                let {
                    pathname: n,
                    hostname: a
                } = i.parse(e);
                if (null == a) return null;
                let r = s[a];
                if (null != r && null != n && !r.test(n) || null == n) return null;
                let u = n;
                try {
                    u = decodeURIComponent(n)
                } catch (e) {}
                let o = u.split("/"),
                    d = null,
                    c = 0;
                for (let e = o.length - 1; e >= 0; e--) {
                    let t = o[e];
                    if ("" !== t && "." !== t) {
                        if (".." === t) {
                            c++;
                            continue
                        }
                        if (c > e) break;
                        d = o[e - c];
                        break
                    }
                }
                if (null == d) return null;
                let _ = d.split(".");
                if (_.length < 2) return null;
                let E = null === (t = _.pop()) || void 0 === t ? void 0 : t.toLowerCase();
                return null != E && l.has(E) ? E : null
            }
        },
        689275: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return I
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("233069"),
                u = n("42203");
            let o = {},
                d = new Set;

            function c(e) {
                return {
                    id: e.id,
                    parentId: e.parent_id
                }
            }

            function _(e) {
                e in o && delete o[e]
            }

            function E(e) {
                null != e.threads && e.threads.length > 0 && (o[e.id] = {}, e.threads.filter(e => r.ALL_CHANNEL_TYPES.has(e.type)).forEach(t => f(e.id, t))), e.hasThreadsSubscription && d.add(e.id)
            }

            function f(e, t) {
                let n = o[e],
                    i = t.parent_id;
                !(i in n) && (n[i] = {}), o[e][i][t.id] = c(t)
            }

            function h(e) {
                var t, n;
                let {
                    channel: i
                } = e;
                if (!r.ALL_CHANNEL_TYPES.has(i.type)) return !1;
                if ((null === (t = i.threadMetadata) || void 0 === t ? void 0 : t.archived) === !0) return T(i);
                {
                    let e = null !== (n = o[i.guild_id]) && void 0 !== n ? n : {};
                    o[i.guild_id] = {
                        ...e,
                        [i.parent_id]: {
                            ...e[i.parent_id],
                            [i.id]: c(i)
                        }
                    }
                }
            }

            function T(e) {
                let {
                    guild_id: t,
                    parent_id: n,
                    id: i
                } = e;
                if (null == t || null == n || !(t in o) || !(n in o[t]) || !(i in o[t][n])) return !1;
                o[t] = {
                    ...o[t],
                    [n]: {
                        ...o[t][n]
                    }
                }, delete o[t][n][i], a.isEmpty(o[t][n]) && delete o[t][n]
            }
            let p = {};
            class S extends l.default.Store {
                initialize() {
                    this.waitFor(u.default)
                }
                isActive(e, t, n) {
                    return null != e && null != this.getThreadsForParent(e, t)[n]
                }
                getThreadsForGuild(e) {
                    var t;
                    return null !== (t = o[e]) && void 0 !== t ? t : p
                }
                getThreadsForParent(e, t) {
                    var n;
                    return null !== (n = this.getThreadsForGuild(e)[t]) && void 0 !== n ? n : p
                }
                hasThreadsForChannel(e, t) {
                    return !a.isEmpty(this.getThreadsForParent(e, t))
                }
                forEachGuild(e) {
                    for (let t in o) e(t, o[t])
                }
                hasLoaded(e) {
                    return d.has(e)
                }
            }
            S.displayName = "ActiveThreadsStore";
            var I = new S(s.default, {
                CONNECTION_OPEN: function(e) {
                    o = {}, d.clear(), e.guilds.forEach(e => {
                        E(e)
                    })
                },
                OVERLAY_INITIALIZE: function(e) {
                    let {
                        channels: t
                    } = e;
                    o = {}, a(t).filter(e => r.THREAD_CHANNEL_TYPES.has(e.type)).groupBy("guild_id").forEach((e, t) => {
                        o[t] = {}, e.forEach(e => f(t, e))
                    })
                },
                GUILD_CREATE: function(e) {
                    let {
                        guild: t
                    } = e;
                    _(t.id), E(t)
                },
                GUILD_DELETE: function(e) {
                    let {
                        guild: t
                    } = e;
                    _(t.id)
                },
                THREAD_CREATE: h,
                THREAD_UPDATE: h,
                THREAD_LIST_SYNC: function(e) {
                    let {
                        guildId: t,
                        threads: n,
                        channelIds: i
                    } = e;
                    for (let e in null == i && d.add(t), o[t] = {
                            ...o[t]
                        }, o[t]) o[t][e] = {
                        ...o[t][e]
                    };
                    n.forEach(e => f(t, e))
                },
                THREAD_DELETE: function(e) {
                    let {
                        channel: t
                    } = e;
                    return T(t)
                },
                CHANNEL_DELETE: function(e) {
                    let {
                        channel: t
                    } = e;
                    if (null == t.guild_id || !(t.guild_id in o)) return !1;
                    o[t.guild_id] = {
                        ...o[t.guild_id]
                    }, delete o[t.guild_id][t.id]
                }
            })
        },
        120252: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return h
                }
            });
            var i = n("803182"),
                a = n("872717"),
                l = n("913144"),
                s = n("619443"),
                r = n("233069"),
                u = n("42203"),
                o = n("18494"),
                d = n("49111"),
                c = n("724210");
            let _ = {},
                E = !1;

            function f(e) {
                if (null == e || e === c.FAKE_PLACEHOLDER_PRIVATE_CHANNEL_ID || (0, c.isStaticChannelRoute)(e) || null != u.default.getChannel(e)) return Promise.resolve();
                if (E || (E = !0, l.default.subscribe("CONNECTION_OPEN", () => {
                        _ = {};
                        let e = o.default.getChannelId(),
                            t = u.default.getChannel(e);
                        null != e && null == t && f(e)
                    })), !s.default.isConnected()) return Promise.resolve();
                let t = _[e];
                if (null != t) return "LOADING" === t.type ? t.promise : Promise.resolve();
                let n = (0, i.matchPath)(location.pathname, {
                        path: d.Routes.CHANNEL(":guildId", ":channelId", ":messageId"),
                        exact: !0
                    }),
                    h = a.default.get(d.Endpoints.CHANNEL(e)).then(t => {
                        let {
                            body: i
                        } = t;
                        if (_[e] = {
                                type: "LOADED"
                            }, r.THREAD_CHANNEL_TYPES.has(i.type)) {
                            var a;
                            l.default.dispatch({
                                type: "THREAD_CREATE",
                                channel: (0, r.createChannelRecordFromServer)(i),
                                messageId: null == n ? void 0 : null === (a = n.params) || void 0 === a ? void 0 : a.messageId
                            })
                        }
                    }).catch(() => {
                        var t;
                        _[e] = {
                            type: "NOT_FOUND"
                        }, l.default.dispatch({
                            type: "CHANNEL_DELETE",
                            channel: {
                                id: e,
                                guild_id: null == n ? void 0 : null === (t = n.params) || void 0 === t ? void 0 : t.guildId,
                                parent_id: void 0
                            }
                        })
                    });
                return _[e] = {
                    type: "LOADING",
                    promise: h
                }, h
            }
            var h = {
                loadThread: f
            }
        },
        25932: function(e, t, n) {
            "use strict";

            function i(e) {
                return {
                    id: e.id,
                    userId: e.user_id,
                    flags: e.flags,
                    muted: e.muted,
                    muteConfig: e.mute_config,
                    joinTimestamp: e.join_timestamp
                }
            }
            n.r(t), n.d(t, {
                default: function() {
                    return i
                }
            })
        },
        410912: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("102053"),
                a = n("926274");
            let l = () => {};
            n.g.__timingFunction = () => performance.now();
            let s = null == n.g.__getTotalRequireTime ? () => 0 : () => n.g.__getTotalRequireTime();

            function r(e, t) {
                if (0 === t || null == t) return null;
                let n = t - e;
                return n < 0 || n > 1e6 ? null : n
            }
            class u {
                get start() {
                    return this.start_
                }
                get end() {
                    return this.end_
                }
                hasStart() {
                    return this.start_ > 0
                }
                hasData() {
                    return this.end_ > 0
                }
                recordStart() {
                    0 === this.start_ && this.recordStart_(), i.default.mark(this.emoji, "Start ".concat(this.name)), l()
                }
                recordStart_() {
                    this.start_ = Date.now(), this.startNumImports = a.size(), this.startImportTime = s()
                }
                recordEnd() {
                    0 === this.end_ && 0 !== this.start_ ? (this.recordEnd_(), i.default.mark(this.emoji, "Finish ".concat(this.name), this.end_ - this.start_)) : i.default.mark(this.emoji, "Finish ".concat(this.name)), l()
                }
                recordEnd_() {
                    this.end_ = Date.now(), this.endNumImports = a.size(), this.endImportTime = s()
                }
                set(e, t) {
                    0 === this.start_ && (this.start_ = e, this.end_ = e + t, this.endNumImports = a.size(), this.endImportTime = s()), i.default.mark(this.emoji, this.name, t), l()
                }
                serializeStart(e) {
                    return r(e, this.start_)
                }
                serializeEnd(e) {
                    return r(e, this.end_)
                }
                measure(e) {
                    if (this.start_ > 0) return i.default.time(this.emoji, this.name, e);
                    this.recordStart_();
                    let t = i.default.time(this.emoji, this.name, e);
                    return this.recordEnd_(), l(), t
                }
                async measureAsync(e) {
                    if (this.start_ > 0) return i.default.timeAsync(this.emoji, this.name, e);
                    this.recordStart_();
                    let t = await i.default.timeAsync(this.emoji, this.name, e);
                    return this.recordEnd_(), l(), t
                }
                async measureAsyncWithoutNesting(e) {
                    if (this.start_ > 0) return i.default.timeAsync(this.emoji, this.name, e);
                    this.recordStart_();
                    let t = Date.now();
                    i.default.mark(this.emoji, "Start ".concat(this.name));
                    let n = await e();
                    return i.default.mark(this.emoji, "Finish ".concat(this.name), Date.now() - t), this.recordEnd_(), l(), n
                }
                constructor(e, t) {
                    this.emoji = e, this.name = t, this.start_ = 0, this.startNumImports = 0, this.startImportTime = 0, this.end_ = 0, this.endNumImports = 0, this.endImportTime = 0
                }
            }
            class o {
                get time() {
                    return this.time_
                }
                record() {
                    0 === this.time_ ? (this.time_ = Date.now(), this.numImports = a.size(), this.importTime = s(), i.default.mark(this.emoji, this.name)) : !this.onlyOnce && i.default.mark(this.emoji, this.name), l()
                }
                hasData() {
                    return this.time_ > 0
                }
                serialize(e) {
                    return r(e, this.time_)
                }
                constructor(e, t, n = !1) {
                    this.emoji = e, this.name = t, this.onlyOnce = n, this.time_ = 0, this.numImports = null, this.importTime = 0
                }
            }
            class d {
                get time() {
                    return this.time_
                }
                record() {
                    0 === this.time_ && (this.time_ = s())
                }
                constructor() {
                    this.time_ = 0
                }
            }
            class c {
                constructor() {
                    this.loadIndex = new u("❗", "Load index.tsx"), this.loadFastConnectNativeModule = new u("\uD83D\uDCBE", "Load fast_connect native module"), this.beginFastConnect = new u("\uD83C\uDF10", "Fast Connect IDENTIFY"), this.loadImports = new u("\uD83C\uDFC3", "Load Imports"), this.init = new u("\uD83C\uDFC3", "Initial Initialization"), this.loadStorage = new u("\uD83D\uDCBE", "Load Storage"), this.parseStorage = new u("\uD83D\uDCBE", "Parse Storage"), this.loadMiniCache = new u("\uD83D\uDCBE", "Load Mini Cache"), this.fetchInitialGuildCache = new u("\uD83D\uDCBE", "Fetch Initial Guild Cache"), this.loadCachedMessages = new u("\uD83D\uDCBE", "Load Cached Messages"), this.renderApp = new o("\uD83C\uDFA8", "First React Render"), this.renderAppEffect = new o("\uD83C\uDFA8", "First React Render useEffect"), this.renderMessages = new o("\uD83C\uDFA8", "React Render Messages", !0), this.renderMessagesWithCache = new o("\uD83C\uDFA8", "React Render Cached Messages", !0), this.firstRowGenerator = new u("\uD83C\uDFA8", "RowGenerator.generate()"), this.renderLatestMessages = new o("\uD83C\uDFA8", "React Render Latest Messages"), this.initialGuild = new u("\uD83C\uDF10", "Initial Guild"), this.loadLazyCache = new u("\uD83D\uDCBE", "Load Lazy Cache"), this.fetchLazyCache = new u("\uD83D\uDCBE", "Fetch Lazy Cache"), this.parseLazyCache = new u("\uD83D\uDCBE", "Parse Lazy Cache"), this.fetchStaleChannels = new u("\uD83D\uDCBE", "Fetch Stale Channels"), this.deserializeCache = new u("\uD83D\uDCBE", "Deserialize Cache"), this.dispatchLazyCache = new u("\uD83D\uDCBE", "Dispatch Lazy Cache"), this.parseReady = new u("\uD83C\uDF10", "Parse READY"), this.ready = new u("\uD83C\uDF10", "READY"), this.hydrateReady = new u("\uD83C\uDF10", "Hydrate READY"), this.dispatchReady = new u("\uD83C\uDF10", "Dispatch READY"), this.parseReadySupplemental = new u("\uD83C\uDF10", "Parse READY Supplemental"), this.readySupplemental = new u("\uD83C\uDF10", "READY Supplemental"), this.hydrateReadySupplemental = new u("\uD83C\uDF10", "Hydrate READY Supplemental"), this.dispatchReadySupplemental = new u("\uD83C\uDF10", "Dispatch READY Supplemental"), this.fetchMessages = new u("\uD83C\uDF10", "Fetch messages"), this.dispatchMessages = new u("\uD83C\uDF10", "Dispatch messages"), this.imports = {
                        polyfillsEnd: new d,
                        sentryEnd: new d,
                        appStateChangeStart: new d,
                        appStateChangeEnd: new d,
                        loadMiniCacheStart: new d,
                        loadStorageStart: new d,
                        loadStorageEnd: new d
                    }
                }
            }
            var _ = new class e extends c {
                setTTICallback(e) {
                    l = () => {
                        !0 === e() && (l = () => !1)
                    }
                }
                setCacheInfo(e) {
                    this.cacheInfo = e
                }
                setInterstitial(e) {
                    this.interstitial = e, l()
                }
                addLocalMessages(e, t) {
                    for (this.cachedChannelCounts.set(e, t); this.cachedChannelCounts.size > 100;) {
                        let e = this.cachedChannelCounts.keys();
                        this.cachedChannelCounts.delete(e.next().value)
                    }
                }
                attachReadyPayloadProperties(e) {
                    this.readyProperties = e
                }
                appStateChanged(e) {
                    "active" === e && (null == this.firstAppActiveTime && (this.firstAppActiveTime = Date.now()), this.wasEverActive = !0), null == this.readyProperties.num_guilds && (this.didBackgroundApp = this.didBackgroundApp || "active" !== e)
                }
                recordRender(e, t) {
                    this.renderMessages.record(), (t || e > 0) && this.renderMessagesWithCache.record(), t && this.renderLatestMessages.record()
                }
                recordMessageRender(e, t, i, a) {
                    let {
                        default: l
                    } = n("249654");
                    if (!this.renderLatestMessages.hasData()) {
                        if (this.renderMessages.record(), t.length > 0 && this.renderMessagesWithCache.record(), i) {
                            if (this.renderLatestMessages.record(), null == this.cachedChannelId) {
                                this.messageCacheMissingReason = "no-cache";
                                return
                            }
                            if (this.cachedChannelId !== e) {
                                this.messageCacheMissingReason = "channel-changed";
                                return
                            }
                            if (null == this.cachedMessageIds || 0 === this.cachedMessageIds.length) {
                                this.messageCacheMissingReason = "no-cache";
                                return
                            }
                            if (0 === t.length) {
                                this.messageCacheMissingReason = "channel-empty";
                                return
                            }
                            if (e === this.cachedChannelId) {
                                var s;
                                let n = this.cachedMessageIds.sort(l.compare).reverse()[0],
                                    i = t.sort(l.compare).reverse()[0];
                                this.messageCacheAgeSeconds = Math.floor((l.extractTimestamp(i) - l.extractTimestamp(n)) / 1e3);
                                let r = t.filter(e => {
                                    var t;
                                    return null === (t = this.cachedMessageIds) || void 0 === t ? void 0 : t.includes(e)
                                }).length;
                                this.messageCacheCount = null !== (s = this.cachedChannelCounts.get(e)) && void 0 !== s ? s : null, this.messageCacheHavingCount = r, this.messageCacheMissingCount = t.length - r, this.messageRenderFullCount = t.length, this.messageRenderCachedCount = this.cachedMessageIds.length, this.messageRenderHasMoreAfter = a
                            }
                        } else(null == this.cachedChannelId || e === this.cachedChannelId) && (this.cachedChannelId = e, this.cachedMessageIds = t, t.length > 0 && (this.messageCacheMissingReason = null))
                    }
                }
                getStartTime(e) {
                    return this.extraProperties.headless_task_ran && null != this.firstAppActiveTime ? this.firstAppActiveTime : null == e || e <= 0 ? this.loadIndex.start : e
                }
                processNativeLogs(e, t) {
                    let n = this.getStartTime(t);
                    for (let t of e) switch (t.label) {
                        case "Finish MainApplication.initialize()":
                            this.extraProperties.time_main_application_initialize_end = r(n, t.timestamp);
                            break;
                        case "GET_REACT_INSTANCE_MANAGER_START":
                            this.extraProperties.time_get_react_instance_manager_start = r(n, t.timestamp);
                            break;
                        case "GET_REACT_INSTANCE_MANAGER_END":
                            this.extraProperties.time_get_react_instance_manager_end = r(n, t.timestamp);
                            break;
                        case "PROCESS_PACKAGES_START":
                            this.extraProperties.time_process_packages_start = r(n, t.timestamp);
                            break;
                        case "PROCESS_PACKAGES_END":
                            this.extraProperties.time_process_packages_end = r(n, t.timestamp);
                            break;
                        case "CREATE_CATALYST_INSTANCE_START":
                            this.extraProperties.time_create_catalyst_instance_start = r(n, t.timestamp);
                            break;
                        case "CREATE_CATALYST_INSTANCE_END":
                            this.extraProperties.time_create_catalyst_instance_end = r(n, t.timestamp);
                            break;
                        case "CREATE_UI_MANAGER_MODULE_START":
                            this.extraProperties.time_create_ui_manager_module_start = r(n, t.timestamp);
                            break;
                        case "CREATE_UI_MANAGER_MODULE_END":
                            this.extraProperties.time_create_ui_manager_module_end = r(n, t.timestamp);
                            break;
                        case "REACT_BRIDGE_LOADING_START":
                            this.extraProperties.time_react_bridge_loading_start = r(n, t.timestamp);
                            break;
                        case "REACT_BRIDGE_LOADING_END":
                            this.extraProperties.time_react_bridge_loading_end = r(n, t.timestamp);
                            break;
                        case "CacheStorage Init Start":
                            this.extraProperties.time_init_native_storage_start = r(n, t.timestamp);
                            break;
                        case "CacheStorage Init End":
                            this.extraProperties.time_init_native_storage_end = r(n, t.timestamp);
                            break;
                        case "ChatModule.updateRows() Start":
                            if (null != this.extraProperties.time_first_native_message_render_start) continue;
                            this.extraProperties.time_first_native_message_render_start = r(n, t.timestamp);
                            break;
                        case "ChatModule.updateRows() Finish":
                            if (null != this.extraProperties.time_first_native_message_render_end) continue;
                            this.extraProperties.time_first_native_message_render_end = r(n, t.timestamp)
                    }
                }
                serializeTTITracker(e) {
                    var t, a, l, s, r, u, o;
                    let d = this.getStartTime(e),
                        c = n("917351"),
                        _ = c(i.default.logGroups[0].logs).filter(e => e.log.startsWith("Require ")).map(e => null !== (o = e.delta) && void 0 !== o ? o : 0).sum();
                    return {
                        ...this.extraProperties,
                        time_load_index_start: this.loadIndex.serializeStart(d),
                        time_load_index_end: this.loadIndex.serializeEnd(d),
                        time_begin_fast_connect_start: this.beginFastConnect.serializeStart(d),
                        time_begin_fast_connect_end: this.beginFastConnect.serializeEnd(d),
                        time_load_imports_start: this.loadImports.serializeStart(d),
                        time_load_imports_end: this.loadImports.serializeEnd(d),
                        time_init_start: this.init.serializeStart(d),
                        time_init_end: this.init.serializeEnd(d),
                        time_load_storage_start: this.loadStorage.serializeStart(d),
                        time_load_storage_end: this.loadStorage.serializeEnd(d),
                        time_parse_storage_start: this.parseStorage.serializeStart(d),
                        time_parse_storage_end: this.parseStorage.serializeEnd(d),
                        time_load_mini_cache_start: this.loadMiniCache.serializeStart(d),
                        time_load_mini_cache_end: this.loadMiniCache.serializeEnd(d),
                        time_fetch_initial_guild_start: this.fetchInitialGuildCache.serializeStart(d),
                        time_fetch_initial_guild_end: this.fetchInitialGuildCache.serializeEnd(d),
                        time_load_cached_messages_start: this.loadCachedMessages.serializeStart(d),
                        time_load_cached_messages_end: this.loadCachedMessages.serializeEnd(d),
                        time_render_app_start: this.renderApp.serialize(d),
                        time_render_app_effect_start: this.renderAppEffect.serialize(d),
                        time_render_messages_end: this.renderMessages.serialize(d),
                        time_render_messages_with_cache_end: this.renderMessagesWithCache.serialize(d),
                        time_render_latest_messages_end: this.renderLatestMessages.serialize(d),
                        time_first_row_generator_start: this.firstRowGenerator.serializeStart(d),
                        time_first_row_generator_end: this.firstRowGenerator.serializeEnd(d),
                        time_initial_guild_start: this.initialGuild.serializeStart(d),
                        time_initial_guild_end: this.initialGuild.serializeEnd(d),
                        time_load_lazy_cache_start: this.loadLazyCache.serializeStart(d),
                        time_load_lazy_cache_end: this.loadLazyCache.serializeEnd(d),
                        time_fetch_lazy_cache_start: this.fetchLazyCache.serializeStart(d),
                        time_fetch_lazy_cache_end: this.fetchLazyCache.serializeEnd(d),
                        time_parse_lazy_cache_start: this.parseLazyCache.serializeStart(d),
                        time_parse_lazy_cache_end: this.parseLazyCache.serializeEnd(d),
                        time_fetch_stale_channels_start: this.fetchStaleChannels.serializeStart(d),
                        time_fetch_stale_channels_end: this.fetchStaleChannels.serializeEnd(d),
                        time_deserialize_cache_start: this.deserializeCache.serializeStart(d),
                        time_deserialize_cache_end: this.deserializeCache.serializeEnd(d),
                        time_dispatch_lazy_cache_start: this.dispatchLazyCache.serializeStart(d),
                        time_dispatch_lazy_cache_end: this.dispatchLazyCache.serializeEnd(d),
                        time_parse_ready_start: this.parseReady.serializeStart(d),
                        time_parse_ready_end: this.parseReady.serializeEnd(d),
                        time_ready_start: this.ready.serializeStart(d),
                        time_ready_end: this.ready.serializeEnd(d),
                        time_hydrate_ready_start: this.hydrateReady.serializeStart(d),
                        time_hydrate_ready_end: this.hydrateReady.serializeEnd(d),
                        time_dispatch_ready_start: this.dispatchReady.serializeStart(d),
                        time_dispatch_ready_end: this.dispatchReady.serializeEnd(d),
                        time_parse_ready_supplemental_start: this.parseReadySupplemental.serializeStart(d),
                        time_parse_ready_supplemental_end: this.parseReadySupplemental.serializeEnd(d),
                        time_ready_supplemental_start: this.readySupplemental.serializeStart(d),
                        time_ready_supplemental_end: this.readySupplemental.serializeEnd(d),
                        time_hydrate_ready_supplemental_start: this.hydrateReadySupplemental.serializeStart(d),
                        time_hydrate_ready_supplemental_end: this.hydrateReadySupplemental.serializeEnd(d),
                        time_dispatch_ready_supplemental_start: this.dispatchReadySupplemental.serializeStart(d),
                        time_dispatch_ready_supplemental_end: this.dispatchReadySupplemental.serializeEnd(d),
                        time_fetch_messages_start: this.fetchMessages.serializeStart(d),
                        time_fetch_messages_end: this.fetchMessages.serializeEnd(d),
                        time_dispatch_messages_start: this.dispatchMessages.serializeStart(d),
                        time_dispatch_messages_end: this.dispatchMessages.serializeEnd(d),
                        time_load_fast_connect_native_module_start: this.loadFastConnectNativeModule.serializeStart(d),
                        time_load_fast_connect_native_module_end: this.loadFastConnectNativeModule.serializeEnd(d),
                        identify_total_server_duration_ms: this.readyProperties.identify_total_server_duration_ms,
                        identify_api_duration_ms: this.readyProperties.identify_api_duration_ms,
                        identify_guilds_duration_ms: this.readyProperties.identify_guilds_duration_ms,
                        ready_compressed_byte_size: this.readyProperties.compressed_byte_size,
                        ready_uncompressed_byte_size: this.readyProperties.uncompressed_byte_size,
                        identify_compressed_byte_size: this.readyProperties.identify_compressed_byte_size,
                        identify_uncompressed_byte_size: this.readyProperties.identify_uncompressed_byte_size,
                        ready_compression_algorithm: this.readyProperties.compression_algorithm,
                        ready_packing_algorithm: this.readyProperties.packing_algorithm,
                        ready_unpack_duration_ms: this.readyProperties.unpack_duration_ms,
                        is_reconnect: this.readyProperties.is_reconnect,
                        is_fast_connect: this.readyProperties.is_fast_connect,
                        did_force_clear_guild_hashes: this.readyProperties.did_force_clear_guild_hashes,
                        num_guilds: this.readyProperties.num_guilds,
                        num_changed_guild_channels: this.readyProperties.num_guild_channels,
                        ready_presences_size: this.readyProperties.presences_size,
                        ready_users_size: this.readyProperties.users_size,
                        ready_read_states_size: this.readyProperties.read_states_size,
                        ready_private_channels_size: this.readyProperties.private_channels_size,
                        ready_user_guild_settings_size: this.readyProperties.user_guild_settings_size,
                        ready_relationships_size: this.readyProperties.relationships_size,
                        ready_experiments_size: this.readyProperties.experiments_size,
                        ready_user_settings_size: this.readyProperties.user_settings_size,
                        ready_remaining_data_size: this.readyProperties.remaining_data_size,
                        ready_guild_channels_size: this.readyProperties.guild_channels_size,
                        ready_guild_members_size: this.readyProperties.guild_members_size,
                        ready_guild_presences_size: this.readyProperties.guild_presences_size,
                        ready_guild_roles_size: this.readyProperties.guild_roles_size,
                        ready_guild_emojis_size: this.readyProperties.guild_emojis_size,
                        ready_guild_remaining_data_size: this.readyProperties.guild_remaining_data_size,
                        ready_guild_threads_size: this.readyProperties.guild_threads_size,
                        ready_guild_stickers_size: this.readyProperties.guild_stickers_size,
                        ready_guild_events_size: this.readyProperties.guild_events_size,
                        ready_guild_features_size: this.readyProperties.guild_features_size,
                        ready_size_metrics_duration_ms: this.readyProperties.size_metrics_duration_ms,
                        had_cache_at_startup: this.readyProperties.had_cache_at_startup,
                        used_cache_at_startup: this.readyProperties.used_cache_at_startup,
                        was_authenticated: this.wasAuthenticated,
                        did_background_app: this.didBackgroundApp,
                        interstitial: this.interstitial,
                        message_cache_missing_reason: this.messageCacheMissingReason,
                        message_cache_age_seconds: this.messageCacheAgeSeconds,
                        message_cache_count: this.messageCacheCount,
                        message_cache_having_count: this.messageCacheHavingCount,
                        message_cache_missing_count: this.messageCacheMissingCount,
                        message_render_full_count: this.messageRenderFullCount,
                        message_render_cached_count: this.messageRenderCachedCount,
                        message_render_has_more_after: this.messageRenderHasMoreAfter,
                        duration_major_js_imports: this.loadImports.end - this.loadIndex.start + _,
                        cache_num_guilds: null === (t = this.cacheInfo) || void 0 === t ? void 0 : t.guilds,
                        cache_num_private_channels: null === (a = this.cacheInfo) || void 0 === a ? void 0 : a.privateChannels,
                        cache_num_basic_channels: null === (l = this.cacheInfo) || void 0 === l ? void 0 : l.basicChannels,
                        cache_num_basic_channels_stale: null === (s = this.cacheInfo) || void 0 === s ? void 0 : s.basicChannelsStale,
                        cache_num_full_channels: null === (r = this.cacheInfo) || void 0 === r ? void 0 : r.fullChannels,
                        cache_num_full_channel_guilds: null === (u = this.cacheInfo) || void 0 === u ? void 0 : u.fullChannelGuilds,
                        num_imports_at_load_index_end: this.loadIndex.endNumImports,
                        num_imports_at_init_end: this.init.endNumImports,
                        num_imports_at_load_mini_cache_end: this.loadMiniCache.endNumImports,
                        num_imports_at_render_app_start: this.renderApp.numImports,
                        num_imports_at_render_app_effect_start: this.renderAppEffect.numImports,
                        num_imports_at_render_messages_end: this.renderMessages.numImports,
                        num_imports_at_render_messages_with_cache_end: this.renderMessagesWithCache.numImports,
                        num_imports_at_render_latest_messages_end: this.renderLatestMessages.numImports,
                        num_imports_at_load_lazy_cache_start: this.loadLazyCache.startNumImports,
                        num_imports_at_load_lazy_cache_end: this.loadLazyCache.endNumImports,
                        num_imports_at_ready_start: this.ready.startNumImports,
                        num_imports_at_ready_end: this.ready.endNumImports,
                        num_imports_at_ready_supplemental_start: this.readySupplemental.startNumImports,
                        num_imports_at_ready_supplemental_end: this.readySupplemental.endNumImports,
                        duration_imports_at_load_index_start: Math.ceil(this.loadIndex.startImportTime),
                        duration_imports_at_load_index_end: Math.ceil(this.loadIndex.endImportTime),
                        duration_imports_at_init_end: Math.ceil(this.init.endImportTime),
                        duration_imports_at_load_mini_cache_end: Math.ceil(this.loadMiniCache.endImportTime),
                        duration_imports_at_render_app_start: Math.ceil(this.renderApp.importTime),
                        duration_imports_at_render_app_effect_start: Math.ceil(this.renderAppEffect.importTime),
                        duration_imports_at_render_messages_end: Math.ceil(this.renderMessages.importTime),
                        duration_imports_at_render_messages_with_cache_end: Math.ceil(this.renderMessagesWithCache.importTime),
                        duration_imports_at_render_latest_messages_end: Math.ceil(this.renderLatestMessages.importTime),
                        duration_imports_at_load_lazy_cache_start: Math.ceil(this.loadLazyCache.startImportTime),
                        duration_imports_at_load_lazy_cache_end: Math.ceil(this.loadLazyCache.endImportTime),
                        duration_imports_at_ready_start: Math.ceil(this.ready.startImportTime),
                        duration_imports_at_ready_end: Math.ceil(this.ready.endImportTime),
                        duration_imports_at_ready_supplemental_start: Math.ceil(this.readySupplemental.startImportTime),
                        duration_imports_at_ready_supplemental_end: Math.ceil(this.readySupplemental.endImportTime),
                        duration_imports_at_polyfills_end: Math.ceil(this.imports.polyfillsEnd.time),
                        duration_imports_at_sentry_end: Math.ceil(this.imports.sentryEnd.time),
                        duration_imports_at_fast_connect_start: Math.ceil(this.beginFastConnect.startImportTime),
                        duration_imports_at_fast_connect_end: Math.ceil(this.beginFastConnect.endImportTime),
                        duration_imports_at_app_state_change_start: Math.ceil(this.imports.appStateChangeStart.time),
                        duration_imports_at_app_state_change_end: Math.ceil(this.imports.appStateChangeEnd.time),
                        duration_imports_at_load_mini_cache_start: Math.ceil(this.imports.loadMiniCacheStart.time),
                        duration_imports_at_load_storage_start: Math.ceil(this.imports.loadStorageStart.time),
                        duration_imports_at_load_storage_end: Math.ceil(this.imports.loadStorageEnd.time)
                    }
                }
                constructor(...e) {
                    super(...e), this.readyProperties = {}, this.didBackgroundApp = !1, this.wasEverActive = !1, this.wasAuthenticated = !1, this.interstitial = null, this.cachedChannelCounts = new Map, this.cachedChannelId = null, this.cachedMessageIds = null, this.messageCacheMissingReason = "never-loaded", this.messageCacheAgeSeconds = null, this.messageCacheCount = null, this.messageCacheHavingCount = null, this.messageCacheMissingCount = null, this.messageRenderFullCount = null, this.messageRenderCachedCount = null, this.messageRenderHasMoreAfter = null, this.firstAppActiveTime = null, this.cacheInfo = null, this.extraProperties = {}
                }
            }
        },
        823348: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                isLimitedAccessErrorCode: function() {
                    return a
                }
            });
            var i = n("49111");

            function a(e, t) {
                return e >= 400 && e < 500 && null != t && t >= i.AbortCodes.USER_LIMITED_ACCESS_DEFAULT && t <= i.AbortCodes.USER_LIMITED_ACCESS_MAX
            }
        },
        777523: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return s
                }
            });
            var i = n("730290"),
                a = n("49111");
            let l = /-/g;

            function s(e) {
                let [, , t, n] = e.split("/"), s = null == t ? void 0 : t.toUpperCase().replace(l, "_"), r = null == n ? void 0 : n.toUpperCase().replace(l, "_");
                if (a.UserSettingsSections.hasOwnProperty(s) && (null == r || "" === r || a.UserSettingsSections.hasOwnProperty(r))) {
                    let {
                        source: e
                    } = (0, i.parse)(location.search);
                    return {
                        source: e,
                        section: a.UserSettingsSections[s],
                        subsection: r
                    }
                }
                return null
            }
        },
        455711: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                showModal: function() {
                    return l
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("77078");

            function l(e) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await n.el("620595").then(n.bind(n, "620595"));
                    return n => (0, i.jsx)(t, {
                        analyticsLocation: e,
                        ...n
                    })
                })
            }
        },
        938157: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                showModal: function() {
                    return l
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("77078");

            function l(e, t) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: a
                    } = await n.el("59833").then(n.bind(n, "59833"));
                    return n => (0, i.jsx)(a, {
                        analyticsLocation: e,
                        platformType: t,
                        ...n
                    })
                })
            }
        },
        448819: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                showModal: function() {
                    return l
                }
            });
            var i = n("37983");
            n("884691");
            var a = n("77078");

            function l(e) {
                (0, a.openModalLazy)(async () => {
                    let {
                        default: t
                    } = await n.el("194167").then(n.bind(n, "194167"));
                    return n => (0, i.jsx)(t, {
                        analyticsLocation: e,
                        ...n
                    })
                })
            }
        },
        172538: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return h
                }
            });
            var i = n("913144"),
                a = n("716241"),
                l = n("659558"),
                s = n("870879"),
                r = n("239448"),
                u = n("42203"),
                o = n("42887"),
                d = n("945956"),
                c = n("18494"),
                _ = n("697218");
            let E = (e, t) => ({
                    channel_id: e.id,
                    channel_type: e.type,
                    guild_id: e.getGuildId(),
                    rtc_connection_id: d.default.getRTCConnectionId(),
                    duration: d.default.getDuration(),
                    media_session_id: d.default.getMediaSessionId(),
                    ...(0, a.getVoiceStateMetadata)(d.default.getGuildId(), d.default.getChannelId(), t)
                }),
                f = () => {
                    var e;
                    let t = (0, l.getLastUsedVideoBackgroundOption)(_.default.getCurrentUser());
                    return {
                        video_device_name: null === (e = o.default.getVideoDevices()[o.default.getVideoDeviceId()]) || void 0 === e ? void 0 : e.name,
                        video_hardware_scaling_enabled: o.default.getHardwareH264(),
                        video_effect_type: (0, r.getEffectAnalyticsType)(t),
                        video_effect_detail: (0, r.getEffectDetailAnalyticsName)(t)
                    }
                };

            function h(e, t, n, a) {
                let l = c.default.getVoiceChannelId(),
                    r = u.default.getChannel(l);
                if (null == t && null != l && null != r) {
                    let t = E(r, a);
                    if (e(), s.default.hasUsedBackgroundInCall) {
                        let e = {
                            ...t,
                            ...f()
                        };
                        i.default.dispatch({
                            type: "VIDEO_BACKGROUND_SHOW_FEEDBACK",
                            analyticsData: e
                        })
                    } else i.default.dispatch({
                        type: "VOICE_CHANNEL_SHOW_FEEDBACK",
                        analyticsData: t
                    })
                } else e()
            }
        },
        742171: function(e, t, n) {
            "use strict";

            function i(e) {
                return !1
            }
            n.r(t), n.d(t, {
                isVoicePanelEnabled: function() {
                    return i
                }
            })
        },
        450205: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("666038");
            class a extends i.default {
                toString() {
                    return this.name
                }
                constructor(e) {
                    super(), this.id = e.id, this.type = e.type, this.name = e.name, this.revoked = e.revoked || !1, this.integrations = e.integrations || [], this.visibility = e.visibility || 0, this.friendSync = e.friend_sync || !1, this.showActivity = e.show_activity || !1, this.verified = e.verified || !1, this.accessToken = e.access_token || null, this.twoWayLink = e.two_way_link || !1, this.metadata = e.metadata || null, this.metadataVisibility = e.metadata_visibility || 0
                }
            }
        },
        459018: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return l
                }
            });
            var i = n("666038"),
                a = n("766274");
            class l extends i.default {
                static createFromServer(e) {
                    return new l({
                        ...e,
                        user: new a.default(e.user)
                    })
                }
                constructor(e) {
                    var t;
                    super(), this.id = e.id, this.name = e.name, this.type = e.type, this.user = e.user, this.displayName = null !== (t = e.name_localized) && void 0 !== t ? t : e.name
                }
            }
        },
        719926: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("866227"),
                a = n.n(i),
                l = n("666038"),
                s = n("432173"),
                r = n("61069"),
                u = n("568734"),
                o = n("773336"),
                d = n("49111");
            class c extends l.default {
                isEdited() {
                    return null != this.editedTimestamp
                }
                getChannelId() {
                    return this.channel_id
                }
                getReaction(e) {
                    return this.reactions.find(t => (0, s.emojiEquals)(t.emoji, e))
                }
                userHasReactedWithEmoji(e, t) {
                    return this.reactions.some(n => {
                        if ((0, s.emojiEquals)(n.emoji, e)) return t && n.me || !t && n.me_burst
                    })
                }
                addReaction(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        n = (arguments.length > 2 && arguments[2], arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : []),
                        i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
                        a = -1,
                        l = this.reactions.map((l, u) => {
                            if ((0, s.emojiEquals)(l.emoji, e)) {
                                if (a = u, i) {
                                    if (t && l.me) return l;
                                    let e = t && l.me_burst ? l.burst_count : l.burst_count + 1,
                                        i = null != l.burst_colors && l.burst_colors.length > 0 ? l.burst_colors : n;
                                    l = {
                                        ...l,
                                        me_burst: !!t || l.me_burst,
                                        burst_count: e,
                                        count_details: {
                                            ...l.count_details,
                                            burst: e
                                        },
                                        burst_colors: i,
                                        themedBurstColors: r.default.buildEmojiReactionColorsPlatformed({
                                            colors: i,
                                            shouldProcessMobileColors: (0, o.isIOS)()
                                        })
                                    }
                                } else {
                                    if (t && l.me_burst) return l;
                                    let e = t && l.me ? l.count : l.count + 1;
                                    l = {
                                        ...l,
                                        count: e,
                                        count_details: {
                                            ...l.count_details,
                                            normal: e
                                        },
                                        me: !!t || l.me
                                    }
                                }
                            }
                            return l
                        });
                    return -1 === a && (i ? l.push({
                        emoji: e,
                        me: !1,
                        me_burst: t,
                        count: 0,
                        count_details: {
                            burst: 1,
                            normal: 0
                        },
                        burst_count: 1,
                        burst_colors: n,
                        themedBurstColors: r.default.buildEmojiReactionColorsPlatformed({
                            colors: null != n ? n : [],
                            shouldProcessMobileColors: (0, o.isIOS)()
                        })
                    }) : l.push({
                        emoji: e,
                        me: t,
                        me_burst: !1,
                        count: 1,
                        count_details: {
                            burst: 0,
                            normal: 1
                        },
                        burst_count: 0,
                        burst_colors: []
                    })), this.set("reactions", l)
                }
                addReactionBatch(e, t) {
                    return e.reduce((e, n) => {
                        let {
                            users: i,
                            emoji: a
                        } = n;
                        return i.reduce((e, n) => e.addReaction(a, n === t, n), e)
                    }, this)
                }
                removeReaction(e) {
                    var t, n, i;
                    let a = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        l = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                        r = -1,
                        u = this.reactions.map((t, n) => {
                            if ((0, s.emojiEquals)(t.emoji, e)) {
                                if (l) {
                                    let e = a && !t.me_burst ? t.burst_count : t.burst_count - 1;
                                    t = {
                                        ...t,
                                        burst_count: e,
                                        me_burst: !a && t.me_burst,
                                        count_details: {
                                            ...t.count_details,
                                            burst: e
                                        }
                                    }
                                } else {
                                    let e = a && !t.me ? t.count : t.count - 1;
                                    t = {
                                        ...t,
                                        count: e,
                                        me: !a && t.me,
                                        count_details: {
                                            ...t.count_details,
                                            normal: e
                                        }
                                    }
                                }
                                r = n
                            }
                            return t
                        }),
                        {
                            count: o,
                            burst_count: d,
                            count_details: c
                        } = null !== (t = u[r]) && void 0 !== t ? t : {},
                        _ = null !== (n = null == c ? void 0 : c.normal) && void 0 !== n ? n : 0,
                        E = null !== (i = null == c ? void 0 : c.burst) && void 0 !== i ? i : 0;
                    return -1 !== r && o <= 0 && d <= 0 && _ <= 0 && E <= 0 && u.splice(r, 1), this.set("reactions", u)
                }
                removeReactionsForEmoji(e) {
                    return this.set("reactions", this.reactions.filter(t => !(0, s.emojiEquals)(t.emoji, e)))
                }
                isSystemDM() {
                    return this.author.isSystemUser()
                }
                hasFlag(e) {
                    return (0, u.hasFlag)(this.flags, e)
                }
                isCommandType() {
                    return this.type === d.MessageTypes.CHAT_INPUT_COMMAND || this.type === d.MessageTypes.CONTEXT_MENU_COMMAND
                }
                isPoll() {
                    return null != this.poll || this.type === d.MessageTypes.POLL
                }
                toJS() {
                    return {
                        ...this,
                        webkhook_id: this.webhookId,
                        edited_timestamp: this.editedTimestamp,
                        mention_everyone: this.mentionEveryone
                    }
                }
                isFirstMessageInForumPost(e) {
                    return this.id === this.channel_id && e.isForumPost()
                }
                constructor(e) {
                    var t, n, i;
                    super(), this.id = e.id, this.type = e.type || d.MessageTypes.DEFAULT, this.channel_id = e.channel_id, this.author = e.author, this.content = e.content || "", this.customRenderedContent = e.customRenderedContent, this.attachments = e.attachments || [], this.embeds = e.embeds || [], this.mentions = e.mentions || [], this.mentionRoles = e.mentionRoles || [], this.mentionChannels = e.mentionChannels || [], this.mentioned = e.mentioned || !1, this.pinned = e.pinned || !1, this.mentionEveryone = e.mentionEveryone || !1, this.tts = e.tts || !1, this.codedLinks = e.codedLinks || [], this.giftCodes = e.giftCodes || [], this.timestamp = e.timestamp || a(), this.editedTimestamp = e.editedTimestamp || null, this.state = e.state || d.MessageStates.SENT, this.nonce = e.nonce || null, this.blocked = e.blocked || !1, this.call = e.call || null, this.bot = e.bot || !1, this.webhookId = e.webhookId || null, this.reactions = e.reactions || [], this.applicationId = e.application_id || e.applicationId || null, this.application = e.application || null, this.activity = e.activity || null, this.messageReference = e.messageReference || null, this.flags = e.flags || 0, this.isSearchHit = e.hit || e.isSearchHit || !1, this.stickers = e.stickers || [], this.stickerItems = null !== (n = null !== (t = e.sticker_items) && void 0 !== t ? t : e.stickerItems) && void 0 !== n ? n : [], this.components = e.components, this.loggingName = e.loggingName || null, this.colorString = e.colorString, this.nick = e.nick, this.interaction = e.interaction || null, this.interactionData = e.interactionData || null, this.interactionError = e.interactionError || null, this.roleSubscriptionData = e.roleSubscriptionData, this.purchaseNotification = e.purchaseNotification, this.poll = e.poll, this.referralTrialOfferId = e.referralTrialOfferId || null, this.giftInfo = null !== (i = e.gift_info) && void 0 !== i ? i : e.giftInfo
                }
            }
            var _ = c
        },
        268491: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return c
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("686298"),
                s = n("353927");
            let r = l.ApplicationStreamPresets.PRESET_VIDEO,
                u = l.ApplicationStreamResolutions.RESOLUTION_720,
                o = l.ApplicationStreamFPS.FPS_30;
            class d extends i.default.PersistedStore {
                initialize(e) {
                    if (null != e) {
                        var t;
                        r = null !== (t = e.preset) && void 0 !== t ? t : l.ApplicationStreamPresets.PRESET_VIDEO, u = e.resolution, o = e.fps
                    }
                }
                getState() {
                    return {
                        preset: r,
                        resolution: u,
                        fps: o
                    }
                }
            }
            d.displayName = "ApplicationStreamingSettingsStore", d.persistKey = "ApplicationStreamingSettingStore";
            var c = new d(a.default, {
                MEDIA_ENGINE_SET_GO_LIVE_SOURCE: function(e) {
                    let {
                        settings: t
                    } = e;
                    if ((null == t ? void 0 : t.context) === s.MediaEngineContextTypes.STREAM) {
                        if ((null == t ? void 0 : t.qualityOptions) == null || (null == t ? void 0 : t.qualityOptions.resolution) == null || (null == t ? void 0 : t.qualityOptions.frameRate) == null) return !1;
                        u = t.qualityOptions.resolution, o = t.qualityOptions.frameRate
                    }
                },
                STREAM_UPDATE_SETTINGS: function(e) {
                    let {
                        preset: t,
                        resolution: n,
                        frameRate: i
                    } = e, a = !1;
                    return null != t && (r = t, a = !0), null != n && (u = n, a = !0), null != i && (o = i, a = !0), a
                }
            })
        },
        373469: function(e, t, n) {
            "use strict";
            let i, a, l, s;
            n.r(t), n.d(t, {
                default: function() {
                    return P
                }
            });
            var r = n("446674"),
                u = n("913144"),
                o = n("76393"),
                d = n("374014"),
                c = n("223913"),
                _ = n("537429"),
                E = n("271938"),
                f = n("42203"),
                h = n("305961"),
                T = n("42887"),
                p = n("957255"),
                S = n("945956"),
                I = n("568307"),
                A = n("18494"),
                m = n("800762"),
                g = n("49111"),
                C = n("706530");
            let N = null,
                O = {};

            function R() {
                i = new Map, a = {}, l = {}, s = {}, O = {}
            }
            R();

            function v(e) {
                i.delete(e)
            }

            function M() {
                let e = [];
                for (let t in a) {
                    let n = a[t];
                    for (let i in n) e.push(a[t][i])
                }
                return e
            }

            function y(e) {
                let {
                    streamKey: t,
                    region: n,
                    viewerIds: a,
                    paused: s
                } = e;
                i.set(t, {
                    ...(0, d.decodeStreamKey)(t),
                    state: s ? g.ApplicationStreamStates.PAUSED : g.ApplicationStreamStates.ACTIVE
                }), l[t] = {
                    streamKey: t,
                    region: n,
                    viewerIds: a
                }
            }

            function D(e, t) {
                return e === C.StreamTypes.CALL || p.default.canWithPartialContext(g.Permissions.VIEW_CHANNEL, {
                    channelId: t
                })
            }

            function L(e) {
                let t = f.default.getChannel(e.channelId);
                return !!D(e.streamType, e.channelId) || null != t && (0, c.canWatchStream)(t, m.default, h.default, p.default, o.default)[0]
            }
            class U extends r.default.Store {
                initialize() {
                    this.syncWith([p.default], () => !0), this.waitFor(I.default, p.default)
                }
                isSelfStreamHidden(e) {
                    var t;
                    return null !== (t = O[e]) && void 0 !== t && t
                }
                getLastActiveStream() {
                    var e;
                    return (0, _.default)(T.default) ? null !== (e = Array.from(i.values()).pop()) && void 0 !== e ? e : null : null
                }
                getAllActiveStreams() {
                    return (0, _.default)(T.default) ? Array.from(i.values()) : []
                }
                getAllActiveStreamsForChannel(e) {
                    return (0, _.default)(T.default) ? Array.from(i.values()).filter(t => t.channelId === e) : []
                }
                getActiveStreamForStreamKey(e) {
                    var t;
                    return (0, _.default)(T.default) ? null !== (t = i.get(e)) && void 0 !== t ? t : null : null
                }
                getActiveStreamForApplicationStream(e) {
                    var t;
                    if (!(0, _.default)(T.default) || null == e) return null;
                    let n = (0, d.encodeStreamKey)(e);
                    return null !== (t = this.getActiveStreamForStreamKey(n)) && void 0 !== t ? t : null
                }
                getCurrentUserActiveStream() {
                    let e = A.default.getVoiceChannelId(),
                        t = f.default.getChannel(e);
                    return null == t ? null : this.getActiveStreamForUser(E.default.getId(), t.getGuildId())
                }
                getActiveStreamForUser(e, t) {
                    var n;
                    let i = this.getStreamForUser(e, t);
                    return null != i ? this.getActiveStreamForApplicationStream(i) : null !== (n = this.getAllActiveStreams().find(t => t.ownerId === e)) && void 0 !== n ? n : null
                }
                getStreamerActiveStreamMetadata() {
                    var e;
                    let t = A.default.getVoiceChannelId(),
                        n = f.default.getChannel(t);
                    if (null == n) return null;
                    let i = this.getActiveStreamForUser(E.default.getId(), n.getGuildId());
                    return null == i ? null : null !== (e = s[(0, d.encodeStreamKey)(i)]) && void 0 !== e ? e : null
                }
                getAnyStreamForUser(e) {
                    var t;
                    if (!(0, _.default)(T.default)) return null;
                    let n = a[e];
                    return null == n ? null : null !== (t = Object.values(n).find(e => L(e))) && void 0 !== t ? t : null
                }
                getStreamForUser(e, t) {
                    var n;
                    if (!(0, _.default)(T.default)) return null;
                    let i = null === (n = a[e]) || void 0 === n ? void 0 : n[null != t ? t : "null"];
                    return null != i && L(i) ? i : null
                }
                getRTCStream(e) {
                    var t;
                    return (0, _.default)(T.default) ? null !== (t = l[e]) && void 0 !== t ? t : null : null
                }
                getAllApplicationStreams() {
                    return (0, _.default)(T.default) ? M().filter(e => null != e && D(e.streamType, e.channelId)) : []
                }
                getAllApplicationStreamsForChannel(e) {
                    return (0, _.default)(T.default) ? M().filter(t => null != t && t.channelId === e && D(t.streamType, t.channelId)) : []
                }
                getViewerIds(e) {
                    if (!(0, _.default)(T.default)) return [];
                    let t = null;
                    t = "string" == typeof e ? e : (0, d.encodeStreamKey)(e);
                    let n = null != t ? l[t] : null;
                    return null != n ? n.viewerIds : []
                }
                getState() {
                    return (0, _.default)(T.default) ? {
                        activeStreams: Array.from(i.entries()),
                        streamsByUserAndGuild: a,
                        rtcStreams: l,
                        streamerActiveStreamMetadatas: s
                    } : {
                        activeStreams: [],
                        streamsByUserAndGuild: {},
                        rtcStreams: {},
                        streamerActiveStreamMetadatas: {}
                    }
                }
            }
            U.displayName = "ApplicationStreamingStore";
            var P = new U(u.default, {
                OVERLAY_INITIALIZE: function(e) {
                    let {
                        applicationStreamState: t
                    } = e;
                    a = t.streamsByUserAndGuild, i = new Map(t.activeStreams), l = t.rtcStreams, s = t.streamerActiveStreamMetadatas
                },
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t
                    } = e;
                    return t.reduce((e, t) => {
                        var n, i, l, s, r;
                        let {
                            userId: u,
                            guildId: o,
                            channelId: d,
                            sessionId: c,
                            selfStream: _
                        } = t;
                        if (_ && null != d) {
                            ;
                            return null == a[(n = {
                                streamType: null != o ? C.StreamTypes.GUILD : C.StreamTypes.CALL,
                                ownerId: u,
                                guildId: o,
                                channelId: d
                            }).ownerId] && (a[n.ownerId] = {}), a[n.ownerId][null !== (i = n.guildId) && void 0 !== i ? i : "null"] = n, !0
                        } {
                            ;
                            let t = E.default.getSessionId();
                            if (u === E.default.getId() && c !== t && null != S.default.getChannelId()) return e;
                            return l = u, s = null != (s = o) ? s : "null", (null === (r = a[l]) || void 0 === r ? void 0 : r[s]) != null && (delete a[l][s], !0) || e
                        }
                    }, !1)
                },
                STREAM_WATCH: function(e) {
                    let {
                        streamKey: t
                    } = e, n = (0, d.decodeStreamKey)(t);
                    i.delete(t), i.set(t, {
                        ...n,
                        state: g.ApplicationStreamStates.CONNECTING
                    }), n.ownerId === E.default.getId() && (O[n.channelId] = !1)
                },
                STREAM_START: function(e) {
                    let {
                        streamType: t,
                        guildId: n,
                        channelId: a,
                        pid: l,
                        sourceName: r
                    } = e, u = (0, d.encodeStreamKey)({
                        streamType: t,
                        guildId: n,
                        channelId: a,
                        ownerId: E.default.getId()
                    }), o = null != l ? I.default.getGameForPID(l) : null;
                    s[u] = {
                        id: null == o ? void 0 : o.id,
                        pid: l,
                        sourceName: r
                    }, i.delete(u), i.set(u, {
                        streamType: t,
                        guildId: n,
                        channelId: a,
                        ownerId: E.default.getId(),
                        state: g.ApplicationStreamStates.CONNECTING
                    })
                },
                STREAM_STOP: function(e) {
                    let {
                        streamKey: t
                    } = e;
                    s[t] = null
                },
                STREAM_CREATE: y,
                STREAM_UPDATE: y,
                STREAM_TIMED_OUT: function(e) {
                    let {
                        streamKey: t
                    } = e, n = i.get(t);
                    if (null == n) return !1;
                    i.set(t, {
                        ...n,
                        state: g.ApplicationStreamStates.FAILED
                    })
                },
                STREAM_DELETE: function(e) {
                    let {
                        streamKey: t,
                        unavailable: a,
                        reason: s
                    } = e;
                    delete l[t];
                    let r = i.get(t);
                    if (null == r) return !1;
                    let u = g.ApplicationStreamStates.ENDED;
                    if (a) u = g.ApplicationStreamStates.RECONNECTING;
                    else if (s === g.ApplicationStreamDeleteReasons.UNAUTHORIZED) u = g.ApplicationStreamStates.FAILED;
                    else if (s === g.ApplicationStreamDeleteReasons.SAFETY_GUILD_RATE_LIMITED) {
                        let {
                            guildId: e
                        } = (0, d.decodeStreamKey)(t);
                        n.el("772545").then(n.bind(n, "772545")).then(t => {
                            let {
                                default: n
                            } = t;
                            n(e)
                        }), u = g.ApplicationStreamStates.ENDED
                    }
                    i.set(t, {
                        ...r,
                        state: u
                    }), u === g.ApplicationStreamStates.ENDED && N !== t && v(t)
                },
                STREAM_CLOSE: function(e) {
                    let {
                        streamKey: t
                    } = e;
                    v(t)
                },
                STREAM_UPDATE_SELF_HIDDEN: function(e) {
                    var t;
                    let {
                        channelId: n,
                        selfStreamHidden: i
                    } = e, a = (0, d.isStreamKey)(N);
                    a && (null === (t = N) || void 0 === t ? void 0 : t.includes(E.default.getId())) && !1 === O[n] && !0 === i && (N = null), O[n] = i
                },
                RTC_CONNECTION_STATE: function(e) {
                    let {
                        streamKey: t,
                        state: n
                    } = e;
                    if (null == t) return !1;
                    let a = i.get(t);
                    if (null == a || a.state === g.ApplicationStreamStates.ENDED) return !1;
                    let l = a.state;
                    switch (n) {
                        case g.RTCConnectionStates.DISCONNECTED:
                            l = g.ApplicationStreamStates.RECONNECTING;
                            break;
                        case g.RTCConnectionStates.RTC_CONNECTED:
                            l = g.ApplicationStreamStates.ACTIVE
                    }
                    if (l === a.state) return !1;
                    i.set(t, {
                        ...a,
                        state: l
                    })
                },
                CHANNEL_RTC_SELECT_PARTICIPANT: function(e) {
                    let {
                        id: t,
                        channelId: n
                    } = e;
                    if (N = t, Array.from(i.values()).forEach(e => {
                            (0, d.encodeStreamKey)(e) !== N && e.state === g.ApplicationStreamStates.ENDED && v((0, d.encodeStreamKey)(e))
                        }), null == t) return;
                    let a = (0, d.isStreamKey)(t);
                    a && t.includes(E.default.getId()) && (O[n] = !1)
                },
                CONNECTION_OPEN: R,
                CONNECTION_CLOSED: R,
                LOGOUT: R
            })
        },
        950104: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return T
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("872717"),
                r = n("913144"),
                u = n("42203"),
                o = n("18494"),
                d = n("162771"),
                c = n("49111");
            let _ = {},
                E = {};

            function f() {
                let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.default.getChannelId(),
                    n = u.default.getChannel(t);
                if (null != n && null == n.getGuildId() && null != t && (null == _[t] || e)) {
                    var i;
                    return _[t] = null !== (i = _[t]) && void 0 !== i ? i : {
                        channelId: t,
                        ringing: []
                    }, r.default.dispatch({
                        type: "CALL_CONNECT",
                        channelId: t
                    }), !0
                }
                return !1
            }
            class h extends l.default.Store {
                initialize() {
                    this.waitFor(d.default, o.default)
                }
                getCall(e) {
                    return _[e]
                }
                getCalls() {
                    return Object.values(_)
                }
                getMessageId(e) {
                    let t = this.getCall(e);
                    return null != t ? t.messageId : null
                }
                isCallActive(e, t) {
                    let n = _[e];
                    return null != n && !n.unavailable && (null != t ? n.messageId === t : null != n.region)
                }
                isCallUnavailable(e) {
                    let t = _[e];
                    return null != t && t.unavailable
                }
                getInternalState() {
                    return {
                        calls: _,
                        enqueuedRings: E
                    }
                }
            }
            h.displayName = "CallStore";
            var T = new h(r.default, {
                CONNECTION_OPEN: function() {
                    return f(!0)
                },
                CONNECTION_CLOSED: function() {
                    _ = {}, E = {}
                },
                OVERLAY_INITIALIZE: function(e) {
                    let {
                        callStoreInternalState: t
                    } = e;
                    _ = {
                        ...t.calls
                    }, E = {
                        ...t.enqueuedRings
                    }
                },
                CONNECTION_RESUMED: function() {
                    return f(!0)
                },
                CHANNEL_SELECT: function(e) {
                    let {
                        channelId: t
                    } = e;
                    return f(!1, t)
                },
                CHANNEL_DELETE: function(e) {
                    let {
                        channel: t
                    } = e;
                    if (null != E[t.id] && delete E[t.id], null == _[t.id]) return !1;
                    delete _[t.id]
                },
                CALL_CREATE: function(e) {
                    let {
                        channelId: t,
                        messageId: n,
                        region: i,
                        ringing: a
                    } = e;
                    if (_[t] = {
                            channelId: t,
                            messageId: n,
                            region: i,
                            ringing: a,
                            unavailable: !1,
                            regionUpdated: !1
                        }, null != E[t]) {
                        let e = E[t];
                        delete E[t], 1 !== e.indexOf("all") && (e = null), s.default.post({
                            url: c.Endpoints.CALL_RING(t),
                            body: {
                                recipients: e
                            },
                            oldFormErrors: !0
                        })
                    }
                },
                CALL_UPDATE: function(e) {
                    let {
                        channelId: t,
                        messageId: n,
                        region: i,
                        ringing: a
                    } = e, l = _[t], s = null != l && (l.regionUpdated || l.region !== i);
                    _[t] = {
                        ..._[t],
                        messageId: n,
                        region: i,
                        ringing: a,
                        regionUpdated: s
                    }
                },
                CALL_DELETE: function(e) {
                    let {
                        channelId: t,
                        unavailable: n
                    } = e, i = _[t];
                    !0 === n && null != i ? _[t] = {
                        ...i,
                        unavailable: n
                    } : _[t] = {
                        channelId: t,
                        ringing: [],
                        messageId: null,
                        region: null,
                        regionUpdated: !1,
                        unavailable: n
                    }, null != E[t] && delete E[t]
                },
                CALL_ENQUEUE_RING: function(e) {
                    var t;
                    let {
                        channelId: n,
                        recipients: i
                    } = e;
                    E[n] = a.union(null !== (t = E[n]) && void 0 !== t ? t : [], null != i ? i : ["all"])
                },
                VOICE_CHANNEL_SELECT: function(e) {
                    let {
                        channelId: t
                    } = e;
                    null == t && (E = {})
                }
            })
        },
        982108: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                MESSAGE_REQUESTS_BASE_CHANNEL_ID: function() {
                    return p
                },
                isViewChannelSidebar: function() {
                    return O
                },
                default: function() {
                    return D
                }
            });
            var i = n("394846"),
                a = n("446674"),
                l = n("913144"),
                s = n("582713"),
                r = n("659500"),
                u = n("42203"),
                o = n("957255"),
                d = n("744983"),
                c = n("18494"),
                _ = n("162771"),
                E = n("697218"),
                f = n("49111"),
                h = n("724210"),
                T = n("843455");
            let p = "message_requests",
                S = !1,
                I = !1,
                A = !0,
                m = !1,
                g = {},
                C = {};

            function N(e) {
                if (null == e) return null;
                if ((0, h.isStaticChannelRoute)(e)) {
                    let t = _.default.getGuildId();
                    if (null == t) return null;
                    e = (0, h.buildGuildStaticChannelId)(e, t)
                }
                return e
            }

            function O(e) {
                return [s.SidebarType.VIEW_CHANNEL, s.SidebarType.VIEW_THREAD, s.SidebarType.VIEW_MESSAGE_REQUEST].includes(e.type)
            }

            function R(e) {
                let t = !1;
                m && (m = !1, t = !0);
                let n = N(c.default.getChannelId());
                return null != n && n in g && (delete g[n], t = !0), t && e ? e : !e
            }

            function v() {
                let e = !1;
                for (let t in g) {
                    let n = g[t];
                    if (n.type === s.SidebarType.VIEW_THREAD || n.type === s.SidebarType.VIEW_CHANNEL) {
                        let i = u.default.getChannel(n.channelId);
                        (null == i || !o.default.can(T.Permissions.VIEW_CHANNEL, i)) && (delete g[t], e = !0)
                    }
                }
                return e
            }

            function M() {
                if (m === d.default.isActive()) return !1;
                m = d.default.isActive()
            }
            class y extends a.default.PersistedStore {
                initialize(e) {
                    if (null != e) {
                        var t, n, i, a, l;
                        S = null !== (t = e.isMembersOpen) && void 0 !== t && t, I = null !== (n = e.isSummariesOpen) && void 0 !== n && n, A = null === (i = e.isProfileOpen) || void 0 === i || i, g = null !== (a = e.sidebars) && void 0 !== a ? a : {}, C = null !== (l = e.guildSidebars) && void 0 !== l ? l : {}
                    }
                    this.syncWith([d.default], M), this.syncWith([o.default], v)
                }
                getState() {
                    return {
                        isMembersOpen: S,
                        isSummariesOpen: I,
                        isProfileOpen: A,
                        sidebars: g,
                        guildSidebars: C
                    }
                }
                getSection(e, t) {
                    return m ? f.ChannelSections.SEARCH : null != (e = N(e)) && null != g[e] ? f.ChannelSections.SIDEBAR_CHAT : t && A ? f.ChannelSections.PROFILE : I ? f.ChannelSections.SUMMARIES : S ? f.ChannelSections.MEMBERS : f.ChannelSections.NONE
                }
                getSidebarState(e) {
                    return null == (e = N(e)) ? void 0 : g[e]
                }
                getGuildSidebarState(e) {
                    return null == e ? void 0 : C[e]
                }
                getCurrentSidebarChannelId(e) {
                    if (null == (e = N(e)) || m) return null;
                    let t = g[e];
                    return null == t ? null : t.type === s.SidebarType.VIEW_THREAD || t.type === s.SidebarType.VIEW_CHANNEL ? t.channelId : null
                }
                getCurrentSidebarMessageId(e) {
                    var t;
                    if (null == (e = N(e)) || m) return null;
                    let n = g[e];
                    return null == n ? null : n.type === s.SidebarType.VIEW_THREAD || n.type === s.SidebarType.VIEW_CHANNEL ? null === (t = n.details) || void 0 === t ? void 0 : t.initialMessageId : null
                }
            }
            y.displayName = "ChannelSectionStore", y.persistKey = "ChannelSectionStore2";
            var D = new y(l.default, {
                CHANNEL_TOGGLE_MEMBERS_SECTION: function() {
                    I && (I = R(I)), S = R(S)
                },
                PROFILE_PANEL_TOGGLE_SECTION: function() {
                    !A && r.ComponentDispatch.dispatch(f.ComponentActions.SEARCH_RESULTS_CLOSE), A = R(A)
                },
                CHANNEL_TOGGLE_SUMMARIES_SECTION: function() {
                    S && (S = R(S)), I = R(I)
                },
                SIDEBAR_VIEW_CHANNEL: function(e) {
                    let {
                        sidebarType: t,
                        baseChannelId: n,
                        channelId: i,
                        details: a
                    } = e;
                    m = !1;
                    let l = N(n);
                    return null != l && (g[l] = {
                        type: t,
                        channelId: i,
                        details: a
                    }, !0)
                },
                SIDEBAR_VIEW_GUILD: function(e) {
                    let {
                        sidebarType: t,
                        guildId: n,
                        baseChannelId: i,
                        details: a
                    } = e;
                    m = !1;
                    let l = N(i);
                    return null != l && (C[n] = {
                        type: t,
                        baseChannelId: l,
                        guildId: n,
                        details: a
                    }, !0)
                },
                SIDEBAR_CREATE_THREAD: function(e) {
                    let {
                        parentChannelId: t,
                        parentMessageId: n,
                        location: i
                    } = e;
                    m = !1;
                    let a = N(t);
                    null != a && (g[a] = {
                        type: s.SidebarType.CREATE_THREAD,
                        parentChannelId: t,
                        parentMessageId: n,
                        location: i
                    })
                },
                SIDEBAR_CLOSE: function(e) {
                    let {
                        baseChannelId: t
                    } = e, n = N(t);
                    null != n && delete g[n]
                },
                SIDEBAR_CLOSE_GUILD: function(e) {
                    let {
                        guildId: t
                    } = e;
                    return null != C[t] && (delete C[t], !0)
                },
                CHANNEL_DELETE: function(e) {
                    let {
                        channel: t
                    } = e;
                    if (t.id in g) return delete g[t.id], !0;
                    let n = !1;
                    for (let e in g) {
                        let i = g[e];
                        null != i && i.type === s.SidebarType.VIEW_CHANNEL && i.channelId === t.id && (delete g[e], n = !0)
                    }
                    return n
                },
                CHANNEL_SELECT: function() {
                    i.isMobile && S && (S = !1, I = !1)
                },
                THREAD_CREATE: function(e) {
                    var t;
                    let {
                        channel: n
                    } = e;
                    if (n.ownerId === (null === (t = E.default.getCurrentUser()) || void 0 === t ? void 0 : t.id)) return !1;
                    let i = g[n.parent_id];
                    null != i && i.type === s.SidebarType.CREATE_THREAD && i.parentMessageId === n.id && (g[n.parent_id] = {
                        type: s.SidebarType.VIEW_THREAD,
                        channelId: n.id
                    })
                },
                THREAD_DELETE: function(e) {
                    let {
                        channel: t
                    } = e, n = g[t.parent_id];
                    if (null == n || n.type !== s.SidebarType.VIEW_THREAD || n.channelId !== t.id) return !1;
                    delete g[t.parent_id]
                }
            })
        },
        47319: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return S
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("619340"),
                s = n("376556"),
                r = n("450205"),
                u = n("813006"),
                o = n("49111");
            let d = new Set([o.PlatformTypes.CONTACTS]),
                c = !0,
                _ = [],
                E = [],
                f = {},
                h = {},
                T = e => {
                    _ = e.filter(e => !d.has(e.type) && s.default.isSupported(e.type)), E = e.filter(e => d.has(e.type)), c = !1
                };
            class p extends i.default.Store {
                isJoining(e) {
                    return f[e] || !1
                }
                isFetching() {
                    return c
                }
                getAccounts() {
                    return _
                }
                getLocalAccounts() {
                    return E
                }
                getAccount(e, t) {
                    return _.find(n => (null == e || n.id === e) && n.type === t)
                }
                getLocalAccount(e) {
                    return E.find(t => t.type === e)
                }
                isSuggestedAccountType(e) {
                    return h[e] || !1
                }
            }
            p.displayName = "ConnectedAccountsStore";
            var S = new p(a.default, {
                CONNECTION_OPEN: function(e) {
                    let t = e.connectedAccounts.map(e => new r.default(e));
                    T(t)
                },
                USER_CONNECTIONS_UPDATE: function(e) {
                    if (e.local && null != e.accounts) {
                        let t = e.accounts.map(e => new r.default({
                            ...e,
                            integrations: e.integrations.map(e => ({
                                ...e,
                                guild: new u.default(e.guild)
                            }))
                        }));
                        T(t)
                    } else l.default.fetch()
                },
                USER_CONNECTIONS_INTEGRATION_JOINING: function(e) {
                    f[e.integrationId] = e.joining
                },
                USER_CONNECTION_UPDATE: function(e) {
                    let {
                        platformType: t,
                        id: n,
                        revoked: i,
                        accessToken: a
                    } = e, l = _.find(e => e.id === n && e.type === t);
                    if (null == l) return !1;
                    null != i && (l.revoked = i), null != a && (l.accessToken = a)
                }
            })
        },
        162805: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("446674"),
                a = n("233736"),
                l = n("913144");
            let s = {},
                r = {},
                u = {
                    scrollTop: 0
                };

            function o(e) {
                return {
                    guildId: e,
                    scrollTop: null,
                    scrollTo: null
                }
            }

            function d(e) {
                if (null != s[e]) {
                    let {
                        scrollTop: t,
                        scrollHeight: n,
                        offsetHeight: i
                    } = s[e];
                    return t === n - i
                }
                return !0
            }
            class c extends i.default.Store {
                percentageScrolled(e) {
                    if (null != s[e]) {
                        let {
                            scrollTop: t,
                            scrollHeight: n
                        } = s[e];
                        return t / n
                    }
                    return 1
                }
                getChannelDimensions(e) {
                    return s[e]
                }
                getGuildDimensions(e) {
                    var t;
                    return null !== (t = r[e]) && void 0 !== t ? t : o(e)
                }
                getGuildListDimensions() {
                    return u
                }
                isAtBottom(e) {
                    return d(e)
                }
            }
            c.displayName = "DimensionStore";
            var _ = new c(l.default, {
                UPDATE_CHANNEL_DIMENSIONS: function(e) {
                    let {
                        channelId: t,
                        scrollTop: n,
                        scrollHeight: i,
                        offsetHeight: l
                    } = e, r = s[t];
                    if (null == n || null == i || null == l) {
                        if (null == r) return !1;
                        delete s[t]
                    } else {
                        let e = {
                            channelId: t,
                            scrollTop: n,
                            scrollHeight: i,
                            offsetHeight: l
                        };
                        if (null != r && (0, a.default)(r, e)) return !1;
                        s[t] = e
                    }
                },
                UPDATE_CHANNEL_LIST_DIMENSIONS: function(e) {
                    let {
                        guildId: t,
                        scrollTop: n,
                        scrollTo: i
                    } = e;
                    null == r[t] && (r[t] = o(t)), void 0 !== n && (r[t].scrollTop = n);
                    let a = !1;
                    return void 0 !== i && (a = r[t].scrollTo !== i, r[t].scrollTo = i), null != i || a
                },
                UPDATE_GUILD_LIST_DIMENSIONS: function(e) {
                    let {
                        scrollTop: t
                    } = e;
                    u.scrollTop = t
                },
                CALL_CREATE: function(e) {
                    let {
                        channelId: t
                    } = e;
                    d(t) && delete s[t]
                }
            })
        },
        474643: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                DraftType: function() {
                    return a
                },
                default: function() {
                    return g
                }
            });
            var i, a, l = n("917351"),
                s = n.n(l),
                r = n("446674"),
                u = n("913144"),
                o = n("449008"),
                d = n("271938"),
                c = n("42203"),
                _ = n("341542"),
                E = n("49111");
            let f = E.MAX_MESSAGE_LENGTH_PREMIUM + 500;
            (i = a || (a = {}))[i.ChannelMessage = 0] = "ChannelMessage", i[i.ThreadSettings = 1] = "ThreadSettings", i[i.FirstThreadMessage = 2] = "FirstThreadMessage", i[i.ApplicationLauncherCommand = 3] = "ApplicationLauncherCommand", i[i.Poll = 4] = "Poll";
            let h = {};

            function T(e) {
                let t = h[e];
                return null == t && (t = h[e] = {}), t
            }

            function p(e) {
                var t, n;
                let {
                    type: i,
                    channelId: a,
                    draft: l,
                    draftType: s
                } = e, r = c.default.getChannel(a);
                l === (null == r ? void 0 : r.template) && (l = "");
                let u = d.default.getId();
                if (null != u && null != l && "" !== l) {
                    ;
                    let e = T(u),
                        i = e[a];
                    if (null == i && (i = e[a] = {}), (n = l).length > f && (n = n.substr(0, f)), (l = n) === (null === (t = i[s]) || void 0 === t ? void 0 : t.draft)) return !1;
                    i[s] = {
                        timestamp: Date.now(),
                        draft: l
                    }
                } else S(a, s);
                return "DRAFT_SAVE" === i
            }

            function S(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : d.default.getId();
                if (null == n) return !1;
                let i = T(n),
                    a = i[e];
                if (null == a) return !1;
                delete a[t], s.isEmpty(a) && delete i[e]
            }

            function I() {
                let e = d.default.getId();
                if (null == e || _.default.totalUnavailableGuilds > 0) return;
                let t = T(e);
                for (let e in t) null == c.default.getChannel(e) && delete t[e]
            }

            function A(e) {
                let {
                    channel: {
                        id: t
                    }
                } = e, n = d.default.getId();
                if (null == n) return !1;
                let i = T(n);
                return delete i[t], !1
            }
            class m extends r.default.PersistedStore {
                initialize(e) {
                    h = null != e ? e : {}, ! function() {
                        for (let [e, t] of Object.entries(h))
                            for (let [n, i] of Object.entries(t)) {
                                let t = i[a.ChannelMessage];
                                null != t && ("" === t.draft || "" === t.draft.trim()) && S(n, a.ChannelMessage, e)
                            }
                    }(), this.waitFor(d.default, c.default, _.default)
                }
                getState() {
                    return h
                }
                getThreadDraftWithParentMessageId(e) {
                    let t = d.default.getId();
                    if (null == t) return;
                    let n = T(t),
                        i = Object.keys(n).find(t => {
                            let n = this.getThreadSettings(t);
                            return (null == n ? void 0 : n.parentMessageId) === e
                        });
                    return null != i ? this.getThreadSettings(i) : void 0
                }
                getRecentlyEditedDrafts(e) {
                    let t = d.default.getId();
                    if (null == t) return [];
                    let n = T(t);
                    return s(n).mapValues(t => null == t ? void 0 : t[e]).pickBy(o.isNotNullish).toPairs().map(e => {
                        let [t, {
                            timestamp: n,
                            draft: i
                        }] = e;
                        return {
                            channelId: t,
                            timestamp: n,
                            draft: i
                        }
                    }).sortBy(e => {
                        let {
                            timestamp: t
                        } = e;
                        return -t
                    }).value()
                }
                getDraft(e, t) {
                    let n = d.default.getId();
                    if (null == n) return "";
                    let i = T(n),
                        a = i[e];
                    if (null != a) {
                        let e = a[t];
                        if (null != e) return e.draft
                    }
                    return ""
                }
                getThreadSettings(e) {
                    let t = d.default.getId();
                    if (null == t) return null;
                    let n = T(t),
                        i = n[e];
                    return null == i ? null : i[a.ThreadSettings]
                }
            }
            m.displayName = "DraftStore", m.persistKey = "DraftStore", m.migrations = [e => {
                if (null == e) return {};
                for (let t in e) "timestamp" in e[t] && (e[t] = {
                    [a.ChannelMessage]: e[t]
                });
                return e
            }, e => {
                let t = d.default.getId();
                if (null == e || null == t) return {};
                let n = {},
                    i = n[t] = {};
                for (let t in e) i[t] = e[t];
                return n
            }];
            var g = new m(u.default, {
                CONNECTION_OPEN: function() {
                    let e = d.default.getId();
                    return !(e in h) && (h[e] = {}), I(), !1
                },
                LOGOUT: function(e) {
                    !e.isSwitchingAccount && (h = {})
                },
                MULTI_ACCOUNT_REMOVE_ACCOUNT: function(e) {
                    e.userId in h && delete h[e.userId]
                },
                GUILD_DELETE: function() {
                    return I(), !1
                },
                CHANNEL_DELETE: A,
                THREAD_DELETE: A,
                THREAD_CREATE: function(e) {
                    let {
                        channel: t
                    } = e, n = d.default.getId();
                    if (null == n || t.ownerId === n) return !1;
                    let i = T(n),
                        l = i[t.parent_id];
                    if (null == l) return !1;
                    let s = l[a.ThreadSettings];
                    if (null == s) return !1;
                    if (s.parentMessageId !== t.id) return !1;
                    {
                        var r, u;
                        let e = i[t.parent_id];
                        if (null == e) return !1;
                        let n = null !== (u = null === (r = e[a.FirstThreadMessage]) || void 0 === r ? void 0 : r.draft) && void 0 !== u ? u : "";
                        "" !== n && (i[t.id] = {
                            [a.ChannelMessage]: {
                                timestamp: Date.now(),
                                draft: n
                            }
                        }), S(t.parent_id, a.ThreadSettings), S(t.parent_id, a.FirstThreadMessage)
                    }
                },
                DRAFT_SAVE: p,
                DRAFT_CHANGE: p,
                DRAFT_CLEAR: function(e) {
                    let {
                        channelId: t,
                        draftType: n
                    } = e;
                    return S(t, n)
                },
                THREAD_SETTINGS_DRAFT_CHANGE: function(e) {
                    let {
                        channelId: t,
                        draft: n
                    } = e, i = d.default.getId();
                    if (null == i) return;
                    let l = T(i),
                        s = l[t];
                    null == s && (s = l[t] = {}), s[a.ThreadSettings] = {
                        timestamp: Date.now(),
                        ...s[a.ThreadSettings],
                        ...n,
                        parentChannelId: t
                    }
                }
            })
        },
        848872: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return R
                }
            });
            var i = n("714617"),
                a = n.n(i),
                l = n("446674"),
                s = n("872717"),
                r = n("913144"),
                u = n("619340"),
                o = n("376556"),
                d = n("550368"),
                c = n("47319"),
                _ = n("102985"),
                E = n("49111");
            let f = e => "https://youtube.com/watch?v=".concat(e),
                h = /live_user_(.*)-\{width\}/,
                T = null,
                p = 0,
                S = null,
                I = new Set,
                A = {};

            function m(e, t, n) {
                return s.default.get({
                    url: "".concat("https://api.twitch.tv/helix").concat(e),
                    query: t,
                    headers: {
                        "Client-ID": "33kozedd0zs6fbauka98psnc7zwom2s",
                        Authorization: "Bearer ".concat(n)
                    }
                })
            }
            async function g(e, t) {
                let n = A[e];
                if (null != n) return n;
                let {
                    body: {
                        data: i
                    }
                } = await m("/games", {
                    id: e
                }, t), a = i[0].name;
                return A[e] = a, a
            }
            let C = new class e {
                start() {
                    !this._started && (this._started = !0, c.default.isFetching() ? u.default.fetch() : this._check())
                }
                stop() {
                    this._started = !1, S = null, p = 0, null != this._nextCheck && clearTimeout(this._nextCheck), r.default.dispatch({
                        type: "STREAMING_UPDATE",
                        stream: null
                    })
                }
                async _checkTwitch(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                    if (e.revoked || null == (t = null != t ? t : e.accessToken)) return null;
                    try {
                        var n, i, a, l, s;
                        let {
                            body: {
                                data: r
                            }
                        } = await m("/streams", {
                            user_id: e.id,
                            first: 1
                        }, t), u = r[0];
                        if (null == u || "live" !== u.type) throw Error("no stream");
                        let {
                            thumbnail_url: c,
                            game_id: _,
                            title: f
                        } = u, T = {
                            large_image: null != c && null !== (i = (0, d.getAssetFromImageURL)(E.PlatformTypes.TWITCH, c)) && void 0 !== i ? i : void 0
                        }, p = await g(_, t), S = o.default.get(E.PlatformTypes.TWITCH);
                        let I = null !== (l = c, a = null === (s = h.exec(l)) || void 0 === s ? void 0 : s[1]) && void 0 !== a ? a : e.name;
                        return {
                            url: null === (n = S.getPlatformUserUrl) || void 0 === n ? void 0 : n.call(S, {
                                id: e.id,
                                name: I
                            }),
                            name: S.name,
                            assets: T,
                            details: f,
                            state: p
                        }
                    } catch (n) {
                        if (401 === n.status && null == t) return u.default.refreshAccessToken(e.type, e.id).then(t => this._checkTwitch(e, t)).catch(() => null);
                        return null
                    }
                }
                async _checkYouTube(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                    if (S = null, e.revoked || I.has(e.id)) return null;
                    try {
                        var n;
                        let {
                            body: {
                                items: i
                            }
                        } = await s.default.get({
                            url: "https://www.googleapis.com/youtube/v3/liveBroadcasts",
                            query: {
                                part: "id,snippet",
                                broadcastStatus: "active",
                                broadcastType: "all"
                            },
                            headers: {
                                Authorization: "Bearer ".concat(null != t ? t : e.accessToken)
                            },
                            oldFormErrors: !0
                        });
                        if (i.length < 1) throw Error("no stream");
                        let {
                            id: a,
                            snippet: {
                                title: l,
                                thumbnails: r
                            }
                        } = i[0], u = {
                            large_image: null !== (n = (0, d.getAssetFromImageURL)(E.PlatformTypes.YOUTUBE, r.high.url)) && void 0 !== n ? n : void 0
                        };
                        return S = {
                            url: f(a),
                            name: o.default.get(E.PlatformTypes.YOUTUBE).name,
                            details: l,
                            assets: u
                        }
                    } catch (n) {
                        if (401 === n.status && null == t) return u.default.refreshAccessToken(e.type, e.id).then(t => this._checkYouTube(e, t)).catch(() => null);
                        return 403 === n.status && I.add(e.id), null
                    }
                }
                _check() {
                    if (!this._started) return;
                    let e = c.default.getAccounts();
                    if (null == e) return;
                    null != this._nextCheck && clearTimeout(this._nextCheck);
                    let t = [E.PlatformTypes.TWITCH],
                        n = Date.now();
                    p <= n && (t.push(E.PlatformTypes.YOUTUBE), p = n + 3e5);
                    let i = e.filter(e => t.includes(e.type)).map(e => e.type === E.PlatformTypes.TWITCH ? this._checkTwitch(e) : this._checkYouTube(e));
                    Promise.allSettled(i).then(e => {
                        if (this._started) {
                            var t;
                            let n = null === (t = e.find(e => "fulfilled" === e.status && null != e.value)) || void 0 === t ? void 0 : t.value;
                            null == n && null != S && (n = S), r.default.dispatch({
                                type: "STREAMING_UPDATE",
                                stream: n
                            })
                        }
                        this._scheduleCheck()
                    })
                }
                _scheduleCheck() {
                    this._started && (this._nextCheck = setTimeout(() => this._check(), 6e4))
                }
                constructor() {
                    this._started = !1
                }
            };

            function N() {
                _.default.enabled ? C.start() : C.stop()
            }
            class O extends l.default.Store {
                initialize() {
                    N(), this.waitFor(c.default), this.syncWith([_.default], N)
                }
                getStream() {
                    return T
                }
            }
            O.displayName = "ExternalStreamingStore";
            var R = new O(r.default, {
                STREAMING_UPDATE: function(e) {
                    var t;
                    if (a(e.stream, T)) return !1;
                    T = null !== (t = e.stream) && void 0 !== t ? t : null
                },
                USER_CONNECTIONS_UPDATE: () => C._check()
            })
        },
        124948: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return p
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("49978"),
                u = n("560208"),
                o = n("42203"),
                d = n("26989");
            let c = new r.default(d.default.isMember, (e, t) => {
                s.default.dispatch({
                    type: "GUILD_MEMBERS_REQUEST",
                    guildIds: [e],
                    userIds: t
                })
            });

            function _() {
                c.reset()
            }

            function E(e, t) {
                return c.request(e, t), !1
            }

            function f(e, t) {
                return t.forEach(t => {
                    let {
                        author: n,
                        mentions: i
                    } = t;
                    null != n && E(e, n.id), null == i || i.forEach(t => E(e, t.id))
                }), !1
            }

            function h(e) {
                let {
                    channelId: t,
                    messages: n
                } = e, i = o.default.getChannel(t);
                return null != i && null != i.guild_id && f(i.guild_id, n)
            }
            class T extends l.default.Store {
                initialize() {
                    this.waitFor(o.default, d.default)
                }
                requestMember(e, t) {
                    E(e, t)
                }
            }
            T.displayName = "GuildMemberRequesterStore";
            var p = new T(s.default, {
                CONNECTION_CLOSED: _,
                CONNECTION_OPEN: _,
                CONNECTION_RESUMED: function() {
                    return c.requestUnacknowledged(), !1
                },
                GUILD_MEMBERS_CHUNK: function(e) {
                    let {
                        guildId: t,
                        members: n,
                        notFound: i
                    } = e;
                    return n.forEach(e => {
                        c.acknowledge(t, e.user.id)
                    }), null != i && i.forEach(e => c.acknowledge(t, e)), !1
                },
                SEARCH_FINISH: function(e) {
                    let {
                        guildId: t,
                        messages: n
                    } = e;
                    return null != t && f(t, a.flatten(n))
                },
                LOCAL_MESSAGES_LOADED: h,
                LOAD_MESSAGES_SUCCESS: h,
                LOAD_MESSAGES_AROUND_SUCCESS: h,
                LOAD_PINNED_MESSAGES_SUCCESS: h,
                LOAD_RECENT_MENTIONS_SUCCESS: h,
                GUILD_FEED_FETCH_SUCCESS: function(e) {
                    let {
                        guildId: t,
                        data: n
                    } = e, i = (0, u.getMessagesFromGuildFeedFetch)(n);
                    return f(t, i)
                }
            })
        },
        247013: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return o
                }
            });
            var i = n("446674"),
                a = n("95410"),
                l = n("913144");
            let s = "GuildNSFWAgreeStore",
                r = {};
            class u extends i.default.Store {
                initialize() {
                    var e;
                    r = null !== (e = a.default.get(s)) && void 0 !== e ? e : r
                }
                didAgree(e) {
                    return null != e && (r[e] || !1)
                }
            }
            u.displayName = "GuildNSFWAgreeStore";
            var o = new u(l.default, {
                GUILD_NSFW_AGREE: function(e) {
                    let {
                        guildId: t
                    } = e;
                    r[t] = !0, a.default.set(s, r)
                }
            })
        },
        88093: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return S
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("568734"),
                s = n("26989"),
                r = n("305961"),
                u = n("697218"),
                o = n("49111"),
                d = n("657944");
            let c = {
                    notClaimed: !1,
                    notEmailVerified: !1,
                    notPhoneVerified: !1,
                    newAccount: !1,
                    newMember: !1,
                    canChat: !0
                },
                _ = new Set,
                E = {};

            function f(e) {
                let t;
                h(e), _.add(e);
                let n = r.default.getGuild(e),
                    i = u.default.getCurrentUser();
                if (null == n || n.verificationLevel === o.VerificationLevels.NONE || null == i || n.isOwner(i) || i.isPhoneVerified()) return;
                let c = s.default.getMember(n.id, i.id);
                if (null != c) {
                    var f;
                    if ((0, l.hasFlag)(null !== (f = c.flags) && void 0 !== f ? f : 0, d.GuildMemberFlags.BYPASSES_VERIFICATION)) return;
                    let e = new Set;
                    for (let t of c.roles) {
                        let i = n.getRole(t);
                        null != i && !i.managed && e.add(t)
                    }
                    let t = new Date("2022-12-02 00:00:00"),
                        i = null == c.joinedAt || new Date(c.joinedAt) < t,
                        a = n.hasFeature(o.GuildFeatures.GUILD_ONBOARDING_EVER_ENABLED) && !i;
                    if (!a && e.size > 0) return
                }
                let T = +i.createdAt + 6e4 * o.VerificationCriteria.ACCOUNT_AGE - Date.now(),
                    p = +n.joinedAt + 6e4 * o.VerificationCriteria.MEMBER_AGE - Date.now(),
                    S = n.verificationLevel >= o.VerificationLevels.LOW && !i.isClaimed(),
                    I = !1,
                    A = !1,
                    m = !1,
                    g = !1;
                !i.isPhoneVerified() && !i.isStaff() && (I = n.verificationLevel >= o.VerificationLevels.LOW && !i.verified, A = n.verificationLevel >= o.VerificationLevels.VERY_HIGH, m = n.verificationLevel >= o.VerificationLevels.MEDIUM && T > 0, g = n.verificationLevel >= o.VerificationLevels.HIGH && p > 0);
                let C = [];
                g && C.push(p), m && C.push(T), C.length > 0 && (t = setTimeout(() => a.default.dispatch({
                    type: "GUILD_VERIFICATION_CHECK",
                    guildId: e
                }), Math.max(...C))), E[e] = {
                    notClaimed: S,
                    notEmailVerified: I,
                    notPhoneVerified: A,
                    newAccount: m,
                    newMember: g,
                    canChat: !(S || I || A || m || g),
                    accountDeadline: new Date(Date.now() + T),
                    memberDeadline: new Date(Date.now() + p),
                    timeoutRef: t
                }
            }

            function h(e) {
                let t = E[e];
                null != t && clearTimeout(t.timeoutRef), delete E[e]
            }

            function T(e) {
                _.delete(e.guild.id), f(e.guild.id)
            }
            class p extends i.default.Store {
                initialize() {
                    this.waitFor(r.default, u.default)
                }
                getCheck(e) {
                    var t;
                    return !_.has(e) && f(e), null !== (t = E[e]) && void 0 !== t ? t : c
                }
                canChatInGuild(e) {
                    return this.getCheck(e).canChat
                }
            }
            p.displayName = "GuildVerificationStore";
            var S = new p(a.default, {
                CONNECTION_OPEN: function() {
                    for (let e in _.clear(), E) h(e)
                },
                CONNECTION_CLOSED: function() {
                    Object.keys(E).forEach(h)
                },
                CURRENT_USER_UPDATE: function() {
                    _.clear()
                },
                GUILD_CREATE: T,
                GUILD_UPDATE: T,
                GUILD_DELETE: function(e) {
                    let {
                        guild: t
                    } = e;
                    h(t.id)
                },
                GUILD_MEMBER_UPDATE: function(e) {
                    var t;
                    let {
                        guildId: n,
                        user: i
                    } = e;
                    if (i.id !== (null === (t = u.default.getCurrentUser()) || void 0 === t ? void 0 : t.id)) return !1;
                    _.delete(n)
                },
                GUILD_VERIFICATION_CHECK: function(e) {
                    let {
                        guildId: t
                    } = e;
                    f(t)
                }
            })
        },
        603699: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return C
                }
            });
            var i, a = n("446674"),
                l = n("913144"),
                s = n("987317"),
                r = n("49671"),
                u = n("845579"),
                o = n("773336"),
                d = n("271938"),
                c = n("49111"),
                _ = n("353927");
            let E = Date.now(),
                f = !1,
                h = !1,
                T = !1,
                p = !1,
                S = !1;

            function I() {
                return T || p || (0, o.isAndroid)() && S
            }

            function A() {
                Date.now() - E > c.IDLE_DURATION || I() ? f || l.default.dispatch({
                    type: "IDLE",
                    idle: !0,
                    idleSince: E
                }) : f && l.default.dispatch({
                    type: "IDLE",
                    idle: !1
                }), Date.now() - E > Math.min(1e3 * u.AfkTimeout.getSetting(), c.IDLE_DURATION) || I() ? h || l.default.dispatch({
                    type: "AFK",
                    afk: !0
                }) : h && l.default.dispatch({
                    type: "AFK",
                    afk: !1
                })
            }!__OVERLAY__ && (o.isPlatformEmbedded && (null === (i = r.default) || void 0 === i ? void 0 : i.remotePowerMonitor) != null ? (! function e() {
                var t, n;
                let i = t => {
                    E = Math.max(Date.now() - t, E), A(), setTimeout(e, 1e4)
                };
                if ((null === (n = r.default) || void 0 === n ? void 0 : null === (t = n.remotePowerMonitor) || void 0 === t ? void 0 : t.getSystemIdleTimeMs) != null) {
                    let e = r.default.remotePowerMonitor.getSystemIdleTimeMs();
                    e instanceof Promise ? e.then(i) : i(e)
                }
            }(), r.default.remotePowerMonitor.on("resume", () => {
                T = !1, m({})
            }), r.default.remotePowerMonitor.on("suspend", () => {
                T = !0, m({}), s.default.disconnect()
            }), r.default.remotePowerMonitor.on("lock-screen", () => {
                p = !0, m({})
            }), r.default.remotePowerMonitor.on("unlock-screen", () => {
                p = !1, m({})
            })) : setInterval(A, .25 * c.IDLE_DURATION));

            function m(e) {
                let {
                    timestamp: t,
                    type: n
                } = e, i = "OVERLAY_SET_NOT_IDLE" === n && null != t;
                return (!i || !(t <= E)) && (E = i ? t : Date.now(), __OVERLAY__ ? l.default.dispatch({
                    type: "OVERLAY_SET_NOT_IDLE",
                    timestamp: E
                }) : A(), !1)
            }
            class g extends a.default.Store {
                isIdle() {
                    return f
                }
                isAFK() {
                    return h
                }
                getIdleSince() {
                    return f ? E : null
                }
            }
            g.displayName = "IdleStore";
            var C = new g(l.default, {
                IDLE: function(e) {
                    f = e.idle
                },
                AFK: function(e) {
                    h = e.afk
                },
                SPEAKING: function(e) {
                    let {
                        userId: t,
                        speakingFlags: n
                    } = e;
                    return n !== _.SpeakingFlags.NONE && t === d.default.getId() && m({}), !1
                },
                APP_STATE_UPDATE: function(e) {
                    let {
                        state: t
                    } = e;
                    return S = t === c.AppStates.BACKGROUND, E = Date.now(), A(), !1
                },
                OVERLAY_SET_NOT_IDLE: m,
                CHANNEL_SELECT: m,
                VOICE_CHANNEL_SELECT: m,
                WINDOW_FOCUS: m,
                OVERLAY_INITIALIZE: m,
                OVERLAY_SET_INPUT_LOCKED: m,
                USER_SETTINGS_PROTO_UPDATE: m
            })
        },
        330154: function(e, t, n) {
            "use strict";
            let i;
            n.r(t), n.d(t, {
                default: function() {
                    return g
                }
            });
            var a = n("671725"),
                l = n.n(a),
                s = n("533865"),
                r = n.n(s),
                u = n("953406"),
                o = n.n(u),
                d = n("446674"),
                c = n("913144"),
                _ = n("517763"),
                E = n("91366");
            let f = {},
                h = {},
                T = {},
                p = {},
                S = !1,
                I = !1,
                A = !1;
            class m extends d.default.Store {
                getInvite(e) {
                    var t, n;
                    let {
                        targetType: i,
                        targetUserId: a,
                        targetApplicationId: l
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    return i === E.InviteTargetTypes.STREAM && null != a ? null === (t = h[e]) || void 0 === t ? void 0 : t[a] : i === E.InviteTargetTypes.EMBEDDED_APPLICATION && null != l ? null === (n = T[e]) || void 0 === n ? void 0 : n[l] : f[e]
                }
                getFriendInvite() {
                    return i
                }
                getFriendInvitesFetching() {
                    return S
                }
                canRevokeFriendInvite() {
                    return null != i && !I && !A
                }
            }
            m.displayName = "InstantInviteStore";
            var g = new m(c.default, {
                CONNECTION_OPEN: function() {
                    f = {}, h = {}, T = {}, p = {}, i = null, I = !1, A = !1, S = !1
                },
                CHANNEL_DELETE: function(e) {
                    let {
                        channel: t
                    } = e;
                    delete f[t.id], delete h[t.id], delete T[t.id]
                },
                FRIEND_INVITE_CREATE_SUCCESS: function(e) {
                    var t;
                    p[e.invite.code] = _.default.createFromServer(e.invite), i = null !== (t = l(r(o(Object.values(p), "createdAt")))) && void 0 !== t ? t : null, A = !1
                },
                FRIEND_INVITE_CREATE_FAILURE: function() {
                    A = !1
                },
                FRIEND_INVITE_REVOKE_SUCCESS: function(e) {
                    var t;
                    null != e.invites && e.invites.forEach(e => {
                        null != p[e.code] && delete p[e.code]
                    }), i = null !== (t = l(r(o(Object.values(p), "createdAt")))) && void 0 !== t ? t : null, I = !1
                },
                INSTANT_INVITE_CREATE_SUCCESS: function(e) {
                    let {
                        channelId: t,
                        invite: n
                    } = e, i = _.default.createFromServer(n);
                    i.targetType === E.InviteTargetTypes.STREAM && null != i.targetUser ? (null == h[t] && (h[t] = {}), h[t][String(i.targetUser.id)] = i) : i.targetType === E.InviteTargetTypes.EMBEDDED_APPLICATION && null != i.targetApplication ? (null == T[t] && (T[t] = {}), T[t][i.targetApplication.id] = i) : f[t] = i
                },
                INSTANT_INVITE_CREATE_FAILURE: function(e) {
                    let {
                        channelId: t
                    } = e;
                    f[t] = null
                },
                INSTANT_INVITE_REVOKE_SUCCESS: function(e) {
                    let {
                        channelId: t
                    } = e;
                    f[t] = null
                },
                FRIEND_INVITE_REVOKE_REQUEST: function() {
                    I = !0
                },
                FRIEND_INVITE_CREATE_REQUEST: function() {
                    A = !0
                },
                FRIEND_INVITES_FETCH_REQUEST: function() {
                    S = !0
                },
                FRIEND_INVITES_FETCH_RESPONSE: function(e) {
                    var t;
                    p = {}, e.invites.forEach(e => {
                        p[e.code] = _.default.createFromServer(e)
                    }), i = null !== (t = l(r(o(Object.values(p), "createdAt")))) && void 0 !== t ? t : null, S = !1
                },
                INSTANT_INVITE_CLEAR: function(e) {
                    delete f[e.channelId]
                }
            })
        },
        260320: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                LobbyError: function() {
                    return u
                },
                default: function() {
                    return f
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("49111");
            class u {
                constructor(e) {
                    this.code = e
                }
            }
            let o = {},
                d = {};

            function c(e, t) {
                if (null == d[e]) return null;
                let {
                    socketId: n,
                    timeout: i,
                    resolve: a,
                    reject: l
                } = d[e];
                return delete d[e], null != i && clearTimeout(i), null != a && null != l && t(a, l), n
            }

            function _(e) {
                let {
                    lobbyId: t,
                    member: {
                        user: n,
                        metadata: i
                    }
                } = e, a = o[t];
                if (null == a) return !1;
                let l = a.members.find(e => e.user.id === n.id);
                null != l ? (l.user = n, l.metadata = i) : a.members.push({
                    user: n,
                    metadata: i
                })
            }
            class E extends l.default.Store {
                getLobbies() {
                    return o
                }
                getLobbiesWithVoice() {
                    return a.filter(o, e => e.voice)
                }
                getLobby(e) {
                    return o[e]
                }
                getPendingLobbies() {
                    return a.map(d, (e, t) => {
                        let {
                            secret: n
                        } = e;
                        return {
                            id: t,
                            secret: n
                        }
                    })
                }
            }
            E.displayName = "LobbyStore";
            var f = new E(s.default, {
                CONNECTION_OPEN: function() {
                    o = {}
                },
                OVERLAY_INITIALIZE: function(e) {
                    o = e.lobbies
                },
                LOBBY_CONNECT: function(e) {
                    let {
                        socketId: t,
                        lobbyId: n,
                        lobbySecret: i,
                        resolve: a,
                        reject: l
                    } = e;
                    if (null != d[n] || null != o[n]) {
                        null != l && l(new u(r.LobbyErrors.ALREADY_CONNECTING));
                        return
                    }
                    d[n] = {
                        socketId: t,
                        secret: i,
                        resolve: a,
                        reject: l,
                        timeout: __OVERLAY__ ? null : setTimeout(() => {
                            s.default.dispatch({
                                type: "LOBBY_DELETE",
                                lobbyId: n,
                                reason: r.LobbyErrors.SERVICE_UNAVAILABLE
                            })
                        }, 15e3)
                    }
                },
                LOBBY_DISCONNECT: function(e) {
                    let {
                        lobbyId: t
                    } = e;
                    c(t, (e, t) => t(new u(r.LobbyErrors.NO_ERROR)))
                },
                LOBBY_CREATE: function(e) {
                    let {
                        lobby: t
                    } = e, n = c(t.id, e => e(t));
                    null != n && (o[t.id] = {
                        socketId: n,
                        voice: !1,
                        ...o[t.id],
                        ...t
                    })
                },
                LOBBY_UPDATE: function(e) {
                    let {
                        lobby: t
                    } = e, n = o[t.id];
                    null != n && (o[t.id] = {
                        ...n,
                        ...t
                    })
                },
                LOBBY_DELETE: function(e) {
                    let {
                        lobbyId: t,
                        reason: n
                    } = e;
                    delete o[t], c(t, (e, t) => t(new u(n)))
                },
                LOBBY_MEMBER_CONNECT: _,
                LOBBY_MEMBER_UPDATE: _,
                LOBBY_MEMBER_DISCONNECT: function(e) {
                    let {
                        lobbyId: t,
                        member: {
                            user: n
                        }
                    } = e, i = o[t];
                    if (null == i) return !1;
                    i.members = i.members.filter(e => e.user.id !== n.id)
                },
                LOBBY_VOICE_CONNECT: function(e) {
                    let {
                        lobbyId: t
                    } = e, n = o[t];
                    if (null == n) return !1;
                    n.voice = !0
                },
                LOBBY_VOICE_DISCONNECT: function(e) {
                    let {
                        lobbyId: t
                    } = e, n = o[t];
                    if (null == n) return !1;
                    n.voice = !1
                },
                RPC_APP_DISCONNECTED: function(e) {
                    let {
                        socketId: t
                    } = e;
                    a.forEach(o, e => {
                        e.socketId === t && s.default.dispatch({
                            type: "LOBBY_DISCONNECT",
                            lobbyId: e.id
                        })
                    })
                }
            })
        },
        52028: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return O
                }
            });
            var i = n("714617"),
                a = n.n(i),
                l = n("917351"),
                s = n.n(l),
                r = n("446674"),
                u = n("913144"),
                o = n("191225"),
                d = n("225772"),
                c = n("925880"),
                _ = n("662285"),
                E = n("845579"),
                f = n("374363"),
                h = n("373469"),
                T = n("848872"),
                p = n("546463"),
                S = n("568307"),
                I = n("49111"),
                A = n("782340");
            let m = [],
                g = {};

            function C() {
                let e = [],
                    t = E.CustomStatusSetting.getSetting();
                null != t && ("0" === t.expiresAtMs || new Date(Number(t.expiresAtMs)).getTime() - new Date().getTime() > 0) && e.push((0, d.default)(t));
                let n = c.default.getActivities();
                e.push(...n);
                let i = T.default.getStream();
                null != i && e.push({
                    type: I.ActivityTypes.STREAMING,
                    ...i
                });
                let l = new Set,
                    r = new Set;
                s.forEach(g, t => {
                    null != t.application_id && (l.add(t.name), r.add(t.application_id), e.push(t))
                }), o.default.getSelfEmbeddedActivities().forEach(t => {
                    var n;
                    let {
                        application_id: i
                    } = t;
                    if (r.has(i)) return;
                    let a = null === (n = p.default.getGame(i)) || void 0 === n ? void 0 : n.name;
                    e.push({
                        type: I.ActivityTypes.PLAYING,
                        name: null != a ? a : A.default.Messages.EMBEDDED_ACTIVITIES_LAUNCHING_ACTIVITY,
                        application_id: i,
                        flags: I.ActivityFlags.EMBEDDED
                    })
                });
                let u = S.default.getVisibleGame(),
                    f = null != u && null != u.name && l.has(u.name),
                    C = null != u && u.isLauncher,
                    N = h.default.getCurrentUserActiveStream();
                null != u && null != u.name && !(f || C && !(null != N)) && e.push({
                    type: I.ActivityTypes.PLAYING,
                    name: u.name,
                    application_id: u.id,
                    timestamps: {
                        start: u.start
                    }
                });
                let O = _.default.getActivity();
                null != O && e.push({
                    type: I.ActivityTypes.LISTENING,
                    ...O
                }), !a(m, e) && (m = e)
            }
            class N extends r.default.Store {
                initialize() {
                    this.waitFor(S.default, o.default, T.default, h.default, _.default, f.default), this.syncWith([c.default], () => C())
                }
                getActivities() {
                    return m
                }
                getPrimaryActivity() {
                    return m[0]
                }
                getApplicationActivity(e) {
                    return this.findActivity(t => t.application_id === e)
                }
                getCustomStatusActivity() {
                    return this.findActivity(e => e.type === I.ActivityTypes.CUSTOM_STATUS)
                }
                findActivity(e) {
                    return m.find(e)
                }
                getApplicationActivities() {
                    return g
                }
            }
            N.displayName = "LocalActivityStore";
            var O = new N(u.default, {
                OVERLAY_INITIALIZE: function(e) {
                    let {
                        localActivities: t
                    } = e;
                    g = {
                        ...t
                    }, C()
                },
                START_SESSION: function() {
                    g = {}, C()
                },
                LOCAL_ACTIVITY_UPDATE: function(e) {
                    let {
                        socketId: t,
                        activity: n
                    } = e;
                    if (a(g[t], n)) return !1;
                    null != n ? g[t] = n : delete g[t], C()
                },
                RPC_APP_DISCONNECTED: function(e) {
                    let {
                        socketId: t
                    } = e;
                    delete g[t], C()
                },
                RUNNING_GAMES_CHANGE: C,
                LIBRARY_APPLICATION_FLAGS_UPDATE_SUCCESS: C,
                SPOTIFY_PLAYER_STATE: C,
                SPOTIFY_PLAYER_PLAY: C,
                STREAMING_UPDATE: C,
                USER_CONNECTIONS_UPDATE: C,
                STREAM_START: C,
                STREAM_STOP: C,
                USER_SETTINGS_PROTO_UPDATE: C,
                EMBEDDED_ACTIVITY_OPEN: C,
                EMBEDDED_ACTIVITY_CLOSE: C
            })
        },
        569983: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return p
                }
            });
            var i, a = n("446674"),
                l = n("95410"),
                s = n("913144"),
                r = n("253981"),
                u = n("48703"),
                o = n("450484");
            let d = "MaskedLinkStore",
                c = new Set,
                _ = new Set,
                E = null === (i = window.GLOBAL_ENV.MEDIA_PROXY_ENDPOINT) || void 0 === i ? void 0 : i.replace("//", "");

            function f(e) {
                let t = (0, u.getHostname)(e);
                switch (t) {
                    case window.GLOBAL_ENV.CDN_HOST:
                    case window.GLOBAL_ENV.INVITE_HOST:
                    case window.GLOBAL_ENV.GIFT_CODE_HOST:
                    case window.GLOBAL_ENV.GUILD_TEMPLATE_HOST:
                    case E:
                    case location.hostname:
                        return !0;
                    default:
                        return o.SPOTIFY_HOSTNAMES.includes(t) || r.default.isDiscordHostname(t) || c.has(t)
                }
            }

            function h(e) {
                let t = (0, u.getProtocol)(e);
                return _.has(t)
            }
            class T extends a.default.Store {
                initialize() {
                    var e;
                    let t = null !== (e = l.default.get(d)) && void 0 !== e ? e : {};
                    if (Array.isArray(t)) c = new Set(null != t ? Array.from(t) : null), _ = new Set;
                    else {
                        let {
                            trustedDomains: e,
                            trustedProtocols: n
                        } = t;
                        c = new Set(null != e ? Array.from(e) : null), _ = new Set(null != n ? Array.from(n) : null)
                    }
                }
                isTrustedDomain(e) {
                    return f(e)
                }
                isTrustedProtocol(e) {
                    return h(e)
                }
            }
            T.displayName = "MaskedLinkStore";
            var p = new T(s.default, {
                MASKED_LINK_ADD_TRUSTED_DOMAIN: function(e) {
                    let {
                        url: t
                    } = e;
                    if (f(t)) return !1;
                    c.add((0, u.getHostname)(t)), l.default.set(d, {
                        trustedDomains: c,
                        trustedProtocols: _
                    })
                },
                MASKED_LINK_ADD_TRUSTED_PROTOCOL: function(e) {
                    let {
                        url: t
                    } = e;
                    if (h(t)) return !1;
                    _.add((0, u.getProtocol)(t)), l.default.set(d, {
                        trustedDomains: c,
                        trustedProtocols: _
                    })
                }
            })
        },
        48703: function(e, t, n) {
            "use strict";

            function i(e) {
                let t = document.createElement("a");
                return t.href = e, t.hostname
            }

            function a(e) {
                let t = document.createElement("a");
                return t.href = e, t.protocol
            }
            n.r(t), n.d(t, {
                getHostname: function() {
                    return i
                },
                getProtocol: function() {
                    return a
                }
            })
        },
        377253: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return H
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("408062"),
                u = n("979911"),
                o = n("605250"),
                d = n("10853"),
                c = n("38654"),
                _ = n("692038"),
                E = n("61400");
            n("574073");
            var f = n("432173"),
                h = n("915639"),
                T = n("568734"),
                p = n("271938"),
                S = n("42203"),
                I = n("162805"),
                A = n("923959"),
                m = n("26989"),
                g = n("305961"),
                C = n("957255"),
                N = n("27618"),
                O = n("18494"),
                R = n("162771"),
                v = n("697218"),
                M = n("49111");
            let y = new Set,
                D = new o.default("MessageStore");

            function L() {
                r.default.forEach(e => {
                    r.default.commit(e.mutate({
                        ready: !1,
                        loadingMore: !1
                    }))
                }), y.clear()
            }

            function U() {
                r.default.forEach(e => {
                    e.forAll(e => {
                        e.timestamp.locale(h.default.locale)
                    })
                })
            }

            function P() {
                r.default.forEach(e => {
                    let {
                        channelId: t
                    } = e;
                    null == S.default.getChannel(t) && r.default.clear(t)
                })
            }

            function b() {
                r.default.forEach(e => {
                    r.default.commit(e.reset(e.map(e => e.set("blocked", N.default.isBlocked(e.author.id)))))
                })
            }

            function G(e) {}

            function k(e) {
                let {
                    type: t,
                    channelId: n,
                    messageId: i,
                    userId: a,
                    emoji: l,
                    burst: s
                } = e, u = r.default.get(n);
                if (null == u || !(0, f.shouldApplyReaction)(e)) return !1;
                let o = p.default.getId() === a;
                u = u.update(i, n => {
                    if ("MESSAGE_REACTION_ADD" !== t) return n.removeReaction(l, o, s);
                    {
                        let {
                            colors: t
                        } = e;
                        return n.addReaction(l, o, a, t, s)
                    }
                }), r.default.commit(u)
            }

            function F(e) {
                let {
                    type: t,
                    messageData: n
                } = e, {
                    message: i
                } = n, a = (0, u.getFailedMessageId)(n), l = i.channelId, s = r.default.getOrCreate(l);
                if (!s.has(a)) return !1;
                s = s.update(a, e => {
                    var n;
                    return (null === (n = e.embeds) || void 0 === n ? void 0 : n.filter(d.isNotAutomodEmbed).length) > 0 && (e = e.set("embeds", [])), "MESSAGE_SEND_FAILED_AUTOMOD" === t && (e = e.set("flags", (0, T.addFlag)(e.flags, M.MessageFlags.EPHEMERAL))), e
                }), r.default.commit(s)
            }
            class w extends l.default.Store {
                initialize() {
                    this.waitFor(v.default, S.default, I.default, m.default, h.default, O.default, R.default, g.default, N.default, A.default), this.syncWith([c.default], () => {})
                }
                getMessages(e) {
                    if (c.default.hasViewingRoles()) {
                        let t = S.default.getChannel(e),
                            n = null == t ? void 0 : t.getGuildId();
                        if (c.default.isViewingRoles(n) && !C.default.can(M.Permissions.VIEW_CHANNEL, t)) return new r.default(e)
                    }
                    return r.default.getOrCreate(e)
                }
                getMessage(e, t) {
                    return r.default.getOrCreate(e).get(t)
                }
                getLastEditableMessage(e) {
                    let t = v.default.getCurrentUser();
                    return a(this.getMessages(e).toArray()).reverse().find(e => (0, E.default)(e, null == t ? void 0 : t.id))
                }
                getLastCommandMessage(e) {
                    let t = v.default.getCurrentUser();
                    return this.getMessages(e).toArray().reverse().find(e => null != e.interaction && e.interaction.user.id === (null == t ? void 0 : t.id))
                }
                jumpedMessageId(e) {
                    let t = r.default.get(e);
                    return null == t ? void 0 : t.jumpTargetId
                }
                focusedMessageId(e) {
                    let t = r.default.get(e);
                    return null == t ? void 0 : t.focusTargetId
                }
                hasPresent(e) {
                    let t = r.default.get(e);
                    return null != t && t.ready && t.hasPresent()
                }
                isReady(e) {
                    return r.default.getOrCreate(e).ready
                }
                whenReady(e, t) {
                    this.addConditionalChangeListener(() => {
                        if (this.isReady(e)) return setImmediate(t), !1
                    })
                }
                isLoadingMessages(e) {
                    let t = r.default.getOrCreate(e);
                    return t.loadingMore
                }
                hasCurrentUserSentMessage(e) {
                    let t = v.default.getCurrentUser();
                    return null != this.getMessages(e).findNewest(e => e.author.id === (null == t ? void 0 : t.id))
                }
            }
            w.displayName = "MessageStore";
            var H = new w(s.default, {
                BACKGROUND_SYNC_CHANNEL_MESSAGES: function(e) {
                    let {
                        changesByChannelId: t
                    } = e;
                    for (let e in t) {
                        let n = r.default.get(e);
                        if (null == n) continue;
                        let i = n.cached || true;
                        if (!i) {
                            D.log("Skipping background message sync for ".concat(e, " cached:").concat(n.cached, " ") + "ready:".concat(n.ready, " hasMoreAfter:").concat(n.hasMoreAfter, " ") + "isConnected:".concat(!1));
                            continue
                        }
                        n.mergeDelta(t[e].new_messages, t[e].modified_messages, t[e].deleted_message_ids)
                    }
                },
                CONNECTION_OPEN: L,
                OVERLAY_INITIALIZE: L,
                CACHE_LOADED: function(e) {
                    for (let [t, n] of Object.entries(e.messages)) {
                        let e = r.default.getOrCreate(t).addCachedMessages(n, !0);
                        r.default.commit(e)
                    }
                },
                LOAD_MESSAGES: function() {
                    return !0
                },
                LOAD_MESSAGES_SUCCESS: function(e) {
                    let {
                        channelId: t,
                        isBefore: n,
                        isAfter: i,
                        jump: a,
                        hasMoreBefore: l,
                        hasMoreAfter: s,
                        messages: u,
                        isStale: o,
                        truncate: d
                    } = e, c = r.default.getOrCreate(t);
                    c = c.loadComplete({
                        newMessages: u,
                        isBefore: n,
                        isAfter: i,
                        jump: a,
                        hasMoreBefore: l,
                        hasMoreAfter: s,
                        cached: o,
                        hasFetched: !0
                    }), null != d && (n || i) && (!n || !i) && (c = c.truncate(n, i)), r.default.commit(c)
                },
                LOAD_MESSAGES_FAILURE: function(e) {
                    let {
                        channelId: t
                    } = e, n = r.default.getOrCreate(t);
                    r.default.commit(n.mutate({
                        loadingMore: !1,
                        error: !0
                    }))
                },
                LOAD_MESSAGES_SUCCESS_CACHED: function(e) {
                    let {
                        channelId: t,
                        jump: n,
                        focus: i,
                        before: a,
                        after: l,
                        limit: s,
                        truncate: u
                    } = e, o = r.default.getOrCreate(t);
                    (null == n ? void 0 : n.present) ? o = o.jumpToPresent(s): (null == i ? void 0 : i.messageId) != null ? o = o.focusOnMessage(i.messageId) : (null == n ? void 0 : n.messageId) != null ? o = o.jumpToMessage(n.messageId, n.flash, n.offset, n.returnMessageId, n.jumpType) : (null != a || null != l) && (o = o.loadFromCache(null != a, s)), null != u && (null != a || null != l) && (null == a || null == l) && (o = o.truncate(null != a, null != l)), r.default.commit(o)
                },
                LOCAL_MESSAGES_LOADED: function(e) {
                    let t = r.default.getOrCreate(e.channelId);
                    (t.cached || !t.ready) && r.default.commit(t.addCachedMessages(e.messages, e.stale))
                },
                LOAD_MESSAGE_INTERACTION_DATA_SUCCESS: function(e) {
                    let t = e.messageId,
                        n = e.channelId,
                        i = r.default.get(n);
                    if (null == i || !i.has(t)) return !1;
                    i = i.update(t, t => t.set("interactionData", e.interactionData)), r.default.commit(i)
                },
                TRUNCATE_MESSAGES: function(e) {
                    let {
                        channelId: t,
                        truncateBottom: n,
                        truncateTop: i
                    } = e;
                    D.log("Truncating messages for ".concat(t, " bottom:").concat(n, " top:").concat(i));
                    let a = r.default.getOrCreate(t);
                    a = a.truncate(n, i), r.default.commit(a)
                },
                CLEAR_MESSAGES: function(e) {
                    let {
                        channelId: t
                    } = e;
                    D.log("Clearing messages for ".concat(t)), r.default.clear(t), y.clear()
                },
                MESSAGE_CREATE: function(e) {
                    let {
                        channelId: t,
                        message: n,
                        isPushNotification: i
                    } = e, a = r.default.getOrCreate(t);
                    if (i) {
                        D.log("Inserting message tapped on from a push notification", n), r.default.commit(a.receivePushNotification(n));
                        return
                    }
                    if (!a.ready) return !1;
                    null != n.nonce && n.state !== M.MessageStates.SENDING && y.has(n.nonce) && (a = a.remove(n.nonce), y.delete(n.nonce)), a = a.receiveMessage(n, I.default.isAtBottom(t)), r.default.commit(a)
                },
                MESSAGE_SEND_FAILED: function(e) {
                    let {
                        channelId: t,
                        messageId: n,
                        reason: i
                    } = e, a = r.default.getOrCreate(t);
                    if (null == a || !a.has(n)) return !1;
                    a = a.update(n, e => ((e = e.set("state", M.MessageStates.SEND_FAILED)).isCommandType() && (e = (e = e.set("interactionError", null != i ? i : "")).set("flags", (0, T.addFlag)(e.flags, M.MessageFlags.EPHEMERAL))), e)), r.default.commit(a)
                },
                MESSAGE_SEND_FAILED_AUTOMOD: F,
                MESSAGE_EDIT_FAILED_AUTOMOD: F,
                MESSAGE_UPDATE: function(e) {
                    let t = e.message.id,
                        n = e.message.channel_id,
                        i = r.default.getOrCreate(n);
                    if (null == i || !i.has(t)) return !1;
                    i = i.update(t, t => (0, _.updateMessageRecord)(t, e.message)), r.default.commit(i)
                },
                MESSAGE_DELETE: function(e) {
                    let {
                        id: t,
                        channelId: n
                    } = e, i = r.default.getOrCreate(n);
                    if (null == i || !i.has(t)) return !1;
                    if (i.revealedMessageId === t) {
                        let e = i.getAfter(t);
                        i = null != e && e.blocked ? i.mutate({
                            revealedMessageId: e.id
                        }) : i.mutate({
                            revealedMessageId: null
                        })
                    }
                    i = i.remove(t), r.default.commit(i), y.delete(t)
                },
                MESSAGE_DELETE_BULK: function(e) {
                    let {
                        ids: t,
                        channelId: n
                    } = e, i = r.default.getOrCreate(n);
                    if (null == i) return !1;
                    let l = i.removeMany(t);
                    if (i === l) return !1;
                    if (null != l.revealedMessageId && a.some(t, e => l.revealedMessageId === e)) {
                        let e = l.getAfter(l.revealedMessageId);
                        l = null != e && e.blocked ? l.mutate({
                            revealedMessageId: e.id
                        }) : l.mutate({
                            revealedMessageId: null
                        })
                    }
                    r.default.commit(l), t.forEach(e => {
                        y.delete(e)
                    })
                },
                MESSAGE_REVEAL: function(e) {
                    let {
                        channelId: t,
                        messageId: n
                    } = e, i = r.default.getOrCreate(t);
                    r.default.commit(i.mutate({
                        revealedMessageId: n
                    }))
                },
                USER_SETTINGS_PROTO_UPDATE: U,
                I18N_LOAD_SUCCESS: U,
                THREAD_CREATE_LOCAL: function(e) {
                    let {
                        channelId: t
                    } = e, n = r.default.getOrCreate(t);
                    n = n.loadComplete({
                        newMessages: [],
                        hasMoreAfter: !1,
                        hasMoreBefore: !1
                    }), r.default.commit(n)
                },
                CHANNEL_DELETE: P,
                THREAD_DELETE: P,
                GUILD_DELETE: P,
                RELATIONSHIP_ADD: b,
                RELATIONSHIP_REMOVE: b,
                GUILD_MEMBERS_CHUNK: G,
                THREAD_MEMBER_LIST_UPDATE: G,
                MESSAGE_REACTION_ADD: k,
                MESSAGE_REACTION_ADD_MANY: function(e) {
                    let {
                        channelId: t,
                        messageId: n,
                        reactions: i
                    } = e, a = r.default.get(t);
                    if (null == a) return !1;
                    a = a.update(n, e => {
                        var t;
                        return e.addReactionBatch(i, null === (t = v.default.getCurrentUser()) || void 0 === t ? void 0 : t.id)
                    }), r.default.commit(a)
                },
                MESSAGE_REACTION_REMOVE: k,
                MESSAGE_REACTION_REMOVE_ALL: function(e) {
                    let {
                        channelId: t,
                        messageId: n
                    } = e, i = r.default.get(t);
                    if (null == i) return !1;
                    i = i.update(n, e => e.set("reactions", [])), r.default.commit(i)
                },
                MESSAGE_REACTION_REMOVE_EMOJI: function(e) {
                    let {
                        channelId: t,
                        messageId: n,
                        emoji: i
                    } = e, a = r.default.get(t);
                    if (null == a) return !1;
                    a = a.update(n, e => e.removeReactionsForEmoji(i)), r.default.commit(a)
                },
                LOGOUT: function() {
                    r.default.forEach(e => {
                        r.default.clear(e.channelId)
                    }), y.clear()
                },
                UPLOAD_START: function(e) {
                    let {
                        message: t
                    } = e;
                    null != t.nonce && y.add(t.nonce)
                },
                UPLOAD_FAIL: function(e) {
                    let {
                        channelId: t,
                        messageRecord: n
                    } = e, i = null == n ? void 0 : n.nonce;
                    if (null != i && y.has(i)) {
                        let e = r.default.getOrCreate(t),
                            n = e.get(i);
                        if (null == n) return;
                        e = (e = e.remove(i)).merge([n]), y.delete(i), r.default.commit(e)
                    }
                }
            })
        },
        353365: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("448993");
            let s = null,
                r = null,
                u = null;

            function o(e) {
                let {
                    error: t
                } = e;
                s = t
            }

            function d() {
                s = null
            }
            class c extends i.default.Store {
                get paymentError() {
                    return s
                }
                getGiftCode(e) {
                    return e === u ? r : null
                }
            }
            c.displayName = "PremiumPaymentModalStore";
            var _ = new c(a.default, {
                PREMIUM_PAYMENT_SUBSCRIBE_FAIL: o,
                PREMIUM_PAYMENT_UPDATE_FAIL: o,
                PREMIUM_PAYMENT_SUBSCRIBE_SUCCESS: function() {
                    d()
                },
                PREMIUM_PAYMENT_UPDATE_SUCCESS: d,
                PREMIUM_PAYMENT_ERROR_CLEAR: d,
                BRAINTREE_TOKENIZE_PAYPAL_FAIL: function(e) {
                    let {
                        message: t,
                        code: n
                    } = e;
                    s = new l.BillingError(t, n)
                },
                BRAINTREE_TOKENIZE_VENMO_FAIL: function(e) {
                    let {
                        message: t,
                        code: n
                    } = e;
                    s = new l.BillingError(t, n)
                },
                SKU_PURCHASE_SUCCESS: function(e) {
                    r = e.giftCode, u = e.skuId
                },
                SKU_PURCHASE_FAIL: function(e) {
                    s = e.error
                },
                SKU_PURCHASE_AWAIT_CONFIRMATION: function(e) {
                    e.isGift && (u = e.skuId)
                },
                GIFT_CODE_CREATE: function(e) {
                    let {
                        giftCode: t
                    } = e;
                    if (0 !== t.uses || t.sku_id !== u) return !1;
                    r = t.code
                }
            })
        },
        660478: function(e, t, n) {
            "use strict";
            let i;
            n.r(t), n.d(t, {
                shouldBadgeMessage: function() {
                    return eO
                },
                default: function() {
                    return eJ
                }
            });
            var a, l, s = n("627445"),
                r = n.n(s),
                u = n("866227"),
                o = n.n(u),
                d = n("446674"),
                c = n("872717"),
                _ = n("862337"),
                E = n("627929"),
                f = n("913144"),
                h = n("716241"),
                T = n("191145"),
                p = n("203288"),
                S = n("358269"),
                I = n("605250"),
                A = n("398604"),
                m = n("811400"),
                g = n("21121"),
                C = n("288518"),
                N = n("415435"),
                O = n("486503"),
                R = n("406297"),
                v = n("136511"),
                M = n("342176"),
                y = n("514933"),
                D = n("512395"),
                L = n("614305"),
                U = n("689275"),
                P = n("755624"),
                b = n("526311"),
                G = n("374363"),
                k = n("233069"),
                F = n("845078"),
                w = n("718517"),
                H = n("568734"),
                V = n("449008"),
                B = n("35468"),
                x = n("299039"),
                Y = n("271938"),
                K = n("982108"),
                j = n("42203"),
                z = n("162805"),
                W = n("760190"),
                q = n("341542"),
                Q = n("305961"),
                X = n("603699"),
                Z = n("377253"),
                J = n("957255"),
                $ = n("27618"),
                ee = n("18494"),
                et = n("282109"),
                en = n("697218"),
                ei = n("471671"),
                ea = n("49111"),
                el = n("724210"),
                es = n("745049"),
                er = n("627869"),
                eu = n("133335");
            let eo = new I.default("ReadStateStore");
            __OVERLAY__ && (i = n("901165").default);
            let ed = ea.BasicPermissions.VIEW_CHANNEL | ea.BasicPermissions.READ_MESSAGE_HISTORY,
                ec = null,
                e_ = null,
                eE = null,
                ef = !1,
                eh = [],
                eT = !1,
                ep = null,
                eS = {};

            function eI() {
                return x.default.fromTimestamp(Date.now() - 2592e6)
            }
            let eA = 0,
                em = 0,
                eg = null;

            function eC() {
                eA = Date.now() - 6048e5, em = Date.now() - 2592e5, clearTimeout(eg), eg = setTimeout(() => {
                    f.default.dispatch({
                        type: "DECAY_READ_STATES"
                    })
                }, 36e5)
            }

            function eN(e) {
                if (null == e) return 0;
                let t = Date.parse(e);
                return isNaN(t) ? 0 : t
            }

            function eO(e, t) {
                let n = j.default.getChannel(e.channel_id);
                return !(null == n || $.default.isBlocked(e.author.id)) && (!!((0, R.default)({
                    message: e,
                    userId: t.id,
                    suppressEveryone: et.default.isSuppressEveryoneEnabled(n.guild_id),
                    suppressRoles: et.default.isSuppressRolesEnabled(n.guild_id)
                }) || eR(n)) || !1)
            }

            function eR(e) {
                return null != e && e.isPrivate() && !et.default.isGuildOrCategoryOrChannelMuted(e.guild_id, e.id)
            }
            async function ev() {
                if (0 === eh.length) {
                    eT = !1;
                    return
                }
                eT = !0;
                let e = eh.splice(0, 100);
                await eM(() => c.default.post({
                    url: ea.Endpoints.BULK_ACK,
                    body: {
                        read_states: e
                    },
                    oldFormErrors: !0
                })), await (0, _.timeoutPromise)(1e3), ev()
            }
            async function eM(e) {
                let t = Y.default.getId();
                for (let n = 0; n < 3; n++) try {
                    return await e()
                } catch (e) {
                    if (eo.error("", e), n + 1 < 3 && (await (0, _.timeoutPromise)((n + 1) * 2e3), await B.default.awaitOnline(), t !== Y.default.getId())) return Promise.reject(Error("User changed."))
                }
            }

            function ey(e) {
                if (e.type !== eu.ReadStateTypes.CHANNEL) return !1;
                let t = j.default.getChannel(e.channelId),
                    n = null != t && t.isForumPost();
                if (X.default.isIdle() || !e.canTrackUnreads()) return !1;
                if ((null == t ? void 0 : t.isForumLikeChannel()) !== !0) {
                    let t = eS[e.channelId],
                        n = null != t && ei.default.isFocused(t),
                        a = null != i && i.isInstanceFocused() && i.isPinned(ea.OverlayWidgets.TEXT);
                    if (!n && !a) return !1
                }
                if (n && !e._persisted) return !0;
                let a = e.hasUnreadOrMentions();
                if (!a || (null == t ? void 0 : t.isForumLikeChannel()) === !0) return !1;
                let l = n && !e._isJoinedThread;
                if (!l && !z.default.isAtBottom(e.channelId)) return !1;
                let s = T.default.getLayout(e.channelId),
                    r = T.default.getChatOpen(e.channelId);
                if (!r && (s === ea.ChannelLayouts.NO_CHAT || s === ea.ChannelLayouts.FULL_SCREEN) || null == eS[e.channelId]) return !1;
                let u = Z.default.getMessages(e.channelId);
                return !(null == u || !u.ready || u.loadingMore || (0, L.default)() && !r) && !0
            }(a = l || (l = {}))[a.IS_GUILD_CHANNEL = 1] = "IS_GUILD_CHANNEL", a[a.IS_THREAD = 2] = "IS_THREAD";
            class eD {
                static forEach(e) {
                    for (let n of Object.keys(eD._readStates)) {
                        var t;
                        let i = null !== (t = eD._readStates[parseInt(n)]) && void 0 !== t ? t : {};
                        for (let t of Object.keys(i))
                            if (!1 === e(i[t])) break
                    }
                }
                static get(e) {
                    var t;
                    let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL,
                        i = null === (t = eD._readStates[n]) || void 0 === t ? void 0 : t[e];
                    return null == i && (i = new eD(e, n), null == eD._readStates[n] && (eD._readStates[n] = {}), eD._readStates[n][e] = i), i
                }
                static getGuildSentinels(e) {
                    return null == this._guildReadStateSentinels[e] && (this._guildReadStateSentinels[e] = {
                        unreadsSentinel: 0
                    }), this._guildReadStateSentinels[e]
                }
                static resetGuildSentinels() {
                    this._guildReadStateSentinels = {}
                }
                static getIfExists(e) {
                    var t;
                    let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return null === (t = eD._readStates[n]) || void 0 === t ? void 0 : t[e]
                }
                static getMentionChannelIds() {
                    let e = [];
                    for (let t of eD._mentionChannels) {
                        let n = eD.getIfExists(t);
                        null != n && n.canHaveMentions() ? e.push(t) : eD._mentionChannels.delete(t)
                    }
                    return e
                }
                static getValue(e) {
                    var t;
                    let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL,
                        i = arguments.length > 2 ? arguments[2] : void 0,
                        a = arguments.length > 3 ? arguments[3] : void 0,
                        l = null === (t = eD._readStates[n]) || void 0 === t ? void 0 : t[e];
                    return null == l ? a : i(l)
                }
                static clear(e) {
                    var t;
                    let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return (null === (t = eD._readStates[n]) || void 0 === t ? void 0 : t[e]) != null && (delete eD._readStates[n][e], eD._mentionChannels.delete(e), !0)
                }
                static clearAll() {
                    eD._readStates = {}, eD._mentionChannels.clear()
                }
                serialize(e) {
                    let {
                        channelId: t,
                        type: n,
                        _guildId: i,
                        _isThread: a,
                        _isActiveThread: l,
                        _isJoinedThread: s,
                        _persisted: r,
                        loadedMessages: u,
                        _lastMessageId: o,
                        _lastMessageTimestamp: d,
                        _ackMessageId: c,
                        _ackMessageTimestamp: _,
                        ackPinTimestamp: E,
                        isManualAck: f,
                        lastPinTimestamp: h,
                        _oldestUnreadMessageId: T,
                        oldestUnreadMessageIdStale: p,
                        estimated: S,
                        _mentionCount: I,
                        flags: A,
                        lastViewed: m
                    } = this;
                    if (e) return {
                        channelId: t,
                        type: n,
                        _guildId: i,
                        _isThread: a,
                        _isActiveThread: l,
                        _isJoinedThread: s,
                        _persisted: r,
                        loadedMessages: u,
                        _lastMessageId: o,
                        _lastMessageTimestamp: d,
                        _ackMessageId: c,
                        _ackMessageTimestamp: _,
                        ackPinTimestamp: E,
                        isManualAck: f,
                        lastPinTimestamp: h,
                        _oldestUnreadMessageId: T,
                        oldestUnreadMessageIdStale: p,
                        estimated: S,
                        _mentionCount: I,
                        flags: A,
                        lastViewed: m
                    };
                    let g = {
                        channelId: t,
                        type: n,
                        _guildId: i,
                        _persisted: r,
                        _lastMessageId: o,
                        _lastMessageTimestamp: d,
                        _ackMessageId: c,
                        _ackMessageTimestamp: _,
                        ackPinTimestamp: E,
                        lastPinTimestamp: h,
                        _mentionCount: I,
                        flags: A
                    };
                    return null != m && m > 0 && (g.lastViewed = m), a && (g._isThread = a, g._isActiveThread = l, g._isJoinedThread = s), g
                }
                deserializeForOverlay(e) {
                    let {
                        channelId: t,
                        type: n,
                        _guildId: i,
                        _isThread: a,
                        _isActiveJoinedThread: l,
                        _isActiveThread: s,
                        _isJoinedThread: r,
                        _persisted: u,
                        loadedMessages: o,
                        _lastMessageId: d,
                        _lastMessageTimestamp: c,
                        _ackMessageId: _,
                        _ackMessageTimestamp: E,
                        ackPinTimestamp: f,
                        isManualAck: h,
                        lastPinTimestamp: T,
                        _oldestUnreadMessageId: p,
                        oldestUnreadMessageIdStale: S,
                        estimated: I,
                        _unreadCount: A,
                        _mentionCount: m,
                        flags: g,
                        lastViewed: C
                    } = e;
                    this.channelId = t, this.type = null != n ? n : eu.ReadStateTypes.CHANNEL, this._guildId = i, this._isThread = null != a && a, null != l ? (this._isActiveThread = l, this._isJoinedThread = l) : (this._isActiveThread = null != s && s, this._isJoinedThread = null != r && r), this._persisted = !1 !== u, this.loadedMessages = null != o && o, this._lastMessageId = d, this._lastMessageTimestamp = c, this._ackMessageId = _, this._ackMessageTimestamp = E, this.ackPinTimestamp = f, this.isManualAck = null != h && h, this.lastPinTimestamp = T, this._oldestUnreadMessageId = p, this.oldestUnreadMessageIdStale = null != S && S, this.estimated = null != I && I, this._unreadCount = null != A ? A : 0, this._mentionCount = m, this.flags = g, this.lastViewed = C, eD._mentionChannels.delete(this.channelId), this._mentionCount > 0 && this.canHaveMentions() && eD._mentionChannels.add(this.channelId)
                }
                incrementGuildUnreadsSentinel() {
                    null != this._guildId && eD.getGuildSentinels(this._guildId).unreadsSentinel++
                }
                get oldestUnreadMessageId() {
                    return this._oldestUnreadMessageId
                }
                set oldestUnreadMessageId(e) {
                    this._oldestUnreadMessageId = e, this.oldestUnreadMessageIdStale = !1
                }
                get lastMessageId() {
                    return this._lastMessageId
                }
                set lastMessageId(e) {
                    this._lastMessageId = e, this._lastMessageTimestamp = null != e ? x.default.extractTimestamp(e) : 0
                }
                get lastMessageTimestamp() {
                    return this._lastMessageTimestamp
                }
                get ackMessageId() {
                    return this._ackMessageId
                }
                set ackMessageId(e) {
                    this._ackMessageId = e, this._ackMessageTimestamp = null != e ? x.default.extractTimestamp(e) : 0
                }
                get unreadCount() {
                    var e;
                    return null !== (e = this._unreadCount) && void 0 !== e ? e : 0
                }
                set unreadCount(e) {
                    (void 0 === this._unreadCount || 0 === this._unreadCount || 0 === e) && this.incrementGuildUnreadsSentinel(), this._unreadCount = e
                }
                get mentionCount() {
                    return this._mentionCount
                }
                set mentionCount(e) {
                    (0 === this._mentionCount || 0 === e) && this._mentionCount !== e && this.incrementGuildUnreadsSentinel(), this._mentionCount = e, eD._mentionChannels.delete(this.channelId), this._mentionCount > 0 && this.canHaveMentions() && eD._mentionChannels.add(this.channelId)
                }
                guessAckMessageId() {
                    let e = Z.default.getMessages(this.channelId);
                    if (null != this.ackMessageId || !this.isPrivate() || e.hasMoreAfter) return this.ackMessageId;
                    if (!this.hasMentions()) return this.lastMessageId;
                    let t = null,
                        n = this.mentionCount,
                        i = en.default.getCurrentUser();
                    return e.forEach(e => {
                        if (n > 0 && e.author.id !== (null == i ? void 0 : i.id)) --n;
                        else if (0 === n) return t = e.id, !1
                    }, this, !0), t
                }
                get guildId() {
                    if (null != this._guildId) return this._guildId;
                    let e = j.default.getChannel(this.channelId);
                    return this._guildId = null != e ? e.getGuildId() : null
                }
                isPrivate() {
                    if (this.type !== eu.ReadStateTypes.CHANNEL) return !1;
                    let e = j.default.getChannel(this.channelId);
                    return null != e && e.isPrivate()
                }
                rebuildChannelState(e) {
                    var t, n;
                    let i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        a = arguments.length > 2 ? arguments[2] : void 0;
                    if (this.ackMessageId = null !== (t = null != e ? e : this._ackMessageId) && void 0 !== t ? t : this.guessAckMessageId(), this.isManualAck = null != e, this.oldestUnreadMessageId = null, this.estimated = !1, this.unreadCount = 0, i && (this.mentionCount = 0), this.hasUnread()) {
                        let e = en.default.getCurrentUser(),
                            t = this.getAckTimestamp(),
                            a = !1,
                            l = !1,
                            s = null,
                            r = Z.default.getMessages(this.channelId);
                        r.forAll(n => {
                            if (a) {
                                var r;
                                this.oldestUnreadMessageId = null !== (r = this._oldestUnreadMessageId) && void 0 !== r ? r : n.id
                            } else a = n.id === this._ackMessageId;
                            x.default.extractTimestamp(n.id) > t ? (this.unreadCount++, i && eO(n, e) && this.mentionCount++, s = null != s ? s : n.id) : l = !0
                        }), this.estimated = !r.hasPresent() || !(a || l) && r.length === this.unreadCount, this.oldestUnreadMessageId = null !== (n = this._oldestUnreadMessageId) && void 0 !== n ? n : s
                    }
                    null != a && (this.mentionCount = a)
                }
                handleGuildEventRemoval(e, t) {
                    var n;
                    if (x.default.compare(this.ackMessageId, t) >= 0) return;
                    let i = A.default.getGuildScheduledEventsForGuild(e),
                        a = this.getAckTimestamp();
                    if (isNaN(a)) return;
                    let l = null !== (n = this._ackMessageId) && void 0 !== n ? n : x.default.fromTimestamp(a),
                        s = null,
                        r = 0;
                    i.forEach(e => {
                        (0, A.isEventUpcoming)(e) && (x.default.compare(e.id, s) > 0 && (s = e.id), x.default.compare(e.id, l) > 0 && r++)
                    }), this.lastMessageId = s, this.mentionCount = r
                }
                canTrackUnreads() {
                    if (this.type !== eu.ReadStateTypes.CHANNEL) return !0;
                    if (this._isThread && !this._isActiveThread || this._isResourceChannel) return !1;
                    let e = j.default.getBasicChannel(this.channelId);
                    return null != e && ("basicPermissions" in e ? F.default.has(e.basicPermissions, ea.BasicPermissions.VIEW_CHANNEL) : !p.default.isChannelGated(this.guildId, this.channelId) || J.default.can(ea.Permissions.VIEW_CHANNEL, e))
                }
                canBeUnread() {
                    return !(this._isThread && !this._isJoinedThread || (0, N.isMessageRequestOrSpamRequest)(this.channelId, [C.default, O.default]) || !this._isThread && (0, D.isOptInEnabledForGuild)(this._guildId) && (this._lastMessageTimestamp < eA || !et.default.isChannelOrParentOptedIn(this._guildId, this.channelId) && !this.hasRecentlyVisitedAndRead() && !this.hasMentions())) && this.canTrackUnreads()
                }
                canHaveMentions() {
                    return !(0 === this.mentionCount || this._isThread && !this._isJoinedThread || (0, N.isMessageRequestOrSpamRequest)(this.channelId, [C.default, O.default]) || (0, D.isOptInEnabledForGuild)(this._guildId) && this._lastMessageTimestamp < eA) && this.canTrackUnreads()
                }
                getGuildChannelUnreadState(e, t, n, i, a, l) {
                    if (t && (this._lastMessageTimestamp < eA || !et.default.isChannelRecordOrParentOptedIn(e) && !this.hasRecentlyVisitedAndRead() && this.mentionCount <= 0)) return {
                        mentionCount: 0,
                        hasNotableUnread: !1
                    };
                    if ("basicPermissions" in e) {
                        if (!F.default.has(e.basicPermissions, ea.BasicPermissions.VIEW_CHANNEL)) return {
                            mentionCount: 0,
                            hasNotableUnread: !1
                        }
                    } else if (p.default.isChannelGated(this.guildId, this.channelId) && !J.default.can(ea.Permissions.VIEW_CHANNEL, e)) return {
                        mentionCount: 0,
                        hasNotableUnread: !1
                    };
                    if (a || l) return {
                        mentionCount: this.mentionCount,
                        hasNotableUnread: !1
                    };
                    let s = (0, m.calculateUnreadSetting)({
                            isExperimentEnabled: n,
                            hasUserEnabledGuildUnreads: et.default.isGuildUnreadSettingEnabled(e.guild_id),
                            channelNotificationOverrides: i[e.id],
                            categoryNotificationOverrides: null == e.parent_id ? null : i[e.parent_id],
                            unreadSetting: et.default.getChannelUnreadSetting(e.guild_id, e.id),
                            hasJoinedThread: P.default.hasJoined(e.id)
                        }),
                        r = !1;
                    return r = s === er.UserUnreadSettings.NULL || s === er.UserUnreadSettings.MENTIONS_AND_HIGHLIGHTS ? this.mentionCount > 0 || (0, S.hasUnreadChannelHighlights)(this.channelId, this._ackMessageId) : this.getAckTimestamp() < this._lastMessageTimestamp, {
                        mentionCount: this.mentionCount,
                        hasNotableUnread: r
                    }
                }
                hasUnread() {
                    return this.getAckTimestamp() < this._lastMessageTimestamp
                }
                hasNotableUnread() {
                    let e = j.default.getBasicChannel(this.channelId),
                        t = null != e ? (0, m.getGuildUnreadSetting)(e) : er.UserUnreadSettings.ALL_MESSAGES;
                    return t === er.UserUnreadSettings.NULL || t === er.UserUnreadSettings.MENTIONS_AND_HIGHLIGHTS ? (0, S.getUnreadChannelHighlights)(this.channelId, this._ackMessageId).length > 0 || this.hasMentions() : this.getAckTimestamp() < this._lastMessageTimestamp
                }
                hasRecentlyVisitedAndRead() {
                    return this._lastMessageTimestamp > 0 && null != this._ackMessageId && this.getAckTimestamp() > em && G.default.getGuildRecentsDismissedAt(this._guildId) < this.getAckTimestamp()
                }
                isForumPostUnread() {
                    return !!this._isActiveThread && this.hasUnread()
                }
                hasMentions() {
                    return this.getMentionCount() > 0
                }
                getMentionCount() {
                    return this.mentionCount
                }
                hasUnreadOrMentions() {
                    return this.hasMentions() || this.hasUnread()
                }
                ackPins() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                    if (this.type !== eu.ReadStateTypes.CHANNEL || !this.canTrackUnreads()) return !1;
                    if (null == e) {
                        if (this.lastPinTimestamp === this.ackPinTimestamp) return !1;
                        this._persisted = !0, eM(() => c.default.post({
                            url: ea.Endpoints.PINS_ACK(this.channelId),
                            oldFormErrors: !0
                        }))
                    }
                    let t = eN(e);
                    return this.ackPinTimestamp = 0 !== t ? t : this.lastPinTimestamp, !0
                }
                ack(e) {
                    let {
                        messageId: t,
                        local: n = !1,
                        immediate: i = !1,
                        force: a = !1,
                        isExplicitUserAction: l = !1,
                        location: s = {
                            section: ea.AnalyticsSections.CHANNEL
                        },
                        trackAnalytics: r = !0
                    } = e;
                    if (!this._shouldAck(a, n, l) || !a && !this.canTrackUnreads()) return !1;
                    let u = this.hasMentions();
                    return this.estimated = !1, this.unreadCount = 0, this.mentionCount = 0, (null != t || null != (t = this.lastMessageId)) && (this.ackMessageId = t, this.isManualAck = !1, this._persisted = !0, function(e) {
                        if (null == e) return;
                        let t = eD.get(e);
                        if (t.type !== eu.ReadStateTypes.CHANNEL) return;
                        let n = j.default.getChannel(t.channelId);
                        if (null == n || !n.isForumPost() || null == n.parent_id) return;
                        let i = n.parent_id,
                            a = eD.get(i);
                        U.default.hasLoaded(n.guild_id) && Object.keys(U.default.getThreadsForParent(n.guild_id, i)).every(e => eZ.hasOpenedThread(e) || 0 > x.default.compare(e, a.ackMessageId)) && a.ack({})
                    }(this.channelId), n ? this.oldestUnreadMessageId = null : (null == this.outgoingAck && (this.outgoingAckTimer = setTimeout(() => {
                        this.type === eu.ReadStateTypes.CHANNEL ? this._ack(s, r) : this._nonChannelAck(), this.outgoingAck = null, this.outgoingAckTimer = null
                    }, u || i ? 0 : 3e3)), this.outgoingAck = t), !0)
                }
                clearOutgoingAck() {
                    this.outgoingAck = null, null != this.outgoingAckTimer && (clearTimeout(this.outgoingAckTimer), this.outgoingAckTimer = null)
                }
                _shouldAck(e, t, n) {
                    var i;
                    return !!e || !!n || !!t || !!(!this.isManualAck && (this.type !== eu.ReadStateTypes.CHANNEL || this.loadedMessages || (null === (i = j.default.getChannel(this.channelId)) || void 0 === i ? void 0 : i.isForumLikeChannel()))) || !1
                }
                _ack(e, t) {
                    let {
                        outgoingAck: n
                    } = this;
                    if (null == n) return;
                    let i = Y.default.getId(),
                        a = eE;
                    this._persisted = !0;
                    let l = this.recalculateFlags(),
                        s = l === this.flags ? void 0 : l;
                    eM(() => c.default.post({
                        url: ea.Endpoints.MESSAGE_ACK(this.channelId, n),
                        body: {
                            token: eE,
                            last_viewed: this.lastViewed,
                            flags: s
                        },
                        oldFormErrors: !0
                    })).then(n => {
                        if (null != n && (eE === a && i === Y.default.getId() && (eE = n.body.token), f.default.dispatch({
                                type: "MESSAGE_ACKED"
                            }), t)) {
                            let t = j.default.getChannel(this.channelId);
                            (0, h.trackWithMetadata)(ea.AnalyticEvents.ACK_MESSAGES, {
                                channel_id: this.channelId,
                                guild_id: null == t ? void 0 : t.getGuildId(),
                                location: e
                            })
                        }
                    })
                }
                recalculateFlags() {
                    if (this.type !== eu.ReadStateTypes.CHANNEL) return;
                    let e = j.default.getChannel(this.channelId);
                    if (null != e) return e.isThread() ? l.IS_THREAD : null != e.guild_id ? l.IS_GUILD_CHANNEL : 0
                }
                _nonChannelAck() {
                    let e;
                    let {
                        outgoingAck: t,
                        channelId: n,
                        type: i
                    } = this;
                    if (null != t) {
                        switch (i) {
                            case eu.ReadStateTypes.GUILD_HOME:
                            case eu.ReadStateTypes.GUILD_EVENT:
                            case eu.ReadStateTypes.GUILD_ONBOARDING_QUESTION:
                                e = ea.Endpoints.GUILD_FEATURE_ACK(n, t, i);
                                break;
                            case eu.ReadStateTypes.NOTIFICATION_CENTER:
                                e = ea.Endpoints.USER_NON_CHANNEL_ACK(t, i);
                                break;
                            default:
                                return
                        }
                        this._persisted = !0, eM(() => c.default.post({
                            url: e,
                            body: {},
                            oldFormErrors: !0
                        }))
                    }
                }
                delete() {
                    var e;
                    let t = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0],
                        n = j.default.getBasicChannel(this.channelId);
                    eo.log("Deleting ReadState", this.channelId, this.type, {
                        remote: t,
                        persisted: this._persisted,
                        channelMissing: null == n,
                        isOld: ek(this, eI()),
                        validType: null != n && k.ALL_CHANNEL_TYPES.has(n.type),
                        readableType: null != n && (0, k.isReadableType)(n.type),
                        oldThreadCutoff: eI(),
                        mentionCount: this.mentionCount,
                        channelId: this.channelId,
                        ackMessageId: this._ackMessageId,
                        lastMessageId: this._lastMessageId
                    }), t && this._persisted && c.default.delete({
                        url: ea.Endpoints.CHANNEL_ACK(this.channelId),
                        body: {
                            version: 2,
                            read_state_type: this.type
                        },
                        oldFormErrors: !0
                    }), null === (e = eD._readStates[this.type]) || void 0 === e || delete e[this.channelId], eD._mentionChannels.delete(this.channelId)
                }
                shouldDeleteReadState(e) {
                    if (0 !== q.default.totalUnavailableGuilds) return !1;
                    if (null != this.type && this.type !== eu.ReadStateTypes.CHANNEL) return ! function(e) {
                        switch (e.type) {
                            case eu.ReadStateTypes.GUILD_HOME:
                            case eu.ReadStateTypes.GUILD_EVENT:
                            case eu.ReadStateTypes.GUILD_ONBOARDING_QUESTION:
                                return null != Q.default.getGuild(e.channelId);
                            case eu.ReadStateTypes.NOTIFICATION_CENTER:
                                var t;
                                return (null === (t = en.default.getCurrentUser()) || void 0 === t ? void 0 : t.id) === e.channelId;
                            default:
                                return !0
                        }
                    }(this);
                    let t = j.default.getBasicChannel(this.channelId);
                    if (null == t) return !!ek(this, e) || !1;
                    return !!k.ALL_CHANNEL_TYPES.has(t.type) && (!(0, k.isReadableType)(t.type) || !(0, k.isPrivate)(t.type) && (!!(k.THREAD_CHANNEL_TYPES.has(t.type) && function(e, t, n) {
                        let i = e.guildId,
                            a = null != i && U.default.isActive(i, t.parent_id, e.channelId);
                        return !a && ek(e, n)
                    }(this, t, e)) || !!(this.mentionCount > 0) && !J.default.canBasicChannel(ed, t) || !1))
                }
                getAckTimestamp() {
                    let e, t;
                    if (0 !== this._ackMessageTimestamp) return this._ackMessageTimestamp;
                    if (this._isThread) return this._ackMessageTimestamp = eb(this.guildId, this.channelId), this._ackMessageId = x.default.fromTimestamp(this._ackMessageTimestamp), this._ackMessageTimestamp;
                    if (this.type === eu.ReadStateTypes.GUILD_EVENT || this.type === eu.ReadStateTypes.GUILD_ONBOARDING_QUESTION) e = Q.default.getGuild(this.channelId);
                    else if ((0, el.isStaticChannelRoute)(this.channelId)) e = Q.default.getGuild(this.guildId);
                    else {
                        let t = j.default.getChannel(this.channelId);
                        if (null != t) {
                            let n = t.getGuildId();
                            e = Q.default.getGuild(n)
                        }
                    }
                    return t = null != e ? eG(e) : x.default.extractTimestamp(this.channelId), this._ackMessageTimestamp = t, t
                }
                get oldestUnreadTimestamp() {
                    return null != this.oldestUnreadMessageId ? x.default.extractTimestamp(this.oldestUnreadMessageId) : 0
                }
                syncThreadSettings() {
                    this._isThread = !0;
                    let e = j.default.getChannel(this.channelId);
                    if (null == e) return eo.warn("syncThreadSettings called with channel not in memory ".concat(this.channelId)), !1;
                    let t = this.guildId,
                        n = null != t && U.default.isActive(t, e.parent_id, this.channelId),
                        i = P.default.hasJoined(this.channelId);
                    return (this._isActiveThread !== n || this._isJoinedThread !== i) && (this._isActiveThread = n, this._isJoinedThread = i, !0)
                }
                recordLastViewedTime() {
                    let e = Math.ceil((Date.now() - x.DISCORD_EPOCH) / w.default.Millis.DAY);
                    e !== this.lastViewed && (this.lastViewed = e, this.canTrackUnreads() && !this.hasUnread() && this.ack({
                        force: !0,
                        trackAnalytics: !1
                    }))
                }
                constructor(e, t = eu.ReadStateTypes.CHANNEL) {
                    this.type = eu.ReadStateTypes.CHANNEL, this.outgoingAckTimer = null, this.ackMessageIdAtChannelSelect = null, this.channelId = e, this.type = t, this._guildId = null, this._isThread = !1, this._isActiveThread = !1, this._isJoinedThread = !1, this._isResourceChannel = !1, this._persisted = !1, this.loadedMessages = !1, this._lastMessageId = null, this._lastMessageTimestamp = 0, this._ackMessageId = null, this._ackMessageTimestamp = 0, this.isManualAck = !1, this.ackPinTimestamp = 0, this.lastPinTimestamp = 0, this._oldestUnreadMessageId = null, this.oldestUnreadMessageIdStale = !1, this.estimated = !1, this._unreadCount = 0, this._mentionCount = 0, this.outgoingAck = null
                }
            }

            function eL(e) {
                e.forEach(e => {
                    if ((0, k.isReadableType)(e.type)) {
                        let t = eD.get(e.id);
                        t._guildId = e.guild_id, t.lastMessageId = e.lastMessageId, t.lastPinTimestamp = eN(e.lastPinTimestamp), t._isResourceChannel = e.hasFlag(el.ChannelFlags.IS_GUILD_RESOURCE_CHANNEL), k.THREAD_CHANNEL_TYPES.has(e.type) && t.syncThreadSettings()
                    }
                })
            }

            function eU(e) {
                e.forEach(e => {
                    if ((0, k.isReadableType)(e.type)) {
                        var t;
                        let n = eD.get(e.id);
                        n.lastMessageId = e.last_message_id, n.lastPinTimestamp = eN(e.last_pin_timestamp), n._isResourceChannel = (0, H.hasFlag)(null !== (t = e.flags) && void 0 !== t ? t : 0, el.ChannelFlags.IS_GUILD_RESOURCE_CHANNEL), k.THREAD_CHANNEL_TYPES.has(e.type) && n.syncThreadSettings()
                    }
                })
            }

            function eP(e) {
                (function(e) {
                    var t;
                    null === (t = e.threads) || void 0 === t || t.forEach(t => {
                        if (!k.ALL_CHANNEL_TYPES.has(t.type)) return;
                        let n = eD.get(t.id);
                        n.lastMessageId = t.lastMessageId, n.lastPinTimestamp = eN(t.lastPinTimestamp), n._isThread = !0, n._isActiveThread = !0, n._isJoinedThread = null != t.member, null == n.ackMessageId && (n.ackMessageId = x.default.fromTimestamp(eb(e.id, t.id))), null == n.ackPinTimestamp && (n.ackPinTimestamp = eb(e.id, t.id))
                    })
                })(e),
                function(e) {
                    var t, n;
                    if ((null === (t = e.guild_scheduled_events) || void 0 === t ? void 0 : t.length) === 0 && null == eD.getIfExists(e.id, eu.ReadStateTypes.GUILD_EVENT)) return;
                    let i = eD.get(e.id, eu.ReadStateTypes.GUILD_EVENT);
                    i._guildId = e.id;
                    let a = 0,
                        l = null,
                        s = null !== (n = i._ackMessageId) && void 0 !== n ? n : x.default.fromTimestamp(i.getAckTimestamp());
                    e.guild_scheduled_events.forEach(e => {
                        x.default.compare(e.id, l) > 0 && (l = e.id), x.default.compare(e.id, s) > 0 && a++
                    }), i.lastMessageId = l, i.mentionCount = a
                }(e),
                function(e) {
                    let t = eD.get(e.id, eu.ReadStateTypes.GUILD_HOME);
                    t.lastMessageId = x.default.fromTimestamp(o(Date.now()).subtract(24, "h").valueOf())
                }(e),
                function(e) {
                    let t = e.properties.latest_onboarding_question_id;
                    if (null == t) return;
                    let n = eD.get(e.id, eu.ReadStateTypes.GUILD_ONBOARDING_QUESTION);
                    n._guildId = e.id, n.lastMessageId = t
                }(e)
            }
            eD._guildReadStateSentinels = {}, eD._readStates = {}, eD._mentionChannels = new Set;

            function eb(e, t) {
                var n, i, a;
                let l = j.default.getChannel(t),
                    s = Q.default.getGuild(null != e ? e : null == l ? void 0 : l.guild_id),
                    r = (null == l ? void 0 : l.isForumPost()) ? 0 : eG(s),
                    u = (null !== (a = null === (n = P.default.joinTimestamp(t)) || void 0 === n ? void 0 : n.getTime()) && void 0 !== a ? a : 0) - 5e3,
                    o = null == l ? void 0 : null === (i = l.threadMetadata) || void 0 === i ? void 0 : i.archiveTimestamp,
                    d = null != o ? new Date(o).getTime() - 1 : 0,
                    c = Math.max(u, d);
                return c <= 0 && (c = x.default.extractTimestamp(t) - 1), isNaN(r) ? c : Math.max(r, c)
            }

            function eG(e) {
                if (null != e && null != e.joinedAt) {
                    if (e.joinedAt instanceof Date) return e.joinedAt.getTime();
                    if ("string" == typeof e.joinedAt) return new Date(e.joinedAt).getTime();
                    else if ("number" == typeof e.joinedAt && !isNaN(e.joinedAt)) return e.joinedAt
                }
                return Date.now()
            }

            function ek(e, t) {
                return !!(e.mentionCount > 0) || !(x.default.compare(e.channelId, t) > 0 || null != e._ackMessageId && x.default.compare(e._ackMessageId, t) > 0 || null != e._lastMessageId && x.default.compare(e._lastMessageId, t) > 0) && !0
            }

            function eF(e) {
                if (null != e) {
                    let t = eD.get(e);
                    if (ey(t)) return t.ack({})
                }
                return !1
            }

            function ew() {
                null != ep && clearTimeout(ep)
            }

            function eH(e) {
                if (null != e.channelUpdates) {
                    var t;
                    eL(null === (t = e.channelUpdates) || void 0 === t ? void 0 : t.writes)
                }
                if (null != e.channelTimestampUpdates)
                    for (let t of e.channelTimestampUpdates) {
                        let e = eD.get(t.id);
                        null != t.last_message_id && (e.lastMessageId = t.last_message_id), null != t.last_pin_timestamp && (e.lastPinTimestamp = eN(t.last_pin_timestamp))
                    }
            }

            function eV(e) {
                let {
                    channelId: t
                } = e, n = eD.get(t);
                n.rebuildChannelState()
            }

            function eB(e) {
                let {
                    threads: t
                } = e;
                eU(t)
            }

            function ex(e) {
                let t = en.default.getCurrentUser();
                return null != e.creator_id && null != t && e.creator_id === t.id
            }

            function eY(e) {
                let {
                    channel: t
                } = e;
                return eD.clear(t.id)
            }

            function eK() {
                let e = K.default.getCurrentSidebarChannelId(ec),
                    t = !1;
                return e_ !== e ? (t = ez(e_), e_ = e) : t = eF(e) || t, t
            }

            function ej(e) {
                if (null == e) return;
                let t = eD.get(e);
                t.isManualAck = !1
            }

            function ez(e) {
                if (null == e) return !1;
                let t = eD.get(e);
                return !t.hasUnread() && (t.oldestUnreadMessageId = null, !0)
            }

            function eW(e) {
                let {
                    channelId: t,
                    messageId: n,
                    manual: i,
                    newMentionCount: a
                } = e, l = eD.get(t);
                return i ? (l.rebuildChannelState(n, !0, a), !0) : n !== l._ackMessageId && l.ack({
                    messageId: n,
                    local: !0
                })
            }

            function eq(e) {
                let {
                    id: t,
                    ackType: n,
                    ackedId: i,
                    local: a
                } = e;
                return eQ(t, n, i, a)
            }

            function eQ(e, t, n, i) {
                var a;
                let l = eD.get(e, t);
                return n !== l.ackMessageId && l.lastMessageId !== l.ackMessageId && (null != l.lastMessageId || 0 !== l.mentionCount) && (n = null !== (a = null != n ? n : l.lastMessageId) && void 0 !== a ? a : x.default.fromTimestamp(l.getAckTimestamp()), l.ack({
                    messageId: n,
                    local: null == i || i
                }))
            }
            class eX extends d.default.Store {
                initialize() {
                    this.waitFor(z.default, en.default, Q.default, q.default, j.default, ee.default, Z.default, J.default, T.default, U.default, P.default, K.default, A.default, W.default, p.default, et.default, ei.default, v.default, C.default, G.default, O.default), this.syncWith([K.default], eK)
                }
                getReadStatesByChannel() {
                    var e;
                    return null !== (e = eD._readStates[eu.ReadStateTypes.CHANNEL]) && void 0 !== e ? e : {}
                }
                getForDebugging(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getIfExists(e, t)
                }
                getNotifCenterReadState(e) {
                    return eD._readStates[eu.ReadStateTypes.NOTIFICATION_CENTER][e]
                }
                hasUnread(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canBeUnread() && e.hasUnread(), !1)
                }
                hasNotableUnread(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canBeUnread() && e.hasNotableUnread(), !1)
                }
                hasTrackedUnread(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canTrackUnreads() && e.hasUnread(), !1)
                }
                isForumPostUnread(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.isForumPostUnread(), !1)
                }
                hasRelevantUnread(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return this.hasNotableUnread(e.id, t) && et.default.isChannelRelevant(e)
                }
                getUnreadCount(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canBeUnread() ? e.unreadCount : 0, 0)
                }
                getMentionCount(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canHaveMentions() ? e.getMentionCount() : 0, 0)
                }
                getGuildChannelUnreadState(e, t, n, i, a, l) {
                    return eD.getValue(e.id, eu.ReadStateTypes.CHANNEL, s => s.getGuildChannelUnreadState(e, t, n, i, a, l), {
                        mentionCount: 0,
                        hasNotableUnread: !1
                    })
                }
                hasRecentlyVisitedAndRead(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.hasRecentlyVisitedAndRead(), !1)
                }
                ackMessageId(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canBeUnread() ? e.ackMessageId : null, null)
                }
                getTrackedAckMessageId(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canTrackUnreads() ? e._ackMessageId : null, null)
                }
                lastMessageId(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.lastMessageId, null)
                }
                lastMessageTimestamp(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.lastMessageTimestamp, 0)
                }
                lastPinTimestamp(e) {
                    return eD.getValue(e, eu.ReadStateTypes.CHANNEL, e => e.lastPinTimestamp, null)
                }
                getOldestUnreadMessageId(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canTrackUnreads() ? e.oldestUnreadMessageId : null, null)
                }
                getOldestUnreadTimestamp(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.canTrackUnreads() ? e.oldestUnreadTimestamp : 0, 0)
                }
                isEstimated(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e.estimated, !1)
                }
                hasOpenedThread(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : eu.ReadStateTypes.CHANNEL;
                    return eD.getValue(e, t, e => e._persisted, !1)
                }
                hasUnreadPins(e) {
                    return eD.getValue(e, eu.ReadStateTypes.CHANNEL, e => e.canBeUnread() && e.lastPinTimestamp > e.ackPinTimestamp, !1)
                }
                isNewForumThread(e, t, n) {
                    let i = eD.get(t),
                        a = eD.get(e);
                    if (!0 === a._persisted || null == i.ackMessageIdAtChannelSelect || 0 >= x.default.compare(e, i.ackMessageIdAtChannelSelect)) return !1;
                    let l = eG(n),
                        s = x.default.extractTimestamp(e);
                    return s > l
                }
                getAllReadStates(e) {
                    let t = [];
                    return eD.forEach(n => {
                        switch (n.type) {
                            case eu.ReadStateTypes.GUILD_HOME:
                            case eu.ReadStateTypes.GUILD_EVENT:
                            case eu.ReadStateTypes.GUILD_ONBOARDING_QUESTION:
                                let i = Q.default.getGuild(n.channelId);
                                null != i && t.push(n.serialize(e));
                                break;
                            case eu.ReadStateTypes.NOTIFICATION_CENTER:
                                var a;
                                let l = null === (a = en.default.getCurrentUser()) || void 0 === a ? void 0 : a.id;
                                l === n.channelId && t.push(n.serialize(e));
                                break;
                            default:
                                t.push(n.serialize(e))
                        }
                    }), t
                }
                getGuildUnreadsSentinel(e) {
                    return eD.getGuildSentinels(e).unreadsSentinel
                }
                getMentionChannelIds() {
                    return eD.getMentionChannelIds()
                }
            }
            eX.displayName = "ReadStateStore";
            let eZ = new eX(f.default, {
                CONNECTION_OPEN: function(e) {
                    var t, n;
                    let {
                        guilds: i,
                        relationships: a,
                        initialPrivateChannels: l,
                        readState: s
                    } = e;
                    eC(), eE = null, !ef && !s.partial && eD.clearAll(), ef = !1, s.entries.forEach(e => {
                        var t, n, i;
                        let a = null !== (t = e.read_state_type) && void 0 !== t ? t : eu.ReadStateTypes.CHANNEL;
                        if (a !== eu.ReadStateTypes.CHANNEL) {
                            ;
                            e = {
                                id: (i = e).id,
                                read_state_type: i.read_state_type,
                                mention_count: i.badge_count,
                                last_message_id: i.last_acked_id
                            }
                        }
                        let l = eD.get(e.id, a);
                        l._persisted = !0, l._mentionCount = null !== (n = e.mention_count) && void 0 !== n ? n : 0, l.flags = e.flags, l.lastViewed = e.last_viewed;
                        let s = j.default.getBasicChannel(e.id);
                        null != s && (0, k.isThread)(s.type) && (null == e.last_message_id || 0 === e.last_message_id) ? l.ackMessageId = x.default.fromTimestamp(eb(s.guild_id, s.id)) : l.ackMessageId = e.last_message_id, l.ackPinTimestamp = eN(e.last_pin_timestamp), eD._mentionChannels.delete(l.channelId), l._mentionCount > 0 && l.canHaveMentions() && eD._mentionChannels.add(l.channelId)
                    }), eD.resetGuildSentinels();
                    let r = null === (t = en.default.getCurrentUser()) || void 0 === t ? void 0 : t.id;
                    if (null != r) {
                        let e = eD.get(r, eu.ReadStateTypes.NOTIFICATION_CENTER);
                        e.lastMessageId = x.default.fromTimestamp(Date.now())
                    }
                    for (let e of (function(e) {
                            let t = en.default.getCurrentUser();
                            if (!(0, M.inNotificationCenterEnabled)() || null == t) return 0;
                            let n = eD.get(t.id, eu.ReadStateTypes.NOTIFICATION_CENTER);
                            e.forEach(e => {
                                if (null == e.since || e.type !== ea.RelationshipTypes.PENDING_INCOMING) return;
                                let t = new Date(e.since).getTime(),
                                    i = null != n.ackMessageId ? x.default.extractTimestamp(n.ackMessageId) : 0;
                                i < t && (n.mentionCount++, n.lastMessageId = x.default.fromTimestamp(t))
                            })
                        }(a), eL(l), i)) eL(null !== (n = e.channels) && void 0 !== n ? n : []), eH(e), eP(e);
                    ew(), ep = setTimeout(() => (function(e) {
                        let t = eI();
                        for (let i of e) {
                            var n;
                            let e = null !== (n = i.read_state_type) && void 0 !== n ? n : eu.ReadStateTypes.CHANNEL,
                                a = eD.get(i.id, e);
                            a.shouldDeleteReadState(t) && a.delete()
                        }
                    })(s.entries), 1e4)
                },
                CONNECTION_OPEN_SUPPLEMENTAL: function(e) {
                    let {
                        lazyPrivateChannels: t
                    } = e;
                    eL(t)
                },
                LOGOUT: ew,
                OVERLAY_INITIALIZE: function(e) {
                    let {
                        readStates: t,
                        selectedChannelId: n
                    } = e;
                    eC(), eE = null, ec = n, e_ = K.default.getCurrentSidebarChannelId(ec), eD.clearAll(), t.forEach(e => {
                        let t = eD.get(e.channelId);
                        t.deserializeForOverlay(e), t.type === eu.ReadStateTypes.CHANNEL && t.rebuildChannelState()
                    })
                },
                CACHE_LOADED: function(e) {
                    let {
                        readStates: t
                    } = e;
                    ef = !0, eC(), t.forEach(e => {
                        var t;
                        let n = null !== (t = e.type) && void 0 !== t ? t : eu.ReadStateTypes.CHANNEL;
                        e.type = n, null == eD._readStates[n] && (eD._readStates[n] = {}), eD._readStates[n][e.channelId] = (0, E.dangerouslyCast)(e, eD)
                    })
                },
                GUILD_CREATE: function(e) {
                    var t;
                    let {
                        guild: n
                    } = e, i = eI();
                    eD.forEach(e => {
                        e.guildId === n.id && e.shouldDeleteReadState(i) && e.delete(!1)
                    }), eL(null !== (t = n.channels) && void 0 !== t ? t : []), eH(n), eP(n)
                },
                LOAD_MESSAGES_SUCCESS: function(e) {
                    let {
                        channelId: t,
                        isAfter: n,
                        messages: i
                    } = e, a = eD.get(t);
                    a.loadedMessages = !0;
                    let l = Z.default.getMessages(t);
                    null != l && (i.length > 0 && 1 === x.default.compare(i[0].id, a.ackMessageId) && 0 === a.unreadCount ? a.rebuildChannelState() : l.hasPresent() || l.jumpTargetId === a.ackMessageId ? a.rebuildChannelState() : n && null != a.ackMessageId && l.has(a.ackMessageId, !0) && (a.unreadCount += i.length, null == a.oldestUnreadMessageId && a.rebuildChannelState())), eU(i.map(e => e.thread).filter(V.isNotNullish))
                },
                MESSAGE_CREATE: function(e) {
                    let t, n, {
                            channelId: a,
                            message: l,
                            isPushNotification: s
                        } = e,
                        r = eD.get(a);
                    r.lastMessageId = l.id;
                    let u = en.default.getCurrentUser(),
                        o = j.default.getBasicChannel(a);
                    if (null != l.author && null != u && l.author.id === u.id) return null != r.outgoingAck && r.clearOutgoingAck(), eW({
                        channelId: a,
                        messageId: l.id,
                        manual: !1
                    });
                    let d = (0, g.getRootNavigationRefIfInExperiment)();
                    if ((null == d ? void 0 : d.isReady()) === !0) {
                        let e = d.getCurrentRoute(),
                            n = T.default.getChatOpen(r.channelId);
                        n ? t = r.channelId : (null == e ? void 0 : e.name) === "channel" && (t = e.params.channelId)
                    } else null == d && (t = ee.default.getChannelId(), n = K.default.getCurrentSidebarChannelId(t));
                    let c = t === a || n === a;
                    if (c && ey(r) && !s || null != i && i.isInstanceFocused() && c && i.isInstanceUILocked() && i.isPinned(ea.OverlayWidgets.TEXT)) return r.ack({
                        messageId: l.id
                    });
                    (null == r.oldestUnreadMessageId || r.oldestUnreadMessageIdStale) && (r.oldestUnreadMessageId = l.id), r.unreadCount++;
                    let _ = null != l.author && $.default.isBlocked(l.author.id) || l.type === ea.MessageTypes.RECIPIENT_REMOVE && (null == o ? void 0 : o.type) === ea.ChannelTypes.GROUP_DM;
                    if (!_ && (null != u && (0, R.isRawMessageMentioned)({
                            rawMessage: l,
                            userId: u.id,
                            suppressEveryone: et.default.isSuppressEveryoneEnabled(r.guildId),
                            suppressRoles: et.default.isSuppressRolesEnabled(r.guildId)
                        }) || eR(j.default.getChannel(a))) && (r.mentionCount++, (0, y.isNotificationRedesignV2Enabled)() && null != u)) {
                        let e = eD.get(u.id, eu.ReadStateTypes.NOTIFICATION_CENTER);
                        e.lastMessageId = l.id, v.default.tabFocused && eQ(u.id, eu.ReadStateTypes.NOTIFICATION_CENTER, void 0, !1)
                    }
                },
                MESSAGE_DELETE: eV,
                MESSAGE_DELETE_BULK: eV,
                MESSAGE_ACK: eW,
                CHANNEL_ACK: function(e) {
                    let {
                        channelId: t,
                        messageId: n,
                        immediate: i = !1,
                        force: a = !1,
                        context: l,
                        location: s
                    } = e, r = eD.get(t), u = r.ack({
                        messageId: n,
                        local: l !== ea.CURRENT_APP_CONTEXT,
                        immediate: i,
                        force: a,
                        isExplicitUserAction: !0,
                        location: s
                    });
                    return null != n ? (r.rebuildChannelState(), !0) : u
                },
                CHANNEL_LOCAL_ACK: function(e) {
                    let {
                        channelId: t
                    } = e, n = eD.get(t);
                    return n.ack({
                        messageId: void 0,
                        local: !0,
                        immediate: void 0,
                        force: void 0,
                        isExplicitUserAction: !0
                    })
                },
                CHANNEL_PINS_ACK: function(e) {
                    let {
                        channelId: t,
                        timestamp: n
                    } = e, i = eD.get(t);
                    return i.ackPins(n)
                },
                CHANNEL_PINS_UPDATE: function(e) {
                    let {
                        channelId: t,
                        lastPinTimestamp: n
                    } = e, i = eD.get(t), a = eN(n);
                    return i.lastPinTimestamp !== a && (i.lastPinTimestamp = a, !0)
                },
                CHANNEL_SELECT: function(e) {
                    var t;
                    let {
                        channelId: n
                    } = e, i = K.default.getCurrentSidebarChannelId(n), a = j.default.getChannel(n);
                    if (null != a) {
                        let e = eD.get(a.id);
                        e.ackMessageIdAtChannelSelect = null !== (t = e.ackMessageId) && void 0 !== t ? t : x.default.fromTimestamp(e.getAckTimestamp()), e.recordLastViewedTime()
                    }
                    ej(ec), ej(e_);
                    let l = !1;
                    return ec !== n && (l = ez(ec) || l, l = ez(e_) || l), (ec === n || (null == a ? void 0 : a.type) != null && ea.ChannelTypesSets.GUILD_THREADS_ONLY.has(a.type)) && (l = eF(n) || l), ec === n && (l = eF(i) || l), ec = n, e_ = i, l
                },
                VOICE_CHANNEL_SELECT: function(e) {
                    let {
                        channelId: t
                    } = e;
                    if (null == t) return;
                    let n = eD.get(t);
                    if (!n.hasMentions()) return n.oldestUnreadMessageId = null, n.ack({
                        isExplicitUserAction: !0
                    })
                },
                CHANNEL_CREATE: function(e) {
                    let {
                        channel: t
                    } = e;
                    if (!(0, k.isReadableType)(t.type)) return !1;
                    let n = eD.get(t.id);
                    n.lastMessageId = t.lastMessageId, n.lastPinTimestamp = eN(t.lastPinTimestamp)
                },
                THREAD_CREATE: function(e) {
                    let {
                        channel: t
                    } = e;
                    (function(e) {
                        if (!k.ALL_CHANNEL_TYPES.has(e.type)) return 0;
                        let t = eD.get(e.id);
                        t.lastMessageId = e.lastMessageId, t.lastPinTimestamp = eN(e.lastPinTimestamp), t.syncThreadSettings(), e.ownerId === Y.default.getId() && (t.loadedMessages = !0)
                    })(t),
                    function(e) {
                        let t = e.parent_id,
                            n = eD.get(t);
                        n.lastMessageId = e.id;
                        let i = en.default.getCurrentUser();
                        if (e.ownerId === (null == i ? void 0 : i.id)) {
                            let n = eD.get(e.id);
                            n._persisted = !0, eW({
                                channelId: t,
                                messageId: e.id,
                                manual: !1
                            })
                        }
                    }(t)
                },
                THREAD_UPDATE: function(e) {
                    let {
                        channel: t
                    } = e;
                    return !!k.ALL_CHANNEL_TYPES.has(t.type) && eD.get(t.id).syncThreadSettings()
                },
                THREAD_LIST_SYNC: function(e) {
                    let {
                        threads: t
                    } = e;
                    t.forEach(e => {
                        if (!k.ALL_CHANNEL_TYPES.has(e.type)) return;
                        let t = eD.get(e.id);
                        if (t.lastMessageId = e.lastMessageId, t.lastPinTimestamp = eN(e.lastPinTimestamp), t._isThread = !0, t._isActiveThread = !0, t._isJoinedThread = P.default.hasJoined(e.id), e.isForumPost()) {
                            let t = eD.get(e.parent_id);
                            0 > x.default.compare(t.lastMessageId, e.id) && (t.lastMessageId = e.id)
                        }
                    })
                },
                LOAD_THREADS_SUCCESS: eB,
                LOAD_ARCHIVED_THREADS_SUCCESS: eB,
                SEARCH_FINISH: function(e) {
                    let {
                        messages: t,
                        threads: n
                    } = e;
                    for (let e of t) eU(e.map(e => {
                        let {
                            thread: t
                        } = e;
                        return t
                    }).filter(V.isNotNullish));
                    eU(n)
                },
                THREAD_MEMBER_UPDATE: function(e) {
                    let {
                        id: t
                    } = e;
                    return eD.get(t).syncThreadSettings()
                },
                THREAD_MEMBERS_UPDATE: function(e) {
                    return (0, b.doesThreadMembersActionAffectMe)(e) && eD.get(e.id).syncThreadSettings()
                },
                CHANNEL_DELETE: eY,
                THREAD_DELETE: eY,
                WINDOW_FOCUS: function(e) {
                    let t = !1;
                    for (let [n, i] of Object.entries(eS)) i === e.windowId && (t = function(e, t) {
                        if (null == e) return !1;
                        let n = eD.get(e);
                        return !t && !n.hasUnread() && (n.oldestUnreadMessageIdStale = !0), eF(e)
                    }(n, e.focused) || t);
                    return t
                },
                UPDATE_CHANNEL_DIMENSIONS: function(e) {
                    let {
                        channelId: t
                    } = e;
                    return eF(t)
                },
                CURRENT_USER_UPDATE: function() {
                    eE = null
                },
                DRAWER_OPEN: function() {
                    if (null != ec) {
                        let e = eD.get(ec);
                        !e.hasUnread() && (e.oldestUnreadMessageIdStale = !0)
                    }
                    return !1
                },
                DRAWER_CLOSE: function() {
                    return eF(ec)
                },
                BULK_ACK: function(e) {
                    var t, n;
                    let {
                        channels: i,
                        context: a
                    } = e, l = i.filter(e => null != e.messageId && eZ.hasUnread(e.channelId, e.readStateType));
                    t = l, n = a, t.forEach(e => {
                        let {
                            channelId: t,
                            messageId: n,
                            readStateType: i
                        } = e, a = eD.get(t, i);
                        a.ack({
                            messageId: n,
                            local: !0,
                            immediate: void 0,
                            force: void 0,
                            isExplicitUserAction: !0
                        })
                    }), n !== ea.CURRENT_APP_CONTEXT || (eh.push(...t.map(e => ({
                        channel_id: e.channelId,
                        message_id: e.messageId,
                        read_state_type: e.readStateType
                    }))), eT || ev())
                },
                ENABLE_AUTOMATIC_ACK: function(e) {
                    let {
                        channelId: t,
                        windowId: n
                    } = e;
                    return eS[t] !== n && (r(void 0 === eS[t], "handleEnableAutomaticAck: channel already visible in another window"), eS[t] = n, eF(t))
                },
                DISABLE_AUTOMATIC_ACK: function(e) {
                    let {
                        channelId: t
                    } = e;
                    return eS[t] = void 0, !1
                },
                GUILD_FEATURE_ACK: eq,
                GUILD_SCHEDULED_EVENT_CREATE: function(e) {
                    let {
                        guildScheduledEvent: t
                    } = e, n = t.guild_id, i = eD.get(t.guild_id, eu.ReadStateTypes.GUILD_EVENT);
                    if (i.lastMessageId = t.id, ex(t)) {
                        eq({
                            type: "GUILD_FEATURE_ACK",
                            id: n,
                            ackType: eu.ReadStateTypes.GUILD_EVENT,
                            ackedId: t.id,
                            local: !1
                        });
                        return
                    }!et.default.isMuteScheduledEventsEnabled(n) && i.mentionCount++
                },
                GUILD_SCHEDULED_EVENT_UPDATE: function(e) {
                    let {
                        guildScheduledEvent: t
                    } = e, n = t.guild_id;
                    if (ex(t) || ![es.GuildScheduledEventStatus.CANCELED, es.GuildScheduledEventStatus.COMPLETED].includes(t.status)) return !1;
                    let i = eD.get(n, eu.ReadStateTypes.GUILD_EVENT);
                    i.handleGuildEventRemoval(n, t.id)
                },
                GUILD_SCHEDULED_EVENT_DELETE: function(e) {
                    let {
                        guildScheduledEvent: t
                    } = e, n = t.guild_id;
                    if (ex(t)) return !1;
                    let i = eD.get(t.guild_id, eu.ReadStateTypes.GUILD_EVENT);
                    i.handleGuildEventRemoval(n, t.id)
                },
                GUILD_DELETE: function(e) {
                    let {
                        guild: t
                    } = e;
                    return eD.clear(t.id, eu.ReadStateTypes.GUILD_EVENT)
                },
                GUILD_UPDATE: function(e) {
                    let {
                        guild: t
                    } = e, n = t.latest_onboarding_question_id;
                    if (null == n) return;
                    let i = eD.get(t.id, eu.ReadStateTypes.GUILD_ONBOARDING_QUESTION);
                    i._guildId = t.id, i.lastMessageId = n
                },
                RESORT_THREADS: function(e) {
                    let {
                        channelId: t
                    } = e;
                    return eF(t)
                },
                CHANNEL_RTC_UPDATE_CHAT_OPEN: function(e) {
                    let {
                        channelId: t,
                        chatOpen: n
                    } = e
                },
                DECAY_READ_STATES: eC,
                NOTIFICATION_CENTER_ITEM_CREATE: function(e) {
                    var t;
                    let {
                        item: n
                    } = e;
                    if (!(0, M.inNotificationCenterEnabled)()) return !1;
                    let i = null === (t = en.default.getCurrentUser()) || void 0 === t ? void 0 : t.id;
                    if (null == i) return !1;
                    let a = eD.get(i, eu.ReadStateTypes.NOTIFICATION_CENTER);
                    a.lastMessageId = n.id;
                    let l = (0, y.isNotificationRedesignV2Enabled)();
                    if (!l && v.default.active || l && v.default.tabFocused) {
                        eQ(i, eu.ReadStateTypes.NOTIFICATION_CENTER, n.id, !1);
                        return
                    }
                    a.mentionCount++
                },
                RELATIONSHIP_ADD: function(e) {
                    let t = en.default.getCurrentUser();
                    if (!(0, M.inNotificationCenterEnabled)() || null == t || null == e.relationship.since || e.relationship.type !== ea.RelationshipTypes.PENDING_INCOMING && e.relationship.type !== ea.RelationshipTypes.FRIEND) return !1;
                    let n = eD.get(t.id, eu.ReadStateTypes.NOTIFICATION_CENTER),
                        i = e.relationship.type === ea.RelationshipTypes.FRIEND,
                        a = i ? new Date(Date.now()).getTime() : new Date(e.relationship.since).getTime(),
                        l = null != n.ackMessageId ? x.default.extractTimestamp(n.ackMessageId) : 0,
                        s = (0, y.isNotificationRedesignV2Enabled)();
                    l < a && (n.lastMessageId = x.default.fromTimestamp(a), !s && v.default.active || s && v.default.tabFocused ? eQ(t.id, eu.ReadStateTypes.NOTIFICATION_CENTER, void 0, !1) : i ? n.mentionCount-- : n.mentionCount++)
                },
                RELATIONSHIP_REMOVE: function(e) {
                    let t = en.default.getCurrentUser();
                    if (!(0, M.inNotificationCenterEnabled)() || null == t || null == e.relationship.since || e.relationship.type !== ea.RelationshipTypes.PENDING_INCOMING) return !1;
                    let n = eD.get(t.id, eu.ReadStateTypes.NOTIFICATION_CENTER),
                        i = new Date(e.relationship.since).getTime(),
                        a = null != n.ackMessageId ? x.default.extractTimestamp(n.ackMessageId) : 0;
                    a <= i && (n.mentionCount = Math.max(0, n.mentionCount - 1))
                },
                NOTIFICATION_CENTER_ITEMS_ACK: function(e) {
                    var t;
                    let {
                        ids: n,
                        optimistic: i
                    } = e;
                    if (i || !(0, M.inNotificationCenterEnabled)() || v.default.active) return !1;
                    let a = null === (t = en.default.getCurrentUser()) || void 0 === t ? void 0 : t.id;
                    if (null == a) return !1;
                    let l = eD.get(a, eu.ReadStateTypes.NOTIFICATION_CENTER);
                    n.forEach(e => {
                        0 > x.default.compare(l.ackMessageId, e) && (l.mentionCount = Math.max(l.mentionCount - 1, 0))
                    })
                },
                USER_NON_CHANNEL_ACK: function(e) {
                    var t;
                    let {
                        ackType: n,
                        ackedId: i,
                        local: a
                    } = e, l = null === (t = en.default.getCurrentUser()) || void 0 === t ? void 0 : t.id;
                    return null != l && eQ(l, n, i, a)
                },
                PASSIVE_UPDATE_V1: function(e) {
                    var t;
                    let n = !1;
                    for (let i of null !== (t = e.channels) && void 0 !== t ? t : []) {
                        let e = eD.get(i.id),
                            t = eN(i.lastPinTimestamp);
                        (e.lastMessageId !== i.lastMessageId || e.lastPinTimestamp !== t) && (n = !0, e.lastMessageId = i.lastMessageId, e.lastPinTimestamp = t)
                    }
                    return n
                },
                CLEAR_OLDEST_UNREAD_MESSAGE: function(e) {
                    let {
                        channelId: t
                    } = e;
                    return ez(t)
                }
            });
            var eJ = eZ
        },
        744983: function(e, t, n) {
            "use strict";
            let i;
            n.r(t), n.d(t, {
                default: function() {
                    return M
                }
            });
            var a = n("917351"),
                l = n.n(a),
                s = n("446674"),
                r = n("95410"),
                u = n("913144"),
                o = n("390933"),
                d = n("25932"),
                c = n("42203"),
                _ = n("305961"),
                E = n("18494"),
                f = n("49111");
            let h = {},
                T = !1;

            function p(e) {
                return null == h[e] && (h[e] = {
                    searchId: e,
                    searchType: S(e),
                    isIndexing: !1,
                    isHistoricalIndexing: !1,
                    isSearching: !1,
                    analyticsId: null,
                    editorState: null,
                    offset: 0,
                    query: null,
                    hasError: !1,
                    searchFetcher: null,
                    rawResults: null,
                    totalResults: 0,
                    documentsIndexed: 0,
                    resultsBlocked: 0,
                    showBlockedResults: !1,
                    showNoResultsAlt: !1
                }), h[e]
            }

            function S(e) {
                return e === f.SearchTypes.DMS ? f.SearchTypes.DMS : null != _.default.getGuild(e) ? f.SearchTypes.GUILD : null != c.default.getChannel(e) ? f.SearchTypes.CHANNEL : null
            }

            function I(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                if (null == e) return n;
                let i = h[e];
                return null == i ? n : t(i)
            }
            let A = "SearchStore",
                m = !1,
                g = {},
                C = null;

            function N(e) {
                var t;
                let {
                    searchId: n,
                    query: i
                } = e;
                if ("string" != typeof i || "" === (i = i.trim())) return;
                let a = g[n] = null !== (t = g[n]) && void 0 !== t ? t : [],
                    l = a.indexOf(i); - 1 !== l ? (a.splice(l, 1), a.unshift(i)) : null != a[0] && "" !== a[0] && i.startsWith(a[0]) ? a[0] = i : l < 0 && a.unshift(i), a.length > 5 && a.splice(5, a.length), r.default.set(A, {
                    history: g
                })
            }

            function O(e) {
                let {
                    searchId: t
                } = e, n = h[t];
                if (null == n) return !1;
                null != n.searchFetcher && n.searchFetcher.cancel(), delete h[t]
            }

            function R(e) {
                if (e === C) return !1;
                null != e && null == h[e] && p(e), C = e
            }
            class v extends s.default.Store {
                initialize() {
                    this.waitFor(_.default, c.default);
                    let e = r.default.get(A);
                    if ((null == e ? void 0 : e.history) != null) {
                        var t;
                        Object.keys(t = e.history).forEach(e => {
                            Array.isArray(t[e]) && (t[e] = t[e].filter(e => "string" == typeof e && e.trim())), (!Array.isArray(t[e]) || 0 === t[e].length) && delete t[e]
                        }), g = t
                    }
                    m = !!r.default.get("tokenized")
                }
                isOpen() {
                    return T
                }
                getCurrentSearchModalType() {
                    return i
                }
                getCurrentSearchId() {
                    return C
                }
                isActive() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : C;
                    return null != e && (this.isIndexing(e) || this.isSearching(e) || this.hasResults(e))
                }
                isTokenized() {
                    return m
                }
                getSearchType(e) {
                    return I(null != e ? e : C, e => e.searchType)
                }
                getRawResults(e) {
                    return I(e, e => e.rawResults)
                }
                hasResults(e) {
                    return null != I(e, e => e.rawResults)
                }
                isIndexing(e) {
                    return I(e, e => e.isIndexing) || !1
                }
                isHistoricalIndexing(e) {
                    return I(e, e => e.isHistoricalIndexing) || !1
                }
                isSearching(e) {
                    return I(e, e => e.isSearching) || !1
                }
                getAnalyticsId(e) {
                    return I(e, e => e.analyticsId)
                }
                getResultsBlocked(e) {
                    return I(e, e => e.resultsBlocked)
                }
                getDocumentsIndexedCount(e) {
                    return I(e, e => e.documentsIndexed)
                }
                getSearchFetcher(e) {
                    return I(e, e => e.searchFetcher)
                }
                getTotalResults(e) {
                    var t;
                    return null !== (t = I(e, e => e.totalResults)) && void 0 !== t ? t : 0
                }
                getEditorState(e) {
                    return I(e, e => e.editorState)
                }
                getHistory(e) {
                    return g[e]
                }
                getOffset(e) {
                    var t;
                    return null !== (t = I(e, e => e.offset)) && void 0 !== t ? t : 0
                }
                getQuery(e) {
                    return I(e, e => e.query)
                }
                hasError(e) {
                    var t;
                    return null !== (t = I(e, e => e.hasError)) && void 0 !== t && t
                }
                shouldShowBlockedResults(e) {
                    var t;
                    return null !== (t = I(e, e => e.showBlockedResults, !1)) && void 0 !== t && t
                }
                shouldShowNoResultsAlt(e) {
                    var t;
                    return null !== (t = I(e, e => e.showNoResultsAlt, !1)) && void 0 !== t && t
                }
                getResultsState(e) {
                    return {
                        isSearching: this.isSearching(e),
                        isIndexing: this.isIndexing(e),
                        isHistoricalIndexing: this.isHistoricalIndexing(e),
                        documentsIndexed: this.getDocumentsIndexedCount(e),
                        offset: this.getOffset(e),
                        totalResults: this.getTotalResults(e),
                        hasError: this.hasError(e),
                        showBlockedResults: this.shouldShowBlockedResults(e),
                        showNoResultsAlt: this.shouldShowNoResultsAlt(e)
                    }
                }
            }
            v.displayName = "SearchStore";
            var M = new v(u.default, {
                SEARCH_START: function(e) {
                    var t, n, i;
                    let {
                        queryString: a,
                        searchId: s,
                        query: r
                    } = e, _ = p(s);
                    null != _.searchFetcher && (_.searchFetcher.cancel(), _.searchFetcher = null);
                    let h = s,
                        T = _.searchType;
                    s === f.FAVORITES && (h = null !== (n = E.default.getChannelId()) && void 0 !== n ? n : s, T = f.SearchTypes.CHANNEL);
                    let S = new o.default(h, T, r);
                    _.searchFetcher = S, _.isSearching = !0, _.rawResults = null, _.analyticsId = null, _.query = l.omit(r, "type"), _.offset = null !== (i = r.offset) && void 0 !== i ? i : 0, _.showBlockedResults = !1, N({
                        type: "SEARCH_ADD_HISTORY",
                        searchId: s,
                        query: a
                    });
                    let I = s === f.FAVORITES ? null === (t = c.default.getChannel(h)) || void 0 === t ? void 0 : t.guild_id : T === f.SearchTypes.GUILD ? s : null;
                    S.fetch(e => {
                        var t, n;
                        u.default.dispatch({
                            type: "SEARCH_FINISH",
                            searchId: s,
                            guildId: I,
                            analyticsId: e.body.analytics_id,
                            totalResults: e.body.total_results,
                            messages: e.body.messages,
                            threads: null !== (t = e.body.threads) && void 0 !== t ? t : [],
                            members: (null !== (n = e.body.members) && void 0 !== n ? n : []).map(e => (0, d.default)(e)),
                            hasError: !1,
                            doingHistoricalIndex: e.body.doing_deep_historical_index,
                            documentsIndexed: e.body.documents_indexed
                        })
                    }, () => {
                        u.default.dispatch({
                            type: "SEARCH_INDEXING",
                            searchId: s
                        })
                    }, () => {
                        u.default.dispatch({
                            type: "SEARCH_FINISH",
                            searchId: s,
                            guildId: I,
                            messages: [],
                            threads: [],
                            members: [],
                            totalResults: 0,
                            analyticsId: null,
                            hasError: !0,
                            doingHistoricalIndex: !1,
                            documentsIndexed: 0
                        })
                    })
                },
                SEARCH_INDEXING: function(e) {
                    let {
                        searchId: t
                    } = e, n = p(t);
                    n.isIndexing = !0, n.isHistoricalIndexing = !0, n.isSearching = !1
                },
                SEARCH_FINISH: function(e) {
                    let {
                        searchId: t
                    } = e, n = p(t);
                    n.isSearching = !1, n.isIndexing = !1, n.isHistoricalIndexing = e.doingHistoricalIndex || !1, n.searchFetcher = null, n.totalResults = e.totalResults, n.hasError = e.hasError, n.analyticsId = e.analyticsId, n.documentsIndexed = null != e.documentsIndexed ? e.documentsIndexed : 0, n.showNoResultsAlt = .05 > Math.random(), n.rawResults = e.messages;
                    let i = n.query;
                    null == i && (n.hasError = !0)
                },
                SEARCH_EDITOR_STATE_CLEAR: O,
                SEARCH_ENSURE_SEARCH_STATE: function(e) {
                    let {
                        searchId: t
                    } = e;
                    null != t && p(t)
                },
                SEARCH_EDITOR_STATE_CHANGE: function(e) {
                    let {
                        searchId: t,
                        editorState: n
                    } = e;
                    p(t).editorState = n
                },
                SEARCH_SET_SHOW_BLOCKED_RESULTS: function(e) {
                    let {
                        searchId: t,
                        showBlocked: n
                    } = e, i = p(t);
                    i.showBlockedResults = n
                },
                SEARCH_SCREEN_OPEN: function(e) {
                    let {
                        searchId: t
                    } = e;
                    R(t)
                },
                CHANNEL_SELECT: function(e) {
                    let {
                        guildId: t,
                        channelId: n
                    } = e;
                    R(null != t ? t : n)
                },
                CHANNEL_TOGGLE_MEMBERS_SECTION: function() {
                    return null != C && O({
                        searchId: C
                    })
                },
                SEARCH_CLEAR_HISTORY: function(e) {
                    let {
                        searchId: t
                    } = e;
                    null == t ? (r.default.remove(A), g = {}) : (delete g[t], r.default.set(A, {
                        history: g
                    }))
                },
                SEARCH_REMOVE_HISTORY: function(e) {
                    let {
                        searchId: t,
                        query: n
                    } = e;
                    null != g[t] && (g[t] = g[t].filter(e => e !== n), r.default.set(A, {
                        history: g
                    }))
                },
                SEARCH_ADD_HISTORY: N,
                LOGOUT: function() {
                    r.default.remove(A), g = {}
                },
                CONNECTION_OPEN: function() {
                    Object.keys(h).forEach(e => {
                        null != h[e] && (h[e].searchType = S(e))
                    })
                },
                SEARCH_MODAL_OPEN: function(e) {
                    let {
                        searchId: t,
                        searchType: n
                    } = e;
                    null != t && (C = t), T = !0, i = n
                },
                SEARCH_MODAL_CLOSE: function() {
                    T = !1, i = void 0
                }
            })
        },
        101125: function(e, t, n) {
            "use strict";
            let i, a;
            n.r(t), n.d(t, {
                default: function() {
                    return B
                }
            });
            var l = n("714617"),
                s = n.n(l),
                r = n("917351"),
                u = n.n(r),
                o = n("446674"),
                d = n("913144"),
                c = n("429928"),
                _ = n("837374"),
                E = n("662285"),
                f = n("845579"),
                h = n("374363"),
                T = n("233069"),
                p = n("964889"),
                S = n("271938"),
                I = n("546463"),
                A = n("603699"),
                m = n("686470"),
                g = n("52028"),
                C = n("824563"),
                N = n("235660"),
                O = n("49111");
            let R = !1,
                v = O.StatusTypes.ONLINE,
                M = O.StatusTypes.UNKNOWN,
                y = 0,
                D = [],
                L = !1,
                U = !0,
                P = Object.freeze([]),
                b = [];

            function G(e) {
                return (0, p.shouldShareApplicationActivity)(e, m.default)
            }

            function k(e) {
                switch (e.type) {
                    case O.ActivityTypes.LISTENING:
                        if ((0, c.default)(e)) return E.default.shouldShowActivity();
                        if (null != e.application_id) return G(e.application_id);
                        return !1;
                    case O.ActivityTypes.PLAYING:
                        return null != e.application_id ? G(e.application_id) : function(e) {
                            let t = I.default.getGameByName(e);
                            return null != t ? G(t.id) : f.ShowCurrentGame.getSetting()
                        }(e.name);
                    case O.ActivityTypes.STREAMING:
                    case O.ActivityTypes.WATCHING:
                    default:
                        return null == e.application_id || G(e.application_id)
                }
            }

            function F() {
                var e;
                y = null !== (e = A.default.getIdleSince()) && void 0 !== e ? e : 0, L = A.default.isAFK(), U ? (v = M, w()) : v = R ? O.StatusTypes.INVISIBLE : f.StatusSetting.getSetting(), v === O.StatusTypes.ONLINE && y > 0 && (v = O.StatusTypes.IDLE);
                let t = !1,
                    n = U || v === O.StatusTypes.INVISIBLE ? [] : g.default.getActivities().filter(k);
                !s(D, n) && (D = n, t = !0);
                let i = N.default.getRemoteActivities();
                if (P !== i && (P = i, t = !0), t) {
                    let e = D.find(e => e.type === O.ActivityTypes.CUSTOM_STATUS),
                        t = D.filter(e => e.type !== O.ActivityTypes.CUSTOM_STATUS);
                    b = t.length > 0 ? D : null != e ? [e, ...u(P).filter(e => e.type !== O.ActivityTypes.CUSTOM_STATUS).uniqBy(e => "".concat(e.type, ":").concat(e.application_id, ":").concat(e.name)).value()] : u.uniqBy(P, e => "".concat(e.type, ":").concat(e.application_id, ":").concat(e.name))
                }
            }

            function w() {
                i = void 0, a = void 0
            }

            function H() {
                U = !1, M = O.StatusTypes.UNKNOWN, F(), C.default.setCurrentUserOnConnectionOpen(v, b)
            }
            class V extends o.default.Store {
                initialize() {
                    this.waitFor(A.default, h.default, g.default, N.default, m.default, I.default), this.syncWith([g.default], F)
                }
                getLocalPresence() {
                    return {
                        status: v,
                        since: y,
                        activities: D,
                        afk: L,
                        broadcast: a
                    }
                }
                getStatus() {
                    return v
                }
                getActivities() {
                    let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
                    return e ? b : D
                }
                getPrimaryActivity() {
                    let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
                    return e ? b[0] : D[0]
                }
                getApplicationActivity(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                    return this.findActivity(t => t.application_id === e, t)
                }
                findActivity(e) {
                    let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                    return this.getActivities(t).find(e)
                }
                getBroadcast() {
                    return i
                }
            }
            V.displayName = "SelfPresenceStore";
            var B = new V(d.default, {
                START_SESSION: F,
                CONNECTION_OPEN: H,
                CONNECTION_OPEN_SUPPLEMENTAL: H,
                OVERLAY_INITIALIZE: H,
                CONNECTION_CLOSED: F,
                IDLE: F,
                AFK: F,
                RUNNING_GAMES_CHANGE: F,
                STREAMING_UPDATE: F,
                USER_SETTINGS_PROTO_UPDATE: F,
                LOCAL_ACTIVITY_UPDATE: F,
                SPOTIFY_PLAYER_STATE: F,
                SPOTIFY_PLAYER_PLAY: F,
                USER_CONNECTIONS_UPDATE: F,
                SESSIONS_REPLACE: F,
                RPC_APP_DISCONNECTED: F,
                LIBRARY_FETCH_SUCCESS: F,
                LIBRARY_APPLICATION_FLAGS_UPDATE_SUCCESS: F,
                LOGOUT: function() {
                    U = !0, M = v, F()
                },
                EMBEDDED_ACTIVITY_CLOSE: F,
                EMBEDDED_ACTIVITY_OPEN: F,
                FORCE_INVISIBLE: function(e) {
                    return R = e.invisible, F()
                },
                WINDOW_FOCUS: function() {
                    return R = !1, F()
                },
                BROADCAST_START: function(e) {
                    i = e.broadcast, a = (0, _.broadcastToServer)(e.broadcast)
                },
                BROADCAST_STOP: w,
                CHANNEL_DELETE: function(e) {
                    let {
                        channel: t
                    } = e;
                    t instanceof T.ChannelRecordBase && (null == t ? void 0 : t.isBroadcastChannel()) && (null == t ? void 0 : t.ownerId) === S.default.getId() && (i = void 0, a = void 0)
                }
            })
        },
        280168: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return m
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("991170"),
                s = n("42203"),
                r = n("42887"),
                u = n("945956"),
                o = n("18494"),
                d = n("49111"),
                c = n("353927");
            let _ = new Map,
                E = null,
                f = null,
                h = null;

            function T(e, t) {
                let n = _.get(e);
                if (null == n) return !1;
                let i = n.delete(t);
                return 0 === n.size && _.delete(e), i
            }

            function p(e, t, n) {
                var i, a, l;
                let s = null !== (l = null === (a = _.get(e)) || void 0 === a ? void 0 : null === (i = a.get(t)) || void 0 === i ? void 0 : i.flags) && void 0 !== l ? l : c.SpeakingFlags.NONE;
                return (s & n) === n
            }

            function S(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                    i = _.get(e);
                if (null == i) return !1;
                for (let [e, {
                        flags: a
                    }] of i)
                    if ((!n || e !== E) && (a & t) === t) return !0;
                return !1
            }

            function I(e) {
                let {
                    user: t,
                    sessionId: n
                } = e;
                E = t.id, f = n, h = null
            }
            class A extends i.default.Store {
                initialize() {
                    this.mustEmitChanges(e => "CONNECTION_OPEN" !== e.type && "VOICE_STATE_UPDATES" !== e.type), this.waitFor(u.default)
                }
                getSpeakingDuration(e, t) {
                    var n, i;
                    let a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : c.MediaEngineContextTypes.DEFAULT,
                        l = null === (i = _.get(a)) || void 0 === i ? void 0 : null === (n = i.get(e)) || void 0 === n ? void 0 : n.since;
                    return null != l ? t - l : 0
                }
                getSpeakers() {
                    var e, t;
                    let n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c.MediaEngineContextTypes.DEFAULT;
                    return Array.from(null !== (t = null === (e = _.get(n)) || void 0 === e ? void 0 : e.keys()) && void 0 !== t ? t : []).filter(e => p(n, e, c.SpeakingFlags.VOICE))
                }
                isSpeaking(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : c.MediaEngineContextTypes.DEFAULT;
                    return p(t, e, c.SpeakingFlags.VOICE)
                }
                isPrioritySpeaker(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : c.MediaEngineContextTypes.DEFAULT;
                    return p(t, e, c.SpeakingFlags.PRIORITY)
                }
                isSoundSharing(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : c.MediaEngineContextTypes.DEFAULT;
                    return p(t, e, c.SpeakingFlags.SOUNDSHARE)
                }
                isAnyoneElseSpeaking() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c.MediaEngineContextTypes.DEFAULT;
                    return S(e, c.SpeakingFlags.VOICE, !0)
                }
                isCurrentUserSpeaking() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c.MediaEngineContextTypes.DEFAULT;
                    return null != E && this.isSpeaking(E, e)
                }
                isAnyonePrioritySpeaking() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c.MediaEngineContextTypes.DEFAULT;
                    return S(e, c.SpeakingFlags.VOICE | c.SpeakingFlags.PRIORITY)
                }
                isCurrentUserPrioritySpeaking() {
                    let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c.MediaEngineContextTypes.DEFAULT;
                    return null != E && this.isPrioritySpeaker(E, e) && this.isSpeaking(E, e)
                }
            }
            A.displayName = "SpeakingStore";
            var m = new A(a.default, {
                CONNECTION_OPEN: I,
                OVERLAY_INITIALIZE: I,
                SPEAKING: function(e) {
                    let {
                        context: t,
                        userId: n,
                        speakingFlags: i
                    } = e;
                    if ((i & c.SpeakingFlags.PRIORITY) === c.SpeakingFlags.PRIORITY) {
                        let e = s.default.getChannel(o.default.getVoiceChannelId());
                        null != e && l.default.can({
                            permission: d.Permissions.PRIORITY_SPEAKER,
                            user: n,
                            context: e
                        }) ? r.default.setCanHavePriority(n, !0) : (r.default.setCanHavePriority(n, !1), i &= ~c.SpeakingFlags.PRIORITY)
                    }
                    return function(e, t, n) {
                        var i, a;
                        let l = function() {
                                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c.MediaEngineContextTypes.DEFAULT,
                                    t = _.get(e);
                                return null == t && (t = new Map, _.set(e, t)), t
                            }(e),
                            s = l.get(t),
                            r = null !== (i = null == s ? void 0 : s.flags) && void 0 !== i ? i : 0;
                        if (0 === r && 0 === n) return !1;
                        if (0 === n) l.delete(t), 0 === l.size && _.delete(e);
                        else {
                            let e = null !== (a = null == s ? void 0 : s.since) && void 0 !== a ? a : null,
                                i = (r & c.SpeakingFlags.VOICE) === c.SpeakingFlags.VOICE,
                                u = (n & c.SpeakingFlags.VOICE) === c.SpeakingFlags.VOICE;
                            i !== u && (e = u ? Date.now() : null), l.set(t, {
                                flags: n,
                                since: e
                            })
                        }
                        return !0
                    }(t, n, i)
                },
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t
                    } = e;
                    return t.reduce((e, t) => {
                        let {
                            userId: n,
                            channelId: i,
                            sessionId: a
                        } = t, l = !1, s = h;
                        return n === E && a === f && (h = null != i ? i : null), s !== h && (l = _.delete(c.MediaEngineContextTypes.DEFAULT) || l), null == i ? l = n === E && a === f ? _.delete(c.MediaEngineContextTypes.DEFAULT) || l : T(c.MediaEngineContextTypes.DEFAULT, n) || l : n === E && a !== f ? l = _.delete(c.MediaEngineContextTypes.DEFAULT) || l : n !== E && i !== u.default.getChannelId() && (l = T(c.MediaEngineContextTypes.DEFAULT, n) || l), l || e
                    }, !1)
                },
                LOBBY_VOICE_STATE_UPDATE: function(e) {}
            })
        },
        205817: function(e, t, n) {
            "use strict";
            let i, a;
            n.r(t), n.d(t, {
                default: function() {
                    return F
                }
            });
            var l = n("627445"),
                s = n.n(l),
                r = n("917351"),
                u = n.n(r),
                o = n("446674"),
                d = n("773364"),
                c = n("913144"),
                _ = n("583702"),
                E = n("374014"),
                f = n("582415"),
                h = n("537429"),
                T = n("773336"),
                p = n("373469"),
                S = n("271938"),
                I = n("42203"),
                A = n("42887"),
                m = n("824563"),
                g = n("945956"),
                C = n("568307"),
                N = n("49111"),
                O = n("353927");
            let R = {},
                v = {},
                M = {},
                y = {},
                D = N.StreamLayouts.THEATRE,
                L = {},
                U = [];

            function P() {
                u.forEach(L, (e, t) => {
                    e.destroy(e.isOwner ? "sender-disconnect" : "receiver-disconnect"), delete L[t]
                })
            }

            function b(e) {
                e.filter(e => {
                    let {
                        connection: t
                    } = e;
                    return t.context === O.MediaEngineContextTypes.STREAM
                }).forEach(e => {
                    let {
                        stats: t
                    } = e;
                    c.default.dispatch({
                        type: "STREAM_STATS_UPDATE",
                        stats: t
                    })
                })
            }

            function G() {
                return !0
            }
            class k extends o.default.Store {
                getActiveStreamKey() {
                    return (0, h.default)(A.default) ? a : null
                }
                getAllActiveStreamKeys() {
                    return Object.keys(L)
                }
                getRTCConnection(e) {
                    return L[e]
                }
                getStatsHistory(e, t, n) {
                    if (!(0, h.default)(A.default) || null == t) return null;
                    if (n) {
                        let n = p.default.getActiveStreamForUser(t, e);
                        if (null == n || 0 === p.default.getViewerIds(n).length) return null
                    }
                    return U.map(e => n ? function(e) {
                        var t, n, i, a, l;
                        let s = e.find(e => "video" === e.type);
                        return null != s && "video" === s.type ? {
                            type: "streamer",
                            packetsSentOrReceived: null !== (n = s.packetsSent) && void 0 !== n ? n : 0,
                            packetsLost: null !== (i = s.packetsLost) && void 0 !== i ? i : 0,
                            frameRate: null !== (a = s.frameRateEncode) && void 0 !== a ? a : 0,
                            resolution: null !== (l = null === (t = s.resolution) || void 0 === t ? void 0 : t.height) && void 0 !== l ? l : 0,
                            bitrate: 0
                        } : null
                    }(e.rtp.outbound) : function(e) {
                        var t, n, i, a, l, s;
                        if (null == e) return null;
                        let r = e.find(e => "video" === e.type);
                        return null != r && "video" === r.type ? {
                            type: "spectator",
                            packetsSentOrReceived: null !== (n = r.packetsReceived) && void 0 !== n ? n : 0,
                            packetsLost: null !== (i = r.packetsLost) && void 0 !== i ? i : 0,
                            frameRate: null !== (a = r.frameRateDecode) && void 0 !== a ? a : 0,
                            bitrate: null !== (l = r.bitrate) && void 0 !== l ? l : 0,
                            resolution: null !== (s = null === (t = r.resolution) || void 0 === t ? void 0 : t.height) && void 0 !== s ? s : 0
                        } : null
                    }(e.rtp.inbound[t]))
                }
                getQuality() {
                    if (!(0, h.default)(A.default)) return N.RTCConnectionQuality.UNKNOWN;
                    let e = this.getActiveStreamKey(),
                        t = null != e ? L[e] : null;
                    return null != t ? t.quality : N.RTCConnectionQuality.UNKNOWN
                }
                getMediaSessionId(e) {
                    if (null == e) return null;
                    let t = L[e];
                    if (null != t) return null != t ? t.getMediaSessionId() : null
                }
                getRtcConnectionId(e) {
                    if (null == e) return null;
                    let t = L[e];
                    if (null != t) return null != t ? t.getRTCConnectionId() : null
                }
                getVideoStats(e) {
                    if (null == e) return null;
                    let t = L[e];
                    return null != t ? t.getVideoStats() : null
                }
                getHostname(e) {
                    if (null == e) return "";
                    let t = L[e];
                    return null != t ? null != t.hostname ? t.hostname : "" : ""
                }
                getRegion(e) {
                    if (null == e) return null;
                    let t = L[e];
                    return null != t ? t.getRegion() : null
                }
                getMaxViewers(e) {
                    if (null == e) return null;
                    let t = L[e];
                    return null != t ? t.getMaxViewers() : null
                }
                getStreamSourceId(e) {
                    return y[e]
                }
            }
            k.displayName = "StreamRTCConnectionStore";
            var F = new k(c.default, !A.default.isSupported() || __OVERLAY__ ? {} : {
                CONNECTION_OPEN: function(e) {
                    i = e.sessionId, a = null, P()
                },
                CONNECTION_CLOSED: function() {
                    i = null, a = null, P()
                },
                RTC_CONNECTION_STATE: G,
                RTC_CONNECTION_PING: G,
                RTC_CONNECTION_LOSS_RATE: G,
                RTC_CONNECTION_UPDATE_ID: function(e) {
                    return u.some(L, t => t === e.connection)
                },
                STREAM_START: function(e) {
                    let {
                        streamType: t,
                        guildId: n,
                        channelId: i,
                        appContext: a,
                        pid: l,
                        sourceId: s
                    } = e, r = (0, E.encodeStreamKey)({
                        streamType: t,
                        guildId: n,
                        channelId: i,
                        ownerId: S.default.getId()
                    });
                    if (R[r] = a, u.forEach(L, e => {
                            let {
                                analyticsContext: t
                            } = e;
                            t.setActionContext(a)
                        }), y[r] = s, M[r] = l, null != l) {
                        let e = C.default.getGameForPID(l);
                        null != e && (v[r] = {
                            name: e.name,
                            id: e.id,
                            exe: e.exeName
                        })
                    }
                },
                STREAM_STOP: function(e) {
                    let {
                        appContext: t,
                        streamKey: n
                    } = e;
                    R[n] = t, u.forEach(L, e => {
                        let {
                            analyticsContext: n
                        } = e;
                        n.setActionContext(t)
                    }), y[n] = null, M[n] = null
                },
                STREAM_CREATE: function(e) {
                    let {
                        streamKey: t,
                        rtcServerId: n,
                        region: l,
                        viewerIds: r
                    } = e;
                    a = t;
                    let u = L[t];
                    if (null == u && null != n) {
                        var o, c, h;
                        null == M[t] && (v[t] = null);
                        let e = (0, E.decodeStreamKey)(t);
                        null == v[t] && null == y[t] && (v[t] = (0, f.getStreamerApplication)(e, m.default));
                        let a = I.default.getChannel(e.channelId),
                            d = null != a && a.isBroadcastChannel(),
                            p = new _.StreamRTCAnalyticsContext({
                                streamRegion: l,
                                streamApplication: v[t],
                                streamSourceType: function(e) {
                                    var t, n, i;
                                    if (null == e) return "unknown";
                                    if (T.isPlatformEmbedded || (null === (t = platform) || void 0 === t ? void 0 : t.name) === "Chrome") {
                                        if (e.startsWith("web-contents-media-stream:")) return "tab";
                                        if (e.startsWith("window:")) return "window";
                                        else if (e.startsWith("screen:")) return "screen"
                                    } else if ((null === (n = platform) || void 0 === n ? void 0 : n.name) === "Firefox") return "" !== e ? "window" : "screen";
                                    else if ((null === (i = platform) || void 0 === i ? void 0 : i.name) === "Safari") return "window";
                                    return "unknown"
                                }(y[t]),
                                actionContext: R[t],
                                numViewers: null != r ? r.length : 0,
                                isBroadcast: d
                            });
                        o = t, c = n, h = p, s(null != i, "Creating RTCConnection without session."), u = new _.default({
                            sessionId: i,
                            streamKey: o,
                            serverId: c,
                            initialLayout: D,
                            analyticsContext: h,
                            isStreamer: null != v[o],
                            parentMediaSessionId: g.default.getMediaSessionId()
                        }), L[t] = u
                    }
                    U = [], A.default.getMediaEngine().on(d.MediaEngineEvent.ConnectionStats, b)
                },
                STREAM_SERVER_UPDATE: function(e) {
                    let t = L[e.streamKey];
                    if (null == t) return !1;
                    t.connect(e.endpoint, e.token)
                },
                STREAM_UPDATE: function(e) {
                    let {
                        streamKey: t,
                        viewerIds: n,
                        paused: i
                    } = e, a = L[t];
                    if (null == a) return !1;
                    null != n && a.analyticsContext.trackViewerCount(n.length), a.streamUpdate(i)
                },
                STREAM_DELETE: function(e) {
                    let {
                        streamKey: t
                    } = e, n = L[t];
                    if (null == n) return !1;
                    t === a && (a = null, A.default.getMediaEngine().off(d.MediaEngineEvent.ConnectionStats, b)), n.destroy("stream-end"), delete L[t]
                },
                STREAM_STATS_UPDATE: function(e) {
                    let {
                        stats: t
                    } = e;
                    if (null == t) return !1;
                    U.push(t), U.length > 30 && U.shift()
                },
                STREAM_LAYOUT_UPDATE: function(e) {
                    let {
                        layout: t
                    } = e;
                    D = t, Object.values(L).forEach(e => e.layoutChange(t))
                }
            })
        },
        585722: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return A
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("446674"),
                s = n("913144"),
                r = n("404118"),
                u = n("57999"),
                o = n("282928"),
                d = n("402752"),
                c = n("474643"),
                _ = n("49111"),
                E = n("782340");
            let f = new Map,
                h = [];

            function T(e, t) {
                var n, i;
                return null !== (i = null === (n = p(e)) || void 0 === n ? void 0 : n.get(t)) && void 0 !== i ? i : h
            }

            function p(e) {
                var t;
                return null !== (t = f.get(e)) && void 0 !== t ? t : new Map
            }

            function S(e, t, n) {
                let i = p(e);
                i.set(t, n), f.set(e, i)
            }
            class I extends l.default.Store {
                getFirstUpload(e, t) {
                    let n = T(e, t);
                    return n.length > 0 ? n[0] : null
                }
                hasAdditionalUploads(e, t) {
                    var n;
                    return (null !== (n = T(e, t).length) && void 0 !== n ? n : 0) > 1
                }
                getUploads(e, t) {
                    return T(e, t)
                }
                getUploadCount(e, t) {
                    var n;
                    return null !== (n = T(e, t).length) && void 0 !== n ? n : 0
                }
                getUpload(e, t, n) {
                    return T(e, n).find(e => e.id === t)
                }
                findUpload(e, t, n) {
                    return T(e, t).find(n)
                }
            }
            I.displayName = "UploadAttachmentStore";
            var A = new I(s.default, {
                UPLOAD_ATTACHMENT_POP_FILE: function(e) {
                    let {
                        channelId: t
                    } = e, n = [...T(t, c.DraftType.ChannelMessage)];
                    n.shift(), S(t, c.DraftType.ChannelMessage, n)
                },
                UPLOAD_ATTACHMENT_ADD_FILES: e => {
                    var t;
                    let {
                        files: n,
                        channelId: i,
                        showLargeMessageDialog: l,
                        draftType: s
                    } = e, d = [...T(i, s)], c = (null === (t = u.default.getCurrentConfig({
                        location: "373489_1"
                    }, {
                        autoTrackExposure: !1
                    })) || void 0 === t ? void 0 : t.enabled) === !0;
                    if (c && d.length + n.length > _.MAX_UPLOAD_COUNT) {
                        r.default.show({
                            title: E.default.Messages.ATTACHMENT_TOO_MANY_ERROR_TITLE,
                            body: E.default.Messages.ATTACHMENT_TOO_MANY_ERROR_MESSAGE.format({
                                limit: _.MAX_UPLOAD_COUNT
                            })
                        });
                        return
                    }
                    a.forEach(n, e => {
                        let t = new o.CloudUpload(e, i, l, d.length);
                        t.upload(), d.push(t)
                    }), S(i, s, d)
                },
                UPLOAD_ATTACHMENT_UPDATE_FILE: function(e) {
                    let {
                        channelId: t,
                        id: n,
                        filename: i,
                        description: a,
                        spoiler: l,
                        thumbnail: s,
                        draftType: r
                    } = e, u = [...T(t, r)], o = u.map(e => (e.id === n && (void 0 !== i && (e.filename = i), void 0 !== l && (e.spoiler = l), void 0 !== a && (e.description = a), void 0 !== s && (e.isThumbnail = s)), e));
                    S(t, r, o)
                },
                UPLOAD_ATTACHMENT_REMOVE_FILE: function(e) {
                    var t;
                    let n, {
                            channelId: i,
                            id: a,
                            draftType: l
                        } = e,
                        s = (null === (t = u.default.getCurrentConfig({
                            location: "373489_2"
                        }, {
                            autoTrackExposure: !1
                        })) || void 0 === t ? void 0 : t.enabled) === !0,
                        r = [...T(i, l)];
                    if ((n = s ? r.findIndex(e => (0, d.doesImageMatchUpload)({
                            uri: a,
                            filename: a
                        }, e)) : r.findIndex(e => a === e.id)) > -1) {
                        let e = r.splice(n, 1)[0];
                        e.cancel(), S(i, l, r)
                    }
                },
                UPLOAD_ATTACHMENT_REMOVE_FILES: function(e) {
                    let {
                        channelId: t,
                        attachmentIds: n,
                        draftType: i
                    } = e, a = [...T(t, i)];
                    n.forEach(e => {
                        let t = a.findIndex(t => e === t.id);
                        if (t > -1) {
                            let e = a.splice(t, 1)[0];
                            e.cancel()
                        }
                    }), S(t, i, a)
                },
                UPLOAD_ATTACHMENT_CLEAR_ALL_FILES: function(e) {
                    let {
                        channelId: t,
                        draftType: n
                    } = e;
                    S(t, n, [])
                },
                UPLOAD_ATTACHMENT_SET_UPLOADS: function(e) {
                    let {
                        channelId: t,
                        uploads: n,
                        draftType: i
                    } = e;
                    S(t, i, n)
                },
                UPLOAD_ATTACHMENT_SET_FILE: function(e) {
                    let {
                        channelId: t,
                        id: n,
                        file: i,
                        draftType: a
                    } = e, l = [...T(t, a)], s = l.filter(e => e.id !== n), r = new o.CloudUpload(i, t);
                    r.upload(), s.push(r), S(t, a, s)
                },
                SIDEBAR_CLOSE: function(e) {
                    let {
                        baseChannelId: t
                    } = e;
                    S(t, c.DraftType.FirstThreadMessage, [])
                }
            })
        },
        555035: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return c
                }
            });
            var i = n("446674"),
                a = n("913144"),
                l = n("353927");
            let s = null,
                r = null,
                u = {};

            function o(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                    i = u[e];
                if (null == i) return;
                let a = i[null != t ? t : "null"];
                if (null != a) {
                    for (let e of Object.values(l.MediaEngineContextTypes))(n === e || null == n) && delete a[e];
                    u[e][null != t ? t : "null"] = a
                }
            }
            class d extends i.default.Store {
                getStreamId(e, t) {
                    var n, i, a;
                    let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : l.MediaEngineContextTypes.DEFAULT;
                    return null === (a = u[e]) || void 0 === a ? void 0 : null === (i = a[null != t ? t : "null"]) || void 0 === i ? void 0 : null === (n = i[s]) || void 0 === n ? void 0 : n.streamId
                }
                getUserStreamData(e, t) {
                    var n, i;
                    let a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : l.MediaEngineContextTypes.DEFAULT;
                    return null === (i = u[e]) || void 0 === i ? void 0 : null === (n = i[null != t ? t : "null"]) || void 0 === n ? void 0 : n[a]
                }
            }
            d.displayName = "VideoStreamStore";
            var c = new d(a.default, {
                CONNECTION_OPEN: function(e) {
                    let {
                        user: t,
                        sessionId: n
                    } = e;
                    s = t.id, r = n
                },
                OVERLAY_INITIALIZE: function(e) {
                    let {
                        user: t,
                        sessionId: n
                    } = e;
                    s = t.id, r = n
                },
                RTC_CONNECTION_VIDEO: function(e) {
                    let {
                        userId: t,
                        guildId: n,
                        streamId: i,
                        context: a
                    } = e;
                    null != i ? ! function(e, t, n, i) {
                        var a;
                        !(e in u) && (u[e] = {});
                        let l = null !== (a = u[e][null != t ? t : "null"]) && void 0 !== a ? a : {};
                        u[e][null != t ? t : "null"] = {
                            ...l,
                            [i]: {
                                streamId: n
                            }
                        }
                    }(t, n, i, a) : o(t, n, a)
                },
                VOICE_STATE_UPDATES: function(e) {
                    let {
                        voiceStates: t
                    } = e;
                    return t.reduce((e, t) => {
                        var n;
                        let {
                            userId: i,
                            sessionId: a,
                            channelId: l,
                            guildId: d
                        } = t;
                        if (null == l && i === s) {
                            if (a !== r) return e;
                            u = {}
                        } else {
                            if (null != l || (null === (n = u[i]) || void 0 === n ? void 0 : n[null != d ? d : "null"]) == null) return e;
                            o(i, d)
                        }
                        return !0
                    }, !1)
                }
            })
        },
        167726: function(e, t, n) {
            "use strict";
            let i, a, l;
            n.r(t), n.d(t, {
                default: function() {
                    return I
                }
            });
            var s = n("446674"),
                r = n("913144"),
                u = n("737292"),
                o = n("845579"),
                d = n("374363"),
                c = n("686470");
            let _ = {
                    applicationId: null,
                    originURL: null
                },
                E = _,
                f = new Set,
                h = !1;

            function T() {
                l = null
            }

            function p() {
                i = null, a = null, f = new Set, E.applicationId = null, E.originURL = null, T()
            }
            class S extends s.default.PersistedStore {
                initialize(e) {
                    i = (E = {
                        ...null != e ? e : _
                    }).applicationId, a = E.originURL, this.waitFor(d.default, u.default), this.syncWith([d.default, u.default], () => !0), c.default.whenInitialized(() => {
                        h = !0
                    })
                }
                inTestModeForApplication(e) {
                    return i === e
                }
                inTestModeForEmbeddedApplication(e) {
                    return i === e && null != a
                }
                shouldDisplayTestMode(e) {
                    return o.DeveloperMode.getSetting() && this.inTestModeForApplication(e)
                }
                getState() {
                    return E
                }
                get isTestMode() {
                    return null != i
                }
                get isFetchingAuthorization() {
                    return f.size > 0
                }
                get testModeEmbeddedApplicationId() {
                    return null != a ? i : null
                }
                get testModeApplicationId() {
                    return i
                }
                get testModeOriginURL() {
                    return a
                }
                get error() {
                    return l
                }
                whenInitialized(e) {
                    this.addConditionalChangeListener(() => {
                        if (h) return setImmediate(e), !1
                    })
                }
            }
            S.displayName = "TestModeStore", S.persistKey = "TestModeStore";
            var I = new S(r.default, {
                DEVELOPER_TEST_MODE_AUTHORIZATION_START: function(e) {
                    let {
                        applicationId: t
                    } = e;
                    f.add(t), l = null
                },
                DEVELOPER_TEST_MODE_AUTHORIZATION_SUCCESS: function(e) {
                    let {
                        applicationId: t,
                        originURL: n
                    } = e;
                    i = t, a = n, f.delete(t), l = null, E.applicationId = t, E.originURL = n
                },
                DEVELOPER_TEST_MODE_AUTHORIZATION_FAIL: function(e) {
                    let {
                        applicationId: t,
                        error: n
                    } = e;
                    f.delete(t), l = n
                },
                OVERLAY_INITIALIZE: function(e) {
                    let {
                        testModeApplicationId: t
                    } = e;
                    i = t
                },
                DEVELOPER_TEST_MODE_RESET_ERROR: T,
                LOGOUT: p,
                DEVELOPER_TEST_MODE_RESET: p
            })
        },
        703370: function(e, t, n) {
            "use strict";
            let i;
            n.r(t), n.d(t, {
                default: function() {
                    return _
                }
            });
            var a = n("446674"),
                l = n("913144"),
                s = n("653047"),
                r = n("546463"),
                u = n("568307"),
                o = n("988268");

            function d(e) {
                let t = {
                    os: e.os,
                    name: e.name
                };
                return null != e.arguments && (t.arguments = e.arguments), null != e.isLauncher && (t.is_launcher = e.isLauncher), t
            }
            class c extends a.default.Store {
                getGameForPID(e) {
                    var t;
                    if (__OVERLAY__ || null == e) return null;
                    let n = null === (t = u.default.getGameForPID(e)) || void 0 === t ? void 0 : t.name;
                    return r.default.getGameByName(n)
                }
                getGame() {
                    return __OVERLAY__ ? i : null
                }
                getGameAsJSON(e) {
                    let t = this.getGameForPID(e);
                    return null == t ? null : {
                        id: t.id,
                        name: t.name,
                        description: t.description,
                        type: o.ApplicationTypes.GAME,
                        icon: t.icon,
                        splash: t.splash,
                        overlay: t.overlay,
                        overlay_warn: t.overlayWarn,
                        aliases: [...t.aliases],
                        publishers: [...t.publishers],
                        developers: [...t.developers],
                        third_party_skus: [...t.thirdPartySkus],
                        executables: t.executables.map(d),
                        hashes: [...t.hashes],
                        tags: [...t.tags]
                    }
                }
            }
            c.displayName = "OverlayRunningGameStore";
            var _ = new c(l.default, {
                OVERLAY_INITIALIZE: function(e) {
                    i = null != e.currentGame ? new s.default(e.currentGame) : null
                }
            })
        },
        550368: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getAssetFromImageURL: function() {
                    return m
                },
                getAssetImage: function() {
                    return g
                },
                getAssets: function() {
                    return C
                },
                fetchAssetIds: function() {
                    return v
                },
                getAssetIds: function() {
                    return M
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("917351"),
                s = n.n(l),
                r = n("872717"),
                u = n("913144"),
                o = n("605250"),
                d = n("407063"),
                c = n("49111");
            let _ = "https://i.scdn.co/image/",
                E = (e, t, n) => "https://static-cdn.jtvnw.net/previews-ttv/live_user_".concat(e, "-").concat(t, "x").concat(n, ".jpg"),
                f = /https:\/\/static-cdn\.jtvnw\.net\/previews-ttv\/live_user_(.+)-\{width\}x\{height\}.jpg/,
                h = e => "https://i.ytimg.com/vi/".concat(e, "/hqdefault_live.jpg"),
                T = /https:\/\/i\.ytimg\.com\/vi\/([a-zA-Z0-9_-]+)\/hqdefault_live\.jpg/,
                p = {
                    [c.PlatformTypes.SPOTIFY]: {
                        deserialize: e => "".concat(_).concat(encodeURIComponent(e)),
                        serialize: e => e.split(_)[1]
                    },
                    [c.PlatformTypes.TWITCH]: {
                        deserialize: (e, t) => E(encodeURIComponent(e), t[0], t[1]),
                        serialize: e => {
                            let t = e.match(f);
                            return null != t ? t[1] : null
                        }
                    },
                    [c.PlatformTypes.YOUTUBE]: {
                        deserialize: e => h(encodeURIComponent(e)),
                        serialize: e => {
                            let t = e.match(T);
                            return null != t ? t[1] : null
                        }
                    },
                    mp: {
                        deserialize: e => (a(null != window.GLOBAL_ENV.MEDIA_PROXY_ENDPOINT, "MEDIA_PROXY_ENDPOINT not configured"), new URL(e, location.protocol + window.GLOBAL_ENV.MEDIA_PROXY_ENDPOINT).toString()),
                        serialize: e => e
                    }
                },
                S = {},
                I = {};
            async function A(e) {
                let {
                    body: t
                } = await r.default.get({
                    url: c.Endpoints.APPLICATION_ASSETS(e),
                    oldFormErrors: !0
                });
                return S[e] = {
                    assets: s.keyBy(t, "name"),
                    lastUpdated: Date.now()
                }
            }

            function m(e, t) {
                let n = p[e].serialize(t);
                return n ? "".concat(e, ":").concat(n.toString()) : null
            }

            function g(e, t, n) {
                if (null != t && t.includes(":")) {
                    let [e, i] = t.split(":");
                    if (e === c.PlatformTypes.TWITCH) {
                        if (null == n || "number" == typeof n) {
                            new(0, o.default)("ApplicationAssetUtils").warn("getAssetImage: size must === [number, number] for Twitch");
                            return
                        }
                        return p[c.PlatformTypes.TWITCH].deserialize(i, n)
                    }
                    return Object.prototype.hasOwnProperty.call(p, e) ? p[e].deserialize(i) : void 0
                }
                if (null == e || null == t) return;
                let i = "number" == typeof n ? "?size=".concat((0, d.getBestMediaProxySize)(n)) : "";
                return null != window.GLOBAL_ENV.CDN_HOST ? "".concat(location.protocol, "//").concat(window.GLOBAL_ENV.CDN_HOST, "/app-assets/").concat(e, "/").concat(t, ".png").concat(i) : "".concat(r.default.getAPIBaseURL(), "/applications/").concat(e, "/app-assets/").concat(t, ".png").concat(i)
            }
            async function C(e) {
                let {
                    assets: t
                } = await
                function(e) {
                    var t;
                    let n = S[e];
                    return null == n || (t = n.lastUpdated, Date.now() - t > 36e5) ? A(e) : Promise.resolve(n)
                }(e);
                return t
            }
            async function N(e, t) {
                let n = t.filter(e => null != e && !Object.prototype.hasOwnProperty.call(I, e) && null == I[e]);
                if (0 === n.length) return;
                let {
                    body: i
                } = await r.default.post({
                    url: c.Endpoints.APPLICATION_EXTERNAL_ASSETS(e),
                    body: {
                        urls: n
                    },
                    oldFormErrors: !0
                });
                for (let {
                        url: e,
                        external_asset_path: t
                    }
                    of i) I[e] = t
            }

            function O(e, t) {
                let n = 0,
                    i = e.filter(e => (null == e ? void 0 : e.startsWith("http:")) || (null == e ? void 0 : e.startsWith("https:")));
                if (i.length > 0)
                    for (let i = 0; i < e.length; i++) {
                        let a = e[i];
                        if (null == a) continue;
                        let l = Object.prototype.hasOwnProperty.call(I, a) ? I[a] : void 0;
                        null != l && (t[i] = m("mp", l), n++)
                    }
                return n === e.length
            }

            function R(e, t, n, i) {
                let a = !1;
                for (let l = 0; l < e.length; l++) {
                    let s = e[l];
                    if (null == s || null != t[l]) continue;
                    let r = Object.prototype.hasOwnProperty.call(n, s) && n[s];
                    if (!r) {
                        if (null == i || i <= 0) {
                            t[l] = null;
                            continue
                        }
                        a = !0
                    }
                    t[l] = r.id
                }
                return a
            }
            async function v(e, t) {
                let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
                u.default.dispatch({
                    type: "APPLICATION_ASSETS_FETCH",
                    applicationId: e
                });
                let i = [],
                    a = t.filter(e => (null == e ? void 0 : e.startsWith("http:")) || (null == e ? void 0 : e.startsWith("https:")));
                a.length > 0 && await N(e, a);
                let l = O(t, i);
                if (l) return u.default.dispatch({
                    type: "APPLICATION_ASSETS_FETCH_SUCCESS",
                    applicationId: e
                }), i;
                let s = await C(e),
                    r = R(t, i, s, n);
                return r ? A(e).then(() => v(e, t, n - 1)) : (u.default.dispatch({
                    type: "APPLICATION_ASSETS_FETCH_SUCCESS",
                    applicationId: e
                }), i)
            }

            function M(e, t) {
                var n;
                let i = [],
                    a = O(t, i);
                if (a) return i;
                let l = null === (n = S[e]) || void 0 === n ? void 0 : n.assets;
                return null == l ? i : (R(t, i, l), i)
            }
        },
        994440: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getAttachmentFile: function() {
                    return r
                },
                cancelGetAttachmentFile: function() {
                    return u
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("966724"),
                s = n("980134");

            function r(e, t) {
                var n;
                a(e.item.platform === l.UploadPlatform.WEB, "Upload must be in the Web format");
                let i = (0, s.getAttachmentPayload)(e, t);
                return Promise.resolve({
                    file: e.item.file,
                    name: null !== (n = i.filename) && void 0 !== n ? n : ""
                })
            }
            async function u(e) {}
        },
        404008: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                permissionOverwritesForRoles: function() {
                    return N
                },
                permissionOverwriteForUser: function() {
                    return O
                },
                permissionOverwriteForRole: function() {
                    return R
                },
                permissionOverwritesForAnnouncement: function() {
                    return v
                },
                isChannelFull: function() {
                    return M
                },
                sanitizeGuildTextChannelName: function() {
                    return l.default
                },
                getBitrateLimit: function() {
                    return y
                },
                computeSummarizedVoiceUsers: function() {
                    return D
                },
                channelTypeString: function() {
                    return L
                },
                getMentionIconType: function() {
                    return U
                },
                previousTextChannelRouteForGuild: function() {
                    return P
                },
                getChannelPermalink: function() {
                    return b
                },
                getChannelLinkToCopy: function() {
                    return G
                }
            });
            var i = n("316693"),
                a = n("798609"),
                l = n("364480"),
                s = n("89073"),
                r = n("711326"),
                u = n("808422"),
                o = n("233069"),
                d = n("42203"),
                c = n("923959"),
                _ = n("957255"),
                E = n("18494"),
                f = n("316133"),
                h = n("991170"),
                T = n("49111"),
                p = n("646718"),
                S = n("782340");
            let {
                GUILD_VOICE: I,
                GUILD_CATEGORY: A,
                GUILD_STAGE_VOICE: m
            } = T.ChannelTypes;

            function g(e, t) {
                return e === t || e === A
            }

            function C(e, t, n) {
                let a = h.default.NONE;
                return ((0, o.isGuildSelectableChannelType)(t) || t === A) && (a = i.default.add(a, T.Permissions.VIEW_CHANNEL)), (g(t, I) || g(t, m)) && (a = i.default.add(a, T.Permissions.VIEW_CHANNEL), a = i.default.add(a, T.Permissions.CONNECT)), {
                    id: e,
                    type: n,
                    deny: h.default.NONE,
                    allow: a
                }
            }

            function N(e, t, n) {
                let l = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
                    s = [];
                if (n.length > 0 || l) {
                    var r, u, d;
                    let n;
                    s.push((r = e, u = t, d = a.PermissionOverwriteType.ROLE, n = h.default.NONE, ((0, o.isGuildSelectableChannelType)(u) || u === A) && (n = i.default.add(n, T.Permissions.VIEW_CHANNEL)), g(u, I) && (n = i.default.add(n, T.Permissions.VIEW_CHANNEL), n = i.default.add(n, T.Permissions.CONNECT)), {
                        id: r,
                        type: d,
                        allow: h.default.NONE,
                        deny: n
                    }))
                }
                return n.forEach(e => {
                    s.push(C(e, t, a.PermissionOverwriteType.ROLE))
                }), s
            }

            function O(e, t) {
                return C(e, t, a.PermissionOverwriteType.MEMBER)
            }

            function R(e, t) {
                return C(e, t, a.PermissionOverwriteType.ROLE)
            }

            function v(e) {
                return [{
                    id: e,
                    type: a.PermissionOverwriteType.ROLE,
                    deny: T.Permissions.SEND_MESSAGES,
                    allow: h.default.NONE
                }]
            }

            function M(e, t, n) {
                var i, a;
                let l = e.getGuildId(),
                    r = n.getGuild(l),
                    u = null !== (i = null == r ? void 0 : r.maxVideoChannelUsers) && void 0 !== i ? i : -1,
                    o = null !== (a = null == r ? void 0 : r.maxStageVideoChannelUsers) && void 0 !== a ? a : -1,
                    d = f.default.countVoiceStatesForChannel(e.id),
                    c = f.default.getVoiceStatesForChannel(e),
                    E = _.default.can(T.Permissions.MOVE_MEMBERS, e) && _.default.can(T.Permissions.CONNECT, e),
                    h = !1;
                h = e.type === m ? null != l && (t.hasVideo(e.id) || (0, s.hasStream)(c)) && o > 0 && d >= o : null != l && t.hasVideo(e.id) && u > 0 && d >= u + (E ? 1 : 0);
                let p = e.userLimit > 0 && d >= e.userLimit;
                return h || p && !E
            }

            function y(e, t) {
                return t.isGuildStageVoice() ? T.BITRATE_DEFAULT : null == e ? T.BITRATE_MAX : Math.max(e.hasFeature(T.GuildFeatures.VIP_REGIONS) ? p.BoostedGuildFeatures[T.BoostedGuildTiers.TIER_3].limits.bitrate : T.BITRATE_MAX, p.BoostedGuildFeatures[e.premiumTier].limits.bitrate)
            }

            function D(e) {
                let {
                    channels: t,
                    selectedChannelId: n,
                    selectedVoiceChannelId: i,
                    voiceStates: a
                } = e, l = function(e) {
                    let {
                        channels: t,
                        selectedChannelId: n,
                        selectedVoiceChannelId: i,
                        voiceStates: a
                    } = e, l = [];
                    return t.forEach(e => {
                        if (e.id === i || e.id === n) return;
                        let t = a[e.id];
                        null != t && (e.isGuildStageVoice() ? t.forEach(e => {
                            (0, u.getAudienceRequestToSpeakState)(e.voiceState) === u.RequestToSpeakStates.ON_STAGE && l.push(e)
                        }) : t.forEach(e => l.push(e)))
                    }), l
                }({
                    channels: t,
                    selectedChannelId: n,
                    selectedVoiceChannelId: i,
                    voiceStates: a
                });
                return l.map(e => e.user)
            }

            function L(e) {
                let {
                    type: t
                } = e;
                switch (t) {
                    case T.ChannelTypes.DM:
                        return S.default.Messages.DM;
                    case T.ChannelTypes.GROUP_DM:
                        return S.default.Messages.GROUP_DM;
                    case T.ChannelTypes.GUILD_TEXT:
                        return S.default.Messages.TEXT_CHANNEL;
                    case T.ChannelTypes.GUILD_FORUM:
                        return S.default.Messages.FORUM_CHANNEL;
                    case T.ChannelTypes.GUILD_MEDIA:
                        return S.default.Messages.MEDIA_CHANNEL;
                    case T.ChannelTypes.GUILD_VOICE:
                        return S.default.Messages.VOICE_CHANNEL;
                    case T.ChannelTypes.GUILD_STAGE_VOICE:
                        return S.default.Messages.STAGE_CHANNEL;
                    case T.ChannelTypes.GUILD_ANNOUNCEMENT:
                        return S.default.Messages.NEWS_CHANNEL;
                    case T.ChannelTypes.GUILD_STORE:
                        return S.default.Messages.STORE_CHANNEL;
                    case T.ChannelTypes.GUILD_CATEGORY:
                        return S.default.Messages.CATEGORY;
                    default:
                        return null
                }
            }

            function U(e) {
                if (null == e) return "text";
                let t = e.isMediaChannel();
                if (e.type === T.ChannelTypes.GUILD_VOICE) return _.default.can(T.Permissions.CONNECT, e) ? "voice" : "voice-locked";
                if (e.type === T.ChannelTypes.GUILD_STAGE_VOICE) return _.default.can(T.Permissions.CONNECT, e) ? "stage" : "stage-locked";
                if (o.THREAD_CHANNEL_TYPES.has(e.type)) return e.isForumPost() ? "post" : "thread";
                else if (e.type === T.ChannelTypes.GUILD_FORUM) return t ? "media" : "forum";
                else if (e.type === T.ChannelTypes.GUILD_MEDIA) return "media";
                else if (o.TEXT_CHANNEL_TYPES.has(e.type)) return "text"
            }

            function P(e) {
                let t;
                let n = d.default.getChannel(E.default.getLastSelectedChannelId());
                if (null != n && n.getGuildId() === e && n.type === T.ChannelTypes.GUILD_TEXT) t = n.id;
                else {
                    let n = c.default.getDefaultChannel(e);
                    t = null != n ? n.id : null
                }
                return T.Routes.CHANNEL(e, t)
            }

            function b(e, t, n, i) {
                let a = null == i ? "" : "?summaryId=".concat(i);
                return "".concat(location.protocol, "//").concat(location.host).concat(T.Routes.CHANNEL(e, t, n)).concat(a)
            }

            function G(e, t, n, i) {
                let a;
                let l = e.getGuildId(),
                    s = (0, r.canUseMediaPostEmbed)(l, t);
                if (null != t && s) {
                    var u, o, d, c;
                    u = l, o = t.id, d = e.id, c = e.id, a = null == u || null == o || null == d ? b(u, o, c) : "".concat(location.protocol, "//").concat(location.host).concat(T.Routes.CHANNEL_THREAD_VIEW(u, o, d, c))
                } else a = null != i ? i : b(l, e.id, n);
                return a
            }
        },
        240873: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                sanitizeEmbed: function() {
                    return I
                },
                mergeEmbedsOnURL: function() {
                    return A
                },
                isEmbedInline: function() {
                    return m
                },
                hasClydeAiThoughtsEmbed: function() {
                    return g
                },
                isClydeAiThoughtsEmbed: function() {
                    return C
                },
                isServerShopArticleEmbed: function() {
                    return N
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("866227"),
                s = n.n(l),
                r = n("509043"),
                u = n("299039"),
                o = n("49111"),
                d = n("108067");
            let c = /sketchfab/i,
                _ = /^https:\/\/sketchfab\.com/i,
                E = /youtube|steam|imgur|vimeo|sketchfab|soundcloud|streamable|twitch|vid\.me|twitter/i,
                f = /^https?:\/\/(?:canary\.|ptb\.|www\.)?discord(?:app)?\.com\/channels\/([0-9]+)\/shop$/,
                h = /^https?:\/\/(?:canary\.|ptb\.|www\.)?discord(?:app)?\.com\/channels\/([0-9]+)\/shop\/([0-9]+)$/,
                T = new Set([o.MessageEmbedTypes.AUTO_MODERATION_MESSAGE, o.MessageEmbedTypes.AUTO_MODERATION_NOTIFICATION, o.MessageEmbedTypes.RICH, o.MessageEmbedTypes.SAFETY_POLICY_NOTICE]);

            function p(e) {
                let {
                    width: t,
                    height: n
                } = e;
                return t > 0 && n > 0
            }

            function S(e) {
                let {
                    url: t,
                    proxy_url: n,
                    width: i,
                    height: a
                } = e;
                return {
                    url: t,
                    proxyURL: n,
                    width: i,
                    height: a
                }
            }

            function I(e, t, n) {
                let i = {
                    id: a.uniqueId("embed_"),
                    url: n.url,
                    type: n.type,
                    rawTitle: n.title,
                    rawDescription: n.description,
                    referenceId: n.reference_id,
                    flags: n.flags,
                    contentScanVersion: n.content_scan_version
                };
                if (null != n.footer && (i.footer = {
                        text: n.footer.text,
                        iconURL: n.footer.icon_url,
                        iconProxyURL: n.footer.proxy_icon_url
                    }), null != n.author && null != n.author.name && (i.author = {
                        name: n.author.name,
                        url: n.author.url,
                        iconURL: n.author.icon_url,
                        iconProxyURL: n.author.proxy_icon_url
                    }), null != n.provider && null != n.provider.name && (i.provider = {
                        name: n.provider.name,
                        url: n.provider.url
                    }), null != n.timestamp && (i.timestamp = s(new Date(n.timestamp))), null != n.color && (i.color = (0, r.int2hsl)(n.color, !0)), null != n.thumbnail && p(n.thumbnail)) switch (i.type) {
                    case o.MessageEmbedTypes.ARTICLE:
                    case o.MessageEmbedTypes.IMAGE:
                        i.image = S(n.thumbnail);
                        break;
                    default:
                        i.thumbnail = S(n.thumbnail)
                }
                if (null != n.image && p(n.image) && (i.image = S(n.image)), null != n.video && (null == i.thumbnail && null != n.video.proxy_url && p(n.video) && (i.thumbnail = {
                        width: n.video.width,
                        height: n.video.height,
                        url: "".concat(n.video.proxy_url, "?format=jpeg")
                    }), null != i.thumbnail && p(n.video) && function(e, t, n) {
                        if (null != t && c.test(t.name) || _.test(n.url)) return !1;
                        let i = null != n.proxy_url || /^https:/i.test(n.url);
                        return 1492472454139 > u.default.extractTimestamp(e) && (i = i && null != t && E.test(t.name)), i
                    }(t, n.provider, n.video) && (i.video = S(n.video))), T.has(i.type)) {
                    var l;
                    let e = null !== (l = n.fields) && void 0 !== l ? l : [];
                    i.fields = e.map(e => {
                        let {
                            name: t,
                            value: n,
                            inline: i
                        } = e;
                        return {
                            rawName: t,
                            rawValue: n,
                            inline: i
                        }
                    })
                } else i.fields = [];
                return i
            }

            function A(e) {
                let t = new Map,
                    n = [];
                return e.forEach(e => {
                    if (null == e.url) {
                        n.push(e);
                        return
                    }
                    let i = t.get(e.url);
                    if (null == i) {
                        n.push(e), t.set(e.url, e);
                        return
                    }
                    null != e.image && (null == i.images && (i.images = [], null != i.image && i.images.push(i.image)), i.images.push(e.image))
                }), n
            }

            function m(e) {
                let {
                    image: t,
                    video: n,
                    type: i,
                    author: a,
                    rawTitle: l
                } = e;
                return (null != t || null != n) && (i === o.MessageEmbedTypes.GIFV || i !== o.MessageEmbedTypes.RICH && null == a && null == l)
            }

            function g(e) {
                if (!e.author.isClyde() || 0 === e.embeds.length) return !1;
                for (let t of e.embeds)
                    if (C(t)) return !0;
                return !1
            }

            function C(e) {
                let t = null != e.fields && 3 === e.fields.length && "Thought" === e.fields[0].rawName && "Tool" === e.fields[1].rawName && "Result" === e.fields[2].rawName;
                return e.type === o.MessageEmbedTypes.RICH && (e.rawTitle === d.ClydeAIConstants.THOUGHT_EMBED_TITLE || t)
            }

            function N(e) {
                return e.type === o.MessageEmbedTypes.ARTICLE && null != e.url && (h.test(e.url) || f.test(e.url))
            }
        },
        284609: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                validateDiscordTag: function() {
                    return d
                },
                humanizeAbortCode: function() {
                    return c
                }
            });
            var i = n("599110"),
                a = n("340454"),
                l = n("49111"),
                s = n("782340");
            let r = /^\d+$/,
                u = /^(.+?@.+?\..+?|.+?#\d{4})$/,
                o = /^[a-zA-Z0-9_\\.]+$/;

            function d(e) {
                return o.test(e) || e.includes("#") && u.test(e) ? null : (function(e) {
                    let [t, n] = e.split("#");
                    i.default.track(l.AnalyticEvents.FRIEND_REQUEST_FAILED, {
                        reason: "Invalid Username",
                        query: e,
                        discrim_len: (null != n ? n : "").length,
                        username_len: t.length,
                        is_email_like: a.default.isEmail(e),
                        is_invite_like: a.default.isInvite(e),
                        is_num_only: r.test(e)
                    })
                }(e), s.default.Messages.POMELO_ADD_FRIEND_ERROR)
            }

            function c(e, t) {
                switch (e) {
                    case l.AbortCodes.RELATIONSHIP_INCOMING_DISABLED:
                        return s.default.Messages.ADD_FRIEND_ERROR_INVALID_DISCORD_TAG.format({
                            discordTag: t
                        });
                    case l.AbortCodes.TOO_MANY_FRIENDS:
                        return s.default.Messages.ADD_FRIEND_ERROR_TOO_MANY_FRIENDS;
                    case l.AbortCodes.RELATIONSHIP_ALREADY_FRIENDS:
                        return s.default.Messages.ADD_FRIEND_ERROR_ALREADY_FRIENDS;
                    case l.AbortCodes.USER_QUARANTINED:
                    case l.AbortCodes.USER_FRIEND_REQUEST_LIMITED_ACCESS:
                        return s.default.Messages.LIMITED_ACCESS_INFO_MODAL_HEADING;
                    case l.AbortCodes.TOO_MANY_BLOCKED_USERS:
                        return s.default.Messages.BLOCK_USER_ERROR_TOO_MANY_BLOCKED_USERS;
                    case l.AbortCodes.RELATIONSHIP_INCOMING_BLOCKED:
                    case l.AbortCodes.RELATIONSHIP_INVALID_SELF:
                    case l.AbortCodes.RELATIONSHIP_INVALUD_USER_BOT:
                    case l.AbortCodes.RELATIONSHIP_INVALID_DISCORD_TAG:
                    default:
                        return s.default.Messages.POMELO_ADD_FRIEND_ERROR
                }
            }
        },
        659632: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                isCustomGiftEnabled: function() {
                    return L
                },
                makeComboId: function() {
                    return U
                },
                parseComboId: function() {
                    return P
                },
                isGiftCodeEmbed: function() {
                    return G
                },
                findGiftCodes: function() {
                    return k
                },
                getGiftCodeURL: function() {
                    return F
                },
                resolveGiftCode: function() {
                    return w
                },
                trackGiftCodeCopy: function() {
                    return H
                },
                getStep: function() {
                    return V
                },
                getHeaderText: function() {
                    return B
                },
                getButtonText: function() {
                    return x
                },
                getBodyText: function() {
                    return Y
                },
                getErrorMessage: function() {
                    return K
                },
                firstLibraryApplicationForGiftCode: function() {
                    return j
                },
                processGiftCodeInput: function() {
                    return z
                },
                useGetGiftCode: function() {
                    return W
                }
            });
            var i = n("446674"),
                a = n("333805"),
                l = n("791160"),
                s = n("677156"),
                r = n("353365"),
                u = n("697218"),
                o = n("599110"),
                d = n("449008"),
                c = n("773336"),
                _ = n("719923"),
                E = n("655518"),
                f = n("271560"),
                h = n("49111"),
                T = n("646718"),
                p = n("782340");
            let S = E.default.escape(window.GLOBAL_ENV.GIFT_CODE_HOST),
                I = ["discordapp.com/gifts", "discord.com/gifts"].map(e => E.default.escape(e)),
                A = [S, ...I].join("|"),
                m = RegExp("(?: |^|https?://)(?:".concat(A, ")/([a-z0-9-]+)"), "gi"),
                g = ["discord.com/billing/promotions", "promos.discord.gg"].map(e => E.default.escape(e)),
                C = [...g].join("|"),
                N = RegExp("(?: |^|https?://)(?:".concat(C, ")/([a-z0-9-]+)"), "gi"),
                O = (e, t) => Array(t).fill(void 0).map(() => "[".concat("abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ23456789", "]{").concat(e, "}")).join("-?"),
                R = O(4, 4),
                v = O(4, 6),
                M = O(5, 3),
                y = [R, v, M, "[a-zA-Z]{4}-?[0-9a-zA-Z]{4}-?[a-zA-Z]{4}"].join("|"),
                D = new RegExp("^(".concat("WUMP-?", ")?(").concat(y, ")$")),
                L = e => null != e && s.CustomGiftExperiment.getCurrentConfig({
                    location: "isCustomGiftEnabled"
                }, {
                    autoTrackExposure: !1
                }).enabled;

            function U(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                    n = arguments.length > 2 ? arguments[2] : void 0;
                return "".concat(e, ":").concat(null != t ? t : "", ":").concat(null != n ? n : "")
            }

            function P(e) {
                let [t, n, i] = e.split(":");
                return {
                    skuId: t,
                    subscriptionPlanId: "" === n ? null : n,
                    giftStyle: "" !== i && null != i ? Number.parseInt(i) : void 0
                }
            }

            function b(e) {
                return e.replace(/[^A-Za-z0-9]/g, "")
            }
            let G = e => (null == e ? void 0 : e.type) === h.MessageTypes.CUSTOM_GIFT && (null == e ? void 0 : e.embeds.length) === 1 && (null == e ? void 0 : e.embeds[0].type) === h.MessageEmbedTypes.GIFT,
                k = e => {
                    let t;
                    if (null == e) return [];
                    let n = new Set;
                    for (; null != (t = m.exec(e)) && n.size < 3;) n.add(b(t[1]));
                    for (; null != (t = N.exec(e)) && n.size < 3;) n.add(b(t[1]));
                    return Array.from(n)
                };

            function F() {
                let e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                    n = window.GLOBAL_ENV.GIFT_CODE_HOST;
                return null == n || (0, c.isAndroid)() ? (n = location.host, e = "/gifts/".concat(t)) : e = "/".concat(t), "".concat(location.protocol, "//").concat(n).concat(e)
            }
            async function w(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                try {
                    let i = await (0, f.httpGetWithCountryCodeQuery)({
                            url: h.Endpoints.GIFT_CODE_RESOLVE(e),
                            query: {
                                with_application: t,
                                with_subscription_plan: n
                            },
                            oldFormErrors: !0
                        }),
                        a = i.body;
                    return o.default.track(h.AnalyticEvents.GIFT_CODE_RESOLVED, {
                        resolved: !0,
                        gift_code: a.code,
                        gift_code_max_uses: a.max_uses,
                        sku_id: a.store_listing.sku.id,
                        sku_type: a.store_listing.sku.type,
                        application_id: a.store_listing.sku.application_id,
                        store_title: a.store_listing.sku.name
                    }, {
                        flush: !0
                    }), a
                } catch (t) {
                    throw o.default.track(h.AnalyticEvents.GIFT_CODE_RESOLVED, {
                        resolved: !1,
                        gift_code: e
                    }), new a.default(t)
                }
            }

            function H(e, t) {
                o.default.track(h.AnalyticEvents.GIFT_CODE_COPIED, {
                    ...(0, l.default)(t, !1, !1),
                    ...e.analyticsData
                })
            }

            function V(e, t, n, i, a, l, s) {
                return null == n && (i || a || null == e) ? !s || l || i || a ? i && (t.isSubscription || null != e) ? h.GiftCodeModalStates.SUCCESS : h.GiftCodeModalStates.CONFIRM : h.GiftCodeModalStates.OPEN : h.GiftCodeModalStates.ERROR
            }

            function B(e, t, n) {
                switch (e) {
                    case h.GiftCodeModalStates.ERROR:
                        return p.default.Messages.GIFT_CONFIRMATION_HEADER_FAIL;
                    case h.GiftCodeModalStates.SUCCESS:
                        return t.isSubscription ? p.default.Messages.GIFT_CONFIRMATION_HEADER_SUCCESS_NITRO.format({
                            skuName: n.name
                        }) : p.default.Messages.GIFT_CONFIRMATION_HEADER_SUCCESS;
                    case h.GiftCodeModalStates.CONFIRM:
                    default:
                        return t.isSubscription ? p.default.Messages.GIFT_CONFIRMATION_HEADER_CONFIRM_NITRO.format({
                            skuName: n.name
                        }) : p.default.Messages.GIFT_CONFIRMATION_HEADER_CONFIRM
                }
            }

            function x(e, t, n) {
                switch (e) {
                    case h.GiftCodeModalStates.ERROR:
                        return p.default.Messages.GIFT_CONFIRMATION_BUTTON_FAIL;
                    case h.GiftCodeModalStates.SUCCESS:
                        if (__OVERLAY__) return p.default.Messages.GIFT_CONFIRMATION_BUTTON_NOICE;
                        if (t.isSubscription) return p.default.Messages.GIFT_CONFIRMATION_BUTTON_SUBSCRIPTION_SUCCESS;
                        return p.default.Messages.GIFT_CONFIRMATION_BUTTON_GO_TO_LIBRARY;
                    case h.GiftCodeModalStates.OPEN:
                        return p.default.Messages.GIFT_OPEN_PROMPT;
                    case h.GiftCodeModalStates.CONFIRM:
                    default:
                        if (null != n && n) return p.default.Messages.GIFT_CODE_AUTH_ACCEPT;
                        if (null != t.giftStyle) return t.isClaimed ? p.default.Messages.GIFT_CONFIRMATION_BUTTON_CONFIRM : p.default.Messages.GIFT_CONFIRMATION_BUTTON_CONFIRM_MOBILE;
                        return t.isSubscription ? p.default.Messages.GIFT_CONFIRMATION_BUTTON_CONFIRM_SUBSCRIPTION : p.default.Messages.GIFT_CONFIRMATION_BUTTON_CONFIRM
                }
            }

            function Y(e) {
                let {
                    step: t,
                    sku: n,
                    libraryApplication: i,
                    error: a,
                    accepted: l,
                    accepting: s,
                    onGoToLibrary: r,
                    subscriptionPlan: u = null
                } = e;
                switch (t) {
                    case h.GiftCodeModalStates.ERROR:
                        return K(i, a, l, s, r);
                    case h.GiftCodeModalStates.SUCCESS:
                        if (null != u) {
                            if (null != u.premiumSubscriptionType) {
                                if (u.premiumSubscriptionType === T.PremiumTypes.TIER_2) {
                                    let e = u.interval === T.SubscriptionIntervalTypes.MONTH ? p.default.Messages.GIFT_CONFIRMATION_BODY_SUCCESS_PREMIUM_TIER_2_MONTHLY : p.default.Messages.GIFT_CONFIRMATION_BODY_SUCCESS_PREMIUM_TIER_2_YEARLY;
                                    return e.format({
                                        intervalCount: u.intervalCount
                                    })
                                }
                                let e = u.interval === T.SubscriptionIntervalTypes.MONTH ? p.default.Messages.GIFT_CONFIRMATION_BODY_SUCCESS_PREMIUM_TIER_1_MONTHLY : p.default.Messages.GIFT_CONFIRMATION_BODY_SUCCESS_PREMIUM_TIER_1_YEARLY;
                                return e.format({
                                    intervalCount: u.intervalCount
                                })
                            }
                            let e = u.interval === T.SubscriptionIntervalTypes.MONTH ? p.default.Messages.GIFT_CONFIRMATION_BODY_SUCCESS_GENERIC_SUBSCRIPTION_MONTHLY : p.default.Messages.GIFT_CONFIRMATION_BODY_SUCCESS_GENERIC_SUBSCRIPTION_YEARLY;
                            return e.format({
                                skuName: n.name,
                                intervalCount: u.intervalCount
                            })
                        }
                        return p.default.Messages.GIFT_CONFIRMATION_BODY_SUCCESS.format({
                            skuName: n.name
                        });
                    case h.GiftCodeModalStates.CONFIRM:
                    default:
                        if (null != u) {
                            let e = u.interval === T.SubscriptionIntervalTypes.MONTH ? p.default.Messages.GIFT_CONFIRMATION_BODY_SUBSCRIPTION_MONTHLY_CONFIRM : p.default.Messages.GIFT_CONFIRMATION_BODY_SUBSCRIPTION_YEARLY_CONFIRM;
                            return e.format({
                                skuName: n.name,
                                intervalCount: u.intervalCount
                            })
                        }
                        return p.default.Messages.GIFT_CONFIRMATION_BODY_CONFIRM.format({
                            skuName: n.name
                        })
                }
            }

            function K(e, t, n, i, a) {
                let l = p.default.Messages.GIFT_CONFIRMATION_BODY_OWNED.format({
                    onGoToLibrary: a
                });
                if (null != (n || i ? void 0 : e)) return l;
                if (null == t) return null;
                switch (t.code) {
                    case h.AbortCodes.INVALID_GIFT_SELF_REDEMPTION:
                        return p.default.Messages.GIFT_CONFIRMATION_BODY_SELF_GIFT_NO_PAYMENT;
                    case h.AbortCodes.INVALID_GIFT_REDEMPTION_EXHAUSTED:
                        return p.default.Messages.GIFT_CONFIRMATION_BODY_CLAIMED;
                    case h.AbortCodes.INVALID_GIFT_REDEMPTION_OWNED:
                        return l;
                    case h.AbortCodes.UNKNOWN_GIFT_CODE:
                        return p.default.Messages.GIFT_CONFIRMATION_BODY_INVALID;
                    case h.AbortCodes.INVALID_GIFT_REDEMPTION_SUBSCRIPTION_INCOMPATIBLE:
                        let s = u.default.getCurrentUser();
                        return p.default.Messages.GIFT_EMBED_BODY_SUBSCRIPTION_MISMATCH.format({
                            planName: (0, _.isPremiumExactly)(s, T.PremiumTypes.TIER_2) ? p.default.Messages.PREMIUM_TIER_2 : p.default.Messages.PREMIUM_TIER_1
                        });
                    case h.AbortCodes.INVALID_GIFT_REDEMPTION_SUBSCRIPTION_MANAGED:
                        return p.default.Messages.GIFT_CONFIRMATION_BODY_ERROR_SUBSCRIPTION_MANAGED;
                    case h.AbortCodes.INVALID_GIFT_REDEMPTION_INVOICE_OPEN:
                        return p.default.Messages.GIFT_CONFIRMATION_BODY_ERROR_INVOICE_OPEN;
                    case h.AbortCodes.INVALID_GIFT_REDEMPTION_FRAUD_REJECTED:
                        return p.default.Messages.GIFT_CODE_SMITE_REJECT_HELP_TEXT;
                    case h.AbortCodes.BILLING_NON_REFUNDABLE_PAYMENT_SOURCE:
                        return p.default.Messages.GIFT_CODE_PAYMENT_SOURCE_INVALID;
                    default:
                        return p.default.Messages.GIFT_CONFIRMATION_BODY_UNKNOWN_ERROR
                }
            }

            function j(e, t, n) {
                let i = t.applicationId,
                    a = null != e.entitlementBranches && e.entitlementBranches.length > 0 ? e.entitlementBranches : [i],
                    l = a.map(e => n.getLibraryApplication(i, e, !0)).filter(d.isNotNullish);
                return l.length === a.length ? l[0] : null
            }

            function z(e) {
                let t = e.trim().split("/").pop(),
                    n = t.match(D);
                if (null == n) return null;
                let [i, a, l] = n;
                return null == l ? null : l.replace(/-/g, "")
            }
            let W = (e, t) => (0, i.useStateFromStores)([r.default], () => {
                if (null == e || !t) return null;
                let n = r.default.getGiftCode(e);
                return null == n || "" === n ? null : n
            })
        },
        128259: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                isLinkTrusted: function() {
                    return v
                },
                handleClick: function() {
                    return M
                }
            });
            var i = n("132710"),
                a = n.n(i),
                l = n("404118"),
                s = n("145292"),
                r = n("545158"),
                u = n("195052"),
                o = n("352266"),
                d = n("630869"),
                c = n("537025"),
                _ = n("765089"),
                E = n("647374"),
                f = n("91984"),
                h = n("835174"),
                T = n("566271"),
                p = n("42203"),
                S = n("305961"),
                I = n("569983"),
                A = n("48703"),
                m = n("377253"),
                g = n("27618"),
                C = n("18494"),
                N = n("599110"),
                O = n("49111"),
                R = n("782340");

            function v(e, t) {
                var n;
                let i = p.default.getChannel(C.default.getChannelId());
                return !!(null == i || i.type !== O.ChannelTypes.DM || g.default.isFriend(null !== (n = i.getRecipientId()) && void 0 !== n ? n : "")) && e === t
            }

            function M(e, t) {
                var i, g, v;
                let M = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                    {
                        trusted: y,
                        onClick: D,
                        onConfirm: L,
                        shouldConfirm: U,
                        messageId: P,
                        channelId: b
                    } = e,
                    G = a.sanitizeUrl(e.href);
                if (null == G) {
                    null != t && t.preventDefault(), l.default.show({
                        title: R.default.Messages.HOLD_UP,
                        body: R.default.Messages.MALFORMED_LINK_BODY.format({
                            url: e.href
                        }),
                        isDismissable: !0
                    });
                    return
                }
                let k = null,
                    F = !1,
                    w = P,
                    H = b,
                    V = null;
                if (null != P && null != b) {
                    let e = m.default.getMessage(b, P),
                        t = p.default.getBasicChannel(b);
                    k = null !== (v = null == t ? void 0 : t.guild_id) && void 0 !== v ? v : null;
                    let n = S.default.getGuild(k),
                        a = (null == e ? void 0 : null === (i = e.messageReference) || void 0 === i ? void 0 : i.guild_id) != null && (null == e ? void 0 : e.webhookId) != null && (null == e ? void 0 : e.hasFlag(O.MessageFlags.IS_CROSSPOST)) && null != k;
                    a && (null == e ? void 0 : null === (g = e.messageReference) || void 0 === g ? void 0 : g.guild_id) != null ? (w = e.messageReference.message_id, H = e.messageReference.channel_id, V = e.messageReference.guild_id) : V = k;
                    let l = (null == t ? void 0 : t.type) === O.ChannelTypes.GUILD_ANNOUNCEMENT && (null == n ? void 0 : n.hasFeature(O.GuildFeatures.COMMUNITY)) === !0,
                        s = (null == e ? void 0 : e.hasFlag(O.MessageFlags.EPHEMERAL)) === !0;
                    F = null != e && !s && (a || l)
                }
                let B = p.default.getChannel(C.default.getChannelId()),
                    x = S.default.getGuild(null == B ? void 0 : B.getGuildId());
                if (null != B && null != x && x.hasFeature(O.GuildFeatures.DISCOVERABLE) && N.default.track(O.AnalyticEvents.URL_CLICKED, {
                        url_domain: (0, A.getHostname)(G),
                        guild_id: x.id,
                        channel_id: B.id
                    }), _.default.trackLinkClicked(G), null != D) {
                    if (D(t)) return
                } else {
                    let {
                        default: e
                    } = n("572544"), i = e(G, {
                        skipExtensionCheck: void 0,
                        analyticsLocations: M
                    });
                    if (null != i && i(t)) return
                }
                let Y = () => {
                        if (F && _.default.trackAnnouncementMessageLinkClicked({
                                messageId: w,
                                channelId: b,
                                guildId: k,
                                sourceChannelId: H,
                                sourceGuildId: V
                            }), null != L) {
                            L();
                            return
                        }(0, r.default)(G)
                    },
                    K = o.default.isBlockedDomain(G);
                if (null !== K) {
                    null == t || t.preventDefault(), u.default.show(G);
                    return
                }
                if (null != (0, T.isSuspiciousDownload)(G)) {
                    null == t || t.preventDefault(), h.default.show(G);
                    return
                }
                if ((0, c.shouldShowLinkNotDiscordWarning)(G)) {
                    null == t || t.preventDefault(), d.default.show(G);
                    return
                }
                let j = "function" == typeof y ? y() : y,
                    z = (0, A.getProtocol)(G),
                    W = !("http:" === z || "https:" === z);
                if (!W && (j || I.default.isTrustedDomain(G)) || W && I.default.isTrustedProtocol(G)) {
                    null == t || null != U && U ? Y() : F && _.default.trackAnnouncementMessageLinkClicked({
                        messageId: w,
                        channelId: b,
                        guildId: k,
                        sourceChannelId: H,
                        sourceGuildId: V
                    });
                    return
                }
                if (null != t && t.preventDefault(), W) f.default.show({
                    url: G,
                    trustUrl: s.trustProtocol,
                    onConfirm: Y,
                    isProtocol: !0
                });
                else {
                    let e = (0, E.punycodeLink)(G),
                        t = null != e ? e.displayTarget : G;
                    f.default.show({
                        url: t,
                        trustUrl: s.trustDomain,
                        onConfirm: Y,
                        isProtocol: !1
                    })
                }
            }
        },
        387111: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getNickname: function() {
                    return o
                },
                default: function() {
                    return c
                }
            });
            var i = n("446674"),
                a = n("42203"),
                l = n("26989"),
                s = n("27618"),
                r = n("158998"),
                u = n("782340");

            function o(e, t, n) {
                if (null == n) return null;
                if (null != e) return l.default.getNick(e, n.id);
                if (null != t) {
                    let e = a.default.getChannel(t);
                    if (null == e ? void 0 : e.isPrivate()) return s.default.getNickname(n.id)
                }
                return null
            }

            function d(e, t, n) {
                var i;
                return null == n ? u.default.Messages.UNKNOWN_USER : null !== (i = o(e, t, n)) && void 0 !== i ? i : r.default.getName(n)
            }
            var c = {
                getNickname: o,
                getName: d,
                useName: function(e, t, n) {
                    return (0, i.useStateFromStores)([l.default, a.default, s.default], () => d(e, t, n))
                }
            }
        },
        231987: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return r
                }
            });
            var i = n("485828"),
                a = n.n(i),
                l = n("605250");
            let s = new l.default("Queue");
            class r {
                enqueue(e, t, n) {
                    this.queue.push({
                        message: e,
                        success: t,
                        logId: n
                    }), this._drainIfNecessary()
                }
                get length() {
                    return this.queue.length
                }
                _drainIfNecessary() {
                    if (null !== this.timeout || 0 === this.queue.length || !0 === this.draining) return;
                    this.draining = !0;
                    let e = this.queue.shift(),
                        {
                            message: t,
                            success: n,
                            logId: i
                        } = e;
                    this.logger.log("Draining message from queue LogId:".concat(i, " QueueLength: ").concat(this.queue.length)), this.drain(t, (t, a) => {
                        if (this.logger.log("Finished draining message from queue LogId:".concat(i, " QueueLength: ").concat(this.queue.length)), this.draining = !1, null == t) {
                            setImmediate(() => this._drainIfNecessary());
                            try {
                                n(a)
                            } catch (e) {
                                this.logger.error("", e)
                            }
                        } else {
                            var l;
                            let n = null !== (l = t.retryAfter) && void 0 !== l ? l : this.defaultRetryAfter;
                            this.logger.info("Rate limited. Delaying draining of queue for ".concat(n, " ms. LogId:").concat(i, " QueueLength: ").concat(this.queue.length)), this.timeout = setTimeout(() => {
                                this.queue.unshift(e), this.timeout = null, this._drainIfNecessary()
                            }, n)
                        }
                    })
                }
                constructor(e = s, t = 100) {
                    this.logger = e, this.defaultRetryAfter = t, this.queue = new a, this.timeout = null, this.draining = !1
                }
            }
        },
        390946: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                hydrateReadySupplementalPayload: function() {
                    return N
                },
                hydrateReadyPayloadPrioritized: function() {
                    return O
                },
                hydrateInitialGuild: function() {
                    return v
                },
                hydratePreviouslyUnavailableGuild: function() {
                    return L
                }
            });
            var i = n("627445"),
                a = n.n(i),
                l = n("917351"),
                s = n.n(l),
                r = n("802493"),
                u = n("105059"),
                o = n("849365"),
                d = n("860255"),
                c = n("723939"),
                _ = n("70754"),
                E = n("605250"),
                f = n("385976"),
                h = n("364685"),
                T = n("233069"),
                p = n("305961"),
                S = n("660478"),
                I = n("665618");
            let A = new E.default("ReadyPayloadUtils"),
                m = {},
                g = null,
                C = {};

            function N(e, t) {
                var n;
                let {
                    guilds: i,
                    merged_members: a,
                    merged_presences: l,
                    ...s
                } = e, r = M(C, null == l ? void 0 : l.friends), u = null !== (n = null == i ? void 0 : i.map((e, t) => {
                    let n = M(C, null == l ? void 0 : l.guilds[t]),
                        i = M(C, null == a ? void 0 : a[t]);
                    return {
                        ...e,
                        unavailable: void 0 === e.voice_states,
                        presences: n,
                        members: i
                    }
                })) && void 0 !== n ? n : [], o = R(t, i, e => ({
                    id: e.id,
                    members: e.members,
                    presences: e.presences,
                    embedded_activities: e.embedded_activities,
                    voice_states: e.voice_states,
                    unavailable: !1
                }));
                return null != o && u.push(o), C = {}, {
                    ...s,
                    presences: r,
                    guilds: u
                }
            }

            function O(e, t) {
                var n;
                let {
                    users: i,
                    relationships: l,
                    private_channels: E,
                    merged_members: T,
                    guilds: A,
                    ...g
                } = e;
                (function() {
                    ! function() {
                        let e = r.default.database();
                        null != e && !1 === o.default.okSync(e) && c.default.replaceDisableAllDatabases("ReadyPayloadUtils: database was not ok")
                    }(), m = {};
                    let e = Object.values(p.default.getGuilds()),
                        t = f.default.getGuilds(),
                        n = h.default.getRawStickersByGuild(),
                        i = S.default.getReadStatesByChannel(),
                        a = (0, _.isCacheEnabled)() ? u.default.getCommittedVersions() : new Map,
                        l = (0, _.isCacheEnabled)() ? d.default.getGuildIdsSync() : new Set;
                    for (let r of e) {
                        var s, E, T;
                        a.has(r.id) && l.has(r.id) && (m[r.id] = {
                            properties: I.toServer(r),
                            roles: r.roles,
                            emojis: null !== (E = null === (s = t[r.id]) || void 0 === s ? void 0 : s.rawEmojis) && void 0 !== E ? E : null,
                            stickers: null !== (T = n.get(r.id)) && void 0 !== T ? T : null,
                            readStates: i
                        })
                    }
                })(), C = s.keyBy(i, e => e.id);
                let N = M(C, l);
                null == E || E.forEach(e => {
                    let t = e.recipient_ids;
                    null != t && (e.recipients = t.map(e => (a(null != C[e], "Missing user in compressed ready payload"), C[e]))), delete e.recipient_ids
                });
                let O = null !== (n = null == A ? void 0 : A.map((e, t) => !0 === e.unavailable ? e : (e.members = M(C, null == T ? void 0 : T[t]), D(e)))) && void 0 !== n ? n : [],
                    v = R(t, A, e => D(e));
                return null != v && O.push(v), {
                    ...g,
                    users: i,
                    presences: [],
                    relationships: N,
                    guilds: O,
                    private_channels: null != E ? E : []
                }
            }

            function R(e, t, n) {
                return null == g || g.identifyTime !== e || null != t && t.some(e => e.id === g.guild.id) ? null : n(g.guild)
            }

            function v(e, t) {
                var n, i, a;
                let l = p.default.getGuild(e.id),
                    s = L(e, null == l ? void 0 : {
                        properties: I.toServer(l),
                        roles: l.roles,
                        emojis: null !== (i = null === (n = f.default.getGuilds()[l.id]) || void 0 === n ? void 0 : n.rawEmojis) && void 0 !== i ? i : null,
                        stickers: null !== (a = h.default.getRawStickersByGuild().get(l.id)) && void 0 !== a ? a : null,
                        readStates: {}
                    });
                return g = {
                    guild: e,
                    identifyTime: t
                }, s
            }

            function M(e, t) {
                let n = [];
                return null == t || t.forEach(t => {
                    if (null == t) return;
                    let i = t.user_id;
                    null != i && (a(null != e[i], "Missing user[".concat(i, "] in compressed ready payload")), t.user = e[i]), delete t.user_id, n.push(t)
                }), n
            }

            function y(e) {
                let t = m[e];
                return delete m[e], t
            }

            function D(e) {
                var t, n, i, a, l, s, r, u, o, d, c, _;
                let E = y(e.id);
                if ("partial" !== e.data_mode) return {
                    id: e.id,
                    dataMode: e.data_mode,
                    application_command_counts: e.application_command_counts,
                    emojis: e.emojis,
                    guild_scheduled_events: e.guild_scheduled_events,
                    joined_at: e.joined_at,
                    lastMessages: e.last_messages,
                    member_count: e.member_count,
                    members: e.members,
                    premium_subscription_count: e.premium_subscription_count,
                    properties: e.properties,
                    roles: e.roles,
                    stage_instances: e.stage_instances,
                    stickers: e.stickers,
                    threads: null !== (a = null === (i = e.threads) || void 0 === i ? void 0 : i.map(t => (0, T.createChannelRecordFromServer)(t, e.id))) && void 0 !== a ? a : [],
                    threadMessages: U(e.threads),
                    channels: e.channels.map(t => (t.guild_id = e.id, (0, T.createChannelRecordFromServer)(t, e.id))),
                    version: e.version,
                    hasThreadsSubscription: e.has_threads_subscription
                };
                if (null == E) throw A.log("no cache entry for partial guild (guild: ".concat(e.id, ", type: ready)")), Error("Guild data was missing from store, but hash was still available.");
                return {
                    id: e.id,
                    dataMode: e.data_mode,
                    application_command_counts: e.application_command_counts,
                    channels: null,
                    channelUpdates: {
                        writes: null !== (l = null === (t = e.partial_updates.channels) || void 0 === t ? void 0 : t.map(t => (0, T.createChannelRecordFromServer)(t, e.id))) && void 0 !== l ? l : [],
                        deletes: null !== (s = e.partial_updates.deleted_channel_ids) && void 0 !== s ? s : []
                    },
                    channelTimestampUpdates: e.channel_updates,
                    emojis: null == E.emojis ? null : P(E.emojis, e.partial_updates.emojis, e.partial_updates.deleted_emoji_ids),
                    emojiUpdates: {
                        writes: null !== (r = e.partial_updates.emojis) && void 0 !== r ? r : [],
                        deletes: null !== (u = e.partial_updates.deleted_emoji_ids) && void 0 !== u ? u : []
                    },
                    guild_scheduled_events: e.guild_scheduled_events,
                    joined_at: e.joined_at,
                    lastMessages: e.last_messages,
                    member_count: e.member_count,
                    members: e.members,
                    premium_subscription_count: e.premium_subscription_count,
                    properties: null !== (o = e.properties) && void 0 !== o ? o : E.properties,
                    roles: I.filterRoleDeletes(e.id, E.roles, e.partial_updates.roles, e.partial_updates.deleted_role_ids),
                    stage_instances: e.stage_instances,
                    stickers: null == E.stickers ? null : P(E.stickers, e.partial_updates.stickers, e.partial_updates.deleted_sticker_ids),
                    stickerUpdates: {
                        writes: null !== (d = e.partial_updates.stickers) && void 0 !== d ? d : [],
                        deletes: null !== (c = e.partial_updates.deleted_sticker_ids) && void 0 !== c ? c : []
                    },
                    unableToSyncDeletes: e.unable_to_sync_deletes,
                    threads: null !== (_ = null === (n = e.threads) || void 0 === n ? void 0 : n.map(t => (0, T.createChannelRecordFromServer)(t, e.id))) && void 0 !== _ ? _ : [],
                    threadMessages: U(e.threads),
                    version: e.version,
                    hasThreadsSubscription: e.has_threads_subscription
                }
            }

            function L(e, t) {
                var n, i, a, l, s, r, u, o, d, c, _, E;
                if (null == t && (t = y(e.id)), "partial" !== e.data_mode) return {
                    id: e.id,
                    application_command_counts: e.application_command_counts,
                    emojis: e.emojis,
                    guild_scheduled_events: e.guild_scheduled_events,
                    joined_at: e.joined_at,
                    lastMessages: e.last_messages,
                    member_count: e.member_count,
                    members: e.members,
                    premium_subscription_count: e.premium_subscription_count,
                    properties: e.properties,
                    roles: e.roles,
                    stage_instances: e.stage_instances,
                    stickers: e.stickers,
                    threads: null !== (l = null === (a = e.threads) || void 0 === a ? void 0 : a.map(t => (0, T.createChannelRecordFromServer)(t, e.id))) && void 0 !== l ? l : [],
                    threadMessages: U(e.threads),
                    channels: e.channels.map(t => (t.guild_id = e.id, (0, T.createChannelRecordFromServer)(t, e.id))),
                    presences: e.presences,
                    embedded_activities: e.embedded_activities,
                    voice_states: e.voice_states,
                    version: e.version,
                    hasThreadsSubscription: e.has_threads_subscription
                };
                if (null == t) throw A.log("no cache entry for partial guild (guild: ".concat(e.id, ", type: post_ready)")), Error("Guild data was missing from store, but hash was still available.");
                return {
                    id: e.id,
                    application_command_counts: e.application_command_counts,
                    channels: null,
                    channelUpdates: {
                        writes: null !== (s = null === (n = e.partial_updates.channels) || void 0 === n ? void 0 : n.map(t => (0, T.createChannelRecordFromServer)(t, e.id))) && void 0 !== s ? s : [],
                        deletes: null !== (r = e.partial_updates.deleted_channel_ids) && void 0 !== r ? r : []
                    },
                    channelTimestampUpdates: e.channel_updates,
                    embedded_activities: e.embedded_activities,
                    emojis: null == t.emojis ? null : P(t.emojis, e.partial_updates.emojis, e.partial_updates.deleted_emoji_ids),
                    emojiUpdates: {
                        writes: null !== (u = e.partial_updates.emojis) && void 0 !== u ? u : [],
                        deletes: null !== (o = e.partial_updates.deleted_emoji_ids) && void 0 !== o ? o : []
                    },
                    guild_scheduled_events: e.guild_scheduled_events,
                    joined_at: e.joined_at,
                    lastMessages: e.last_messages,
                    member_count: e.member_count,
                    members: e.members,
                    premium_subscription_count: e.premium_subscription_count,
                    presences: e.presences,
                    properties: null !== (d = e.properties) && void 0 !== d ? d : t.properties,
                    roles: I.filterRoleDeletes(e.id, t.roles, e.partial_updates.roles, e.partial_updates.deleted_role_ids),
                    stage_instances: e.stage_instances,
                    stickers: null == t.stickers ? null : P(t.stickers, e.partial_updates.stickers, e.partial_updates.deleted_sticker_ids),
                    stickerUpdates: {
                        writes: null !== (c = e.partial_updates.stickers) && void 0 !== c ? c : [],
                        deletes: null !== (_ = e.partial_updates.deleted_sticker_ids) && void 0 !== _ ? _ : []
                    },
                    unableToSyncDeletes: e.unable_to_sync_deletes,
                    threads: null !== (E = null === (i = e.threads) || void 0 === i ? void 0 : i.map(t => (0, T.createChannelRecordFromServer)(t, e.id))) && void 0 !== E ? E : [],
                    threadMessages: U(e.threads),
                    voice_states: e.voice_states,
                    version: e.version,
                    hasThreadsSubscription: e.has_threads_subscription
                }
            }

            function U(e) {
                let t = [];
                if (null != e)
                    for (let n of e) null != n.most_recent_message && t.push(n.most_recent_message);
                return t
            }

            function P(e, t, n) {
                t = null != t ? t : [];
                let i = new Set((null != n ? n : []).concat(t.map(e => e.id)));
                return e.filter(e => !i.has(e.id)).concat(t)
            }
        },
        35013: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                insert: function() {
                    return i
                }
            });

            function i(e, t, n) {
                let i = function(e, t, n) {
                    let i = 0,
                        a = e.length;
                    for (; i < a;) {
                        let l = i + a >>> 1;
                        0 > n(e[l], t) ? i = l + 1 : a = l
                    }
                    return i
                }(e, t, n);
                e.splice(i, 0, t)
            }
        },
        271560: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                getStoreListingLocation: function() {
                    return C
                },
                getApplicationStoreListingLocation: function() {
                    return N
                },
                getAssetURL: function() {
                    return O
                },
                httpGetWithCountryCodeQuery: function() {
                    return R
                },
                nativePlatformTypeToSKUOperatingSystem: function() {
                    return v
                },
                skuOperatingSystemToText: function() {
                    return M
                },
                getPrimarySKUForApplication: function() {
                    return y
                },
                getSocialRecommendationReasons: function() {
                    return L
                },
                getNonSocialRecommendationReasons: function() {
                    return P
                }
            });
            var i = n("917351"),
                a = n.n(i),
                l = n("866227"),
                s = n.n(l),
                r = n("642852"),
                u = n.n(r),
                o = n("394846"),
                d = n("872717"),
                c = n("850068"),
                _ = n("407063"),
                E = n("160299"),
                f = n("357957"),
                h = n("521012"),
                T = n("560528"),
                p = n("568734"),
                S = n("449008"),
                I = n("773336"),
                A = n("49111"),
                m = n("782340");
            u.shim();
            let g = !o.isMobile && !o.isTablet && -1 !== (0, T.getChromeVersion)();

            function C(e, t) {
                let {
                    analyticsSource: n,
                    analyticsProperties: i,
                    storeListingId: a,
                    slug: l,
                    channelId: s,
                    guildId: r
                } = t;
                return {
                    pathname: null != s && null != r ? A.Routes.CHANNEL(r, s, e) : A.Routes.APPLICATION_STORE_LISTING_SKU(e, l),
                    state: {
                        analyticsSource: n,
                        analyticsProperties: i
                    },
                    search: null != a ? "?store_listing_id=".concat(a) : ""
                }
            }

            function N(e, t) {
                let {
                    analyticsSource: n,
                    analyticsProperties: i,
                    slug: a
                } = t;
                return {
                    pathname: A.Routes.APPLICATION_STORE_LISTING_APPLICATION(e, a),
                    state: {
                        analyticsSource: n,
                        analyticsProperties: i
                    }
                }
            }

            function O(e, t, n, i) {
                var a;
                let l;
                let s = window.GLOBAL_ENV.CDN_HOST;
                if (null == i) switch (t.mimeType || t.mime_type) {
                    case "video/quicktime":
                    case "video/mp4":
                        i = "mp4";
                        break;
                    case "image/gif":
                        i = "gif";
                        break;
                    default:
                        i = "webp"
                }
                "webp" === i && !g && (i = "png");
                let r = (a = "https:", "https:");
                return l = null != s ? "".concat(r, "//").concat(s, "/app-assets/").concat(e, "/store/").concat(t.id, ".").concat(i) : "".concat(r).concat(window.GLOBAL_ENV.API_ENDPOINT).concat(A.Endpoints.STORE_ASSET(e, t.id, i)), null != n && (l += "?size=".concat((0, _.getBestMediaProxySize)(n * (0, _.getDevicePixelRatio)()))), l
            }
            async function R(e) {
                var t, n, i, a;
                let l = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                if (l) {
                    let e = [];
                    !f.default.hasFetchedPaymentSources && e.push(null !== (n = E.default.paymentSourcesFetchRequest) && void 0 !== n ? n : (0, c.fetchPaymentSources)()), !E.default.ipCountryCodeLoaded && e.push((0, c.fetchIpCountryCode)()), e.push(new Promise(async e => {
                        if (h.default.hasFetchedSubscriptions()) e();
                        else if (E.default.isSubscriptionFetching) {
                            let t = () => {
                                E.default.isSubscriptionFetching ? setTimeout(t, 50) : e()
                            };
                            t()
                        } else await (0, c.fetchSubscriptions)(), e()
                    })), await Promise.allSettled(e)
                }
                let s = f.default.getDefaultBillingCountryCode(),
                    r = null !== (i = null === (t = f.default.defaultPaymentSource) || void 0 === t ? void 0 : t.id) && void 0 !== i ? i : null,
                    u = h.default.getPremiumTypeSubscription();
                null != u && null != u.paymentSourceId && (r = u.paymentSourceId), null === s && (s = null !== (a = E.default.ipCountryCode) && void 0 !== a ? a : null);
                let o = {};
                if (null != s && (o.country_code = s), null != r && (o.payment_source_id = r), null != s || null != r) {
                    if ("string" == typeof e) {
                        let t = {
                            url: e,
                            oldFormErrors: !0
                        };
                        e = t
                    }
                    if ("string" == typeof e.query) throw Error("string query not supported");
                    e.query = {
                        ...o,
                        ...e.query
                    }
                }
                return d.default.get(e)
            }

            function v(e) {
                switch (e) {
                    case I.PlatformTypes.WINDOWS:
                        return A.OperatingSystems.WINDOWS;
                    case I.PlatformTypes.OSX:
                        return A.OperatingSystems.MACOS;
                    case I.PlatformTypes.LINUX:
                        return A.OperatingSystems.LINUX;
                    default:
                        return null
                }
            }

            function M(e) {
                switch (e) {
                    case A.OperatingSystems.WINDOWS:
                        return m.default.Messages.WINDOWS;
                    case A.OperatingSystems.MACOS:
                        return m.default.Messages.MACOS;
                    case A.OperatingSystems.LINUX:
                        return m.default.Messages.LINUX
                }
                throw Error("Unknown operating system value: ".concat(e))
            }

            function y(e, t, n) {
                let i = t.getGame(e);
                return null == i || null == i.primarySkuId ? null : n.get(i.primarySkuId)
            }
            let D = [];

            function L(e, t, n, i, l) {
                let s = t.get(e);
                if (null == s) return D;
                let r = s.applicationId,
                    u = [],
                    o = [],
                    d = function(e, t, n) {
                        var i;
                        let a = null !== (i = n.getNowPlaying(e)) && void 0 !== i ? i : {},
                            l = Object.keys(a),
                            s = l.map(e => {
                                let n = t.getUser(e);
                                return null == n ? null : {
                                    user: n,
                                    startTime: a[n.id].startedPlaying
                                }
                            }).filter(S.isNotNullish).sort((e, t) => t.startTime - e.startTime);
                        return 0 === s.length ? null : {
                            type: A.StoreRecommendationTypes.NOW_PLAYING,
                            userInfo: s
                        }
                    }(r, n, i);
                null != d && (u.push(d), o = d.userInfo.map(e => {
                    let {
                        user: t
                    } = e;
                    return t.id
                }));
                let c = l.getStatisticsForApplication(r);
                if (null != c) {
                    let e = c.map(e => e.user_id);
                    if (a.difference(e, o).length > 0) {
                        let e = function(e, t, n) {
                            let i = n.getStatisticsForApplication(e);
                            if (null == i) return null;
                            let a = i.map(e => {
                                let n = t.getUser(e.user_id);
                                return null == n ? null : {
                                    user: n,
                                    endTime: Date.parse(e.last_played_at)
                                }
                            }).filter(S.isNotNullish).sort((e, t) => t.endTime - e.endTime);
                            return 0 === a.length ? null : {
                                type: A.StoreRecommendationTypes.EVER_PLAYED,
                                userInfo: a
                            }
                        }(r, n, l);
                        null != e && u.push(e)
                    }
                }
                return u
            }
            let U = [];

            function P(e, t, n) {
                let i = t.get(e),
                    a = n.getForSKU(e);
                if (null == i || null == a) return U;
                let l = [];
                (0, p.hasFlag)(i.flags, A.SKUFlags.HAS_FREE_PREMIUM_CONTENT) && l.push({
                    type: A.StoreRecommendationTypes.HAS_FREE_PREMIUM_CONTENT
                });
                let r = i.releaseDate;
                return null != r && 3 > s().diff(r, "months") && (i.accessType === A.SKUAccessTypes.EARLY_ACCESS ? l.push({
                    type: A.StoreRecommendationTypes.EARLY_ACCESS,
                    releaseDate: r
                }) : l.push({
                    type: A.StoreRecommendationTypes.RECENT_RELEASE_DATE,
                    releaseDate: r
                })), null != a.flavorText && l.push({
                    type: A.StoreRecommendationTypes.FLAVOR_TEXT,
                    flavorText: a.flavorText
                }), l
            }
        },
        340454: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return o
                }
            });
            let i = /^([\w-+]+(?:\.[\w-+]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,63}(?:\.[a-z]{2})?)$/i,
                a = /^((https:\/\/)?(discord\.gg\/)|(discord\.com\/)(invite\/)?)?[A-Za-z0-9]{8,8}$/,
                l = /^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/,
                s = /^(.*)#[0-9]{1,5}$/,
                r = ["@", "#", ":", "```", "discord", "hypesquad", "system message", "system mesage", "sustem message", "sustem mesage"],
                u = ["discordtag", "everyone", "here", "discord nitro", "discord"];
            var o = {
                isEmail: function(e) {
                    return i.test(e)
                },
                isInvite: function(e) {
                    return a.test(e)
                },
                isPhoneNumber: function(e) {
                    return l.test(e)
                },
                isUserTagLike: function(e) {
                    let t = s.exec(e);
                    if (null != t && t.length > 1) {
                        let e = t[1],
                            n = r.some(t => e.includes(t)),
                            i = u.includes(e);
                        return !n && !i
                    }
                    return !1
                }
            }
        },
        65300: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return d
                }
            });
            var i = n("597755"),
                a = n.n(i),
                l = n("390493");

            function s(e, t) {
                if (!e.startsWith("discord:")) return location.href = e, l.nextTick(() => t(!0));
                let {
                    body: n
                } = document;
                if (null == n) return l.nextTick(() => t(!1));
                let i = document.createElement("iframe");
                n.appendChild(i);
                try {
                    null != i.contentWindow && (i.contentWindow.location.href = e), l.nextTick(() => t(!0))
                } catch (e) {
                    "NS_ERROR_UNKNOWN_PROTOCOL" === e.name && l.nextTick(() => t(!1))
                }
                window.setTimeout(() => {
                    var e;
                    (null !== (e = null == i ? void 0 : i.parentElement) && void 0 !== e ? e : null) !== null && n.removeChild(i)
                }, 1e3)
            }

            function r(e, t) {
                let n = !1;

                function i() {
                    n = !0
                }
                window.addEventListener("blur", i), location.href = e, setTimeout(() => {
                    window.removeEventListener("blur", i), t(n)
                }, 1e3)
            }

            function u(e, t) {
                t(!1)
            }

            function o(e, t) {
                location.href = e, l.nextTick(() => t(!0))
            }
            var d = {
                launch: function() {
                    var e, t;
                    if ((null === (e = a.os) || void 0 === e ? void 0 : e.family) === "Android" || (null === (t = a.os) || void 0 === t ? void 0 : t.family) === "iOS") return o;
                    if ("Gecko" === a.layout) return s;
                    if (null != a.ua && -1 !== a.ua.indexOf("Valve Steam GameOverlay")) return u;
                    return r
                }()
            }
        },
        742270: function(e, t, n) {
            "use strict";

            function i(e) {
                return "".concat(location.protocol, "//").concat(window.GLOBAL_ENV.INVITE_HOST, "/").concat(e)
            }

            function a(e) {
                return "".concat(location.protocol, "//").concat(window.GLOBAL_ENV.GUILD_TEMPLATE_HOST, "/").concat(e)
            }

            function l() {
                return "".concat(location.protocol, "//").concat(window.GLOBAL_ENV.WEBAPP_ENDPOINT, "/channels/@me")
            }
            n.r(t), n.d(t, {
                getInviteDynamicLinkTemplate: function() {
                    return i
                },
                getGuildTemplateDynamicLinkTemplate: function() {
                    return a
                },
                getDefaultDynamicLinkTemplate: function() {
                    return l
                }
            })
        },
        815157: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                generateAttemptId: function() {
                    return u
                },
                parseDynamicLink: function() {
                    return o
                },
                default: function() {
                    return d
                }
            });
            var i = n("383536"),
                a = n.n(i),
                l = n("748820"),
                s = n("530334");
            let r = "https://discordapp.page.link";

            function u() {
                return (0, l.v4)()
            }

            function o(e) {
                if (!e.startsWith(r)) return null;
                try {
                    var t;
                    let n = new URL(e),
                        i = n.searchParams,
                        a = i.get("link");
                    if (null == a) return null;
                    let l = decodeURIComponent(a),
                        s = new URL(l).searchParams,
                        r = {
                            utmSource: null !== (t = i.get("utm_source")) && void 0 !== t ? t : void 0
                        };
                    for (let [e, t] of s.entries()) r[e] = t;
                    return r
                } catch {
                    return null
                }
            }

            function d(e, t) {
                let {
                    utmSource: n,
                    androidFallbackLink: i,
                    iosFallbackLink: l,
                    ...u
                } = t, o = new URL(e);
                for (let e in u) {
                    let t = u[e];
                    null != t && o.searchParams.set(e, t)
                }
                let d = encodeURIComponent(o.toString()),
                    c = encodeURIComponent((0, s.default)()),
                    _ = ! function() {
                        var e, t;
                        let n = RegExp("(".concat("WebView|(iPhone|iPod|iPad)(?!.*Safari/)", ")"), "ig"),
                            i = (null == a ? void 0 : null === (e = a.ua) || void 0 === e ? void 0 : e.match(n)) != null,
                            l = (null == a ? void 0 : a.name) === "Safari" && !i;
                        return (null == a ? void 0 : null === (t = a.os) || void 0 === t ? void 0 : t.family) !== "iOS" || l
                    }() ? 0 : 1,
                    E = null != i ? encodeURIComponent(i) : null,
                    f = null != l ? encodeURIComponent(l) : null,
                    h = "".concat(r, "/?link=").concat(d, "&utm_source=").concat(n, "&apn=").concat("com.discord", "&isi=").concat(985746746, "&ibi=").concat("com.hammerandchisel.discord", "&sd=").concat(c, "&efr=").concat(_);
                return null != E && (h += "&afl=".concat(E)), null != f && (h += "&ifl=".concat(f)), h
            }
        },
        530334: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            let i = () => "";
            var a = i = n("466237").default
        },
        466237: function(e, t, n) {
            "use strict";
            n.r(t), n.d(t, {
                default: function() {
                    return a
                }
            });
            var i = n("792788");

            function a() {
                return i.default.Messages.DynamicLinks.IOS_APP_PREVIEW_DESCRIPTION
            }
        }
    }
]);